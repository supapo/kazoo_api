/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for privacy account_config
    /// </summary>
    [DataContract]
    public partial class AccountConfigPrivacy :  IEquatable<AccountConfigPrivacy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountConfigPrivacy" /> class.
        /// </summary>
        /// <param name="blockAnonymousCallerId">Controls blocking of anonymous calls (default to false).</param>
        /// <param name="privacyMode">Default privacy mode for anonymous calls (default to &quot;kazoo&quot;).</param>
        public AccountConfigPrivacy(bool? blockAnonymousCallerId = false, string privacyMode = "kazoo")
        {
            // use default value if no "blockAnonymousCallerId" provided
            if (blockAnonymousCallerId == null)
            {
                this.BlockAnonymousCallerId = false;
            }
            else
            {
                this.BlockAnonymousCallerId = blockAnonymousCallerId;
            }
            // use default value if no "privacyMode" provided
            if (privacyMode == null)
            {
                this.PrivacyMode = "kazoo";
            }
            else
            {
                this.PrivacyMode = privacyMode;
            }
        }
        
        /// <summary>
        /// Controls blocking of anonymous calls
        /// </summary>
        /// <value>Controls blocking of anonymous calls</value>
        [DataMember(Name="block_anonymous_caller_id", EmitDefaultValue=false)]
        public bool? BlockAnonymousCallerId { get; set; }

        /// <summary>
        /// Default privacy mode for anonymous calls
        /// </summary>
        /// <value>Default privacy mode for anonymous calls</value>
        [DataMember(Name="privacy_mode", EmitDefaultValue=false)]
        public string PrivacyMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountConfigPrivacy {\n");
            sb.Append("  BlockAnonymousCallerId: ").Append(BlockAnonymousCallerId).Append("\n");
            sb.Append("  PrivacyMode: ").Append(PrivacyMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountConfigPrivacy);
        }

        /// <summary>
        /// Returns true if AccountConfigPrivacy instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountConfigPrivacy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountConfigPrivacy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BlockAnonymousCallerId == input.BlockAnonymousCallerId ||
                    (this.BlockAnonymousCallerId != null &&
                    this.BlockAnonymousCallerId.Equals(input.BlockAnonymousCallerId))
                ) && 
                (
                    this.PrivacyMode == input.PrivacyMode ||
                    (this.PrivacyMode != null &&
                    this.PrivacyMode.Equals(input.PrivacyMode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BlockAnonymousCallerId != null)
                    hashCode = hashCode * 59 + this.BlockAnonymousCallerId.GetHashCode();
                if (this.PrivacyMode != null)
                    hashCode = hashCode * 59 + this.PrivacyMode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
