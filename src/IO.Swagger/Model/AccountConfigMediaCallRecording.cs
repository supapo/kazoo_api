/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AccountConfigMediaCallRecording
    /// </summary>
    [DataContract]
    public partial class AccountConfigMediaCallRecording :  IEquatable<AccountConfigMediaCallRecording>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountConfigMediaCallRecording" /> class.
        /// </summary>
        /// <param name="extension">Default media file format (default to &quot;mp3&quot;).</param>
        /// <param name="storageRetryTimes">media storage retry times.</param>
        /// <param name="workers">media call_recording workers.</param>
        public AccountConfigMediaCallRecording(string extension = "mp3", int? storageRetryTimes = default(int?), int? workers = default(int?))
        {
            // use default value if no "extension" provided
            if (extension == null)
            {
                this.Extension = "mp3";
            }
            else
            {
                this.Extension = extension;
            }
            this.StorageRetryTimes = storageRetryTimes;
            this.Workers = workers;
        }
        
        /// <summary>
        /// Default media file format
        /// </summary>
        /// <value>Default media file format</value>
        [DataMember(Name="extension", EmitDefaultValue=false)]
        public string Extension { get; set; }

        /// <summary>
        /// media storage retry times
        /// </summary>
        /// <value>media storage retry times</value>
        [DataMember(Name="storage_retry_times", EmitDefaultValue=false)]
        public int? StorageRetryTimes { get; set; }

        /// <summary>
        /// media call_recording workers
        /// </summary>
        /// <value>media call_recording workers</value>
        [DataMember(Name="workers", EmitDefaultValue=false)]
        public int? Workers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountConfigMediaCallRecording {\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  StorageRetryTimes: ").Append(StorageRetryTimes).Append("\n");
            sb.Append("  Workers: ").Append(Workers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountConfigMediaCallRecording);
        }

        /// <summary>
        /// Returns true if AccountConfigMediaCallRecording instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountConfigMediaCallRecording to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountConfigMediaCallRecording input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Extension == input.Extension ||
                    (this.Extension != null &&
                    this.Extension.Equals(input.Extension))
                ) && 
                (
                    this.StorageRetryTimes == input.StorageRetryTimes ||
                    (this.StorageRetryTimes != null &&
                    this.StorageRetryTimes.Equals(input.StorageRetryTimes))
                ) && 
                (
                    this.Workers == input.Workers ||
                    (this.Workers != null &&
                    this.Workers.Equals(input.Workers))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Extension != null)
                    hashCode = hashCode * 59 + this.Extension.GetHashCode();
                if (this.StorageRetryTimes != null)
                    hashCode = hashCode * 59 + this.StorageRetryTimes.GetHashCode();
                if (this.Workers != null)
                    hashCode = hashCode * 59 + this.Workers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
