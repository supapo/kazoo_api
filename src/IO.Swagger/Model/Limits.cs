/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Limit an account&#39;s ability to place concurrent calls using flat rate trunks
    /// </summary>
    [DataContract]
    public partial class Limits :  IEquatable<Limits>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Limits" /> class.
        /// </summary>
        /// <param name="allowPrepay">Determines if the account would like to allow per-minute calls if they have no available credit (default to true).</param>
        /// <param name="authzResourceTypes">List of Resource-Types that will authorize the call; bypassing limit checks and billing.</param>
        /// <param name="burstTrunks">The number of two-way, flat-rate trunks used only if no other trunks are available.</param>
        /// <param name="calls">A hard limit for the total number calls.</param>
        /// <param name="inboundTrunks">The number of inbound, flat-rate trunks.</param>
        /// <param name="outboundTrunks">The number of outbound, flat-rate trunks.</param>
        /// <param name="resourceConsumingCalls">A hard limit for the number of resource consuming calls.</param>
        /// <param name="twowayTrunks">The number of two-way, flat-rate trunks.</param>
        public Limits(bool? allowPrepay = true, List<string> authzResourceTypes = default(List<string>), int? burstTrunks = default(int?), int? calls = default(int?), int? inboundTrunks = default(int?), int? outboundTrunks = default(int?), int? resourceConsumingCalls = default(int?), int? twowayTrunks = default(int?))
        {
            // use default value if no "allowPrepay" provided
            if (allowPrepay == null)
            {
                this.AllowPrepay = true;
            }
            else
            {
                this.AllowPrepay = allowPrepay;
            }
            this.AuthzResourceTypes = authzResourceTypes;
            this.BurstTrunks = burstTrunks;
            this.Calls = calls;
            this.InboundTrunks = inboundTrunks;
            this.OutboundTrunks = outboundTrunks;
            this.ResourceConsumingCalls = resourceConsumingCalls;
            this.TwowayTrunks = twowayTrunks;
        }
        
        /// <summary>
        /// Determines if the account would like to allow per-minute calls if they have no available credit
        /// </summary>
        /// <value>Determines if the account would like to allow per-minute calls if they have no available credit</value>
        [DataMember(Name="allow_prepay", EmitDefaultValue=false)]
        public bool? AllowPrepay { get; set; }

        /// <summary>
        /// List of Resource-Types that will authorize the call; bypassing limit checks and billing
        /// </summary>
        /// <value>List of Resource-Types that will authorize the call; bypassing limit checks and billing</value>
        [DataMember(Name="authz_resource_types", EmitDefaultValue=false)]
        public List<string> AuthzResourceTypes { get; set; }

        /// <summary>
        /// The number of two-way, flat-rate trunks used only if no other trunks are available
        /// </summary>
        /// <value>The number of two-way, flat-rate trunks used only if no other trunks are available</value>
        [DataMember(Name="burst_trunks", EmitDefaultValue=false)]
        public int? BurstTrunks { get; set; }

        /// <summary>
        /// A hard limit for the total number calls
        /// </summary>
        /// <value>A hard limit for the total number calls</value>
        [DataMember(Name="calls", EmitDefaultValue=false)]
        public int? Calls { get; set; }

        /// <summary>
        /// The number of inbound, flat-rate trunks
        /// </summary>
        /// <value>The number of inbound, flat-rate trunks</value>
        [DataMember(Name="inbound_trunks", EmitDefaultValue=false)]
        public int? InboundTrunks { get; set; }

        /// <summary>
        /// The number of outbound, flat-rate trunks
        /// </summary>
        /// <value>The number of outbound, flat-rate trunks</value>
        [DataMember(Name="outbound_trunks", EmitDefaultValue=false)]
        public int? OutboundTrunks { get; set; }

        /// <summary>
        /// A hard limit for the number of resource consuming calls
        /// </summary>
        /// <value>A hard limit for the number of resource consuming calls</value>
        [DataMember(Name="resource_consuming_calls", EmitDefaultValue=false)]
        public int? ResourceConsumingCalls { get; set; }

        /// <summary>
        /// The number of two-way, flat-rate trunks
        /// </summary>
        /// <value>The number of two-way, flat-rate trunks</value>
        [DataMember(Name="twoway_trunks", EmitDefaultValue=false)]
        public int? TwowayTrunks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Limits {\n");
            sb.Append("  AllowPrepay: ").Append(AllowPrepay).Append("\n");
            sb.Append("  AuthzResourceTypes: ").Append(AuthzResourceTypes).Append("\n");
            sb.Append("  BurstTrunks: ").Append(BurstTrunks).Append("\n");
            sb.Append("  Calls: ").Append(Calls).Append("\n");
            sb.Append("  InboundTrunks: ").Append(InboundTrunks).Append("\n");
            sb.Append("  OutboundTrunks: ").Append(OutboundTrunks).Append("\n");
            sb.Append("  ResourceConsumingCalls: ").Append(ResourceConsumingCalls).Append("\n");
            sb.Append("  TwowayTrunks: ").Append(TwowayTrunks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Limits);
        }

        /// <summary>
        /// Returns true if Limits instances are equal
        /// </summary>
        /// <param name="input">Instance of Limits to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Limits input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowPrepay == input.AllowPrepay ||
                    (this.AllowPrepay != null &&
                    this.AllowPrepay.Equals(input.AllowPrepay))
                ) && 
                (
                    this.AuthzResourceTypes == input.AuthzResourceTypes ||
                    this.AuthzResourceTypes != null &&
                    this.AuthzResourceTypes.SequenceEqual(input.AuthzResourceTypes)
                ) && 
                (
                    this.BurstTrunks == input.BurstTrunks ||
                    (this.BurstTrunks != null &&
                    this.BurstTrunks.Equals(input.BurstTrunks))
                ) && 
                (
                    this.Calls == input.Calls ||
                    (this.Calls != null &&
                    this.Calls.Equals(input.Calls))
                ) && 
                (
                    this.InboundTrunks == input.InboundTrunks ||
                    (this.InboundTrunks != null &&
                    this.InboundTrunks.Equals(input.InboundTrunks))
                ) && 
                (
                    this.OutboundTrunks == input.OutboundTrunks ||
                    (this.OutboundTrunks != null &&
                    this.OutboundTrunks.Equals(input.OutboundTrunks))
                ) && 
                (
                    this.ResourceConsumingCalls == input.ResourceConsumingCalls ||
                    (this.ResourceConsumingCalls != null &&
                    this.ResourceConsumingCalls.Equals(input.ResourceConsumingCalls))
                ) && 
                (
                    this.TwowayTrunks == input.TwowayTrunks ||
                    (this.TwowayTrunks != null &&
                    this.TwowayTrunks.Equals(input.TwowayTrunks))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowPrepay != null)
                    hashCode = hashCode * 59 + this.AllowPrepay.GetHashCode();
                if (this.AuthzResourceTypes != null)
                    hashCode = hashCode * 59 + this.AuthzResourceTypes.GetHashCode();
                if (this.BurstTrunks != null)
                    hashCode = hashCode * 59 + this.BurstTrunks.GetHashCode();
                if (this.Calls != null)
                    hashCode = hashCode * 59 + this.Calls.GetHashCode();
                if (this.InboundTrunks != null)
                    hashCode = hashCode * 59 + this.InboundTrunks.GetHashCode();
                if (this.OutboundTrunks != null)
                    hashCode = hashCode * 59 + this.OutboundTrunks.GetHashCode();
                if (this.ResourceConsumingCalls != null)
                    hashCode = hashCode * 59 + this.ResourceConsumingCalls.GetHashCode();
                if (this.TwowayTrunks != null)
                    hashCode = hashCode * 59 + this.TwowayTrunks.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BurstTrunks (int?) minimum
            if(this.BurstTrunks < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BurstTrunks, must be a value greater than or equal to 0.", new [] { "BurstTrunks" });
            }

            // Calls (int?) minimum
            if(this.Calls < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Calls, must be a value greater than or equal to 0.", new [] { "Calls" });
            }

            // InboundTrunks (int?) minimum
            if(this.InboundTrunks < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InboundTrunks, must be a value greater than or equal to 0.", new [] { "InboundTrunks" });
            }

            // OutboundTrunks (int?) minimum
            if(this.OutboundTrunks < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OutboundTrunks, must be a value greater than or equal to 0.", new [] { "OutboundTrunks" });
            }

            // ResourceConsumingCalls (int?) minimum
            if(this.ResourceConsumingCalls < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResourceConsumingCalls, must be a value greater than or equal to 0.", new [] { "ResourceConsumingCalls" });
            }

            // TwowayTrunks (int?) minimum
            if(this.TwowayTrunks < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TwowayTrunks, must be a value greater than or equal to 0.", new [] { "TwowayTrunks" });
            }

            yield break;
        }
    }

}
