/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The result of a transmission attempt
    /// </summary>
    [DataContract]
    public partial class FaxesTxResult :  IEquatable<FaxesTxResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FaxesTxResult" /> class.
        /// </summary>
        /// <param name="errorMessage">A description of any error that occurred (default to &quot;&quot;).</param>
        /// <param name="faxBadRows">The number of bad rows.</param>
        /// <param name="faxErrorCorrection">True if fax error correction was used (default to false).</param>
        /// <param name="faxReceiverId">The receiver id reported by the remote fax device (default to &quot;&quot;).</param>
        /// <param name="faxSpeed">The speed (Baud-Rate) achieved during transmission.</param>
        /// <param name="pagesSent">The number of pages transmitted.</param>
        /// <param name="success">True if the fax transmission was successful (default to false).</param>
        /// <param name="timeElapsed">The amount of time from submission to completion.</param>
        public FaxesTxResult(string errorMessage = "", int? faxBadRows = default(int?), bool? faxErrorCorrection = false, string faxReceiverId = "", int? faxSpeed = default(int?), int? pagesSent = default(int?), bool? success = false, int? timeElapsed = default(int?))
        {
            // use default value if no "errorMessage" provided
            if (errorMessage == null)
            {
                this.ErrorMessage = "";
            }
            else
            {
                this.ErrorMessage = errorMessage;
            }
            this.FaxBadRows = faxBadRows;
            // use default value if no "faxErrorCorrection" provided
            if (faxErrorCorrection == null)
            {
                this.FaxErrorCorrection = false;
            }
            else
            {
                this.FaxErrorCorrection = faxErrorCorrection;
            }
            // use default value if no "faxReceiverId" provided
            if (faxReceiverId == null)
            {
                this.FaxReceiverId = "";
            }
            else
            {
                this.FaxReceiverId = faxReceiverId;
            }
            this.FaxSpeed = faxSpeed;
            this.PagesSent = pagesSent;
            // use default value if no "success" provided
            if (success == null)
            {
                this.Success = false;
            }
            else
            {
                this.Success = success;
            }
            this.TimeElapsed = timeElapsed;
        }
        
        /// <summary>
        /// A description of any error that occurred
        /// </summary>
        /// <value>A description of any error that occurred</value>
        [DataMember(Name="error_message", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// The number of bad rows
        /// </summary>
        /// <value>The number of bad rows</value>
        [DataMember(Name="fax_bad_rows", EmitDefaultValue=false)]
        public int? FaxBadRows { get; set; }

        /// <summary>
        /// True if fax error correction was used
        /// </summary>
        /// <value>True if fax error correction was used</value>
        [DataMember(Name="fax_error_correction", EmitDefaultValue=false)]
        public bool? FaxErrorCorrection { get; set; }

        /// <summary>
        /// The receiver id reported by the remote fax device
        /// </summary>
        /// <value>The receiver id reported by the remote fax device</value>
        [DataMember(Name="fax_receiver_id", EmitDefaultValue=false)]
        public string FaxReceiverId { get; set; }

        /// <summary>
        /// The speed (Baud-Rate) achieved during transmission
        /// </summary>
        /// <value>The speed (Baud-Rate) achieved during transmission</value>
        [DataMember(Name="fax_speed", EmitDefaultValue=false)]
        public int? FaxSpeed { get; set; }

        /// <summary>
        /// The number of pages transmitted
        /// </summary>
        /// <value>The number of pages transmitted</value>
        [DataMember(Name="pages_sent", EmitDefaultValue=false)]
        public int? PagesSent { get; set; }

        /// <summary>
        /// True if the fax transmission was successful
        /// </summary>
        /// <value>True if the fax transmission was successful</value>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public bool? Success { get; set; }

        /// <summary>
        /// The amount of time from submission to completion
        /// </summary>
        /// <value>The amount of time from submission to completion</value>
        [DataMember(Name="time_elapsed", EmitDefaultValue=false)]
        public int? TimeElapsed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FaxesTxResult {\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  FaxBadRows: ").Append(FaxBadRows).Append("\n");
            sb.Append("  FaxErrorCorrection: ").Append(FaxErrorCorrection).Append("\n");
            sb.Append("  FaxReceiverId: ").Append(FaxReceiverId).Append("\n");
            sb.Append("  FaxSpeed: ").Append(FaxSpeed).Append("\n");
            sb.Append("  PagesSent: ").Append(PagesSent).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  TimeElapsed: ").Append(TimeElapsed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FaxesTxResult);
        }

        /// <summary>
        /// Returns true if FaxesTxResult instances are equal
        /// </summary>
        /// <param name="input">Instance of FaxesTxResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FaxesTxResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.FaxBadRows == input.FaxBadRows ||
                    (this.FaxBadRows != null &&
                    this.FaxBadRows.Equals(input.FaxBadRows))
                ) && 
                (
                    this.FaxErrorCorrection == input.FaxErrorCorrection ||
                    (this.FaxErrorCorrection != null &&
                    this.FaxErrorCorrection.Equals(input.FaxErrorCorrection))
                ) && 
                (
                    this.FaxReceiverId == input.FaxReceiverId ||
                    (this.FaxReceiverId != null &&
                    this.FaxReceiverId.Equals(input.FaxReceiverId))
                ) && 
                (
                    this.FaxSpeed == input.FaxSpeed ||
                    (this.FaxSpeed != null &&
                    this.FaxSpeed.Equals(input.FaxSpeed))
                ) && 
                (
                    this.PagesSent == input.PagesSent ||
                    (this.PagesSent != null &&
                    this.PagesSent.Equals(input.PagesSent))
                ) && 
                (
                    this.Success == input.Success ||
                    (this.Success != null &&
                    this.Success.Equals(input.Success))
                ) && 
                (
                    this.TimeElapsed == input.TimeElapsed ||
                    (this.TimeElapsed != null &&
                    this.TimeElapsed.Equals(input.TimeElapsed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                if (this.FaxBadRows != null)
                    hashCode = hashCode * 59 + this.FaxBadRows.GetHashCode();
                if (this.FaxErrorCorrection != null)
                    hashCode = hashCode * 59 + this.FaxErrorCorrection.GetHashCode();
                if (this.FaxReceiverId != null)
                    hashCode = hashCode * 59 + this.FaxReceiverId.GetHashCode();
                if (this.FaxSpeed != null)
                    hashCode = hashCode * 59 + this.FaxSpeed.GetHashCode();
                if (this.PagesSent != null)
                    hashCode = hashCode * 59 + this.PagesSent.GetHashCode();
                if (this.Success != null)
                    hashCode = hashCode * 59 + this.Success.GetHashCode();
                if (this.TimeElapsed != null)
                    hashCode = hashCode * 59 + this.TimeElapsed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
