/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SystemConfigKonamiTransfer
    /// </summary>
    [DataContract]
    public partial class SystemConfigKonamiTransfer :  IEquatable<SystemConfigKonamiTransfer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigKonamiTransfer" /> class.
        /// </summary>
        /// <param name="defaultTakebackDtmf">konami default takeback dtmf (default to &quot;*1&quot;).</param>
        /// <param name="defaultTargetTimeoutMs">konami default target timeout in milliseconds.</param>
        public SystemConfigKonamiTransfer(string defaultTakebackDtmf = "*1", int? defaultTargetTimeoutMs = default(int?))
        {
            // use default value if no "defaultTakebackDtmf" provided
            if (defaultTakebackDtmf == null)
            {
                this.DefaultTakebackDtmf = "*1";
            }
            else
            {
                this.DefaultTakebackDtmf = defaultTakebackDtmf;
            }
            this.DefaultTargetTimeoutMs = defaultTargetTimeoutMs;
        }
        
        /// <summary>
        /// konami default takeback dtmf
        /// </summary>
        /// <value>konami default takeback dtmf</value>
        [DataMember(Name="default_takeback_dtmf", EmitDefaultValue=false)]
        public string DefaultTakebackDtmf { get; set; }

        /// <summary>
        /// konami default target timeout in milliseconds
        /// </summary>
        /// <value>konami default target timeout in milliseconds</value>
        [DataMember(Name="default_target_timeout_ms", EmitDefaultValue=false)]
        public int? DefaultTargetTimeoutMs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigKonamiTransfer {\n");
            sb.Append("  DefaultTakebackDtmf: ").Append(DefaultTakebackDtmf).Append("\n");
            sb.Append("  DefaultTargetTimeoutMs: ").Append(DefaultTargetTimeoutMs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigKonamiTransfer);
        }

        /// <summary>
        /// Returns true if SystemConfigKonamiTransfer instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigKonamiTransfer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigKonamiTransfer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefaultTakebackDtmf == input.DefaultTakebackDtmf ||
                    (this.DefaultTakebackDtmf != null &&
                    this.DefaultTakebackDtmf.Equals(input.DefaultTakebackDtmf))
                ) && 
                (
                    this.DefaultTargetTimeoutMs == input.DefaultTargetTimeoutMs ||
                    (this.DefaultTargetTimeoutMs != null &&
                    this.DefaultTargetTimeoutMs.Equals(input.DefaultTargetTimeoutMs))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultTakebackDtmf != null)
                    hashCode = hashCode * 59 + this.DefaultTakebackDtmf.GetHashCode();
                if (this.DefaultTargetTimeoutMs != null)
                    hashCode = hashCode * 59 + this.DefaultTargetTimeoutMs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
