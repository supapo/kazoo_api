/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for metaflow.binding
    /// </summary>
    [DataContract]
    public partial class KapiMetaflowBinding :  IEquatable<KapiMetaflowBinding>, IValidatableObject
    {
        /// <summary>
        /// Defines BindingDigit
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BindingDigitEnum
        {
            
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 1,
            
            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 2,
            
            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 3,
            
            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 4,
            
            /// <summary>
            /// Enum _5 for value: 5
            /// </summary>
            [EnumMember(Value = "5")]
            _5 = 5,
            
            /// <summary>
            /// Enum _6 for value: 6
            /// </summary>
            [EnumMember(Value = "6")]
            _6 = 6,
            
            /// <summary>
            /// Enum _7 for value: 7
            /// </summary>
            [EnumMember(Value = "7")]
            _7 = 7,
            
            /// <summary>
            /// Enum _8 for value: 8
            /// </summary>
            [EnumMember(Value = "8")]
            _8 = 8,
            
            /// <summary>
            /// Enum _9 for value: 9
            /// </summary>
            [EnumMember(Value = "9")]
            _9 = 9,
            
            /// <summary>
            /// Enum Star for value: *
            /// </summary>
            [EnumMember(Value = "*")]
            Star = 10,
            
            /// <summary>
            /// Enum _0 for value: 0
            /// </summary>
            [EnumMember(Value = "0")]
            _0 = 11,
            
            /// <summary>
            /// Enum Hash for value: #
            /// </summary>
            [EnumMember(Value = "#")]
            Hash = 12
        }

        /// <summary>
        /// Gets or Sets BindingDigit
        /// </summary>
        [DataMember(Name="Binding-Digit", EmitDefaultValue=false)]
        public BindingDigitEnum? BindingDigit { get; set; }
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Metaflow for value: metaflow
            /// </summary>
            [EnumMember(Value = "metaflow")]
            Metaflow = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Bind for value: bind
            /// </summary>
            [EnumMember(Value = "bind")]
            Bind = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Defines ListenOn
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ListenOnEnum
        {
            
            /// <summary>
            /// Enum Both for value: both
            /// </summary>
            [EnumMember(Value = "both")]
            Both = 1,
            
            /// <summary>
            /// Enum Self for value: self
            /// </summary>
            [EnumMember(Value = "self")]
            Self = 2,
            
            /// <summary>
            /// Enum Peer for value: peer
            /// </summary>
            [EnumMember(Value = "peer")]
            Peer = 3,
            
            /// <summary>
            /// Enum Aleg for value: aleg
            /// </summary>
            [EnumMember(Value = "aleg")]
            Aleg = 4,
            
            /// <summary>
            /// Enum Bleg for value: bleg
            /// </summary>
            [EnumMember(Value = "bleg")]
            Bleg = 5
        }

        /// <summary>
        /// Gets or Sets ListenOn
        /// </summary>
        [DataMember(Name="Listen-On", EmitDefaultValue=false)]
        public ListenOnEnum? ListenOn { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiMetaflowBinding" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiMetaflowBinding() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiMetaflowBinding" /> class.
        /// </summary>
        /// <param name="bindingDigit">bindingDigit.</param>
        /// <param name="call">call (required).</param>
        /// <param name="callID">callID.</param>
        /// <param name="digitTimeout">digitTimeout.</param>
        /// <param name="endpointID">endpointID.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="listenOn">listenOn.</param>
        /// <param name="numbers">numbers.</param>
        /// <param name="patterns">patterns.</param>
        public KapiMetaflowBinding(BindingDigitEnum? bindingDigit = default(BindingDigitEnum?), Object call = default(Object), string callID = default(string), int? digitTimeout = default(int?), string endpointID = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), ListenOnEnum? listenOn = default(ListenOnEnum?), Object numbers = default(Object), Object patterns = default(Object))
        {
            // to ensure "call" is required (not null)
            if (call == null)
            {
                throw new InvalidDataException("call is a required property for KapiMetaflowBinding and cannot be null");
            }
            else
            {
                this.Call = call;
            }
            this.BindingDigit = bindingDigit;
            this.CallID = callID;
            this.DigitTimeout = digitTimeout;
            this.EndpointID = endpointID;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.ListenOn = listenOn;
            this.Numbers = numbers;
            this.Patterns = patterns;
        }
        

        /// <summary>
        /// Gets or Sets Call
        /// </summary>
        [DataMember(Name="Call", EmitDefaultValue=false)]
        public Object Call { get; set; }

        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }

        /// <summary>
        /// Gets or Sets DigitTimeout
        /// </summary>
        [DataMember(Name="Digit-Timeout", EmitDefaultValue=false)]
        public int? DigitTimeout { get; set; }

        /// <summary>
        /// Gets or Sets EndpointID
        /// </summary>
        [DataMember(Name="Endpoint-ID", EmitDefaultValue=false)]
        public string EndpointID { get; set; }




        /// <summary>
        /// Gets or Sets Numbers
        /// </summary>
        [DataMember(Name="Numbers", EmitDefaultValue=false)]
        public Object Numbers { get; set; }

        /// <summary>
        /// Gets or Sets Patterns
        /// </summary>
        [DataMember(Name="Patterns", EmitDefaultValue=false)]
        public Object Patterns { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiMetaflowBinding {\n");
            sb.Append("  BindingDigit: ").Append(BindingDigit).Append("\n");
            sb.Append("  Call: ").Append(Call).Append("\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  DigitTimeout: ").Append(DigitTimeout).Append("\n");
            sb.Append("  EndpointID: ").Append(EndpointID).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  ListenOn: ").Append(ListenOn).Append("\n");
            sb.Append("  Numbers: ").Append(Numbers).Append("\n");
            sb.Append("  Patterns: ").Append(Patterns).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiMetaflowBinding);
        }

        /// <summary>
        /// Returns true if KapiMetaflowBinding instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiMetaflowBinding to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiMetaflowBinding input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BindingDigit == input.BindingDigit ||
                    (this.BindingDigit != null &&
                    this.BindingDigit.Equals(input.BindingDigit))
                ) && 
                (
                    this.Call == input.Call ||
                    (this.Call != null &&
                    this.Call.Equals(input.Call))
                ) && 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.DigitTimeout == input.DigitTimeout ||
                    (this.DigitTimeout != null &&
                    this.DigitTimeout.Equals(input.DigitTimeout))
                ) && 
                (
                    this.EndpointID == input.EndpointID ||
                    (this.EndpointID != null &&
                    this.EndpointID.Equals(input.EndpointID))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.ListenOn == input.ListenOn ||
                    (this.ListenOn != null &&
                    this.ListenOn.Equals(input.ListenOn))
                ) && 
                (
                    this.Numbers == input.Numbers ||
                    (this.Numbers != null &&
                    this.Numbers.Equals(input.Numbers))
                ) && 
                (
                    this.Patterns == input.Patterns ||
                    (this.Patterns != null &&
                    this.Patterns.Equals(input.Patterns))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BindingDigit != null)
                    hashCode = hashCode * 59 + this.BindingDigit.GetHashCode();
                if (this.Call != null)
                    hashCode = hashCode * 59 + this.Call.GetHashCode();
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.DigitTimeout != null)
                    hashCode = hashCode * 59 + this.DigitTimeout.GetHashCode();
                if (this.EndpointID != null)
                    hashCode = hashCode * 59 + this.EndpointID.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.ListenOn != null)
                    hashCode = hashCode * 59 + this.ListenOn.GetHashCode();
                if (this.Numbers != null)
                    hashCode = hashCode * 59 + this.Numbers.GetHashCode();
                if (this.Patterns != null)
                    hashCode = hashCode * 59 + this.Patterns.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DigitTimeout (int?) minimum
            if(this.DigitTimeout < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DigitTimeout, must be a value greater than or equal to 0.", new [] { "DigitTimeout" });
            }

            yield break;
        }
    }

}
