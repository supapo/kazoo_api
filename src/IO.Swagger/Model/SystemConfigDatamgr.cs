/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for datamgr system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigDatamgr :  IEquatable<SystemConfigDatamgr>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigDatamgr" /> class.
        /// </summary>
        /// <param name="cachePolicy">datamgr cache policy.</param>
        /// <param name="changeNoticeExcludeTypes">datamgr change_notice_exclude_types.</param>
        /// <param name="defaultArchiveFolder">datamgr default archive folder (default to &quot;/tmp&quot;).</param>
        /// <param name="maxBulkInsert">maximum number of documents that will be inserted in a single request.</param>
        /// <param name="maxBulkRead">maximum number of documents that will be read in a single request.</param>
        /// <param name="noCachingDocTypes">datamgr no caching doc types.</param>
        /// <param name="performance">datamgr performance.</param>
        public SystemConfigDatamgr(Object cachePolicy = default(Object), List<string> changeNoticeExcludeTypes = default(List<string>), string defaultArchiveFolder = "/tmp", int? maxBulkInsert = default(int?), int? maxBulkRead = default(int?), List<string> noCachingDocTypes = default(List<string>), Object performance = default(Object))
        {
            this.CachePolicy = cachePolicy;
            this.ChangeNoticeExcludeTypes = changeNoticeExcludeTypes;
            // use default value if no "defaultArchiveFolder" provided
            if (defaultArchiveFolder == null)
            {
                this.DefaultArchiveFolder = "/tmp";
            }
            else
            {
                this.DefaultArchiveFolder = defaultArchiveFolder;
            }
            this.MaxBulkInsert = maxBulkInsert;
            this.MaxBulkRead = maxBulkRead;
            this.NoCachingDocTypes = noCachingDocTypes;
            this.Performance = performance;
        }
        
        /// <summary>
        /// datamgr cache policy
        /// </summary>
        /// <value>datamgr cache policy</value>
        [DataMember(Name="cache_policy", EmitDefaultValue=false)]
        public Object CachePolicy { get; set; }

        /// <summary>
        /// datamgr change_notice_exclude_types
        /// </summary>
        /// <value>datamgr change_notice_exclude_types</value>
        [DataMember(Name="change_notice_exclude_types", EmitDefaultValue=false)]
        public List<string> ChangeNoticeExcludeTypes { get; set; }

        /// <summary>
        /// datamgr default archive folder
        /// </summary>
        /// <value>datamgr default archive folder</value>
        [DataMember(Name="default_archive_folder", EmitDefaultValue=false)]
        public string DefaultArchiveFolder { get; set; }

        /// <summary>
        /// maximum number of documents that will be inserted in a single request
        /// </summary>
        /// <value>maximum number of documents that will be inserted in a single request</value>
        [DataMember(Name="max_bulk_insert", EmitDefaultValue=false)]
        public int? MaxBulkInsert { get; set; }

        /// <summary>
        /// maximum number of documents that will be read in a single request
        /// </summary>
        /// <value>maximum number of documents that will be read in a single request</value>
        [DataMember(Name="max_bulk_read", EmitDefaultValue=false)]
        public int? MaxBulkRead { get; set; }

        /// <summary>
        /// datamgr no caching doc types
        /// </summary>
        /// <value>datamgr no caching doc types</value>
        [DataMember(Name="no_caching_doc_types", EmitDefaultValue=false)]
        public List<string> NoCachingDocTypes { get; set; }

        /// <summary>
        /// datamgr performance
        /// </summary>
        /// <value>datamgr performance</value>
        [DataMember(Name="performance", EmitDefaultValue=false)]
        public Object Performance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigDatamgr {\n");
            sb.Append("  CachePolicy: ").Append(CachePolicy).Append("\n");
            sb.Append("  ChangeNoticeExcludeTypes: ").Append(ChangeNoticeExcludeTypes).Append("\n");
            sb.Append("  DefaultArchiveFolder: ").Append(DefaultArchiveFolder).Append("\n");
            sb.Append("  MaxBulkInsert: ").Append(MaxBulkInsert).Append("\n");
            sb.Append("  MaxBulkRead: ").Append(MaxBulkRead).Append("\n");
            sb.Append("  NoCachingDocTypes: ").Append(NoCachingDocTypes).Append("\n");
            sb.Append("  Performance: ").Append(Performance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigDatamgr);
        }

        /// <summary>
        /// Returns true if SystemConfigDatamgr instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigDatamgr to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigDatamgr input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CachePolicy == input.CachePolicy ||
                    (this.CachePolicy != null &&
                    this.CachePolicy.Equals(input.CachePolicy))
                ) && 
                (
                    this.ChangeNoticeExcludeTypes == input.ChangeNoticeExcludeTypes ||
                    this.ChangeNoticeExcludeTypes != null &&
                    this.ChangeNoticeExcludeTypes.SequenceEqual(input.ChangeNoticeExcludeTypes)
                ) && 
                (
                    this.DefaultArchiveFolder == input.DefaultArchiveFolder ||
                    (this.DefaultArchiveFolder != null &&
                    this.DefaultArchiveFolder.Equals(input.DefaultArchiveFolder))
                ) && 
                (
                    this.MaxBulkInsert == input.MaxBulkInsert ||
                    (this.MaxBulkInsert != null &&
                    this.MaxBulkInsert.Equals(input.MaxBulkInsert))
                ) && 
                (
                    this.MaxBulkRead == input.MaxBulkRead ||
                    (this.MaxBulkRead != null &&
                    this.MaxBulkRead.Equals(input.MaxBulkRead))
                ) && 
                (
                    this.NoCachingDocTypes == input.NoCachingDocTypes ||
                    this.NoCachingDocTypes != null &&
                    this.NoCachingDocTypes.SequenceEqual(input.NoCachingDocTypes)
                ) && 
                (
                    this.Performance == input.Performance ||
                    (this.Performance != null &&
                    this.Performance.Equals(input.Performance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CachePolicy != null)
                    hashCode = hashCode * 59 + this.CachePolicy.GetHashCode();
                if (this.ChangeNoticeExcludeTypes != null)
                    hashCode = hashCode * 59 + this.ChangeNoticeExcludeTypes.GetHashCode();
                if (this.DefaultArchiveFolder != null)
                    hashCode = hashCode * 59 + this.DefaultArchiveFolder.GetHashCode();
                if (this.MaxBulkInsert != null)
                    hashCode = hashCode * 59 + this.MaxBulkInsert.GetHashCode();
                if (this.MaxBulkRead != null)
                    hashCode = hashCode * 59 + this.MaxBulkRead.GetHashCode();
                if (this.NoCachingDocTypes != null)
                    hashCode = hashCode * 59 + this.NoCachingDocTypes.GetHashCode();
                if (this.Performance != null)
                    hashCode = hashCode * 59 + this.Performance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MaxBulkInsert (int?) minimum
            if(this.MaxBulkInsert < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxBulkInsert, must be a value greater than or equal to 1.", new [] { "MaxBulkInsert" });
            }

            // MaxBulkRead (int?) minimum
            if(this.MaxBulkRead < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxBulkRead, must be a value greater than or equal to 1.", new [] { "MaxBulkRead" });
            }

            yield break;
        }
    }

}
