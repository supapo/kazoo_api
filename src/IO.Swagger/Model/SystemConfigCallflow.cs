/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for callflow system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigCallflow :  IEquatable<SystemConfigCallflow>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigCallflow" /> class.
        /// </summary>
        /// <param name="allowAuthzContextOverrides">callflow allow_authz_context_overrides (default to false).</param>
        /// <param name="authzContexts">callflow authz_contexts.</param>
        /// <param name="callRecording">callRecording.</param>
        /// <param name="callsConsumeTokens">callflow calls consume tokens (default to true).</param>
        /// <param name="defaultPinLength">callflow default pin length.</param>
        /// <param name="defaultUseAccountCallerId">callflow default use account caller id (default to true).</param>
        /// <param name="dialogSubscribedMwiPrefix">callflow dialog_subscribed_mwi_prefix.</param>
        /// <param name="ensureValidCallerId">callflow ensure valid caller id (default to false).</param>
        /// <param name="faxDetectDurationS">callflow fax detect duration in seconds.</param>
        /// <param name="maxBranchCount">callflow maximum branch count.</param>
        /// <param name="minBucketCost">callflow minimum bucket cost.</param>
        /// <param name="mwiSendUnsolicitedUpdates">callflow mwi send unsolicited updates (default to true).</param>
        /// <param name="operatorKey">callflow operator key (default to &quot;0&quot;).</param>
        /// <param name="poolOverflow">callflow pool_overflow.</param>
        /// <param name="poolServerConfirms">callflow pool_server_confirms (default to false).</param>
        /// <param name="poolSize">callflow pool_size.</param>
        /// <param name="poolThreshold">callflow pool_threshold.</param>
        /// <param name="postAnswerDelay">callflow post answer delay.</param>
        /// <param name="ringReadyOffnet">callflow ring ready offnet (default to true).</param>
        /// <param name="routeWinTimeout">callflow route win timeout.</param>
        /// <param name="shouldDryRunTokenRestrictions">callflow should_dry_run_token_restrictions (default to false).</param>
        /// <param name="singularCallHookUrl">callflow singular call hook url (default to &quot;&quot;).</param>
        /// <param name="voicemail">voicemail.</param>
        public SystemConfigCallflow(bool? allowAuthzContextOverrides = false, List<string> authzContexts = default(List<string>), SystemConfigCallflowCallRecording callRecording = default(SystemConfigCallflowCallRecording), bool? callsConsumeTokens = true, int? defaultPinLength = default(int?), bool? defaultUseAccountCallerId = true, string dialogSubscribedMwiPrefix = default(string), bool? ensureValidCallerId = false, int? faxDetectDurationS = default(int?), int? maxBranchCount = default(int?), int? minBucketCost = default(int?), bool? mwiSendUnsolicitedUpdates = true, string operatorKey = "0", int? poolOverflow = default(int?), bool? poolServerConfirms = false, int? poolSize = default(int?), int? poolThreshold = default(int?), int? postAnswerDelay = default(int?), bool? ringReadyOffnet = true, int? routeWinTimeout = default(int?), bool? shouldDryRunTokenRestrictions = false, string singularCallHookUrl = "", SystemConfigCallflowVoicemail voicemail = default(SystemConfigCallflowVoicemail))
        {
            // use default value if no "allowAuthzContextOverrides" provided
            if (allowAuthzContextOverrides == null)
            {
                this.AllowAuthzContextOverrides = false;
            }
            else
            {
                this.AllowAuthzContextOverrides = allowAuthzContextOverrides;
            }
            this.AuthzContexts = authzContexts;
            this.CallRecording = callRecording;
            // use default value if no "callsConsumeTokens" provided
            if (callsConsumeTokens == null)
            {
                this.CallsConsumeTokens = true;
            }
            else
            {
                this.CallsConsumeTokens = callsConsumeTokens;
            }
            this.DefaultPinLength = defaultPinLength;
            // use default value if no "defaultUseAccountCallerId" provided
            if (defaultUseAccountCallerId == null)
            {
                this.DefaultUseAccountCallerId = true;
            }
            else
            {
                this.DefaultUseAccountCallerId = defaultUseAccountCallerId;
            }
            this.DialogSubscribedMwiPrefix = dialogSubscribedMwiPrefix;
            // use default value if no "ensureValidCallerId" provided
            if (ensureValidCallerId == null)
            {
                this.EnsureValidCallerId = false;
            }
            else
            {
                this.EnsureValidCallerId = ensureValidCallerId;
            }
            this.FaxDetectDurationS = faxDetectDurationS;
            this.MaxBranchCount = maxBranchCount;
            this.MinBucketCost = minBucketCost;
            // use default value if no "mwiSendUnsolicitedUpdates" provided
            if (mwiSendUnsolicitedUpdates == null)
            {
                this.MwiSendUnsolicitedUpdates = true;
            }
            else
            {
                this.MwiSendUnsolicitedUpdates = mwiSendUnsolicitedUpdates;
            }
            // use default value if no "operatorKey" provided
            if (operatorKey == null)
            {
                this.OperatorKey = "0";
            }
            else
            {
                this.OperatorKey = operatorKey;
            }
            this.PoolOverflow = poolOverflow;
            // use default value if no "poolServerConfirms" provided
            if (poolServerConfirms == null)
            {
                this.PoolServerConfirms = false;
            }
            else
            {
                this.PoolServerConfirms = poolServerConfirms;
            }
            this.PoolSize = poolSize;
            this.PoolThreshold = poolThreshold;
            this.PostAnswerDelay = postAnswerDelay;
            // use default value if no "ringReadyOffnet" provided
            if (ringReadyOffnet == null)
            {
                this.RingReadyOffnet = true;
            }
            else
            {
                this.RingReadyOffnet = ringReadyOffnet;
            }
            this.RouteWinTimeout = routeWinTimeout;
            // use default value if no "shouldDryRunTokenRestrictions" provided
            if (shouldDryRunTokenRestrictions == null)
            {
                this.ShouldDryRunTokenRestrictions = false;
            }
            else
            {
                this.ShouldDryRunTokenRestrictions = shouldDryRunTokenRestrictions;
            }
            // use default value if no "singularCallHookUrl" provided
            if (singularCallHookUrl == null)
            {
                this.SingularCallHookUrl = "";
            }
            else
            {
                this.SingularCallHookUrl = singularCallHookUrl;
            }
            this.Voicemail = voicemail;
        }
        
        /// <summary>
        /// callflow allow_authz_context_overrides
        /// </summary>
        /// <value>callflow allow_authz_context_overrides</value>
        [DataMember(Name="allow_authz_context_overrides", EmitDefaultValue=false)]
        public bool? AllowAuthzContextOverrides { get; set; }

        /// <summary>
        /// callflow authz_contexts
        /// </summary>
        /// <value>callflow authz_contexts</value>
        [DataMember(Name="authz_contexts", EmitDefaultValue=false)]
        public List<string> AuthzContexts { get; set; }

        /// <summary>
        /// Gets or Sets CallRecording
        /// </summary>
        [DataMember(Name="call_recording", EmitDefaultValue=false)]
        public SystemConfigCallflowCallRecording CallRecording { get; set; }

        /// <summary>
        /// callflow calls consume tokens
        /// </summary>
        /// <value>callflow calls consume tokens</value>
        [DataMember(Name="calls_consume_tokens", EmitDefaultValue=false)]
        public bool? CallsConsumeTokens { get; set; }

        /// <summary>
        /// callflow default pin length
        /// </summary>
        /// <value>callflow default pin length</value>
        [DataMember(Name="default_pin_length", EmitDefaultValue=false)]
        public int? DefaultPinLength { get; set; }

        /// <summary>
        /// callflow default use account caller id
        /// </summary>
        /// <value>callflow default use account caller id</value>
        [DataMember(Name="default_use_account_caller_id", EmitDefaultValue=false)]
        public bool? DefaultUseAccountCallerId { get; set; }

        /// <summary>
        /// callflow dialog_subscribed_mwi_prefix
        /// </summary>
        /// <value>callflow dialog_subscribed_mwi_prefix</value>
        [DataMember(Name="dialog_subscribed_mwi_prefix", EmitDefaultValue=false)]
        public string DialogSubscribedMwiPrefix { get; set; }

        /// <summary>
        /// callflow ensure valid caller id
        /// </summary>
        /// <value>callflow ensure valid caller id</value>
        [DataMember(Name="ensure_valid_caller_id", EmitDefaultValue=false)]
        public bool? EnsureValidCallerId { get; set; }

        /// <summary>
        /// callflow fax detect duration in seconds
        /// </summary>
        /// <value>callflow fax detect duration in seconds</value>
        [DataMember(Name="fax_detect_duration_s", EmitDefaultValue=false)]
        public int? FaxDetectDurationS { get; set; }

        /// <summary>
        /// callflow maximum branch count
        /// </summary>
        /// <value>callflow maximum branch count</value>
        [DataMember(Name="max_branch_count", EmitDefaultValue=false)]
        public int? MaxBranchCount { get; set; }

        /// <summary>
        /// callflow minimum bucket cost
        /// </summary>
        /// <value>callflow minimum bucket cost</value>
        [DataMember(Name="min_bucket_cost", EmitDefaultValue=false)]
        public int? MinBucketCost { get; set; }

        /// <summary>
        /// callflow mwi send unsolicited updates
        /// </summary>
        /// <value>callflow mwi send unsolicited updates</value>
        [DataMember(Name="mwi_send_unsolicited_updates", EmitDefaultValue=false)]
        public bool? MwiSendUnsolicitedUpdates { get; set; }

        /// <summary>
        /// callflow operator key
        /// </summary>
        /// <value>callflow operator key</value>
        [DataMember(Name="operator_key", EmitDefaultValue=false)]
        public string OperatorKey { get; set; }

        /// <summary>
        /// callflow pool_overflow
        /// </summary>
        /// <value>callflow pool_overflow</value>
        [DataMember(Name="pool_overflow", EmitDefaultValue=false)]
        public int? PoolOverflow { get; set; }

        /// <summary>
        /// callflow pool_server_confirms
        /// </summary>
        /// <value>callflow pool_server_confirms</value>
        [DataMember(Name="pool_server_confirms", EmitDefaultValue=false)]
        public bool? PoolServerConfirms { get; set; }

        /// <summary>
        /// callflow pool_size
        /// </summary>
        /// <value>callflow pool_size</value>
        [DataMember(Name="pool_size", EmitDefaultValue=false)]
        public int? PoolSize { get; set; }

        /// <summary>
        /// callflow pool_threshold
        /// </summary>
        /// <value>callflow pool_threshold</value>
        [DataMember(Name="pool_threshold", EmitDefaultValue=false)]
        public int? PoolThreshold { get; set; }

        /// <summary>
        /// callflow post answer delay
        /// </summary>
        /// <value>callflow post answer delay</value>
        [DataMember(Name="post_answer_delay", EmitDefaultValue=false)]
        public int? PostAnswerDelay { get; set; }

        /// <summary>
        /// callflow ring ready offnet
        /// </summary>
        /// <value>callflow ring ready offnet</value>
        [DataMember(Name="ring_ready_offnet", EmitDefaultValue=false)]
        public bool? RingReadyOffnet { get; set; }

        /// <summary>
        /// callflow route win timeout
        /// </summary>
        /// <value>callflow route win timeout</value>
        [DataMember(Name="route_win_timeout", EmitDefaultValue=false)]
        public int? RouteWinTimeout { get; set; }

        /// <summary>
        /// callflow should_dry_run_token_restrictions
        /// </summary>
        /// <value>callflow should_dry_run_token_restrictions</value>
        [DataMember(Name="should_dry_run_token_restrictions", EmitDefaultValue=false)]
        public bool? ShouldDryRunTokenRestrictions { get; set; }

        /// <summary>
        /// callflow singular call hook url
        /// </summary>
        /// <value>callflow singular call hook url</value>
        [DataMember(Name="singular_call_hook_url", EmitDefaultValue=false)]
        public string SingularCallHookUrl { get; set; }

        /// <summary>
        /// Gets or Sets Voicemail
        /// </summary>
        [DataMember(Name="voicemail", EmitDefaultValue=false)]
        public SystemConfigCallflowVoicemail Voicemail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigCallflow {\n");
            sb.Append("  AllowAuthzContextOverrides: ").Append(AllowAuthzContextOverrides).Append("\n");
            sb.Append("  AuthzContexts: ").Append(AuthzContexts).Append("\n");
            sb.Append("  CallRecording: ").Append(CallRecording).Append("\n");
            sb.Append("  CallsConsumeTokens: ").Append(CallsConsumeTokens).Append("\n");
            sb.Append("  DefaultPinLength: ").Append(DefaultPinLength).Append("\n");
            sb.Append("  DefaultUseAccountCallerId: ").Append(DefaultUseAccountCallerId).Append("\n");
            sb.Append("  DialogSubscribedMwiPrefix: ").Append(DialogSubscribedMwiPrefix).Append("\n");
            sb.Append("  EnsureValidCallerId: ").Append(EnsureValidCallerId).Append("\n");
            sb.Append("  FaxDetectDurationS: ").Append(FaxDetectDurationS).Append("\n");
            sb.Append("  MaxBranchCount: ").Append(MaxBranchCount).Append("\n");
            sb.Append("  MinBucketCost: ").Append(MinBucketCost).Append("\n");
            sb.Append("  MwiSendUnsolicitedUpdates: ").Append(MwiSendUnsolicitedUpdates).Append("\n");
            sb.Append("  OperatorKey: ").Append(OperatorKey).Append("\n");
            sb.Append("  PoolOverflow: ").Append(PoolOverflow).Append("\n");
            sb.Append("  PoolServerConfirms: ").Append(PoolServerConfirms).Append("\n");
            sb.Append("  PoolSize: ").Append(PoolSize).Append("\n");
            sb.Append("  PoolThreshold: ").Append(PoolThreshold).Append("\n");
            sb.Append("  PostAnswerDelay: ").Append(PostAnswerDelay).Append("\n");
            sb.Append("  RingReadyOffnet: ").Append(RingReadyOffnet).Append("\n");
            sb.Append("  RouteWinTimeout: ").Append(RouteWinTimeout).Append("\n");
            sb.Append("  ShouldDryRunTokenRestrictions: ").Append(ShouldDryRunTokenRestrictions).Append("\n");
            sb.Append("  SingularCallHookUrl: ").Append(SingularCallHookUrl).Append("\n");
            sb.Append("  Voicemail: ").Append(Voicemail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigCallflow);
        }

        /// <summary>
        /// Returns true if SystemConfigCallflow instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigCallflow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigCallflow input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowAuthzContextOverrides == input.AllowAuthzContextOverrides ||
                    (this.AllowAuthzContextOverrides != null &&
                    this.AllowAuthzContextOverrides.Equals(input.AllowAuthzContextOverrides))
                ) && 
                (
                    this.AuthzContexts == input.AuthzContexts ||
                    this.AuthzContexts != null &&
                    this.AuthzContexts.SequenceEqual(input.AuthzContexts)
                ) && 
                (
                    this.CallRecording == input.CallRecording ||
                    (this.CallRecording != null &&
                    this.CallRecording.Equals(input.CallRecording))
                ) && 
                (
                    this.CallsConsumeTokens == input.CallsConsumeTokens ||
                    (this.CallsConsumeTokens != null &&
                    this.CallsConsumeTokens.Equals(input.CallsConsumeTokens))
                ) && 
                (
                    this.DefaultPinLength == input.DefaultPinLength ||
                    (this.DefaultPinLength != null &&
                    this.DefaultPinLength.Equals(input.DefaultPinLength))
                ) && 
                (
                    this.DefaultUseAccountCallerId == input.DefaultUseAccountCallerId ||
                    (this.DefaultUseAccountCallerId != null &&
                    this.DefaultUseAccountCallerId.Equals(input.DefaultUseAccountCallerId))
                ) && 
                (
                    this.DialogSubscribedMwiPrefix == input.DialogSubscribedMwiPrefix ||
                    (this.DialogSubscribedMwiPrefix != null &&
                    this.DialogSubscribedMwiPrefix.Equals(input.DialogSubscribedMwiPrefix))
                ) && 
                (
                    this.EnsureValidCallerId == input.EnsureValidCallerId ||
                    (this.EnsureValidCallerId != null &&
                    this.EnsureValidCallerId.Equals(input.EnsureValidCallerId))
                ) && 
                (
                    this.FaxDetectDurationS == input.FaxDetectDurationS ||
                    (this.FaxDetectDurationS != null &&
                    this.FaxDetectDurationS.Equals(input.FaxDetectDurationS))
                ) && 
                (
                    this.MaxBranchCount == input.MaxBranchCount ||
                    (this.MaxBranchCount != null &&
                    this.MaxBranchCount.Equals(input.MaxBranchCount))
                ) && 
                (
                    this.MinBucketCost == input.MinBucketCost ||
                    (this.MinBucketCost != null &&
                    this.MinBucketCost.Equals(input.MinBucketCost))
                ) && 
                (
                    this.MwiSendUnsolicitedUpdates == input.MwiSendUnsolicitedUpdates ||
                    (this.MwiSendUnsolicitedUpdates != null &&
                    this.MwiSendUnsolicitedUpdates.Equals(input.MwiSendUnsolicitedUpdates))
                ) && 
                (
                    this.OperatorKey == input.OperatorKey ||
                    (this.OperatorKey != null &&
                    this.OperatorKey.Equals(input.OperatorKey))
                ) && 
                (
                    this.PoolOverflow == input.PoolOverflow ||
                    (this.PoolOverflow != null &&
                    this.PoolOverflow.Equals(input.PoolOverflow))
                ) && 
                (
                    this.PoolServerConfirms == input.PoolServerConfirms ||
                    (this.PoolServerConfirms != null &&
                    this.PoolServerConfirms.Equals(input.PoolServerConfirms))
                ) && 
                (
                    this.PoolSize == input.PoolSize ||
                    (this.PoolSize != null &&
                    this.PoolSize.Equals(input.PoolSize))
                ) && 
                (
                    this.PoolThreshold == input.PoolThreshold ||
                    (this.PoolThreshold != null &&
                    this.PoolThreshold.Equals(input.PoolThreshold))
                ) && 
                (
                    this.PostAnswerDelay == input.PostAnswerDelay ||
                    (this.PostAnswerDelay != null &&
                    this.PostAnswerDelay.Equals(input.PostAnswerDelay))
                ) && 
                (
                    this.RingReadyOffnet == input.RingReadyOffnet ||
                    (this.RingReadyOffnet != null &&
                    this.RingReadyOffnet.Equals(input.RingReadyOffnet))
                ) && 
                (
                    this.RouteWinTimeout == input.RouteWinTimeout ||
                    (this.RouteWinTimeout != null &&
                    this.RouteWinTimeout.Equals(input.RouteWinTimeout))
                ) && 
                (
                    this.ShouldDryRunTokenRestrictions == input.ShouldDryRunTokenRestrictions ||
                    (this.ShouldDryRunTokenRestrictions != null &&
                    this.ShouldDryRunTokenRestrictions.Equals(input.ShouldDryRunTokenRestrictions))
                ) && 
                (
                    this.SingularCallHookUrl == input.SingularCallHookUrl ||
                    (this.SingularCallHookUrl != null &&
                    this.SingularCallHookUrl.Equals(input.SingularCallHookUrl))
                ) && 
                (
                    this.Voicemail == input.Voicemail ||
                    (this.Voicemail != null &&
                    this.Voicemail.Equals(input.Voicemail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowAuthzContextOverrides != null)
                    hashCode = hashCode * 59 + this.AllowAuthzContextOverrides.GetHashCode();
                if (this.AuthzContexts != null)
                    hashCode = hashCode * 59 + this.AuthzContexts.GetHashCode();
                if (this.CallRecording != null)
                    hashCode = hashCode * 59 + this.CallRecording.GetHashCode();
                if (this.CallsConsumeTokens != null)
                    hashCode = hashCode * 59 + this.CallsConsumeTokens.GetHashCode();
                if (this.DefaultPinLength != null)
                    hashCode = hashCode * 59 + this.DefaultPinLength.GetHashCode();
                if (this.DefaultUseAccountCallerId != null)
                    hashCode = hashCode * 59 + this.DefaultUseAccountCallerId.GetHashCode();
                if (this.DialogSubscribedMwiPrefix != null)
                    hashCode = hashCode * 59 + this.DialogSubscribedMwiPrefix.GetHashCode();
                if (this.EnsureValidCallerId != null)
                    hashCode = hashCode * 59 + this.EnsureValidCallerId.GetHashCode();
                if (this.FaxDetectDurationS != null)
                    hashCode = hashCode * 59 + this.FaxDetectDurationS.GetHashCode();
                if (this.MaxBranchCount != null)
                    hashCode = hashCode * 59 + this.MaxBranchCount.GetHashCode();
                if (this.MinBucketCost != null)
                    hashCode = hashCode * 59 + this.MinBucketCost.GetHashCode();
                if (this.MwiSendUnsolicitedUpdates != null)
                    hashCode = hashCode * 59 + this.MwiSendUnsolicitedUpdates.GetHashCode();
                if (this.OperatorKey != null)
                    hashCode = hashCode * 59 + this.OperatorKey.GetHashCode();
                if (this.PoolOverflow != null)
                    hashCode = hashCode * 59 + this.PoolOverflow.GetHashCode();
                if (this.PoolServerConfirms != null)
                    hashCode = hashCode * 59 + this.PoolServerConfirms.GetHashCode();
                if (this.PoolSize != null)
                    hashCode = hashCode * 59 + this.PoolSize.GetHashCode();
                if (this.PoolThreshold != null)
                    hashCode = hashCode * 59 + this.PoolThreshold.GetHashCode();
                if (this.PostAnswerDelay != null)
                    hashCode = hashCode * 59 + this.PostAnswerDelay.GetHashCode();
                if (this.RingReadyOffnet != null)
                    hashCode = hashCode * 59 + this.RingReadyOffnet.GetHashCode();
                if (this.RouteWinTimeout != null)
                    hashCode = hashCode * 59 + this.RouteWinTimeout.GetHashCode();
                if (this.ShouldDryRunTokenRestrictions != null)
                    hashCode = hashCode * 59 + this.ShouldDryRunTokenRestrictions.GetHashCode();
                if (this.SingularCallHookUrl != null)
                    hashCode = hashCode * 59 + this.SingularCallHookUrl.GetHashCode();
                if (this.Voicemail != null)
                    hashCode = hashCode * 59 + this.Voicemail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
