/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for dialplan.receive_fax
    /// </summary>
    [DataContract]
    public partial class KapiDialplanReceiveFax :  IEquatable<KapiDialplanReceiveFax>, IValidatableObject
    {
        /// <summary>
        /// Defines ApplicationName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApplicationNameEnum
        {
            
            /// <summary>
            /// Enum Receivefax for value: receive_fax
            /// </summary>
            [EnumMember(Value = "receive_fax")]
            Receivefax = 1
        }

        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name="Application-Name", EmitDefaultValue=false)]
        public ApplicationNameEnum ApplicationName { get; set; }
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Call for value: call
            /// </summary>
            [EnumMember(Value = "call")]
            Call = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Command for value: command
            /// </summary>
            [EnumMember(Value = "command")]
            Command = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Defines InsertAt
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InsertAtEnum
        {
            
            /// <summary>
            /// Enum Head for value: head
            /// </summary>
            [EnumMember(Value = "head")]
            Head = 1,
            
            /// <summary>
            /// Enum Tail for value: tail
            /// </summary>
            [EnumMember(Value = "tail")]
            Tail = 2,
            
            /// <summary>
            /// Enum Flush for value: flush
            /// </summary>
            [EnumMember(Value = "flush")]
            Flush = 3,
            
            /// <summary>
            /// Enum Now for value: now
            /// </summary>
            [EnumMember(Value = "now")]
            Now = 4
        }

        /// <summary>
        /// Gets or Sets InsertAt
        /// </summary>
        [DataMember(Name="Insert-At", EmitDefaultValue=false)]
        public InsertAtEnum? InsertAt { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanReceiveFax" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiDialplanReceiveFax() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanReceiveFax" /> class.
        /// </summary>
        /// <param name="applicationName">applicationName (required).</param>
        /// <param name="callID">callID (required).</param>
        /// <param name="enableT38Fax">enableT38Fax.</param>
        /// <param name="enableT38FaxRequest">enableT38FaxRequest.</param>
        /// <param name="enableT38Gateway">enableT38Gateway.</param>
        /// <param name="enableT38Passthrough">enableT38Passthrough.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="faxLocalFilename">faxLocalFilename.</param>
        /// <param name="insertAt">insertAt.</param>
        public KapiDialplanReceiveFax(ApplicationNameEnum applicationName = default(ApplicationNameEnum), string callID = default(string), string enableT38Fax = default(string), string enableT38FaxRequest = default(string), string enableT38Gateway = default(string), string enableT38Passthrough = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string faxLocalFilename = default(string), InsertAtEnum? insertAt = default(InsertAtEnum?))
        {
            // to ensure "applicationName" is required (not null)
            if (applicationName == null)
            {
                throw new InvalidDataException("applicationName is a required property for KapiDialplanReceiveFax and cannot be null");
            }
            else
            {
                this.ApplicationName = applicationName;
            }
            // to ensure "callID" is required (not null)
            if (callID == null)
            {
                throw new InvalidDataException("callID is a required property for KapiDialplanReceiveFax and cannot be null");
            }
            else
            {
                this.CallID = callID;
            }
            this.EnableT38Fax = enableT38Fax;
            this.EnableT38FaxRequest = enableT38FaxRequest;
            this.EnableT38Gateway = enableT38Gateway;
            this.EnableT38Passthrough = enableT38Passthrough;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.FaxLocalFilename = faxLocalFilename;
            this.InsertAt = insertAt;
        }
        

        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }

        /// <summary>
        /// Gets or Sets EnableT38Fax
        /// </summary>
        [DataMember(Name="Enable-T38-Fax", EmitDefaultValue=false)]
        public string EnableT38Fax { get; set; }

        /// <summary>
        /// Gets or Sets EnableT38FaxRequest
        /// </summary>
        [DataMember(Name="Enable-T38-Fax-Request", EmitDefaultValue=false)]
        public string EnableT38FaxRequest { get; set; }

        /// <summary>
        /// Gets or Sets EnableT38Gateway
        /// </summary>
        [DataMember(Name="Enable-T38-Gateway", EmitDefaultValue=false)]
        public string EnableT38Gateway { get; set; }

        /// <summary>
        /// Gets or Sets EnableT38Passthrough
        /// </summary>
        [DataMember(Name="Enable-T38-Passthrough", EmitDefaultValue=false)]
        public string EnableT38Passthrough { get; set; }



        /// <summary>
        /// Gets or Sets FaxLocalFilename
        /// </summary>
        [DataMember(Name="Fax-Local-Filename", EmitDefaultValue=false)]
        public string FaxLocalFilename { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiDialplanReceiveFax {\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  EnableT38Fax: ").Append(EnableT38Fax).Append("\n");
            sb.Append("  EnableT38FaxRequest: ").Append(EnableT38FaxRequest).Append("\n");
            sb.Append("  EnableT38Gateway: ").Append(EnableT38Gateway).Append("\n");
            sb.Append("  EnableT38Passthrough: ").Append(EnableT38Passthrough).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  FaxLocalFilename: ").Append(FaxLocalFilename).Append("\n");
            sb.Append("  InsertAt: ").Append(InsertAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiDialplanReceiveFax);
        }

        /// <summary>
        /// Returns true if KapiDialplanReceiveFax instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiDialplanReceiveFax to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiDialplanReceiveFax input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.EnableT38Fax == input.EnableT38Fax ||
                    (this.EnableT38Fax != null &&
                    this.EnableT38Fax.Equals(input.EnableT38Fax))
                ) && 
                (
                    this.EnableT38FaxRequest == input.EnableT38FaxRequest ||
                    (this.EnableT38FaxRequest != null &&
                    this.EnableT38FaxRequest.Equals(input.EnableT38FaxRequest))
                ) && 
                (
                    this.EnableT38Gateway == input.EnableT38Gateway ||
                    (this.EnableT38Gateway != null &&
                    this.EnableT38Gateway.Equals(input.EnableT38Gateway))
                ) && 
                (
                    this.EnableT38Passthrough == input.EnableT38Passthrough ||
                    (this.EnableT38Passthrough != null &&
                    this.EnableT38Passthrough.Equals(input.EnableT38Passthrough))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.FaxLocalFilename == input.FaxLocalFilename ||
                    (this.FaxLocalFilename != null &&
                    this.FaxLocalFilename.Equals(input.FaxLocalFilename))
                ) && 
                (
                    this.InsertAt == input.InsertAt ||
                    (this.InsertAt != null &&
                    this.InsertAt.Equals(input.InsertAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationName != null)
                    hashCode = hashCode * 59 + this.ApplicationName.GetHashCode();
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.EnableT38Fax != null)
                    hashCode = hashCode * 59 + this.EnableT38Fax.GetHashCode();
                if (this.EnableT38FaxRequest != null)
                    hashCode = hashCode * 59 + this.EnableT38FaxRequest.GetHashCode();
                if (this.EnableT38Gateway != null)
                    hashCode = hashCode * 59 + this.EnableT38Gateway.GetHashCode();
                if (this.EnableT38Passthrough != null)
                    hashCode = hashCode * 59 + this.EnableT38Passthrough.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.FaxLocalFilename != null)
                    hashCode = hashCode * 59 + this.FaxLocalFilename.GetHashCode();
                if (this.InsertAt != null)
                    hashCode = hashCode * 59 + this.InsertAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
