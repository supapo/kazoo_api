/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Route inbound call to another destination if this server fails to handle the call
    /// </summary>
    [DataContract]
    public partial class ConnectivityOptionsFailover :  IEquatable<ConnectivityOptionsFailover>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectivityOptionsFailover" /> class.
        /// </summary>
        /// <param name="e164">An E.164 formatted DID to dial for failover.</param>
        /// <param name="sip">A SIP URI (sip:user@host) to call for failover.</param>
        public ConnectivityOptionsFailover(string e164 = default(string), string sip = default(string))
        {
            this.E164 = e164;
            this.Sip = sip;
        }
        
        /// <summary>
        /// An E.164 formatted DID to dial for failover
        /// </summary>
        /// <value>An E.164 formatted DID to dial for failover</value>
        [DataMember(Name="e164", EmitDefaultValue=false)]
        public string E164 { get; set; }

        /// <summary>
        /// A SIP URI (sip:user@host) to call for failover
        /// </summary>
        /// <value>A SIP URI (sip:user@host) to call for failover</value>
        [DataMember(Name="sip", EmitDefaultValue=false)]
        public string Sip { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConnectivityOptionsFailover {\n");
            sb.Append("  E164: ").Append(E164).Append("\n");
            sb.Append("  Sip: ").Append(Sip).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConnectivityOptionsFailover);
        }

        /// <summary>
        /// Returns true if ConnectivityOptionsFailover instances are equal
        /// </summary>
        /// <param name="input">Instance of ConnectivityOptionsFailover to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConnectivityOptionsFailover input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.E164 == input.E164 ||
                    (this.E164 != null &&
                    this.E164.Equals(input.E164))
                ) && 
                (
                    this.Sip == input.Sip ||
                    (this.Sip != null &&
                    this.Sip.Equals(input.Sip))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.E164 != null)
                    hashCode = hashCode * 59 + this.E164.GetHashCode();
                if (this.Sip != null)
                    hashCode = hashCode * 59 + this.Sip.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
