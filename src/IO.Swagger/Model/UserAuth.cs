/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Provides an auth-token via user credentials
    /// </summary>
    [DataContract]
    public partial class UserAuth :  IEquatable<UserAuth>, IValidatableObject
    {
        /// <summary>
        /// The hash method
        /// </summary>
        /// <value>The hash method</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodEnum
        {
            
            /// <summary>
            /// Enum Md5 for value: md5
            /// </summary>
            [EnumMember(Value = "md5")]
            Md5 = 1,
            
            /// <summary>
            /// Enum Sha for value: sha
            /// </summary>
            [EnumMember(Value = "sha")]
            Sha = 2
        }

        /// <summary>
        /// The hash method
        /// </summary>
        /// <value>The hash method</value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public MethodEnum? Method { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAuth" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserAuth() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAuth" /> class.
        /// </summary>
        /// <param name="accountName">The account name of the user.</param>
        /// <param name="accountRealm">The account realm of the user.</param>
        /// <param name="credentials">A hash of the uses credentials (required).</param>
        /// <param name="method">The hash method (default to MethodEnum.Md5).</param>
        /// <param name="phoneNumber">A phone number assigned to the users account.</param>
        public UserAuth(string accountName = default(string), string accountRealm = default(string), string credentials = default(string), MethodEnum? method = MethodEnum.Md5, string phoneNumber = default(string))
        {
            // to ensure "credentials" is required (not null)
            if (credentials == null)
            {
                throw new InvalidDataException("credentials is a required property for UserAuth and cannot be null");
            }
            else
            {
                this.Credentials = credentials;
            }
            this.AccountName = accountName;
            this.AccountRealm = accountRealm;
            // use default value if no "method" provided
            if (method == null)
            {
                this.Method = MethodEnum.Md5;
            }
            else
            {
                this.Method = method;
            }
            this.PhoneNumber = phoneNumber;
        }
        
        /// <summary>
        /// The account name of the user
        /// </summary>
        /// <value>The account name of the user</value>
        [DataMember(Name="account_name", EmitDefaultValue=false)]
        public string AccountName { get; set; }

        /// <summary>
        /// The account realm of the user
        /// </summary>
        /// <value>The account realm of the user</value>
        [DataMember(Name="account_realm", EmitDefaultValue=false)]
        public string AccountRealm { get; set; }

        /// <summary>
        /// A hash of the uses credentials
        /// </summary>
        /// <value>A hash of the uses credentials</value>
        [DataMember(Name="credentials", EmitDefaultValue=false)]
        public string Credentials { get; set; }


        /// <summary>
        /// A phone number assigned to the users account
        /// </summary>
        /// <value>A phone number assigned to the users account</value>
        [DataMember(Name="phone_number", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserAuth {\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountRealm: ").Append(AccountRealm).Append("\n");
            sb.Append("  Credentials: ").Append(Credentials).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserAuth);
        }

        /// <summary>
        /// Returns true if UserAuth instances are equal
        /// </summary>
        /// <param name="input">Instance of UserAuth to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserAuth input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.AccountRealm == input.AccountRealm ||
                    (this.AccountRealm != null &&
                    this.AccountRealm.Equals(input.AccountRealm))
                ) && 
                (
                    this.Credentials == input.Credentials ||
                    (this.Credentials != null &&
                    this.Credentials.Equals(input.Credentials))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.AccountRealm != null)
                    hashCode = hashCode * 59 + this.AccountRealm.GetHashCode();
                if (this.Credentials != null)
                    hashCode = hashCode * 59 + this.Credentials.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AccountName (string) maxLength
            if(this.AccountName != null && this.AccountName.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountName, length must be less than 128.", new [] { "AccountName" });
            }

            // AccountName (string) minLength
            if(this.AccountName != null && this.AccountName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountName, length must be greater than 1.", new [] { "AccountName" });
            }

            // AccountRealm (string) maxLength
            if(this.AccountRealm != null && this.AccountRealm.Length > 253)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountRealm, length must be less than 253.", new [] { "AccountRealm" });
            }

            // AccountRealm (string) minLength
            if(this.AccountRealm != null && this.AccountRealm.Length < 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountRealm, length must be greater than 4.", new [] { "AccountRealm" });
            }

            // AccountRealm (string) pattern
            Regex regexAccountRealm = new Regex(@"^[.\\w_-]+$", RegexOptions.CultureInvariant);
            if (false == regexAccountRealm.Match(this.AccountRealm).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountRealm, must match a pattern of " + regexAccountRealm, new [] { "AccountRealm" });
            }

            // Credentials (string) maxLength
            if(this.Credentials != null && this.Credentials.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Credentials, length must be less than 64.", new [] { "Credentials" });
            }

            // Credentials (string) minLength
            if(this.Credentials != null && this.Credentials.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Credentials, length must be greater than 1.", new [] { "Credentials" });
            }

            // PhoneNumber (string) maxLength
            if(this.PhoneNumber != null && this.PhoneNumber.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PhoneNumber, length must be less than 64.", new [] { "PhoneNumber" });
            }

            // PhoneNumber (string) minLength
            if(this.PhoneNumber != null && this.PhoneNumber.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PhoneNumber, length must be greater than 1.", new [] { "PhoneNumber" });
            }

            yield break;
        }
    }

}
