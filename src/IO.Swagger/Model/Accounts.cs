/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Accounts represent tenants or customers on the system. Each account represents an individual dataset or sandbox that only one tenant can access. The data set is architecturally independent from other tenants.
    /// </summary>
    [DataContract]
    public partial class Accounts :  IEquatable<Accounts>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Accounts" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Accounts() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Accounts" /> class.
        /// </summary>
        /// <param name="callRecording">callRecording.</param>
        /// <param name="callRestriction">Account level call restrictions for each available number classification.</param>
        /// <param name="callWaiting">callWaiting.</param>
        /// <param name="callerId">The account default caller ID parameters.</param>
        /// <param name="callerIdOptions">callerIdOptions.</param>
        /// <param name="dialPlan">A list of default rules used to modify dialed numbers.</param>
        /// <param name="doNotDisturb">doNotDisturb.</param>
        /// <param name="enabled">Determines if the account is currently enabled (default to true).</param>
        /// <param name="flags">Flags set by external applications.</param>
        /// <param name="formatters">formatters.</param>
        /// <param name="language">The language for this account.</param>
        /// <param name="metaflows">metaflows.</param>
        /// <param name="musicOnHold">musicOnHold.</param>
        /// <param name="name">A friendly name for the account (required).</param>
        /// <param name="notifications">notifications.</param>
        /// <param name="org">Full legal name of the organization.</param>
        /// <param name="preflow">preflow.</param>
        /// <param name="realm">The realm of the account, ie: &#39;account1.2600hz.com&#39;.</param>
        /// <param name="ringtones">ringtones.</param>
        /// <param name="timezone">The default timezone.</param>
        /// <param name="topup">topup.</param>
        /// <param name="voicemail">voicemail.</param>
        /// <param name="zones">A priority ordered mapping of zones for the account.</param>
        public Accounts(AccountsCallRecording callRecording = default(AccountsCallRecording), Dictionary<string, AccountsCallRestriction> callRestriction = default(Dictionary<string, AccountsCallRestriction>), CallWaiting callWaiting = default(CallWaiting), CallerId callerId = default(CallerId), AccountsCallerIdOptions callerIdOptions = default(AccountsCallerIdOptions), Dialplans dialPlan = default(Dialplans), AccountsDoNotDisturb doNotDisturb = default(AccountsDoNotDisturb), bool? enabled = true, List<string> flags = default(List<string>), Formatters formatters = default(Formatters), string language = default(string), Metaflows metaflows = default(Metaflows), AccountsMusicOnHold musicOnHold = default(AccountsMusicOnHold), string name = default(string), AccountsNotifications notifications = default(AccountsNotifications), string org = default(string), AccountsPreflow preflow = default(AccountsPreflow), string realm = default(string), AccountsRingtones ringtones = default(AccountsRingtones), string timezone = default(string), AccountsTopup topup = default(AccountsTopup), AccountsVoicemail voicemail = default(AccountsVoicemail), Object zones = default(Object))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Accounts and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.CallRecording = callRecording;
            this.CallRestriction = callRestriction;
            this.CallWaiting = callWaiting;
            this.CallerId = callerId;
            this.CallerIdOptions = callerIdOptions;
            this.DialPlan = dialPlan;
            this.DoNotDisturb = doNotDisturb;
            // use default value if no "enabled" provided
            if (enabled == null)
            {
                this.Enabled = true;
            }
            else
            {
                this.Enabled = enabled;
            }
            this.Flags = flags;
            this.Formatters = formatters;
            this.Language = language;
            this.Metaflows = metaflows;
            this.MusicOnHold = musicOnHold;
            this.Notifications = notifications;
            this.Org = org;
            this.Preflow = preflow;
            this.Realm = realm;
            this.Ringtones = ringtones;
            this.Timezone = timezone;
            this.Topup = topup;
            this.Voicemail = voicemail;
            this.Zones = zones;
        }
        
        /// <summary>
        /// Gets or Sets CallRecording
        /// </summary>
        [DataMember(Name="call_recording", EmitDefaultValue=false)]
        public AccountsCallRecording CallRecording { get; set; }

        /// <summary>
        /// Account level call restrictions for each available number classification
        /// </summary>
        /// <value>Account level call restrictions for each available number classification</value>
        [DataMember(Name="call_restriction", EmitDefaultValue=false)]
        public Dictionary<string, AccountsCallRestriction> CallRestriction { get; set; }

        /// <summary>
        /// Gets or Sets CallWaiting
        /// </summary>
        [DataMember(Name="call_waiting", EmitDefaultValue=false)]
        public CallWaiting CallWaiting { get; set; }

        /// <summary>
        /// The account default caller ID parameters
        /// </summary>
        /// <value>The account default caller ID parameters</value>
        [DataMember(Name="caller_id", EmitDefaultValue=false)]
        public CallerId CallerId { get; set; }

        /// <summary>
        /// Gets or Sets CallerIdOptions
        /// </summary>
        [DataMember(Name="caller_id_options", EmitDefaultValue=false)]
        public AccountsCallerIdOptions CallerIdOptions { get; set; }

        /// <summary>
        /// A list of default rules used to modify dialed numbers
        /// </summary>
        /// <value>A list of default rules used to modify dialed numbers</value>
        [DataMember(Name="dial_plan", EmitDefaultValue=false)]
        public Dialplans DialPlan { get; set; }

        /// <summary>
        /// Gets or Sets DoNotDisturb
        /// </summary>
        [DataMember(Name="do_not_disturb", EmitDefaultValue=false)]
        public AccountsDoNotDisturb DoNotDisturb { get; set; }

        /// <summary>
        /// Determines if the account is currently enabled
        /// </summary>
        /// <value>Determines if the account is currently enabled</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Flags set by external applications
        /// </summary>
        /// <value>Flags set by external applications</value>
        [DataMember(Name="flags", EmitDefaultValue=false)]
        public List<string> Flags { get; set; }

        /// <summary>
        /// Gets or Sets Formatters
        /// </summary>
        [DataMember(Name="formatters", EmitDefaultValue=false)]
        public Formatters Formatters { get; set; }

        /// <summary>
        /// The language for this account
        /// </summary>
        /// <value>The language for this account</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets Metaflows
        /// </summary>
        [DataMember(Name="metaflows", EmitDefaultValue=false)]
        public Metaflows Metaflows { get; set; }

        /// <summary>
        /// Gets or Sets MusicOnHold
        /// </summary>
        [DataMember(Name="music_on_hold", EmitDefaultValue=false)]
        public AccountsMusicOnHold MusicOnHold { get; set; }

        /// <summary>
        /// A friendly name for the account
        /// </summary>
        /// <value>A friendly name for the account</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Notifications
        /// </summary>
        [DataMember(Name="notifications", EmitDefaultValue=false)]
        public AccountsNotifications Notifications { get; set; }

        /// <summary>
        /// Full legal name of the organization
        /// </summary>
        /// <value>Full legal name of the organization</value>
        [DataMember(Name="org", EmitDefaultValue=false)]
        public string Org { get; set; }

        /// <summary>
        /// Gets or Sets Preflow
        /// </summary>
        [DataMember(Name="preflow", EmitDefaultValue=false)]
        public AccountsPreflow Preflow { get; set; }

        /// <summary>
        /// The realm of the account, ie: &#39;account1.2600hz.com&#39;
        /// </summary>
        /// <value>The realm of the account, ie: &#39;account1.2600hz.com&#39;</value>
        [DataMember(Name="realm", EmitDefaultValue=false)]
        public string Realm { get; set; }

        /// <summary>
        /// Gets or Sets Ringtones
        /// </summary>
        [DataMember(Name="ringtones", EmitDefaultValue=false)]
        public AccountsRingtones Ringtones { get; set; }

        /// <summary>
        /// The default timezone
        /// </summary>
        /// <value>The default timezone</value>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Gets or Sets Topup
        /// </summary>
        [DataMember(Name="topup", EmitDefaultValue=false)]
        public AccountsTopup Topup { get; set; }

        /// <summary>
        /// Gets or Sets Voicemail
        /// </summary>
        [DataMember(Name="voicemail", EmitDefaultValue=false)]
        public AccountsVoicemail Voicemail { get; set; }

        /// <summary>
        /// A priority ordered mapping of zones for the account
        /// </summary>
        /// <value>A priority ordered mapping of zones for the account</value>
        [DataMember(Name="zones", EmitDefaultValue=false)]
        public Object Zones { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Accounts {\n");
            sb.Append("  CallRecording: ").Append(CallRecording).Append("\n");
            sb.Append("  CallRestriction: ").Append(CallRestriction).Append("\n");
            sb.Append("  CallWaiting: ").Append(CallWaiting).Append("\n");
            sb.Append("  CallerId: ").Append(CallerId).Append("\n");
            sb.Append("  CallerIdOptions: ").Append(CallerIdOptions).Append("\n");
            sb.Append("  DialPlan: ").Append(DialPlan).Append("\n");
            sb.Append("  DoNotDisturb: ").Append(DoNotDisturb).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  Formatters: ").Append(Formatters).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Metaflows: ").Append(Metaflows).Append("\n");
            sb.Append("  MusicOnHold: ").Append(MusicOnHold).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  Org: ").Append(Org).Append("\n");
            sb.Append("  Preflow: ").Append(Preflow).Append("\n");
            sb.Append("  Realm: ").Append(Realm).Append("\n");
            sb.Append("  Ringtones: ").Append(Ringtones).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  Topup: ").Append(Topup).Append("\n");
            sb.Append("  Voicemail: ").Append(Voicemail).Append("\n");
            sb.Append("  Zones: ").Append(Zones).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Accounts);
        }

        /// <summary>
        /// Returns true if Accounts instances are equal
        /// </summary>
        /// <param name="input">Instance of Accounts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Accounts input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CallRecording == input.CallRecording ||
                    (this.CallRecording != null &&
                    this.CallRecording.Equals(input.CallRecording))
                ) && 
                (
                    this.CallRestriction == input.CallRestriction ||
                    this.CallRestriction != null &&
                    this.CallRestriction.SequenceEqual(input.CallRestriction)
                ) && 
                (
                    this.CallWaiting == input.CallWaiting ||
                    (this.CallWaiting != null &&
                    this.CallWaiting.Equals(input.CallWaiting))
                ) && 
                (
                    this.CallerId == input.CallerId ||
                    (this.CallerId != null &&
                    this.CallerId.Equals(input.CallerId))
                ) && 
                (
                    this.CallerIdOptions == input.CallerIdOptions ||
                    (this.CallerIdOptions != null &&
                    this.CallerIdOptions.Equals(input.CallerIdOptions))
                ) && 
                (
                    this.DialPlan == input.DialPlan ||
                    (this.DialPlan != null &&
                    this.DialPlan.Equals(input.DialPlan))
                ) && 
                (
                    this.DoNotDisturb == input.DoNotDisturb ||
                    (this.DoNotDisturb != null &&
                    this.DoNotDisturb.Equals(input.DoNotDisturb))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.Flags == input.Flags ||
                    this.Flags != null &&
                    this.Flags.SequenceEqual(input.Flags)
                ) && 
                (
                    this.Formatters == input.Formatters ||
                    (this.Formatters != null &&
                    this.Formatters.Equals(input.Formatters))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Metaflows == input.Metaflows ||
                    (this.Metaflows != null &&
                    this.Metaflows.Equals(input.Metaflows))
                ) && 
                (
                    this.MusicOnHold == input.MusicOnHold ||
                    (this.MusicOnHold != null &&
                    this.MusicOnHold.Equals(input.MusicOnHold))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Notifications == input.Notifications ||
                    (this.Notifications != null &&
                    this.Notifications.Equals(input.Notifications))
                ) && 
                (
                    this.Org == input.Org ||
                    (this.Org != null &&
                    this.Org.Equals(input.Org))
                ) && 
                (
                    this.Preflow == input.Preflow ||
                    (this.Preflow != null &&
                    this.Preflow.Equals(input.Preflow))
                ) && 
                (
                    this.Realm == input.Realm ||
                    (this.Realm != null &&
                    this.Realm.Equals(input.Realm))
                ) && 
                (
                    this.Ringtones == input.Ringtones ||
                    (this.Ringtones != null &&
                    this.Ringtones.Equals(input.Ringtones))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.Topup == input.Topup ||
                    (this.Topup != null &&
                    this.Topup.Equals(input.Topup))
                ) && 
                (
                    this.Voicemail == input.Voicemail ||
                    (this.Voicemail != null &&
                    this.Voicemail.Equals(input.Voicemail))
                ) && 
                (
                    this.Zones == input.Zones ||
                    (this.Zones != null &&
                    this.Zones.Equals(input.Zones))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CallRecording != null)
                    hashCode = hashCode * 59 + this.CallRecording.GetHashCode();
                if (this.CallRestriction != null)
                    hashCode = hashCode * 59 + this.CallRestriction.GetHashCode();
                if (this.CallWaiting != null)
                    hashCode = hashCode * 59 + this.CallWaiting.GetHashCode();
                if (this.CallerId != null)
                    hashCode = hashCode * 59 + this.CallerId.GetHashCode();
                if (this.CallerIdOptions != null)
                    hashCode = hashCode * 59 + this.CallerIdOptions.GetHashCode();
                if (this.DialPlan != null)
                    hashCode = hashCode * 59 + this.DialPlan.GetHashCode();
                if (this.DoNotDisturb != null)
                    hashCode = hashCode * 59 + this.DoNotDisturb.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.Flags != null)
                    hashCode = hashCode * 59 + this.Flags.GetHashCode();
                if (this.Formatters != null)
                    hashCode = hashCode * 59 + this.Formatters.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.Metaflows != null)
                    hashCode = hashCode * 59 + this.Metaflows.GetHashCode();
                if (this.MusicOnHold != null)
                    hashCode = hashCode * 59 + this.MusicOnHold.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Notifications != null)
                    hashCode = hashCode * 59 + this.Notifications.GetHashCode();
                if (this.Org != null)
                    hashCode = hashCode * 59 + this.Org.GetHashCode();
                if (this.Preflow != null)
                    hashCode = hashCode * 59 + this.Preflow.GetHashCode();
                if (this.Realm != null)
                    hashCode = hashCode * 59 + this.Realm.GetHashCode();
                if (this.Ringtones != null)
                    hashCode = hashCode * 59 + this.Ringtones.GetHashCode();
                if (this.Timezone != null)
                    hashCode = hashCode * 59 + this.Timezone.GetHashCode();
                if (this.Topup != null)
                    hashCode = hashCode * 59 + this.Topup.GetHashCode();
                if (this.Voicemail != null)
                    hashCode = hashCode * 59 + this.Voicemail.GetHashCode();
                if (this.Zones != null)
                    hashCode = hashCode * 59 + this.Zones.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // Realm (string) maxLength
            if(this.Realm != null && this.Realm.Length > 253)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Realm, length must be less than 253.", new [] { "Realm" });
            }

            // Realm (string) minLength
            if(this.Realm != null && this.Realm.Length < 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Realm, length must be greater than 4.", new [] { "Realm" });
            }

            // Realm (string) pattern
            Regex regexRealm = new Regex(@"^[.\\w-]+$", RegexOptions.CultureInvariant);
            if (false == regexRealm.Match(this.Realm).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Realm, must match a pattern of " + regexRealm, new [] { "Realm" });
            }

            // Timezone (string) maxLength
            if(this.Timezone != null && this.Timezone.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Timezone, length must be less than 32.", new [] { "Timezone" });
            }

            // Timezone (string) minLength
            if(this.Timezone != null && this.Timezone.Length < 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Timezone, length must be greater than 5.", new [] { "Timezone" });
            }

            yield break;
        }
    }

}
