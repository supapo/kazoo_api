/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SystemConfigEdrBackends
    /// </summary>
    [DataContract]
    public partial class SystemConfigEdrBackends :  IEquatable<SystemConfigEdrBackends>, IValidatableObject
    {
        /// <summary>
        /// The backend module to be used (e.g. amqp refers to edr_be_amqp.erl)
        /// </summary>
        /// <value>The backend module to be used (e.g. amqp refers to edr_be_amqp.erl)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Amqp for value: amqp
            /// </summary>
            [EnumMember(Value = "amqp")]
            Amqp = 1,
            
            /// <summary>
            /// Enum File for value: file
            /// </summary>
            [EnumMember(Value = "file")]
            File = 2,
            
            /// <summary>
            /// Enum Http for value: http
            /// </summary>
            [EnumMember(Value = "http")]
            Http = 3
        }

        /// <summary>
        /// The backend module to be used (e.g. amqp refers to edr_be_amqp.erl)
        /// </summary>
        /// <value>The backend module to be used (e.g. amqp refers to edr_be_amqp.erl)</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigEdrBackends" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SystemConfigEdrBackends() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigEdrBackends" /> class.
        /// </summary>
        /// <param name="bindings">The types of events the backend should be notified about (required).</param>
        /// <param name="enabled">Should the backend be started on edr app start? (required) (default to true).</param>
        /// <param name="name">A unique identifier for the backend (required).</param>
        /// <param name="options">options.</param>
        /// <param name="type">The backend module to be used (e.g. amqp refers to edr_be_amqp.erl) (required).</param>
        public SystemConfigEdrBackends(List<SystemConfigEdrBindings> bindings = default(List<SystemConfigEdrBindings>), bool? enabled = true, string name = default(string), SystemConfigEdrOptions options = default(SystemConfigEdrOptions), TypeEnum type = default(TypeEnum))
        {
            // to ensure "bindings" is required (not null)
            if (bindings == null)
            {
                throw new InvalidDataException("bindings is a required property for SystemConfigEdrBackends and cannot be null");
            }
            else
            {
                this.Bindings = bindings;
            }
            // to ensure "enabled" is required (not null)
            if (enabled == null)
            {
                throw new InvalidDataException("enabled is a required property for SystemConfigEdrBackends and cannot be null");
            }
            else
            {
                this.Enabled = enabled;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for SystemConfigEdrBackends and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for SystemConfigEdrBackends and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Options = options;
        }
        
        /// <summary>
        /// The types of events the backend should be notified about
        /// </summary>
        /// <value>The types of events the backend should be notified about</value>
        [DataMember(Name="bindings", EmitDefaultValue=false)]
        public List<SystemConfigEdrBindings> Bindings { get; set; }

        /// <summary>
        /// Should the backend be started on edr app start?
        /// </summary>
        /// <value>Should the backend be started on edr app start?</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// A unique identifier for the backend
        /// </summary>
        /// <value>A unique identifier for the backend</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public SystemConfigEdrOptions Options { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigEdrBackends {\n");
            sb.Append("  Bindings: ").Append(Bindings).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigEdrBackends);
        }

        /// <summary>
        /// Returns true if SystemConfigEdrBackends instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigEdrBackends to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigEdrBackends input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bindings == input.Bindings ||
                    this.Bindings != null &&
                    this.Bindings.SequenceEqual(input.Bindings)
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Options == input.Options ||
                    (this.Options != null &&
                    this.Options.Equals(input.Options))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bindings != null)
                    hashCode = hashCode * 59 + this.Bindings.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            yield break;
        }
    }

}
