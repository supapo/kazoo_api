/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for trunkstore system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigTrunkstore :  IEquatable<SystemConfigTrunkstore>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigTrunkstore" /> class.
        /// </summary>
        /// <param name="defaultCallerIdNumber">trunkstore default caller id number.</param>
        /// <param name="defaultHuntNonReconcilable">trunkstore default hunt non reconcilable (default to false).</param>
        /// <param name="ensureValidCallerId">trunkstore ensure valid caller id (default to false).</param>
        /// <param name="honorDiversionsByCidValidation">trunkstore honor diversions by cid validation (default to false).</param>
        /// <param name="poolOverflow">trunkstore pool_overflow.</param>
        /// <param name="poolServerConfirms">trunkstore pool_server_confirms (default to false).</param>
        /// <param name="poolSize">trunkstore pool_size.</param>
        /// <param name="poolThreshold">trunkstore pool_threshold.</param>
        /// <param name="ringReadyOffnet">trunkstore ring ready offnet (default to true).</param>
        public SystemConfigTrunkstore(string defaultCallerIdNumber = default(string), bool? defaultHuntNonReconcilable = false, bool? ensureValidCallerId = false, bool? honorDiversionsByCidValidation = false, int? poolOverflow = default(int?), bool? poolServerConfirms = false, int? poolSize = default(int?), int? poolThreshold = default(int?), bool? ringReadyOffnet = true)
        {
            this.DefaultCallerIdNumber = defaultCallerIdNumber;
            // use default value if no "defaultHuntNonReconcilable" provided
            if (defaultHuntNonReconcilable == null)
            {
                this.DefaultHuntNonReconcilable = false;
            }
            else
            {
                this.DefaultHuntNonReconcilable = defaultHuntNonReconcilable;
            }
            // use default value if no "ensureValidCallerId" provided
            if (ensureValidCallerId == null)
            {
                this.EnsureValidCallerId = false;
            }
            else
            {
                this.EnsureValidCallerId = ensureValidCallerId;
            }
            // use default value if no "honorDiversionsByCidValidation" provided
            if (honorDiversionsByCidValidation == null)
            {
                this.HonorDiversionsByCidValidation = false;
            }
            else
            {
                this.HonorDiversionsByCidValidation = honorDiversionsByCidValidation;
            }
            this.PoolOverflow = poolOverflow;
            // use default value if no "poolServerConfirms" provided
            if (poolServerConfirms == null)
            {
                this.PoolServerConfirms = false;
            }
            else
            {
                this.PoolServerConfirms = poolServerConfirms;
            }
            this.PoolSize = poolSize;
            this.PoolThreshold = poolThreshold;
            // use default value if no "ringReadyOffnet" provided
            if (ringReadyOffnet == null)
            {
                this.RingReadyOffnet = true;
            }
            else
            {
                this.RingReadyOffnet = ringReadyOffnet;
            }
        }
        
        /// <summary>
        /// trunkstore default caller id number
        /// </summary>
        /// <value>trunkstore default caller id number</value>
        [DataMember(Name="default_caller_id_number", EmitDefaultValue=false)]
        public string DefaultCallerIdNumber { get; set; }

        /// <summary>
        /// trunkstore default hunt non reconcilable
        /// </summary>
        /// <value>trunkstore default hunt non reconcilable</value>
        [DataMember(Name="default_hunt_non_reconcilable", EmitDefaultValue=false)]
        public bool? DefaultHuntNonReconcilable { get; set; }

        /// <summary>
        /// trunkstore ensure valid caller id
        /// </summary>
        /// <value>trunkstore ensure valid caller id</value>
        [DataMember(Name="ensure_valid_caller_id", EmitDefaultValue=false)]
        public bool? EnsureValidCallerId { get; set; }

        /// <summary>
        /// trunkstore honor diversions by cid validation
        /// </summary>
        /// <value>trunkstore honor diversions by cid validation</value>
        [DataMember(Name="honor_diversions_by_cid_validation", EmitDefaultValue=false)]
        public bool? HonorDiversionsByCidValidation { get; set; }

        /// <summary>
        /// trunkstore pool_overflow
        /// </summary>
        /// <value>trunkstore pool_overflow</value>
        [DataMember(Name="pool_overflow", EmitDefaultValue=false)]
        public int? PoolOverflow { get; set; }

        /// <summary>
        /// trunkstore pool_server_confirms
        /// </summary>
        /// <value>trunkstore pool_server_confirms</value>
        [DataMember(Name="pool_server_confirms", EmitDefaultValue=false)]
        public bool? PoolServerConfirms { get; set; }

        /// <summary>
        /// trunkstore pool_size
        /// </summary>
        /// <value>trunkstore pool_size</value>
        [DataMember(Name="pool_size", EmitDefaultValue=false)]
        public int? PoolSize { get; set; }

        /// <summary>
        /// trunkstore pool_threshold
        /// </summary>
        /// <value>trunkstore pool_threshold</value>
        [DataMember(Name="pool_threshold", EmitDefaultValue=false)]
        public int? PoolThreshold { get; set; }

        /// <summary>
        /// trunkstore ring ready offnet
        /// </summary>
        /// <value>trunkstore ring ready offnet</value>
        [DataMember(Name="ring_ready_offnet", EmitDefaultValue=false)]
        public bool? RingReadyOffnet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigTrunkstore {\n");
            sb.Append("  DefaultCallerIdNumber: ").Append(DefaultCallerIdNumber).Append("\n");
            sb.Append("  DefaultHuntNonReconcilable: ").Append(DefaultHuntNonReconcilable).Append("\n");
            sb.Append("  EnsureValidCallerId: ").Append(EnsureValidCallerId).Append("\n");
            sb.Append("  HonorDiversionsByCidValidation: ").Append(HonorDiversionsByCidValidation).Append("\n");
            sb.Append("  PoolOverflow: ").Append(PoolOverflow).Append("\n");
            sb.Append("  PoolServerConfirms: ").Append(PoolServerConfirms).Append("\n");
            sb.Append("  PoolSize: ").Append(PoolSize).Append("\n");
            sb.Append("  PoolThreshold: ").Append(PoolThreshold).Append("\n");
            sb.Append("  RingReadyOffnet: ").Append(RingReadyOffnet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigTrunkstore);
        }

        /// <summary>
        /// Returns true if SystemConfigTrunkstore instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigTrunkstore to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigTrunkstore input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefaultCallerIdNumber == input.DefaultCallerIdNumber ||
                    (this.DefaultCallerIdNumber != null &&
                    this.DefaultCallerIdNumber.Equals(input.DefaultCallerIdNumber))
                ) && 
                (
                    this.DefaultHuntNonReconcilable == input.DefaultHuntNonReconcilable ||
                    (this.DefaultHuntNonReconcilable != null &&
                    this.DefaultHuntNonReconcilable.Equals(input.DefaultHuntNonReconcilable))
                ) && 
                (
                    this.EnsureValidCallerId == input.EnsureValidCallerId ||
                    (this.EnsureValidCallerId != null &&
                    this.EnsureValidCallerId.Equals(input.EnsureValidCallerId))
                ) && 
                (
                    this.HonorDiversionsByCidValidation == input.HonorDiversionsByCidValidation ||
                    (this.HonorDiversionsByCidValidation != null &&
                    this.HonorDiversionsByCidValidation.Equals(input.HonorDiversionsByCidValidation))
                ) && 
                (
                    this.PoolOverflow == input.PoolOverflow ||
                    (this.PoolOverflow != null &&
                    this.PoolOverflow.Equals(input.PoolOverflow))
                ) && 
                (
                    this.PoolServerConfirms == input.PoolServerConfirms ||
                    (this.PoolServerConfirms != null &&
                    this.PoolServerConfirms.Equals(input.PoolServerConfirms))
                ) && 
                (
                    this.PoolSize == input.PoolSize ||
                    (this.PoolSize != null &&
                    this.PoolSize.Equals(input.PoolSize))
                ) && 
                (
                    this.PoolThreshold == input.PoolThreshold ||
                    (this.PoolThreshold != null &&
                    this.PoolThreshold.Equals(input.PoolThreshold))
                ) && 
                (
                    this.RingReadyOffnet == input.RingReadyOffnet ||
                    (this.RingReadyOffnet != null &&
                    this.RingReadyOffnet.Equals(input.RingReadyOffnet))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultCallerIdNumber != null)
                    hashCode = hashCode * 59 + this.DefaultCallerIdNumber.GetHashCode();
                if (this.DefaultHuntNonReconcilable != null)
                    hashCode = hashCode * 59 + this.DefaultHuntNonReconcilable.GetHashCode();
                if (this.EnsureValidCallerId != null)
                    hashCode = hashCode * 59 + this.EnsureValidCallerId.GetHashCode();
                if (this.HonorDiversionsByCidValidation != null)
                    hashCode = hashCode * 59 + this.HonorDiversionsByCidValidation.GetHashCode();
                if (this.PoolOverflow != null)
                    hashCode = hashCode * 59 + this.PoolOverflow.GetHashCode();
                if (this.PoolServerConfirms != null)
                    hashCode = hashCode * 59 + this.PoolServerConfirms.GetHashCode();
                if (this.PoolSize != null)
                    hashCode = hashCode * 59 + this.PoolSize.GetHashCode();
                if (this.PoolThreshold != null)
                    hashCode = hashCode * 59 + this.PoolThreshold.GetHashCode();
                if (this.RingReadyOffnet != null)
                    hashCode = hashCode * 59 + this.RingReadyOffnet.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
