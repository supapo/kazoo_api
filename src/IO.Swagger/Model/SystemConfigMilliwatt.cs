/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for milliwatt system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigMilliwatt :  IEquatable<SystemConfigMilliwatt>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigMilliwatt" /> class.
        /// </summary>
        /// <param name="echo">milliwatt echo.</param>
        /// <param name="routeWinTimeout">milliwatt route win timeout.</param>
        /// <param name="tone">milliwatt tone.</param>
        public SystemConfigMilliwatt(Object echo = default(Object), int? routeWinTimeout = default(int?), Object tone = default(Object))
        {
            this.Echo = echo;
            this.RouteWinTimeout = routeWinTimeout;
            this.Tone = tone;
        }
        
        /// <summary>
        /// milliwatt echo
        /// </summary>
        /// <value>milliwatt echo</value>
        [DataMember(Name="echo", EmitDefaultValue=false)]
        public Object Echo { get; set; }

        /// <summary>
        /// milliwatt route win timeout
        /// </summary>
        /// <value>milliwatt route win timeout</value>
        [DataMember(Name="route_win_timeout", EmitDefaultValue=false)]
        public int? RouteWinTimeout { get; set; }

        /// <summary>
        /// milliwatt tone
        /// </summary>
        /// <value>milliwatt tone</value>
        [DataMember(Name="tone", EmitDefaultValue=false)]
        public Object Tone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigMilliwatt {\n");
            sb.Append("  Echo: ").Append(Echo).Append("\n");
            sb.Append("  RouteWinTimeout: ").Append(RouteWinTimeout).Append("\n");
            sb.Append("  Tone: ").Append(Tone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigMilliwatt);
        }

        /// <summary>
        /// Returns true if SystemConfigMilliwatt instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigMilliwatt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigMilliwatt input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Echo == input.Echo ||
                    (this.Echo != null &&
                    this.Echo.Equals(input.Echo))
                ) && 
                (
                    this.RouteWinTimeout == input.RouteWinTimeout ||
                    (this.RouteWinTimeout != null &&
                    this.RouteWinTimeout.Equals(input.RouteWinTimeout))
                ) && 
                (
                    this.Tone == input.Tone ||
                    (this.Tone != null &&
                    this.Tone.Equals(input.Tone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Echo != null)
                    hashCode = hashCode * 59 + this.Echo.GetHashCode();
                if (this.RouteWinTimeout != null)
                    hashCode = hashCode * 59 + this.RouteWinTimeout.GetHashCode();
                if (this.Tone != null)
                    hashCode = hashCode * 59 + this.Tone.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
