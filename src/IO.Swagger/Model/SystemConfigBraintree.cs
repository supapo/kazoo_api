/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for braintree system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigBraintree :  IEquatable<SystemConfigBraintree>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigBraintree" /> class.
        /// </summary>
        /// <param name="clientTokenVersion">braintree client token version (default to &quot;2&quot;).</param>
        /// <param name="debug">braintree debug (default to false).</param>
        /// <param name="defaultEnvironment">braintree default environment (default to &quot;&quot;).</param>
        /// <param name="defaultMerchantId">braintree default merchant id (default to &quot;&quot;).</param>
        /// <param name="defaultPrivateKey">braintree default private key (default to &quot;&quot;).</param>
        /// <param name="defaultPublicKey">braintree default public key (default to &quot;&quot;).</param>
        /// <param name="maxAmount">braintree maximum amount.</param>
        /// <param name="minAmount">braintree minimum amount.</param>
        /// <param name="shouldProrate">braintree should prorate (default to true).</param>
        public SystemConfigBraintree(string clientTokenVersion = "2", bool? debug = false, string defaultEnvironment = "", string defaultMerchantId = "", string defaultPrivateKey = "", string defaultPublicKey = "", decimal? maxAmount = default(decimal?), decimal? minAmount = default(decimal?), bool? shouldProrate = true)
        {
            // use default value if no "clientTokenVersion" provided
            if (clientTokenVersion == null)
            {
                this.ClientTokenVersion = "2";
            }
            else
            {
                this.ClientTokenVersion = clientTokenVersion;
            }
            // use default value if no "debug" provided
            if (debug == null)
            {
                this.Debug = false;
            }
            else
            {
                this.Debug = debug;
            }
            // use default value if no "defaultEnvironment" provided
            if (defaultEnvironment == null)
            {
                this.DefaultEnvironment = "";
            }
            else
            {
                this.DefaultEnvironment = defaultEnvironment;
            }
            // use default value if no "defaultMerchantId" provided
            if (defaultMerchantId == null)
            {
                this.DefaultMerchantId = "";
            }
            else
            {
                this.DefaultMerchantId = defaultMerchantId;
            }
            // use default value if no "defaultPrivateKey" provided
            if (defaultPrivateKey == null)
            {
                this.DefaultPrivateKey = "";
            }
            else
            {
                this.DefaultPrivateKey = defaultPrivateKey;
            }
            // use default value if no "defaultPublicKey" provided
            if (defaultPublicKey == null)
            {
                this.DefaultPublicKey = "";
            }
            else
            {
                this.DefaultPublicKey = defaultPublicKey;
            }
            this.MaxAmount = maxAmount;
            this.MinAmount = minAmount;
            // use default value if no "shouldProrate" provided
            if (shouldProrate == null)
            {
                this.ShouldProrate = true;
            }
            else
            {
                this.ShouldProrate = shouldProrate;
            }
        }
        
        /// <summary>
        /// braintree client token version
        /// </summary>
        /// <value>braintree client token version</value>
        [DataMember(Name="client_token_version", EmitDefaultValue=false)]
        public string ClientTokenVersion { get; set; }

        /// <summary>
        /// braintree debug
        /// </summary>
        /// <value>braintree debug</value>
        [DataMember(Name="debug", EmitDefaultValue=false)]
        public bool? Debug { get; set; }

        /// <summary>
        /// braintree default environment
        /// </summary>
        /// <value>braintree default environment</value>
        [DataMember(Name="default_environment", EmitDefaultValue=false)]
        public string DefaultEnvironment { get; set; }

        /// <summary>
        /// braintree default merchant id
        /// </summary>
        /// <value>braintree default merchant id</value>
        [DataMember(Name="default_merchant_id", EmitDefaultValue=false)]
        public string DefaultMerchantId { get; set; }

        /// <summary>
        /// braintree default private key
        /// </summary>
        /// <value>braintree default private key</value>
        [DataMember(Name="default_private_key", EmitDefaultValue=false)]
        public string DefaultPrivateKey { get; set; }

        /// <summary>
        /// braintree default public key
        /// </summary>
        /// <value>braintree default public key</value>
        [DataMember(Name="default_public_key", EmitDefaultValue=false)]
        public string DefaultPublicKey { get; set; }

        /// <summary>
        /// braintree maximum amount
        /// </summary>
        /// <value>braintree maximum amount</value>
        [DataMember(Name="max_amount", EmitDefaultValue=false)]
        public decimal? MaxAmount { get; set; }

        /// <summary>
        /// braintree minimum amount
        /// </summary>
        /// <value>braintree minimum amount</value>
        [DataMember(Name="min_amount", EmitDefaultValue=false)]
        public decimal? MinAmount { get; set; }

        /// <summary>
        /// braintree should prorate
        /// </summary>
        /// <value>braintree should prorate</value>
        [DataMember(Name="should_prorate", EmitDefaultValue=false)]
        public bool? ShouldProrate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigBraintree {\n");
            sb.Append("  ClientTokenVersion: ").Append(ClientTokenVersion).Append("\n");
            sb.Append("  Debug: ").Append(Debug).Append("\n");
            sb.Append("  DefaultEnvironment: ").Append(DefaultEnvironment).Append("\n");
            sb.Append("  DefaultMerchantId: ").Append(DefaultMerchantId).Append("\n");
            sb.Append("  DefaultPrivateKey: ").Append(DefaultPrivateKey).Append("\n");
            sb.Append("  DefaultPublicKey: ").Append(DefaultPublicKey).Append("\n");
            sb.Append("  MaxAmount: ").Append(MaxAmount).Append("\n");
            sb.Append("  MinAmount: ").Append(MinAmount).Append("\n");
            sb.Append("  ShouldProrate: ").Append(ShouldProrate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigBraintree);
        }

        /// <summary>
        /// Returns true if SystemConfigBraintree instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigBraintree to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigBraintree input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientTokenVersion == input.ClientTokenVersion ||
                    (this.ClientTokenVersion != null &&
                    this.ClientTokenVersion.Equals(input.ClientTokenVersion))
                ) && 
                (
                    this.Debug == input.Debug ||
                    (this.Debug != null &&
                    this.Debug.Equals(input.Debug))
                ) && 
                (
                    this.DefaultEnvironment == input.DefaultEnvironment ||
                    (this.DefaultEnvironment != null &&
                    this.DefaultEnvironment.Equals(input.DefaultEnvironment))
                ) && 
                (
                    this.DefaultMerchantId == input.DefaultMerchantId ||
                    (this.DefaultMerchantId != null &&
                    this.DefaultMerchantId.Equals(input.DefaultMerchantId))
                ) && 
                (
                    this.DefaultPrivateKey == input.DefaultPrivateKey ||
                    (this.DefaultPrivateKey != null &&
                    this.DefaultPrivateKey.Equals(input.DefaultPrivateKey))
                ) && 
                (
                    this.DefaultPublicKey == input.DefaultPublicKey ||
                    (this.DefaultPublicKey != null &&
                    this.DefaultPublicKey.Equals(input.DefaultPublicKey))
                ) && 
                (
                    this.MaxAmount == input.MaxAmount ||
                    (this.MaxAmount != null &&
                    this.MaxAmount.Equals(input.MaxAmount))
                ) && 
                (
                    this.MinAmount == input.MinAmount ||
                    (this.MinAmount != null &&
                    this.MinAmount.Equals(input.MinAmount))
                ) && 
                (
                    this.ShouldProrate == input.ShouldProrate ||
                    (this.ShouldProrate != null &&
                    this.ShouldProrate.Equals(input.ShouldProrate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientTokenVersion != null)
                    hashCode = hashCode * 59 + this.ClientTokenVersion.GetHashCode();
                if (this.Debug != null)
                    hashCode = hashCode * 59 + this.Debug.GetHashCode();
                if (this.DefaultEnvironment != null)
                    hashCode = hashCode * 59 + this.DefaultEnvironment.GetHashCode();
                if (this.DefaultMerchantId != null)
                    hashCode = hashCode * 59 + this.DefaultMerchantId.GetHashCode();
                if (this.DefaultPrivateKey != null)
                    hashCode = hashCode * 59 + this.DefaultPrivateKey.GetHashCode();
                if (this.DefaultPublicKey != null)
                    hashCode = hashCode * 59 + this.DefaultPublicKey.GetHashCode();
                if (this.MaxAmount != null)
                    hashCode = hashCode * 59 + this.MaxAmount.GetHashCode();
                if (this.MinAmount != null)
                    hashCode = hashCode * 59 + this.MinAmount.GetHashCode();
                if (this.ShouldProrate != null)
                    hashCode = hashCode * 59 + this.ShouldProrate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
