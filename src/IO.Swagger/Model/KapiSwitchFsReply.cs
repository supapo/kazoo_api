/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for switch.fs_reply
    /// </summary>
    [DataContract]
    public partial class KapiSwitchFsReply :  IEquatable<KapiSwitchFsReply>, IValidatableObject
    {
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Switchevent for value: switch_event
            /// </summary>
            [EnumMember(Value = "switch_event")]
            Switchevent = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Reply for value: reply
            /// </summary>
            [EnumMember(Value = "reply")]
            Reply = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiSwitchFsReply" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiSwitchFsReply() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiSwitchFsReply" /> class.
        /// </summary>
        /// <param name="command">command (required).</param>
        /// <param name="error">error.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventData">eventData.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="freeSWITCHNode">freeSWITCHNode.</param>
        /// <param name="response">response.</param>
        /// <param name="result">result (required).</param>
        public KapiSwitchFsReply(string command = default(string), string error = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), string eventData = default(string), EventNameEnum? eventName = default(EventNameEnum?), string freeSWITCHNode = default(string), string response = default(string), string result = default(string))
        {
            // to ensure "command" is required (not null)
            if (command == null)
            {
                throw new InvalidDataException("command is a required property for KapiSwitchFsReply and cannot be null");
            }
            else
            {
                this.Command = command;
            }
            // to ensure "result" is required (not null)
            if (result == null)
            {
                throw new InvalidDataException("result is a required property for KapiSwitchFsReply and cannot be null");
            }
            else
            {
                this.Result = result;
            }
            this.Error = error;
            this.EventCategory = eventCategory;
            this.EventData = eventData;
            this.EventName = eventName;
            this.FreeSWITCHNode = freeSWITCHNode;
            this.Response = response;
        }
        
        /// <summary>
        /// Gets or Sets Command
        /// </summary>
        [DataMember(Name="Command", EmitDefaultValue=false)]
        public string Command { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name="Error", EmitDefaultValue=false)]
        public string Error { get; set; }


        /// <summary>
        /// Gets or Sets EventData
        /// </summary>
        [DataMember(Name="Event-Data", EmitDefaultValue=false)]
        public string EventData { get; set; }


        /// <summary>
        /// Gets or Sets FreeSWITCHNode
        /// </summary>
        [DataMember(Name="FreeSWITCH-Node", EmitDefaultValue=false)]
        public string FreeSWITCHNode { get; set; }

        /// <summary>
        /// Gets or Sets Response
        /// </summary>
        [DataMember(Name="Response", EmitDefaultValue=false)]
        public string Response { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name="Result", EmitDefaultValue=false)]
        public string Result { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiSwitchFsReply {\n");
            sb.Append("  Command: ").Append(Command).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventData: ").Append(EventData).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  FreeSWITCHNode: ").Append(FreeSWITCHNode).Append("\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiSwitchFsReply);
        }

        /// <summary>
        /// Returns true if KapiSwitchFsReply instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiSwitchFsReply to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiSwitchFsReply input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Command == input.Command ||
                    (this.Command != null &&
                    this.Command.Equals(input.Command))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventData == input.EventData ||
                    (this.EventData != null &&
                    this.EventData.Equals(input.EventData))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.FreeSWITCHNode == input.FreeSWITCHNode ||
                    (this.FreeSWITCHNode != null &&
                    this.FreeSWITCHNode.Equals(input.FreeSWITCHNode))
                ) && 
                (
                    this.Response == input.Response ||
                    (this.Response != null &&
                    this.Response.Equals(input.Response))
                ) && 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Command != null)
                    hashCode = hashCode * 59 + this.Command.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventData != null)
                    hashCode = hashCode * 59 + this.EventData.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.FreeSWITCHNode != null)
                    hashCode = hashCode * 59 + this.FreeSWITCHNode.GetHashCode();
                if (this.Response != null)
                    hashCode = hashCode * 59 + this.Response.GetHashCode();
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
