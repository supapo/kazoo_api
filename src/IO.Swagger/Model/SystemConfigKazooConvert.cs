/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for kazoo_convert system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigKazooConvert :  IEquatable<SystemConfigKazooConvert>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigKazooConvert" /> class.
        /// </summary>
        /// <param name="fax">fax.</param>
        /// <param name="faxConverter">Module to use for fax related file conversions (default to &quot;fax_converter&quot;).</param>
        /// <param name="fileCachePath">The default working directory to use when converting files (default to &quot;/tmp/&quot;).</param>
        public SystemConfigKazooConvert(SystemConfigKazooConvertFax fax = default(SystemConfigKazooConvertFax), string faxConverter = "fax_converter", string fileCachePath = "/tmp/")
        {
            this.Fax = fax;
            // use default value if no "faxConverter" provided
            if (faxConverter == null)
            {
                this.FaxConverter = "fax_converter";
            }
            else
            {
                this.FaxConverter = faxConverter;
            }
            // use default value if no "fileCachePath" provided
            if (fileCachePath == null)
            {
                this.FileCachePath = "/tmp/";
            }
            else
            {
                this.FileCachePath = fileCachePath;
            }
        }
        
        /// <summary>
        /// Gets or Sets Fax
        /// </summary>
        [DataMember(Name="fax", EmitDefaultValue=false)]
        public SystemConfigKazooConvertFax Fax { get; set; }

        /// <summary>
        /// Module to use for fax related file conversions
        /// </summary>
        /// <value>Module to use for fax related file conversions</value>
        [DataMember(Name="fax_converter", EmitDefaultValue=false)]
        public string FaxConverter { get; set; }

        /// <summary>
        /// The default working directory to use when converting files
        /// </summary>
        /// <value>The default working directory to use when converting files</value>
        [DataMember(Name="file_cache_path", EmitDefaultValue=false)]
        public string FileCachePath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigKazooConvert {\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  FaxConverter: ").Append(FaxConverter).Append("\n");
            sb.Append("  FileCachePath: ").Append(FileCachePath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigKazooConvert);
        }

        /// <summary>
        /// Returns true if SystemConfigKazooConvert instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigKazooConvert to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigKazooConvert input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Fax == input.Fax ||
                    (this.Fax != null &&
                    this.Fax.Equals(input.Fax))
                ) && 
                (
                    this.FaxConverter == input.FaxConverter ||
                    (this.FaxConverter != null &&
                    this.FaxConverter.Equals(input.FaxConverter))
                ) && 
                (
                    this.FileCachePath == input.FileCachePath ||
                    (this.FileCachePath != null &&
                    this.FileCachePath.Equals(input.FileCachePath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Fax != null)
                    hashCode = hashCode * 59 + this.Fax.GetHashCode();
                if (this.FaxConverter != null)
                    hashCode = hashCode * 59 + this.FaxConverter.GetHashCode();
                if (this.FileCachePath != null)
                    hashCode = hashCode * 59 + this.FileCachePath.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
