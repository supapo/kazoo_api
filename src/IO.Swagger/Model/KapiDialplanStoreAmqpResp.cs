/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for dialplan.store_amqp_resp
    /// </summary>
    [DataContract]
    public partial class KapiDialplanStoreAmqpResp :  IEquatable<KapiDialplanStoreAmqpResp>, IValidatableObject
    {
        /// <summary>
        /// Defines ApplicationName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApplicationNameEnum
        {
            
            /// <summary>
            /// Enum Store for value: store
            /// </summary>
            [EnumMember(Value = "store")]
            Store = 1
        }

        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name="Application-Name", EmitDefaultValue=false)]
        public ApplicationNameEnum ApplicationName { get; set; }
        /// <summary>
        /// Defines MediaTransferMethod
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MediaTransferMethodEnum
        {
            
            /// <summary>
            /// Enum Stream for value: stream
            /// </summary>
            [EnumMember(Value = "stream")]
            Stream = 1
        }

        /// <summary>
        /// Gets or Sets MediaTransferMethod
        /// </summary>
        [DataMember(Name="Media-Transfer-Method", EmitDefaultValue=false)]
        public MediaTransferMethodEnum MediaTransferMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanStoreAmqpResp" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiDialplanStoreAmqpResp() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanStoreAmqpResp" /> class.
        /// </summary>
        /// <param name="applicationName">applicationName (required).</param>
        /// <param name="callID">callID (required).</param>
        /// <param name="mediaContent">mediaContent (required).</param>
        /// <param name="mediaName">mediaName (required).</param>
        /// <param name="mediaSequenceID">mediaSequenceID.</param>
        /// <param name="mediaTransferMethod">mediaTransferMethod (required).</param>
        public KapiDialplanStoreAmqpResp(ApplicationNameEnum applicationName = default(ApplicationNameEnum), string callID = default(string), string mediaContent = default(string), string mediaName = default(string), string mediaSequenceID = default(string), MediaTransferMethodEnum mediaTransferMethod = default(MediaTransferMethodEnum))
        {
            // to ensure "applicationName" is required (not null)
            if (applicationName == null)
            {
                throw new InvalidDataException("applicationName is a required property for KapiDialplanStoreAmqpResp and cannot be null");
            }
            else
            {
                this.ApplicationName = applicationName;
            }
            // to ensure "callID" is required (not null)
            if (callID == null)
            {
                throw new InvalidDataException("callID is a required property for KapiDialplanStoreAmqpResp and cannot be null");
            }
            else
            {
                this.CallID = callID;
            }
            // to ensure "mediaContent" is required (not null)
            if (mediaContent == null)
            {
                throw new InvalidDataException("mediaContent is a required property for KapiDialplanStoreAmqpResp and cannot be null");
            }
            else
            {
                this.MediaContent = mediaContent;
            }
            // to ensure "mediaName" is required (not null)
            if (mediaName == null)
            {
                throw new InvalidDataException("mediaName is a required property for KapiDialplanStoreAmqpResp and cannot be null");
            }
            else
            {
                this.MediaName = mediaName;
            }
            // to ensure "mediaTransferMethod" is required (not null)
            if (mediaTransferMethod == null)
            {
                throw new InvalidDataException("mediaTransferMethod is a required property for KapiDialplanStoreAmqpResp and cannot be null");
            }
            else
            {
                this.MediaTransferMethod = mediaTransferMethod;
            }
            this.MediaSequenceID = mediaSequenceID;
        }
        

        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }

        /// <summary>
        /// Gets or Sets MediaContent
        /// </summary>
        [DataMember(Name="Media-Content", EmitDefaultValue=false)]
        public string MediaContent { get; set; }

        /// <summary>
        /// Gets or Sets MediaName
        /// </summary>
        [DataMember(Name="Media-Name", EmitDefaultValue=false)]
        public string MediaName { get; set; }

        /// <summary>
        /// Gets or Sets MediaSequenceID
        /// </summary>
        [DataMember(Name="Media-Sequence-ID", EmitDefaultValue=false)]
        public string MediaSequenceID { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiDialplanStoreAmqpResp {\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  MediaContent: ").Append(MediaContent).Append("\n");
            sb.Append("  MediaName: ").Append(MediaName).Append("\n");
            sb.Append("  MediaSequenceID: ").Append(MediaSequenceID).Append("\n");
            sb.Append("  MediaTransferMethod: ").Append(MediaTransferMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiDialplanStoreAmqpResp);
        }

        /// <summary>
        /// Returns true if KapiDialplanStoreAmqpResp instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiDialplanStoreAmqpResp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiDialplanStoreAmqpResp input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.MediaContent == input.MediaContent ||
                    (this.MediaContent != null &&
                    this.MediaContent.Equals(input.MediaContent))
                ) && 
                (
                    this.MediaName == input.MediaName ||
                    (this.MediaName != null &&
                    this.MediaName.Equals(input.MediaName))
                ) && 
                (
                    this.MediaSequenceID == input.MediaSequenceID ||
                    (this.MediaSequenceID != null &&
                    this.MediaSequenceID.Equals(input.MediaSequenceID))
                ) && 
                (
                    this.MediaTransferMethod == input.MediaTransferMethod ||
                    (this.MediaTransferMethod != null &&
                    this.MediaTransferMethod.Equals(input.MediaTransferMethod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationName != null)
                    hashCode = hashCode * 59 + this.ApplicationName.GetHashCode();
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.MediaContent != null)
                    hashCode = hashCode * 59 + this.MediaContent.GetHashCode();
                if (this.MediaName != null)
                    hashCode = hashCode * 59 + this.MediaName.GetHashCode();
                if (this.MediaSequenceID != null)
                    hashCode = hashCode * 59 + this.MediaSequenceID.GetHashCode();
                if (this.MediaTransferMethod != null)
                    hashCode = hashCode * 59 + this.MediaTransferMethod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
