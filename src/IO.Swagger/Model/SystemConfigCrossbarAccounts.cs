/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for crossbar.accounts system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigCrossbarAccounts :  IEquatable<SystemConfigCrossbarAccounts>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigCrossbarAccounts" /> class.
        /// </summary>
        /// <param name="accountRealmSuffix">crossbar.accounts account realm suffix (default to &quot;sip.2600hz.com&quot;).</param>
        /// <param name="allowMove">crossbar.accounts allow move (default to &quot;superduper_admin&quot;).</param>
        /// <param name="allowSiblingListing">crossbar.accounts allow sibling listing (default to true).</param>
        /// <param name="defaultParent">crossbar.accounts default parent (default to &quot;&quot;).</param>
        /// <param name="ensureUniqueName">crossbar.accounts ensure unique name (default to true).</param>
        /// <param name="exposeApiKey">crossbar.accounts expose api key (default to false).</param>
        /// <param name="newAccountNotifyDelayS">crossbar.accounts new account notify delay in seconds.</param>
        /// <param name="randomRealmStrength">crossbar.accounts random realm strength.</param>
        /// <param name="trialTime">crossbar.accounts trial time.</param>
        public SystemConfigCrossbarAccounts(string accountRealmSuffix = "sip.2600hz.com", string allowMove = "superduper_admin", bool? allowSiblingListing = true, string defaultParent = "", bool? ensureUniqueName = true, bool? exposeApiKey = false, int? newAccountNotifyDelayS = default(int?), int? randomRealmStrength = default(int?), int? trialTime = default(int?))
        {
            // use default value if no "accountRealmSuffix" provided
            if (accountRealmSuffix == null)
            {
                this.AccountRealmSuffix = "sip.2600hz.com";
            }
            else
            {
                this.AccountRealmSuffix = accountRealmSuffix;
            }
            // use default value if no "allowMove" provided
            if (allowMove == null)
            {
                this.AllowMove = "superduper_admin";
            }
            else
            {
                this.AllowMove = allowMove;
            }
            // use default value if no "allowSiblingListing" provided
            if (allowSiblingListing == null)
            {
                this.AllowSiblingListing = true;
            }
            else
            {
                this.AllowSiblingListing = allowSiblingListing;
            }
            // use default value if no "defaultParent" provided
            if (defaultParent == null)
            {
                this.DefaultParent = "";
            }
            else
            {
                this.DefaultParent = defaultParent;
            }
            // use default value if no "ensureUniqueName" provided
            if (ensureUniqueName == null)
            {
                this.EnsureUniqueName = true;
            }
            else
            {
                this.EnsureUniqueName = ensureUniqueName;
            }
            // use default value if no "exposeApiKey" provided
            if (exposeApiKey == null)
            {
                this.ExposeApiKey = false;
            }
            else
            {
                this.ExposeApiKey = exposeApiKey;
            }
            this.NewAccountNotifyDelayS = newAccountNotifyDelayS;
            this.RandomRealmStrength = randomRealmStrength;
            this.TrialTime = trialTime;
        }
        
        /// <summary>
        /// crossbar.accounts account realm suffix
        /// </summary>
        /// <value>crossbar.accounts account realm suffix</value>
        [DataMember(Name="account_realm_suffix", EmitDefaultValue=false)]
        public string AccountRealmSuffix { get; set; }

        /// <summary>
        /// crossbar.accounts allow move
        /// </summary>
        /// <value>crossbar.accounts allow move</value>
        [DataMember(Name="allow_move", EmitDefaultValue=false)]
        public string AllowMove { get; set; }

        /// <summary>
        /// crossbar.accounts allow sibling listing
        /// </summary>
        /// <value>crossbar.accounts allow sibling listing</value>
        [DataMember(Name="allow_sibling_listing", EmitDefaultValue=false)]
        public bool? AllowSiblingListing { get; set; }

        /// <summary>
        /// crossbar.accounts default parent
        /// </summary>
        /// <value>crossbar.accounts default parent</value>
        [DataMember(Name="default_parent", EmitDefaultValue=false)]
        public string DefaultParent { get; set; }

        /// <summary>
        /// crossbar.accounts ensure unique name
        /// </summary>
        /// <value>crossbar.accounts ensure unique name</value>
        [DataMember(Name="ensure_unique_name", EmitDefaultValue=false)]
        public bool? EnsureUniqueName { get; set; }

        /// <summary>
        /// crossbar.accounts expose api key
        /// </summary>
        /// <value>crossbar.accounts expose api key</value>
        [DataMember(Name="expose_api_key", EmitDefaultValue=false)]
        public bool? ExposeApiKey { get; set; }

        /// <summary>
        /// crossbar.accounts new account notify delay in seconds
        /// </summary>
        /// <value>crossbar.accounts new account notify delay in seconds</value>
        [DataMember(Name="new_account_notify_delay_s", EmitDefaultValue=false)]
        public int? NewAccountNotifyDelayS { get; set; }

        /// <summary>
        /// crossbar.accounts random realm strength
        /// </summary>
        /// <value>crossbar.accounts random realm strength</value>
        [DataMember(Name="random_realm_strength", EmitDefaultValue=false)]
        public int? RandomRealmStrength { get; set; }

        /// <summary>
        /// crossbar.accounts trial time
        /// </summary>
        /// <value>crossbar.accounts trial time</value>
        [DataMember(Name="trial_time", EmitDefaultValue=false)]
        public int? TrialTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigCrossbarAccounts {\n");
            sb.Append("  AccountRealmSuffix: ").Append(AccountRealmSuffix).Append("\n");
            sb.Append("  AllowMove: ").Append(AllowMove).Append("\n");
            sb.Append("  AllowSiblingListing: ").Append(AllowSiblingListing).Append("\n");
            sb.Append("  DefaultParent: ").Append(DefaultParent).Append("\n");
            sb.Append("  EnsureUniqueName: ").Append(EnsureUniqueName).Append("\n");
            sb.Append("  ExposeApiKey: ").Append(ExposeApiKey).Append("\n");
            sb.Append("  NewAccountNotifyDelayS: ").Append(NewAccountNotifyDelayS).Append("\n");
            sb.Append("  RandomRealmStrength: ").Append(RandomRealmStrength).Append("\n");
            sb.Append("  TrialTime: ").Append(TrialTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigCrossbarAccounts);
        }

        /// <summary>
        /// Returns true if SystemConfigCrossbarAccounts instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigCrossbarAccounts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigCrossbarAccounts input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountRealmSuffix == input.AccountRealmSuffix ||
                    (this.AccountRealmSuffix != null &&
                    this.AccountRealmSuffix.Equals(input.AccountRealmSuffix))
                ) && 
                (
                    this.AllowMove == input.AllowMove ||
                    (this.AllowMove != null &&
                    this.AllowMove.Equals(input.AllowMove))
                ) && 
                (
                    this.AllowSiblingListing == input.AllowSiblingListing ||
                    (this.AllowSiblingListing != null &&
                    this.AllowSiblingListing.Equals(input.AllowSiblingListing))
                ) && 
                (
                    this.DefaultParent == input.DefaultParent ||
                    (this.DefaultParent != null &&
                    this.DefaultParent.Equals(input.DefaultParent))
                ) && 
                (
                    this.EnsureUniqueName == input.EnsureUniqueName ||
                    (this.EnsureUniqueName != null &&
                    this.EnsureUniqueName.Equals(input.EnsureUniqueName))
                ) && 
                (
                    this.ExposeApiKey == input.ExposeApiKey ||
                    (this.ExposeApiKey != null &&
                    this.ExposeApiKey.Equals(input.ExposeApiKey))
                ) && 
                (
                    this.NewAccountNotifyDelayS == input.NewAccountNotifyDelayS ||
                    (this.NewAccountNotifyDelayS != null &&
                    this.NewAccountNotifyDelayS.Equals(input.NewAccountNotifyDelayS))
                ) && 
                (
                    this.RandomRealmStrength == input.RandomRealmStrength ||
                    (this.RandomRealmStrength != null &&
                    this.RandomRealmStrength.Equals(input.RandomRealmStrength))
                ) && 
                (
                    this.TrialTime == input.TrialTime ||
                    (this.TrialTime != null &&
                    this.TrialTime.Equals(input.TrialTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountRealmSuffix != null)
                    hashCode = hashCode * 59 + this.AccountRealmSuffix.GetHashCode();
                if (this.AllowMove != null)
                    hashCode = hashCode * 59 + this.AllowMove.GetHashCode();
                if (this.AllowSiblingListing != null)
                    hashCode = hashCode * 59 + this.AllowSiblingListing.GetHashCode();
                if (this.DefaultParent != null)
                    hashCode = hashCode * 59 + this.DefaultParent.GetHashCode();
                if (this.EnsureUniqueName != null)
                    hashCode = hashCode * 59 + this.EnsureUniqueName.GetHashCode();
                if (this.ExposeApiKey != null)
                    hashCode = hashCode * 59 + this.ExposeApiKey.GetHashCode();
                if (this.NewAccountNotifyDelayS != null)
                    hashCode = hashCode * 59 + this.NewAccountNotifyDelayS.GetHashCode();
                if (this.RandomRealmStrength != null)
                    hashCode = hashCode * 59 + this.RandomRealmStrength.GetHashCode();
                if (this.TrialTime != null)
                    hashCode = hashCode * 59 + this.TrialTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
