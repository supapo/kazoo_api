/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Move a call from one device to another
    /// </summary>
    [DataContract]
    public partial class MetaflowsMove :  IEquatable<MetaflowsMove>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MetaflowsMove" /> class.
        /// </summary>
        /// <param name="autoAnswer">Whether to auto-answer the new leg (default to false).</param>
        /// <param name="canCallSelf">Can intercept devices of the same targeted user (default to true).</param>
        /// <param name="deviceId">Move the call to a specific device.</param>
        /// <param name="dialStrategy">How to ring the endpoints, if multiple (default to &quot;simultaneous&quot;).</param>
        /// <param name="ownerId">User ID to use for finding endpoints.</param>
        public MetaflowsMove(bool? autoAnswer = false, bool? canCallSelf = true, string deviceId = default(string), string dialStrategy = "simultaneous", string ownerId = default(string))
        {
            // use default value if no "autoAnswer" provided
            if (autoAnswer == null)
            {
                this.AutoAnswer = false;
            }
            else
            {
                this.AutoAnswer = autoAnswer;
            }
            // use default value if no "canCallSelf" provided
            if (canCallSelf == null)
            {
                this.CanCallSelf = true;
            }
            else
            {
                this.CanCallSelf = canCallSelf;
            }
            this.DeviceId = deviceId;
            // use default value if no "dialStrategy" provided
            if (dialStrategy == null)
            {
                this.DialStrategy = "simultaneous";
            }
            else
            {
                this.DialStrategy = dialStrategy;
            }
            this.OwnerId = ownerId;
        }
        
        /// <summary>
        /// Whether to auto-answer the new leg
        /// </summary>
        /// <value>Whether to auto-answer the new leg</value>
        [DataMember(Name="auto_answer", EmitDefaultValue=false)]
        public bool? AutoAnswer { get; set; }

        /// <summary>
        /// Can intercept devices of the same targeted user
        /// </summary>
        /// <value>Can intercept devices of the same targeted user</value>
        [DataMember(Name="can_call_self", EmitDefaultValue=false)]
        public bool? CanCallSelf { get; set; }

        /// <summary>
        /// Move the call to a specific device
        /// </summary>
        /// <value>Move the call to a specific device</value>
        [DataMember(Name="device_id", EmitDefaultValue=false)]
        public string DeviceId { get; set; }

        /// <summary>
        /// How to ring the endpoints, if multiple
        /// </summary>
        /// <value>How to ring the endpoints, if multiple</value>
        [DataMember(Name="dial_strategy", EmitDefaultValue=false)]
        public string DialStrategy { get; set; }

        /// <summary>
        /// User ID to use for finding endpoints
        /// </summary>
        /// <value>User ID to use for finding endpoints</value>
        [DataMember(Name="owner_id", EmitDefaultValue=false)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MetaflowsMove {\n");
            sb.Append("  AutoAnswer: ").Append(AutoAnswer).Append("\n");
            sb.Append("  CanCallSelf: ").Append(CanCallSelf).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  DialStrategy: ").Append(DialStrategy).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MetaflowsMove);
        }

        /// <summary>
        /// Returns true if MetaflowsMove instances are equal
        /// </summary>
        /// <param name="input">Instance of MetaflowsMove to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetaflowsMove input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AutoAnswer == input.AutoAnswer ||
                    (this.AutoAnswer != null &&
                    this.AutoAnswer.Equals(input.AutoAnswer))
                ) && 
                (
                    this.CanCallSelf == input.CanCallSelf ||
                    (this.CanCallSelf != null &&
                    this.CanCallSelf.Equals(input.CanCallSelf))
                ) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                ) && 
                (
                    this.DialStrategy == input.DialStrategy ||
                    (this.DialStrategy != null &&
                    this.DialStrategy.Equals(input.DialStrategy))
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AutoAnswer != null)
                    hashCode = hashCode * 59 + this.AutoAnswer.GetHashCode();
                if (this.CanCallSelf != null)
                    hashCode = hashCode * 59 + this.CanCallSelf.GetHashCode();
                if (this.DeviceId != null)
                    hashCode = hashCode * 59 + this.DeviceId.GetHashCode();
                if (this.DialStrategy != null)
                    hashCode = hashCode * 59 + this.DialStrategy.GetHashCode();
                if (this.OwnerId != null)
                    hashCode = hashCode * 59 + this.OwnerId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
