/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for presence.mwi_unsolicited_update
    /// </summary>
    [DataContract]
    public partial class KapiPresenceMwiUnsolicitedUpdate :  IEquatable<KapiPresenceMwiUnsolicitedUpdate>, IValidatableObject
    {
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Presence for value: presence
            /// </summary>
            [EnumMember(Value = "presence")]
            Presence = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Mwiunsolicitedupdate for value: mwi_unsolicited_update
            /// </summary>
            [EnumMember(Value = "mwi_unsolicited_update")]
            Mwiunsolicitedupdate = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiPresenceMwiUnsolicitedUpdate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiPresenceMwiUnsolicitedUpdate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiPresenceMwiUnsolicitedUpdate" /> class.
        /// </summary>
        /// <param name="callID">callID.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="expires">expires.</param>
        /// <param name="extendedPresenceID">extendedPresenceID.</param>
        /// <param name="from">from.</param>
        /// <param name="fromRealm">fromRealm.</param>
        /// <param name="fromUser">fromUser.</param>
        /// <param name="messageAccount">messageAccount.</param>
        /// <param name="messagesNew">messagesNew (required).</param>
        /// <param name="messagesSaved">messagesSaved (required).</param>
        /// <param name="messagesUrgent">messagesUrgent.</param>
        /// <param name="messagesUrgentSaved">messagesUrgentSaved.</param>
        /// <param name="messagesWaiting">messagesWaiting.</param>
        /// <param name="presenceID">presenceID.</param>
        /// <param name="to">to (required).</param>
        /// <param name="toRealm">toRealm.</param>
        /// <param name="toUser">toUser.</param>
        public KapiPresenceMwiUnsolicitedUpdate(string callID = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string expires = default(string), string extendedPresenceID = default(string), string from = default(string), string fromRealm = default(string), string fromUser = default(string), string messageAccount = default(string), int? messagesNew = default(int?), int? messagesSaved = default(int?), int? messagesUrgent = default(int?), int? messagesUrgentSaved = default(int?), string messagesWaiting = default(string), string presenceID = default(string), string to = default(string), string toRealm = default(string), string toUser = default(string))
        {
            // to ensure "messagesNew" is required (not null)
            if (messagesNew == null)
            {
                throw new InvalidDataException("messagesNew is a required property for KapiPresenceMwiUnsolicitedUpdate and cannot be null");
            }
            else
            {
                this.MessagesNew = messagesNew;
            }
            // to ensure "messagesSaved" is required (not null)
            if (messagesSaved == null)
            {
                throw new InvalidDataException("messagesSaved is a required property for KapiPresenceMwiUnsolicitedUpdate and cannot be null");
            }
            else
            {
                this.MessagesSaved = messagesSaved;
            }
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new InvalidDataException("to is a required property for KapiPresenceMwiUnsolicitedUpdate and cannot be null");
            }
            else
            {
                this.To = to;
            }
            this.CallID = callID;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.Expires = expires;
            this.ExtendedPresenceID = extendedPresenceID;
            this.From = from;
            this.FromRealm = fromRealm;
            this.FromUser = fromUser;
            this.MessageAccount = messageAccount;
            this.MessagesUrgent = messagesUrgent;
            this.MessagesUrgentSaved = messagesUrgentSaved;
            this.MessagesWaiting = messagesWaiting;
            this.PresenceID = presenceID;
            this.ToRealm = toRealm;
            this.ToUser = toUser;
        }
        
        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }



        /// <summary>
        /// Gets or Sets Expires
        /// </summary>
        [DataMember(Name="Expires", EmitDefaultValue=false)]
        public string Expires { get; set; }

        /// <summary>
        /// Gets or Sets ExtendedPresenceID
        /// </summary>
        [DataMember(Name="Extended-Presence-ID", EmitDefaultValue=false)]
        public string ExtendedPresenceID { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="From", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// Gets or Sets FromRealm
        /// </summary>
        [DataMember(Name="From-Realm", EmitDefaultValue=false)]
        public string FromRealm { get; set; }

        /// <summary>
        /// Gets or Sets FromUser
        /// </summary>
        [DataMember(Name="From-User", EmitDefaultValue=false)]
        public string FromUser { get; set; }

        /// <summary>
        /// Gets or Sets MessageAccount
        /// </summary>
        [DataMember(Name="Message-Account", EmitDefaultValue=false)]
        public string MessageAccount { get; set; }

        /// <summary>
        /// Gets or Sets MessagesNew
        /// </summary>
        [DataMember(Name="Messages-New", EmitDefaultValue=false)]
        public int? MessagesNew { get; set; }

        /// <summary>
        /// Gets or Sets MessagesSaved
        /// </summary>
        [DataMember(Name="Messages-Saved", EmitDefaultValue=false)]
        public int? MessagesSaved { get; set; }

        /// <summary>
        /// Gets or Sets MessagesUrgent
        /// </summary>
        [DataMember(Name="Messages-Urgent", EmitDefaultValue=false)]
        public int? MessagesUrgent { get; set; }

        /// <summary>
        /// Gets or Sets MessagesUrgentSaved
        /// </summary>
        [DataMember(Name="Messages-Urgent-Saved", EmitDefaultValue=false)]
        public int? MessagesUrgentSaved { get; set; }

        /// <summary>
        /// Gets or Sets MessagesWaiting
        /// </summary>
        [DataMember(Name="Messages-Waiting", EmitDefaultValue=false)]
        public string MessagesWaiting { get; set; }

        /// <summary>
        /// Gets or Sets PresenceID
        /// </summary>
        [DataMember(Name="Presence-ID", EmitDefaultValue=false)]
        public string PresenceID { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="To", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// Gets or Sets ToRealm
        /// </summary>
        [DataMember(Name="To-Realm", EmitDefaultValue=false)]
        public string ToRealm { get; set; }

        /// <summary>
        /// Gets or Sets ToUser
        /// </summary>
        [DataMember(Name="To-User", EmitDefaultValue=false)]
        public string ToUser { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiPresenceMwiUnsolicitedUpdate {\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("  ExtendedPresenceID: ").Append(ExtendedPresenceID).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  FromRealm: ").Append(FromRealm).Append("\n");
            sb.Append("  FromUser: ").Append(FromUser).Append("\n");
            sb.Append("  MessageAccount: ").Append(MessageAccount).Append("\n");
            sb.Append("  MessagesNew: ").Append(MessagesNew).Append("\n");
            sb.Append("  MessagesSaved: ").Append(MessagesSaved).Append("\n");
            sb.Append("  MessagesUrgent: ").Append(MessagesUrgent).Append("\n");
            sb.Append("  MessagesUrgentSaved: ").Append(MessagesUrgentSaved).Append("\n");
            sb.Append("  MessagesWaiting: ").Append(MessagesWaiting).Append("\n");
            sb.Append("  PresenceID: ").Append(PresenceID).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  ToRealm: ").Append(ToRealm).Append("\n");
            sb.Append("  ToUser: ").Append(ToUser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiPresenceMwiUnsolicitedUpdate);
        }

        /// <summary>
        /// Returns true if KapiPresenceMwiUnsolicitedUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiPresenceMwiUnsolicitedUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiPresenceMwiUnsolicitedUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.Expires == input.Expires ||
                    (this.Expires != null &&
                    this.Expires.Equals(input.Expires))
                ) && 
                (
                    this.ExtendedPresenceID == input.ExtendedPresenceID ||
                    (this.ExtendedPresenceID != null &&
                    this.ExtendedPresenceID.Equals(input.ExtendedPresenceID))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.FromRealm == input.FromRealm ||
                    (this.FromRealm != null &&
                    this.FromRealm.Equals(input.FromRealm))
                ) && 
                (
                    this.FromUser == input.FromUser ||
                    (this.FromUser != null &&
                    this.FromUser.Equals(input.FromUser))
                ) && 
                (
                    this.MessageAccount == input.MessageAccount ||
                    (this.MessageAccount != null &&
                    this.MessageAccount.Equals(input.MessageAccount))
                ) && 
                (
                    this.MessagesNew == input.MessagesNew ||
                    (this.MessagesNew != null &&
                    this.MessagesNew.Equals(input.MessagesNew))
                ) && 
                (
                    this.MessagesSaved == input.MessagesSaved ||
                    (this.MessagesSaved != null &&
                    this.MessagesSaved.Equals(input.MessagesSaved))
                ) && 
                (
                    this.MessagesUrgent == input.MessagesUrgent ||
                    (this.MessagesUrgent != null &&
                    this.MessagesUrgent.Equals(input.MessagesUrgent))
                ) && 
                (
                    this.MessagesUrgentSaved == input.MessagesUrgentSaved ||
                    (this.MessagesUrgentSaved != null &&
                    this.MessagesUrgentSaved.Equals(input.MessagesUrgentSaved))
                ) && 
                (
                    this.MessagesWaiting == input.MessagesWaiting ||
                    (this.MessagesWaiting != null &&
                    this.MessagesWaiting.Equals(input.MessagesWaiting))
                ) && 
                (
                    this.PresenceID == input.PresenceID ||
                    (this.PresenceID != null &&
                    this.PresenceID.Equals(input.PresenceID))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.ToRealm == input.ToRealm ||
                    (this.ToRealm != null &&
                    this.ToRealm.Equals(input.ToRealm))
                ) && 
                (
                    this.ToUser == input.ToUser ||
                    (this.ToUser != null &&
                    this.ToUser.Equals(input.ToUser))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.Expires != null)
                    hashCode = hashCode * 59 + this.Expires.GetHashCode();
                if (this.ExtendedPresenceID != null)
                    hashCode = hashCode * 59 + this.ExtendedPresenceID.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.FromRealm != null)
                    hashCode = hashCode * 59 + this.FromRealm.GetHashCode();
                if (this.FromUser != null)
                    hashCode = hashCode * 59 + this.FromUser.GetHashCode();
                if (this.MessageAccount != null)
                    hashCode = hashCode * 59 + this.MessageAccount.GetHashCode();
                if (this.MessagesNew != null)
                    hashCode = hashCode * 59 + this.MessagesNew.GetHashCode();
                if (this.MessagesSaved != null)
                    hashCode = hashCode * 59 + this.MessagesSaved.GetHashCode();
                if (this.MessagesUrgent != null)
                    hashCode = hashCode * 59 + this.MessagesUrgent.GetHashCode();
                if (this.MessagesUrgentSaved != null)
                    hashCode = hashCode * 59 + this.MessagesUrgentSaved.GetHashCode();
                if (this.MessagesWaiting != null)
                    hashCode = hashCode * 59 + this.MessagesWaiting.GetHashCode();
                if (this.PresenceID != null)
                    hashCode = hashCode * 59 + this.PresenceID.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.ToRealm != null)
                    hashCode = hashCode * 59 + this.ToRealm.GetHashCode();
                if (this.ToUser != null)
                    hashCode = hashCode * 59 + this.ToUser.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
