/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for crossbar.onboard system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigCrossbarOnboard :  IEquatable<SystemConfigCrossbarOnboard>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigCrossbarOnboard" /> class.
        /// </summary>
        /// <param name="defaultCallflowStartExten">crossbar.onboard default callflow start exten.</param>
        /// <param name="defaultExtensionCallflow">crossbar.onboard default extension callflow (default to &quot;{&quot;data&quot;: { &quot;id&quot;: &quot;~s&quot; }, &quot;module&quot;: &quot;user&quot;, &quot;children&quot;: { &quot;_&quot;: { &quot;data&quot;: { &quot;id&quot;: &quot;~s&quot; }, &quot;module&quot;: &quot;voicemail&quot;, &quot;children&quot;: {}}}}&quot;).</param>
        /// <param name="defaultVmStartExten">crossbar.onboard default vm start exten.</param>
        /// <param name="devicePwdStrength">crossbar.onboard device pwd strength.</param>
        /// <param name="deviceUsernameStrength">crossbar.onboard device username strength.</param>
        public SystemConfigCrossbarOnboard(int? defaultCallflowStartExten = default(int?), string defaultExtensionCallflow = "{"data": { "id": "~s" }, "module": "user", "children": { "_": { "data": { "id": "~s" }, "module": "voicemail", "children": {}}}}", int? defaultVmStartExten = default(int?), int? devicePwdStrength = default(int?), int? deviceUsernameStrength = default(int?))
        {
            this.DefaultCallflowStartExten = defaultCallflowStartExten;
            // use default value if no "defaultExtensionCallflow" provided
            if (defaultExtensionCallflow == null)
            {
                this.DefaultExtensionCallflow = "{"data": { "id": "~s" }, "module": "user", "children": { "_": { "data": { "id": "~s" }, "module": "voicemail", "children": {}}}}";
            }
            else
            {
                this.DefaultExtensionCallflow = defaultExtensionCallflow;
            }
            this.DefaultVmStartExten = defaultVmStartExten;
            this.DevicePwdStrength = devicePwdStrength;
            this.DeviceUsernameStrength = deviceUsernameStrength;
        }
        
        /// <summary>
        /// crossbar.onboard default callflow start exten
        /// </summary>
        /// <value>crossbar.onboard default callflow start exten</value>
        [DataMember(Name="default_callflow_start_exten", EmitDefaultValue=false)]
        public int? DefaultCallflowStartExten { get; set; }

        /// <summary>
        /// crossbar.onboard default extension callflow
        /// </summary>
        /// <value>crossbar.onboard default extension callflow</value>
        [DataMember(Name="default_extension_callflow", EmitDefaultValue=false)]
        public string DefaultExtensionCallflow { get; set; }

        /// <summary>
        /// crossbar.onboard default vm start exten
        /// </summary>
        /// <value>crossbar.onboard default vm start exten</value>
        [DataMember(Name="default_vm_start_exten", EmitDefaultValue=false)]
        public int? DefaultVmStartExten { get; set; }

        /// <summary>
        /// crossbar.onboard device pwd strength
        /// </summary>
        /// <value>crossbar.onboard device pwd strength</value>
        [DataMember(Name="device_pwd_strength", EmitDefaultValue=false)]
        public int? DevicePwdStrength { get; set; }

        /// <summary>
        /// crossbar.onboard device username strength
        /// </summary>
        /// <value>crossbar.onboard device username strength</value>
        [DataMember(Name="device_username_strength", EmitDefaultValue=false)]
        public int? DeviceUsernameStrength { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigCrossbarOnboard {\n");
            sb.Append("  DefaultCallflowStartExten: ").Append(DefaultCallflowStartExten).Append("\n");
            sb.Append("  DefaultExtensionCallflow: ").Append(DefaultExtensionCallflow).Append("\n");
            sb.Append("  DefaultVmStartExten: ").Append(DefaultVmStartExten).Append("\n");
            sb.Append("  DevicePwdStrength: ").Append(DevicePwdStrength).Append("\n");
            sb.Append("  DeviceUsernameStrength: ").Append(DeviceUsernameStrength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigCrossbarOnboard);
        }

        /// <summary>
        /// Returns true if SystemConfigCrossbarOnboard instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigCrossbarOnboard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigCrossbarOnboard input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefaultCallflowStartExten == input.DefaultCallflowStartExten ||
                    (this.DefaultCallflowStartExten != null &&
                    this.DefaultCallflowStartExten.Equals(input.DefaultCallflowStartExten))
                ) && 
                (
                    this.DefaultExtensionCallflow == input.DefaultExtensionCallflow ||
                    (this.DefaultExtensionCallflow != null &&
                    this.DefaultExtensionCallflow.Equals(input.DefaultExtensionCallflow))
                ) && 
                (
                    this.DefaultVmStartExten == input.DefaultVmStartExten ||
                    (this.DefaultVmStartExten != null &&
                    this.DefaultVmStartExten.Equals(input.DefaultVmStartExten))
                ) && 
                (
                    this.DevicePwdStrength == input.DevicePwdStrength ||
                    (this.DevicePwdStrength != null &&
                    this.DevicePwdStrength.Equals(input.DevicePwdStrength))
                ) && 
                (
                    this.DeviceUsernameStrength == input.DeviceUsernameStrength ||
                    (this.DeviceUsernameStrength != null &&
                    this.DeviceUsernameStrength.Equals(input.DeviceUsernameStrength))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultCallflowStartExten != null)
                    hashCode = hashCode * 59 + this.DefaultCallflowStartExten.GetHashCode();
                if (this.DefaultExtensionCallflow != null)
                    hashCode = hashCode * 59 + this.DefaultExtensionCallflow.GetHashCode();
                if (this.DefaultVmStartExten != null)
                    hashCode = hashCode * 59 + this.DefaultVmStartExten.GetHashCode();
                if (this.DevicePwdStrength != null)
                    hashCode = hashCode * 59 + this.DevicePwdStrength.GetHashCode();
                if (this.DeviceUsernameStrength != null)
                    hashCode = hashCode * 59 + this.DeviceUsernameStrength.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
