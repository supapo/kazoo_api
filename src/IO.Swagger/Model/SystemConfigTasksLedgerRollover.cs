/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for tasks.ledger_rollover system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigTasksLedgerRollover :  IEquatable<SystemConfigTasksLedgerRollover>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigTasksLedgerRollover" /> class.
        /// </summary>
        /// <param name="refreshInParallel">tasks ledger_rollover refresh_in_parallel.</param>
        /// <param name="refreshViewEnabled">tasks ledger_rollover refresh_view_enabled (default to false).</param>
        /// <param name="rolloverInParallel">How many accounts to rollover per-pass (in parallel).</param>
        public SystemConfigTasksLedgerRollover(int? refreshInParallel = default(int?), bool? refreshViewEnabled = false, int? rolloverInParallel = default(int?))
        {
            this.RefreshInParallel = refreshInParallel;
            // use default value if no "refreshViewEnabled" provided
            if (refreshViewEnabled == null)
            {
                this.RefreshViewEnabled = false;
            }
            else
            {
                this.RefreshViewEnabled = refreshViewEnabled;
            }
            this.RolloverInParallel = rolloverInParallel;
        }
        
        /// <summary>
        /// tasks ledger_rollover refresh_in_parallel
        /// </summary>
        /// <value>tasks ledger_rollover refresh_in_parallel</value>
        [DataMember(Name="refresh_in_parallel", EmitDefaultValue=false)]
        public int? RefreshInParallel { get; set; }

        /// <summary>
        /// tasks ledger_rollover refresh_view_enabled
        /// </summary>
        /// <value>tasks ledger_rollover refresh_view_enabled</value>
        [DataMember(Name="refresh_view_enabled", EmitDefaultValue=false)]
        public bool? RefreshViewEnabled { get; set; }

        /// <summary>
        /// How many accounts to rollover per-pass (in parallel)
        /// </summary>
        /// <value>How many accounts to rollover per-pass (in parallel)</value>
        [DataMember(Name="rollover_in_parallel", EmitDefaultValue=false)]
        public int? RolloverInParallel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigTasksLedgerRollover {\n");
            sb.Append("  RefreshInParallel: ").Append(RefreshInParallel).Append("\n");
            sb.Append("  RefreshViewEnabled: ").Append(RefreshViewEnabled).Append("\n");
            sb.Append("  RolloverInParallel: ").Append(RolloverInParallel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigTasksLedgerRollover);
        }

        /// <summary>
        /// Returns true if SystemConfigTasksLedgerRollover instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigTasksLedgerRollover to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigTasksLedgerRollover input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RefreshInParallel == input.RefreshInParallel ||
                    (this.RefreshInParallel != null &&
                    this.RefreshInParallel.Equals(input.RefreshInParallel))
                ) && 
                (
                    this.RefreshViewEnabled == input.RefreshViewEnabled ||
                    (this.RefreshViewEnabled != null &&
                    this.RefreshViewEnabled.Equals(input.RefreshViewEnabled))
                ) && 
                (
                    this.RolloverInParallel == input.RolloverInParallel ||
                    (this.RolloverInParallel != null &&
                    this.RolloverInParallel.Equals(input.RolloverInParallel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RefreshInParallel != null)
                    hashCode = hashCode * 59 + this.RefreshInParallel.GetHashCode();
                if (this.RefreshViewEnabled != null)
                    hashCode = hashCode * 59 + this.RefreshViewEnabled.GetHashCode();
                if (this.RolloverInParallel != null)
                    hashCode = hashCode * 59 + this.RolloverInParallel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
