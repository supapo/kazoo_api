/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Defines the discovery (call in) properties for a moderator
    /// </summary>
    [DataContract]
    public partial class ConferencesModerator :  IEquatable<ConferencesModerator>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConferencesModerator" /> class.
        /// </summary>
        /// <param name="joinDeaf">Determines if a moderator will join deaf (default to false).</param>
        /// <param name="joinMuted">Determines if a moderator will join muted (default to false).</param>
        /// <param name="numbers">Defines the conference (call in) number(s) for moderators.</param>
        /// <param name="pins">Defines the pin number(s) for moderators.</param>
        public ConferencesModerator(bool? joinDeaf = false, bool? joinMuted = false, List<string> numbers = default(List<string>), List<string> pins = default(List<string>))
        {
            // use default value if no "joinDeaf" provided
            if (joinDeaf == null)
            {
                this.JoinDeaf = false;
            }
            else
            {
                this.JoinDeaf = joinDeaf;
            }
            // use default value if no "joinMuted" provided
            if (joinMuted == null)
            {
                this.JoinMuted = false;
            }
            else
            {
                this.JoinMuted = joinMuted;
            }
            this.Numbers = numbers;
            this.Pins = pins;
        }
        
        /// <summary>
        /// Determines if a moderator will join deaf
        /// </summary>
        /// <value>Determines if a moderator will join deaf</value>
        [DataMember(Name="join_deaf", EmitDefaultValue=false)]
        public bool? JoinDeaf { get; set; }

        /// <summary>
        /// Determines if a moderator will join muted
        /// </summary>
        /// <value>Determines if a moderator will join muted</value>
        [DataMember(Name="join_muted", EmitDefaultValue=false)]
        public bool? JoinMuted { get; set; }

        /// <summary>
        /// Defines the conference (call in) number(s) for moderators
        /// </summary>
        /// <value>Defines the conference (call in) number(s) for moderators</value>
        [DataMember(Name="numbers", EmitDefaultValue=false)]
        public List<string> Numbers { get; set; }

        /// <summary>
        /// Defines the pin number(s) for moderators
        /// </summary>
        /// <value>Defines the pin number(s) for moderators</value>
        [DataMember(Name="pins", EmitDefaultValue=false)]
        public List<string> Pins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConferencesModerator {\n");
            sb.Append("  JoinDeaf: ").Append(JoinDeaf).Append("\n");
            sb.Append("  JoinMuted: ").Append(JoinMuted).Append("\n");
            sb.Append("  Numbers: ").Append(Numbers).Append("\n");
            sb.Append("  Pins: ").Append(Pins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConferencesModerator);
        }

        /// <summary>
        /// Returns true if ConferencesModerator instances are equal
        /// </summary>
        /// <param name="input">Instance of ConferencesModerator to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConferencesModerator input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.JoinDeaf == input.JoinDeaf ||
                    (this.JoinDeaf != null &&
                    this.JoinDeaf.Equals(input.JoinDeaf))
                ) && 
                (
                    this.JoinMuted == input.JoinMuted ||
                    (this.JoinMuted != null &&
                    this.JoinMuted.Equals(input.JoinMuted))
                ) && 
                (
                    this.Numbers == input.Numbers ||
                    this.Numbers != null &&
                    this.Numbers.SequenceEqual(input.Numbers)
                ) && 
                (
                    this.Pins == input.Pins ||
                    this.Pins != null &&
                    this.Pins.SequenceEqual(input.Pins)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JoinDeaf != null)
                    hashCode = hashCode * 59 + this.JoinDeaf.GetHashCode();
                if (this.JoinMuted != null)
                    hashCode = hashCode * 59 + this.JoinMuted.GetHashCode();
                if (this.Numbers != null)
                    hashCode = hashCode * 59 + this.Numbers.GetHashCode();
                if (this.Pins != null)
                    hashCode = hashCode * 59 + this.Pins.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
