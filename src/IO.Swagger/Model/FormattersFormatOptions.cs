/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for formatter options
    /// </summary>
    [DataContract]
    public partial class FormattersFormatOptions :  IEquatable<FormattersFormatOptions>, IValidatableObject
    {
        /// <summary>
        /// Only apply the formatter on the relevant request direction
        /// </summary>
        /// <value>Only apply the formatter on the relevant request direction</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DirectionEnum
        {
            
            /// <summary>
            /// Enum Inbound for value: inbound
            /// </summary>
            [EnumMember(Value = "inbound")]
            Inbound = 1,
            
            /// <summary>
            /// Enum Outbound for value: outbound
            /// </summary>
            [EnumMember(Value = "outbound")]
            Outbound = 2,
            
            /// <summary>
            /// Enum Both for value: both
            /// </summary>
            [EnumMember(Value = "both")]
            Both = 3
        }

        /// <summary>
        /// Only apply the formatter on the relevant request direction
        /// </summary>
        /// <value>Only apply the formatter on the relevant request direction</value>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public DirectionEnum? Direction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FormattersFormatOptions" /> class.
        /// </summary>
        /// <param name="direction">Only apply the formatter on the relevant request direction.</param>
        /// <param name="matchInviteFormat">Applicable on fields with SIP URIs. Will format the username portion to match the invite format of the outbound request..</param>
        /// <param name="prefix">Prepends value against the result of a successful regex match.</param>
        /// <param name="regex">Matches against the value, with optional capture group.</param>
        /// <param name="strip">If set to true, the field will be stripped from the payload.</param>
        /// <param name="suffix">Appends value against the result of a successful regex match.</param>
        /// <param name="value">Replaces the current value with the static value defined.</param>
        public FormattersFormatOptions(DirectionEnum? direction = default(DirectionEnum?), bool? matchInviteFormat = default(bool?), string prefix = default(string), string regex = default(string), bool? strip = default(bool?), string suffix = default(string), string value = default(string))
        {
            this.Direction = direction;
            this.MatchInviteFormat = matchInviteFormat;
            this.Prefix = prefix;
            this.Regex = regex;
            this.Strip = strip;
            this.Suffix = suffix;
            this.Value = value;
        }
        

        /// <summary>
        /// Applicable on fields with SIP URIs. Will format the username portion to match the invite format of the outbound request.
        /// </summary>
        /// <value>Applicable on fields with SIP URIs. Will format the username portion to match the invite format of the outbound request.</value>
        [DataMember(Name="match_invite_format", EmitDefaultValue=false)]
        public bool? MatchInviteFormat { get; set; }

        /// <summary>
        /// Prepends value against the result of a successful regex match
        /// </summary>
        /// <value>Prepends value against the result of a successful regex match</value>
        [DataMember(Name="prefix", EmitDefaultValue=false)]
        public string Prefix { get; set; }

        /// <summary>
        /// Matches against the value, with optional capture group
        /// </summary>
        /// <value>Matches against the value, with optional capture group</value>
        [DataMember(Name="regex", EmitDefaultValue=false)]
        public string Regex { get; set; }

        /// <summary>
        /// If set to true, the field will be stripped from the payload
        /// </summary>
        /// <value>If set to true, the field will be stripped from the payload</value>
        [DataMember(Name="strip", EmitDefaultValue=false)]
        public bool? Strip { get; set; }

        /// <summary>
        /// Appends value against the result of a successful regex match
        /// </summary>
        /// <value>Appends value against the result of a successful regex match</value>
        [DataMember(Name="suffix", EmitDefaultValue=false)]
        public string Suffix { get; set; }

        /// <summary>
        /// Replaces the current value with the static value defined
        /// </summary>
        /// <value>Replaces the current value with the static value defined</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormattersFormatOptions {\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  MatchInviteFormat: ").Append(MatchInviteFormat).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  Regex: ").Append(Regex).Append("\n");
            sb.Append("  Strip: ").Append(Strip).Append("\n");
            sb.Append("  Suffix: ").Append(Suffix).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FormattersFormatOptions);
        }

        /// <summary>
        /// Returns true if FormattersFormatOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of FormattersFormatOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormattersFormatOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.MatchInviteFormat == input.MatchInviteFormat ||
                    (this.MatchInviteFormat != null &&
                    this.MatchInviteFormat.Equals(input.MatchInviteFormat))
                ) && 
                (
                    this.Prefix == input.Prefix ||
                    (this.Prefix != null &&
                    this.Prefix.Equals(input.Prefix))
                ) && 
                (
                    this.Regex == input.Regex ||
                    (this.Regex != null &&
                    this.Regex.Equals(input.Regex))
                ) && 
                (
                    this.Strip == input.Strip ||
                    (this.Strip != null &&
                    this.Strip.Equals(input.Strip))
                ) && 
                (
                    this.Suffix == input.Suffix ||
                    (this.Suffix != null &&
                    this.Suffix.Equals(input.Suffix))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.MatchInviteFormat != null)
                    hashCode = hashCode * 59 + this.MatchInviteFormat.GetHashCode();
                if (this.Prefix != null)
                    hashCode = hashCode * 59 + this.Prefix.GetHashCode();
                if (this.Regex != null)
                    hashCode = hashCode * 59 + this.Regex.GetHashCode();
                if (this.Strip != null)
                    hashCode = hashCode * 59 + this.Strip.GetHashCode();
                if (this.Suffix != null)
                    hashCode = hashCode * 59 + this.Suffix.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
