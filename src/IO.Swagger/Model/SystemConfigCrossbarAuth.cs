/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for crossbar.auth system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigCrossbarAuth :  IEquatable<SystemConfigCrossbarAuth>, IValidatableObject
    {
        /// <summary>
        /// crossbar.auth basic auth type
        /// </summary>
        /// <value>crossbar.auth basic auth type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BasicAuthTypeEnum
        {
            
            /// <summary>
            /// Enum Md5 for value: md5
            /// </summary>
            [EnumMember(Value = "md5")]
            Md5 = 1,
            
            /// <summary>
            /// Enum Sha for value: sha
            /// </summary>
            [EnumMember(Value = "sha")]
            Sha = 2
        }

        /// <summary>
        /// crossbar.auth basic auth type
        /// </summary>
        /// <value>crossbar.auth basic auth type</value>
        [DataMember(Name="basic_auth_type", EmitDefaultValue=false)]
        public BasicAuthTypeEnum? BasicAuthType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigCrossbarAuth" /> class.
        /// </summary>
        /// <param name="authModules">authModules.</param>
        /// <param name="availableAuthMethods">List of crossbar auth configurable modules.</param>
        /// <param name="basicAuthType">crossbar.auth basic auth type (default to BasicAuthTypeEnum.Md5).</param>
        /// <param name="logFailedAttempts">Should log failed login attempts (default to false).</param>
        /// <param name="logFailedLoginAttempts">Should log failed login attempts (default to false).</param>
        /// <param name="logSuccessfulAttempts">Should log successful login attempts (default to false).</param>
        /// <param name="tokenAuthExpiryS">crossbar token auth expiry in seconds.</param>
        public SystemConfigCrossbarAuth(AccountConfigCrossbarAuthAuthModules authModules = default(AccountConfigCrossbarAuthAuthModules), List<string> availableAuthMethods = default(List<string>), BasicAuthTypeEnum? basicAuthType = BasicAuthTypeEnum.Md5, bool? logFailedAttempts = false, bool? logFailedLoginAttempts = false, bool? logSuccessfulAttempts = false, int? tokenAuthExpiryS = default(int?))
        {
            this.AuthModules = authModules;
            this.AvailableAuthMethods = availableAuthMethods;
            // use default value if no "basicAuthType" provided
            if (basicAuthType == null)
            {
                this.BasicAuthType = BasicAuthTypeEnum.Md5;
            }
            else
            {
                this.BasicAuthType = basicAuthType;
            }
            // use default value if no "logFailedAttempts" provided
            if (logFailedAttempts == null)
            {
                this.LogFailedAttempts = false;
            }
            else
            {
                this.LogFailedAttempts = logFailedAttempts;
            }
            // use default value if no "logFailedLoginAttempts" provided
            if (logFailedLoginAttempts == null)
            {
                this.LogFailedLoginAttempts = false;
            }
            else
            {
                this.LogFailedLoginAttempts = logFailedLoginAttempts;
            }
            // use default value if no "logSuccessfulAttempts" provided
            if (logSuccessfulAttempts == null)
            {
                this.LogSuccessfulAttempts = false;
            }
            else
            {
                this.LogSuccessfulAttempts = logSuccessfulAttempts;
            }
            this.TokenAuthExpiryS = tokenAuthExpiryS;
        }
        
        /// <summary>
        /// Gets or Sets AuthModules
        /// </summary>
        [DataMember(Name="auth_modules", EmitDefaultValue=false)]
        public AccountConfigCrossbarAuthAuthModules AuthModules { get; set; }

        /// <summary>
        /// List of crossbar auth configurable modules
        /// </summary>
        /// <value>List of crossbar auth configurable modules</value>
        [DataMember(Name="available_auth_methods", EmitDefaultValue=false)]
        public List<string> AvailableAuthMethods { get; set; }


        /// <summary>
        /// Should log failed login attempts
        /// </summary>
        /// <value>Should log failed login attempts</value>
        [DataMember(Name="log_failed_attempts", EmitDefaultValue=false)]
        public bool? LogFailedAttempts { get; set; }

        /// <summary>
        /// Should log failed login attempts
        /// </summary>
        /// <value>Should log failed login attempts</value>
        [DataMember(Name="log_failed_login_attempts", EmitDefaultValue=false)]
        public bool? LogFailedLoginAttempts { get; set; }

        /// <summary>
        /// Should log successful login attempts
        /// </summary>
        /// <value>Should log successful login attempts</value>
        [DataMember(Name="log_successful_attempts", EmitDefaultValue=false)]
        public bool? LogSuccessfulAttempts { get; set; }

        /// <summary>
        /// crossbar token auth expiry in seconds
        /// </summary>
        /// <value>crossbar token auth expiry in seconds</value>
        [DataMember(Name="token_auth_expiry_s", EmitDefaultValue=false)]
        public int? TokenAuthExpiryS { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigCrossbarAuth {\n");
            sb.Append("  AuthModules: ").Append(AuthModules).Append("\n");
            sb.Append("  AvailableAuthMethods: ").Append(AvailableAuthMethods).Append("\n");
            sb.Append("  BasicAuthType: ").Append(BasicAuthType).Append("\n");
            sb.Append("  LogFailedAttempts: ").Append(LogFailedAttempts).Append("\n");
            sb.Append("  LogFailedLoginAttempts: ").Append(LogFailedLoginAttempts).Append("\n");
            sb.Append("  LogSuccessfulAttempts: ").Append(LogSuccessfulAttempts).Append("\n");
            sb.Append("  TokenAuthExpiryS: ").Append(TokenAuthExpiryS).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigCrossbarAuth);
        }

        /// <summary>
        /// Returns true if SystemConfigCrossbarAuth instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigCrossbarAuth to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigCrossbarAuth input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthModules == input.AuthModules ||
                    (this.AuthModules != null &&
                    this.AuthModules.Equals(input.AuthModules))
                ) && 
                (
                    this.AvailableAuthMethods == input.AvailableAuthMethods ||
                    this.AvailableAuthMethods != null &&
                    this.AvailableAuthMethods.SequenceEqual(input.AvailableAuthMethods)
                ) && 
                (
                    this.BasicAuthType == input.BasicAuthType ||
                    (this.BasicAuthType != null &&
                    this.BasicAuthType.Equals(input.BasicAuthType))
                ) && 
                (
                    this.LogFailedAttempts == input.LogFailedAttempts ||
                    (this.LogFailedAttempts != null &&
                    this.LogFailedAttempts.Equals(input.LogFailedAttempts))
                ) && 
                (
                    this.LogFailedLoginAttempts == input.LogFailedLoginAttempts ||
                    (this.LogFailedLoginAttempts != null &&
                    this.LogFailedLoginAttempts.Equals(input.LogFailedLoginAttempts))
                ) && 
                (
                    this.LogSuccessfulAttempts == input.LogSuccessfulAttempts ||
                    (this.LogSuccessfulAttempts != null &&
                    this.LogSuccessfulAttempts.Equals(input.LogSuccessfulAttempts))
                ) && 
                (
                    this.TokenAuthExpiryS == input.TokenAuthExpiryS ||
                    (this.TokenAuthExpiryS != null &&
                    this.TokenAuthExpiryS.Equals(input.TokenAuthExpiryS))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthModules != null)
                    hashCode = hashCode * 59 + this.AuthModules.GetHashCode();
                if (this.AvailableAuthMethods != null)
                    hashCode = hashCode * 59 + this.AvailableAuthMethods.GetHashCode();
                if (this.BasicAuthType != null)
                    hashCode = hashCode * 59 + this.BasicAuthType.GetHashCode();
                if (this.LogFailedAttempts != null)
                    hashCode = hashCode * 59 + this.LogFailedAttempts.GetHashCode();
                if (this.LogFailedLoginAttempts != null)
                    hashCode = hashCode * 59 + this.LogFailedLoginAttempts.GetHashCode();
                if (this.LogSuccessfulAttempts != null)
                    hashCode = hashCode * 59 + this.LogSuccessfulAttempts.GetHashCode();
                if (this.TokenAuthExpiryS != null)
                    hashCode = hashCode * 59 + this.TokenAuthExpiryS.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
