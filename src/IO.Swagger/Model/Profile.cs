/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Defines user extended properties
    /// </summary>
    [DataContract]
    public partial class Profile :  IEquatable<Profile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Profile" /> class.
        /// </summary>
        /// <param name="addresses">To specify the components of the addresses.</param>
        /// <param name="assistant">To specify the user&#39;s assistant.</param>
        /// <param name="birthday">To specify the birth date of the user.</param>
        /// <param name="nicknames">To specify the text corresponding to the nickname of the user.</param>
        /// <param name="note">To specify supplemental information or a comment that is associated with the user.</param>
        /// <param name="role">To specify the function or part played in a particular situation by the user.</param>
        /// <param name="sortString">To specify the family name or given name text to be used for national-language-specific sorting of the FN and N types.</param>
        /// <param name="title">To specify the position or job of the user.</param>
        public Profile(List<ProfileAddresses> addresses = default(List<ProfileAddresses>), string assistant = default(string), string birthday = default(string), List<string> nicknames = default(List<string>), string note = default(string), string role = default(string), string sortString = default(string), string title = default(string))
        {
            this.Addresses = addresses;
            this.Assistant = assistant;
            this.Birthday = birthday;
            this.Nicknames = nicknames;
            this.Note = note;
            this.Role = role;
            this.SortString = sortString;
            this.Title = title;
        }
        
        /// <summary>
        /// To specify the components of the addresses
        /// </summary>
        /// <value>To specify the components of the addresses</value>
        [DataMember(Name="addresses", EmitDefaultValue=false)]
        public List<ProfileAddresses> Addresses { get; set; }

        /// <summary>
        /// To specify the user&#39;s assistant
        /// </summary>
        /// <value>To specify the user&#39;s assistant</value>
        [DataMember(Name="assistant", EmitDefaultValue=false)]
        public string Assistant { get; set; }

        /// <summary>
        /// To specify the birth date of the user
        /// </summary>
        /// <value>To specify the birth date of the user</value>
        [DataMember(Name="birthday", EmitDefaultValue=false)]
        public string Birthday { get; set; }

        /// <summary>
        /// To specify the text corresponding to the nickname of the user
        /// </summary>
        /// <value>To specify the text corresponding to the nickname of the user</value>
        [DataMember(Name="nicknames", EmitDefaultValue=false)]
        public List<string> Nicknames { get; set; }

        /// <summary>
        /// To specify supplemental information or a comment that is associated with the user
        /// </summary>
        /// <value>To specify supplemental information or a comment that is associated with the user</value>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }

        /// <summary>
        /// To specify the function or part played in a particular situation by the user
        /// </summary>
        /// <value>To specify the function or part played in a particular situation by the user</value>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public string Role { get; set; }

        /// <summary>
        /// To specify the family name or given name text to be used for national-language-specific sorting of the FN and N types
        /// </summary>
        /// <value>To specify the family name or given name text to be used for national-language-specific sorting of the FN and N types</value>
        [DataMember(Name="sort-string", EmitDefaultValue=false)]
        public string SortString { get; set; }

        /// <summary>
        /// To specify the position or job of the user
        /// </summary>
        /// <value>To specify the position or job of the user</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Profile {\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  Assistant: ").Append(Assistant).Append("\n");
            sb.Append("  Birthday: ").Append(Birthday).Append("\n");
            sb.Append("  Nicknames: ").Append(Nicknames).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  SortString: ").Append(SortString).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Profile);
        }

        /// <summary>
        /// Returns true if Profile instances are equal
        /// </summary>
        /// <param name="input">Instance of Profile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Profile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                ) && 
                (
                    this.Assistant == input.Assistant ||
                    (this.Assistant != null &&
                    this.Assistant.Equals(input.Assistant))
                ) && 
                (
                    this.Birthday == input.Birthday ||
                    (this.Birthday != null &&
                    this.Birthday.Equals(input.Birthday))
                ) && 
                (
                    this.Nicknames == input.Nicknames ||
                    this.Nicknames != null &&
                    this.Nicknames.SequenceEqual(input.Nicknames)
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.SortString == input.SortString ||
                    (this.SortString != null &&
                    this.SortString.Equals(input.SortString))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Addresses != null)
                    hashCode = hashCode * 59 + this.Addresses.GetHashCode();
                if (this.Assistant != null)
                    hashCode = hashCode * 59 + this.Assistant.GetHashCode();
                if (this.Birthday != null)
                    hashCode = hashCode * 59 + this.Birthday.GetHashCode();
                if (this.Nicknames != null)
                    hashCode = hashCode * 59 + this.Nicknames.GetHashCode();
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.SortString != null)
                    hashCode = hashCode * 59 + this.SortString.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
