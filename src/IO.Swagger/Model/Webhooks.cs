/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Web Hooks are subscriptions to allowed events that, when the event occurs, the event data is sent to the uri set in the Web Hook document.
    /// </summary>
    [DataContract]
    public partial class Webhooks :  IEquatable<Webhooks>, IValidatableObject
    {
        /// <summary>
        /// What Body format to use when sending the webhook. only valid for &#39;post&#39; &amp; &#39;put&#39; verbs
        /// </summary>
        /// <value>What Body format to use when sending the webhook. only valid for &#39;post&#39; &amp; &#39;put&#39; verbs</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormatEnum
        {
            
            /// <summary>
            /// Enum FormData for value: form-data
            /// </summary>
            [EnumMember(Value = "form-data")]
            FormData = 1,
            
            /// <summary>
            /// Enum Json for value: json
            /// </summary>
            [EnumMember(Value = "json")]
            Json = 2
        }

        /// <summary>
        /// What Body format to use when sending the webhook. only valid for &#39;post&#39; &amp; &#39;put&#39; verbs
        /// </summary>
        /// <value>What Body format to use when sending the webhook. only valid for &#39;post&#39; &amp; &#39;put&#39; verbs</value>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public FormatEnum? Format { get; set; }
        /// <summary>
        /// What HTTP method to use when contacting the server
        /// </summary>
        /// <value>What HTTP method to use when contacting the server</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HttpVerbEnum
        {
            
            /// <summary>
            /// Enum Get for value: get
            /// </summary>
            [EnumMember(Value = "get")]
            Get = 1,
            
            /// <summary>
            /// Enum Post for value: post
            /// </summary>
            [EnumMember(Value = "post")]
            Post = 2,
            
            /// <summary>
            /// Enum Put for value: put
            /// </summary>
            [EnumMember(Value = "put")]
            Put = 3
        }

        /// <summary>
        /// What HTTP method to use when contacting the server
        /// </summary>
        /// <value>What HTTP method to use when contacting the server</value>
        [DataMember(Name="http_verb", EmitDefaultValue=false)]
        public HttpVerbEnum? HttpVerb { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Webhooks" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Webhooks() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Webhooks" /> class.
        /// </summary>
        /// <param name="customData">These properties will be added to the event and will overwrite existing values..</param>
        /// <param name="enabled">Is the webhook enabled and running (default to true).</param>
        /// <param name="format">What Body format to use when sending the webhook. only valid for &#39;post&#39; &amp; &#39;put&#39; verbs (default to FormatEnum.FormData).</param>
        /// <param name="hook">The trigger event for a request being made to &#39;callback_uri&#39;. (required).</param>
        /// <param name="httpVerb">What HTTP method to use when contacting the server (default to HttpVerbEnum.Post).</param>
        /// <param name="includeInternalLegs">Whether to filter out call legs that are internal to the system (loopback) (default to true).</param>
        /// <param name="includeSubaccounts">Should the webhook be fired for subaccount events..</param>
        /// <param name="name">A friendly name for the webhook (required).</param>
        /// <param name="retries">Retry the request this many times (if it fails).</param>
        /// <param name="uri">The 3rd party URI to call out to an event (required).</param>
        public Webhooks(Dictionary<string, string> customData = default(Dictionary<string, string>), bool? enabled = true, FormatEnum? format = FormatEnum.FormData, string hook = default(string), HttpVerbEnum? httpVerb = HttpVerbEnum.Post, bool? includeInternalLegs = true, bool? includeSubaccounts = default(bool?), string name = default(string), int? retries = default(int?), string uri = default(string))
        {
            // to ensure "hook" is required (not null)
            if (hook == null)
            {
                throw new InvalidDataException("hook is a required property for Webhooks and cannot be null");
            }
            else
            {
                this.Hook = hook;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Webhooks and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "uri" is required (not null)
            if (uri == null)
            {
                throw new InvalidDataException("uri is a required property for Webhooks and cannot be null");
            }
            else
            {
                this.Uri = uri;
            }
            this.CustomData = customData;
            // use default value if no "enabled" provided
            if (enabled == null)
            {
                this.Enabled = true;
            }
            else
            {
                this.Enabled = enabled;
            }
            // use default value if no "format" provided
            if (format == null)
            {
                this.Format = FormatEnum.FormData;
            }
            else
            {
                this.Format = format;
            }
            // use default value if no "httpVerb" provided
            if (httpVerb == null)
            {
                this.HttpVerb = HttpVerbEnum.Post;
            }
            else
            {
                this.HttpVerb = httpVerb;
            }
            // use default value if no "includeInternalLegs" provided
            if (includeInternalLegs == null)
            {
                this.IncludeInternalLegs = true;
            }
            else
            {
                this.IncludeInternalLegs = includeInternalLegs;
            }
            this.IncludeSubaccounts = includeSubaccounts;
            this.Retries = retries;
        }
        
        /// <summary>
        /// These properties will be added to the event and will overwrite existing values.
        /// </summary>
        /// <value>These properties will be added to the event and will overwrite existing values.</value>
        [DataMember(Name="custom_data", EmitDefaultValue=false)]
        public Dictionary<string, string> CustomData { get; set; }

        /// <summary>
        /// Is the webhook enabled and running
        /// </summary>
        /// <value>Is the webhook enabled and running</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }


        /// <summary>
        /// The trigger event for a request being made to &#39;callback_uri&#39;.
        /// </summary>
        /// <value>The trigger event for a request being made to &#39;callback_uri&#39;.</value>
        [DataMember(Name="hook", EmitDefaultValue=false)]
        public string Hook { get; set; }


        /// <summary>
        /// Whether to filter out call legs that are internal to the system (loopback)
        /// </summary>
        /// <value>Whether to filter out call legs that are internal to the system (loopback)</value>
        [DataMember(Name="include_internal_legs", EmitDefaultValue=false)]
        public bool? IncludeInternalLegs { get; set; }

        /// <summary>
        /// Should the webhook be fired for subaccount events.
        /// </summary>
        /// <value>Should the webhook be fired for subaccount events.</value>
        [DataMember(Name="include_subaccounts", EmitDefaultValue=false)]
        public bool? IncludeSubaccounts { get; set; }

        /// <summary>
        /// A friendly name for the webhook
        /// </summary>
        /// <value>A friendly name for the webhook</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Retry the request this many times (if it fails)
        /// </summary>
        /// <value>Retry the request this many times (if it fails)</value>
        [DataMember(Name="retries", EmitDefaultValue=false)]
        public int? Retries { get; set; }

        /// <summary>
        /// The 3rd party URI to call out to an event
        /// </summary>
        /// <value>The 3rd party URI to call out to an event</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Webhooks {\n");
            sb.Append("  CustomData: ").Append(CustomData).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Hook: ").Append(Hook).Append("\n");
            sb.Append("  HttpVerb: ").Append(HttpVerb).Append("\n");
            sb.Append("  IncludeInternalLegs: ").Append(IncludeInternalLegs).Append("\n");
            sb.Append("  IncludeSubaccounts: ").Append(IncludeSubaccounts).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Retries: ").Append(Retries).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Webhooks);
        }

        /// <summary>
        /// Returns true if Webhooks instances are equal
        /// </summary>
        /// <param name="input">Instance of Webhooks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Webhooks input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomData == input.CustomData ||
                    this.CustomData != null &&
                    this.CustomData.SequenceEqual(input.CustomData)
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Hook == input.Hook ||
                    (this.Hook != null &&
                    this.Hook.Equals(input.Hook))
                ) && 
                (
                    this.HttpVerb == input.HttpVerb ||
                    (this.HttpVerb != null &&
                    this.HttpVerb.Equals(input.HttpVerb))
                ) && 
                (
                    this.IncludeInternalLegs == input.IncludeInternalLegs ||
                    (this.IncludeInternalLegs != null &&
                    this.IncludeInternalLegs.Equals(input.IncludeInternalLegs))
                ) && 
                (
                    this.IncludeSubaccounts == input.IncludeSubaccounts ||
                    (this.IncludeSubaccounts != null &&
                    this.IncludeSubaccounts.Equals(input.IncludeSubaccounts))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Retries == input.Retries ||
                    (this.Retries != null &&
                    this.Retries.Equals(input.Retries))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomData != null)
                    hashCode = hashCode * 59 + this.CustomData.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.Hook != null)
                    hashCode = hashCode * 59 + this.Hook.GetHashCode();
                if (this.HttpVerb != null)
                    hashCode = hashCode * 59 + this.HttpVerb.GetHashCode();
                if (this.IncludeInternalLegs != null)
                    hashCode = hashCode * 59 + this.IncludeInternalLegs.GetHashCode();
                if (this.IncludeSubaccounts != null)
                    hashCode = hashCode * 59 + this.IncludeSubaccounts.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Retries != null)
                    hashCode = hashCode * 59 + this.Retries.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Retries (int?) maximum
            if(this.Retries > (int?)4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Retries, must be a value less than or equal to 4.", new [] { "Retries" });
            }

            // Retries (int?) minimum
            if(this.Retries < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Retries, must be a value greater than or equal to 0.", new [] { "Retries" });
            }

            yield break;
        }
    }

}
