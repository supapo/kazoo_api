/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for dialplan.store
    /// </summary>
    [DataContract]
    public partial class KapiDialplanStore :  IEquatable<KapiDialplanStore>, IValidatableObject
    {
        /// <summary>
        /// Defines ApplicationName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApplicationNameEnum
        {
            
            /// <summary>
            /// Enum Store for value: store
            /// </summary>
            [EnumMember(Value = "store")]
            Store = 1
        }

        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name="Application-Name", EmitDefaultValue=false)]
        public ApplicationNameEnum ApplicationName { get; set; }
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Call for value: call
            /// </summary>
            [EnumMember(Value = "call")]
            Call = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Command for value: command
            /// </summary>
            [EnumMember(Value = "command")]
            Command = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Defines InsertAt
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InsertAtEnum
        {
            
            /// <summary>
            /// Enum Head for value: head
            /// </summary>
            [EnumMember(Value = "head")]
            Head = 1,
            
            /// <summary>
            /// Enum Tail for value: tail
            /// </summary>
            [EnumMember(Value = "tail")]
            Tail = 2,
            
            /// <summary>
            /// Enum Flush for value: flush
            /// </summary>
            [EnumMember(Value = "flush")]
            Flush = 3,
            
            /// <summary>
            /// Enum Now for value: now
            /// </summary>
            [EnumMember(Value = "now")]
            Now = 4
        }

        /// <summary>
        /// Gets or Sets InsertAt
        /// </summary>
        [DataMember(Name="Insert-At", EmitDefaultValue=false)]
        public InsertAtEnum? InsertAt { get; set; }
        /// <summary>
        /// Defines MediaTransferMethod
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MediaTransferMethodEnum
        {
            
            /// <summary>
            /// Enum Stream for value: stream
            /// </summary>
            [EnumMember(Value = "stream")]
            Stream = 1,
            
            /// <summary>
            /// Enum Put for value: put
            /// </summary>
            [EnumMember(Value = "put")]
            Put = 2,
            
            /// <summary>
            /// Enum Post for value: post
            /// </summary>
            [EnumMember(Value = "post")]
            Post = 3
        }

        /// <summary>
        /// Gets or Sets MediaTransferMethod
        /// </summary>
        [DataMember(Name="Media-Transfer-Method", EmitDefaultValue=false)]
        public MediaTransferMethodEnum MediaTransferMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanStore" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiDialplanStore() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanStore" /> class.
        /// </summary>
        /// <param name="additionalHeaders">additionalHeaders.</param>
        /// <param name="applicationName">applicationName (required).</param>
        /// <param name="callID">callID (required).</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="insertAt">insertAt.</param>
        /// <param name="mediaName">mediaName (required).</param>
        /// <param name="mediaTransferDestination">mediaTransferDestination (required).</param>
        /// <param name="mediaTransferMethod">mediaTransferMethod (required).</param>
        /// <param name="suppressErrorReport">suppressErrorReport.</param>
        public KapiDialplanStore(List<string> additionalHeaders = default(List<string>), ApplicationNameEnum applicationName = default(ApplicationNameEnum), string callID = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), InsertAtEnum? insertAt = default(InsertAtEnum?), string mediaName = default(string), string mediaTransferDestination = default(string), MediaTransferMethodEnum mediaTransferMethod = default(MediaTransferMethodEnum), bool? suppressErrorReport = default(bool?))
        {
            // to ensure "applicationName" is required (not null)
            if (applicationName == null)
            {
                throw new InvalidDataException("applicationName is a required property for KapiDialplanStore and cannot be null");
            }
            else
            {
                this.ApplicationName = applicationName;
            }
            // to ensure "callID" is required (not null)
            if (callID == null)
            {
                throw new InvalidDataException("callID is a required property for KapiDialplanStore and cannot be null");
            }
            else
            {
                this.CallID = callID;
            }
            // to ensure "mediaName" is required (not null)
            if (mediaName == null)
            {
                throw new InvalidDataException("mediaName is a required property for KapiDialplanStore and cannot be null");
            }
            else
            {
                this.MediaName = mediaName;
            }
            // to ensure "mediaTransferDestination" is required (not null)
            if (mediaTransferDestination == null)
            {
                throw new InvalidDataException("mediaTransferDestination is a required property for KapiDialplanStore and cannot be null");
            }
            else
            {
                this.MediaTransferDestination = mediaTransferDestination;
            }
            // to ensure "mediaTransferMethod" is required (not null)
            if (mediaTransferMethod == null)
            {
                throw new InvalidDataException("mediaTransferMethod is a required property for KapiDialplanStore and cannot be null");
            }
            else
            {
                this.MediaTransferMethod = mediaTransferMethod;
            }
            this.AdditionalHeaders = additionalHeaders;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.InsertAt = insertAt;
            this.SuppressErrorReport = suppressErrorReport;
        }
        
        /// <summary>
        /// Gets or Sets AdditionalHeaders
        /// </summary>
        [DataMember(Name="Additional-Headers", EmitDefaultValue=false)]
        public List<string> AdditionalHeaders { get; set; }


        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }




        /// <summary>
        /// Gets or Sets MediaName
        /// </summary>
        [DataMember(Name="Media-Name", EmitDefaultValue=false)]
        public string MediaName { get; set; }

        /// <summary>
        /// Gets or Sets MediaTransferDestination
        /// </summary>
        [DataMember(Name="Media-Transfer-Destination", EmitDefaultValue=false)]
        public string MediaTransferDestination { get; set; }


        /// <summary>
        /// Gets or Sets SuppressErrorReport
        /// </summary>
        [DataMember(Name="Suppress-Error-Report", EmitDefaultValue=false)]
        public bool? SuppressErrorReport { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiDialplanStore {\n");
            sb.Append("  AdditionalHeaders: ").Append(AdditionalHeaders).Append("\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  InsertAt: ").Append(InsertAt).Append("\n");
            sb.Append("  MediaName: ").Append(MediaName).Append("\n");
            sb.Append("  MediaTransferDestination: ").Append(MediaTransferDestination).Append("\n");
            sb.Append("  MediaTransferMethod: ").Append(MediaTransferMethod).Append("\n");
            sb.Append("  SuppressErrorReport: ").Append(SuppressErrorReport).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiDialplanStore);
        }

        /// <summary>
        /// Returns true if KapiDialplanStore instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiDialplanStore to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiDialplanStore input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdditionalHeaders == input.AdditionalHeaders ||
                    this.AdditionalHeaders != null &&
                    this.AdditionalHeaders.SequenceEqual(input.AdditionalHeaders)
                ) && 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.InsertAt == input.InsertAt ||
                    (this.InsertAt != null &&
                    this.InsertAt.Equals(input.InsertAt))
                ) && 
                (
                    this.MediaName == input.MediaName ||
                    (this.MediaName != null &&
                    this.MediaName.Equals(input.MediaName))
                ) && 
                (
                    this.MediaTransferDestination == input.MediaTransferDestination ||
                    (this.MediaTransferDestination != null &&
                    this.MediaTransferDestination.Equals(input.MediaTransferDestination))
                ) && 
                (
                    this.MediaTransferMethod == input.MediaTransferMethod ||
                    (this.MediaTransferMethod != null &&
                    this.MediaTransferMethod.Equals(input.MediaTransferMethod))
                ) && 
                (
                    this.SuppressErrorReport == input.SuppressErrorReport ||
                    (this.SuppressErrorReport != null &&
                    this.SuppressErrorReport.Equals(input.SuppressErrorReport))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalHeaders != null)
                    hashCode = hashCode * 59 + this.AdditionalHeaders.GetHashCode();
                if (this.ApplicationName != null)
                    hashCode = hashCode * 59 + this.ApplicationName.GetHashCode();
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.InsertAt != null)
                    hashCode = hashCode * 59 + this.InsertAt.GetHashCode();
                if (this.MediaName != null)
                    hashCode = hashCode * 59 + this.MediaName.GetHashCode();
                if (this.MediaTransferDestination != null)
                    hashCode = hashCode * 59 + this.MediaTransferDestination.GetHashCode();
                if (this.MediaTransferMethod != null)
                    hashCode = hashCode * 59 + this.MediaTransferMethod.GetHashCode();
                if (this.SuppressErrorReport != null)
                    hashCode = hashCode * 59 + this.SuppressErrorReport.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
