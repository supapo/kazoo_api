/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Validator for executing say commands
    /// </summary>
    [DataContract]
    public partial class CallflowsAudioMacroSay :  IEquatable<CallflowsAudioMacroSay>, IValidatableObject
    {
        /// <summary>
        /// The gender of the speaker
        /// </summary>
        /// <value>The gender of the speaker</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GenderEnum
        {
            
            /// <summary>
            /// Enum Masculine for value: masculine
            /// </summary>
            [EnumMember(Value = "masculine")]
            Masculine = 1,
            
            /// <summary>
            /// Enum Feminine for value: feminine
            /// </summary>
            [EnumMember(Value = "feminine")]
            Feminine = 2,
            
            /// <summary>
            /// Enum Neuter for value: neuter
            /// </summary>
            [EnumMember(Value = "neuter")]
            Neuter = 3
        }

        /// <summary>
        /// The gender of the speaker
        /// </summary>
        /// <value>The gender of the speaker</value>
        [DataMember(Name="gender", EmitDefaultValue=false)]
        public GenderEnum? Gender { get; set; }
        /// <summary>
        /// The method to use when saying the text
        /// </summary>
        /// <value>The method to use when saying the text</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodEnum
        {
            
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,
            
            /// <summary>
            /// Enum Pronounced for value: pronounced
            /// </summary>
            [EnumMember(Value = "pronounced")]
            Pronounced = 2,
            
            /// <summary>
            /// Enum Iterated for value: iterated
            /// </summary>
            [EnumMember(Value = "iterated")]
            Iterated = 3,
            
            /// <summary>
            /// Enum Counted for value: counted
            /// </summary>
            [EnumMember(Value = "counted")]
            Counted = 4
        }

        /// <summary>
        /// The method to use when saying the text
        /// </summary>
        /// <value>The method to use when saying the text</value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public MethodEnum? Method { get; set; }
        /// <summary>
        /// The type to use when saying the text
        /// </summary>
        /// <value>The type to use when saying the text</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 1,
            
            /// <summary>
            /// Enum Items for value: items
            /// </summary>
            [EnumMember(Value = "items")]
            Items = 2,
            
            /// <summary>
            /// Enum Persons for value: persons
            /// </summary>
            [EnumMember(Value = "persons")]
            Persons = 3,
            
            /// <summary>
            /// Enum Messages for value: messages
            /// </summary>
            [EnumMember(Value = "messages")]
            Messages = 4,
            
            /// <summary>
            /// Enum Currency for value: currency
            /// </summary>
            [EnumMember(Value = "currency")]
            Currency = 5,
            
            /// <summary>
            /// Enum Timemeasurement for value: time_measurement
            /// </summary>
            [EnumMember(Value = "time_measurement")]
            Timemeasurement = 6,
            
            /// <summary>
            /// Enum Currentdate for value: current_date
            /// </summary>
            [EnumMember(Value = "current_date")]
            Currentdate = 7,
            
            /// <summary>
            /// Enum Currenttime for value: current_time
            /// </summary>
            [EnumMember(Value = "current_time")]
            Currenttime = 8,
            
            /// <summary>
            /// Enum Currentdatetime for value: current_date_time
            /// </summary>
            [EnumMember(Value = "current_date_time")]
            Currentdatetime = 9,
            
            /// <summary>
            /// Enum Telephonenumber for value: telephone_number
            /// </summary>
            [EnumMember(Value = "telephone_number")]
            Telephonenumber = 10,
            
            /// <summary>
            /// Enum Telephoneextension for value: telephone_extension
            /// </summary>
            [EnumMember(Value = "telephone_extension")]
            Telephoneextension = 11,
            
            /// <summary>
            /// Enum Url for value: url
            /// </summary>
            [EnumMember(Value = "url")]
            Url = 12,
            
            /// <summary>
            /// Enum Ipaddress for value: ip_address
            /// </summary>
            [EnumMember(Value = "ip_address")]
            Ipaddress = 13,
            
            /// <summary>
            /// Enum EMailaddress for value: e-mail_address
            /// </summary>
            [EnumMember(Value = "e-mail_address")]
            EMailaddress = 14,
            
            /// <summary>
            /// Enum Postaladdress for value: postal_address
            /// </summary>
            [EnumMember(Value = "postal_address")]
            Postaladdress = 15,
            
            /// <summary>
            /// Enum Accountnumber for value: account_number
            /// </summary>
            [EnumMember(Value = "account_number")]
            Accountnumber = 16,
            
            /// <summary>
            /// Enum Namespelled for value: name_spelled
            /// </summary>
            [EnumMember(Value = "name_spelled")]
            Namespelled = 17,
            
            /// <summary>
            /// Enum Namephonetic for value: name_phonetic
            /// </summary>
            [EnumMember(Value = "name_phonetic")]
            Namephonetic = 18,
            
            /// <summary>
            /// Enum Shortdatetime for value: short_date_time
            /// </summary>
            [EnumMember(Value = "short_date_time")]
            Shortdatetime = 19
        }

        /// <summary>
        /// The type to use when saying the text
        /// </summary>
        /// <value>The type to use when saying the text</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsAudioMacroSay" /> class.
        /// </summary>
        /// <param name="gender">The gender of the speaker.</param>
        /// <param name="language">The language of the speaker.</param>
        /// <param name="method">The method to use when saying the text.</param>
        /// <param name="terminators">What DTMF can terminate playback of the audio.</param>
        /// <param name="text">Text to say.</param>
        /// <param name="type">The type to use when saying the text.</param>
        public CallflowsAudioMacroSay(GenderEnum? gender = default(GenderEnum?), string language = default(string), MethodEnum? method = default(MethodEnum?), List<string> terminators = default(List<string>), string text = default(string), TypeEnum? type = default(TypeEnum?))
        {
            this.Gender = gender;
            this.Language = language;
            this.Method = method;
            this.Terminators = terminators;
            this.Text = text;
            this.Type = type;
        }
        

        /// <summary>
        /// The language of the speaker
        /// </summary>
        /// <value>The language of the speaker</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }


        /// <summary>
        /// What DTMF can terminate playback of the audio
        /// </summary>
        /// <value>What DTMF can terminate playback of the audio</value>
        [DataMember(Name="terminators", EmitDefaultValue=false)]
        public List<string> Terminators { get; set; }

        /// <summary>
        /// Text to say
        /// </summary>
        /// <value>Text to say</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallflowsAudioMacroSay {\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Terminators: ").Append(Terminators).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallflowsAudioMacroSay);
        }

        /// <summary>
        /// Returns true if CallflowsAudioMacroSay instances are equal
        /// </summary>
        /// <param name="input">Instance of CallflowsAudioMacroSay to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallflowsAudioMacroSay input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.Terminators == input.Terminators ||
                    this.Terminators != null &&
                    this.Terminators.SequenceEqual(input.Terminators)
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Gender != null)
                    hashCode = hashCode * 59 + this.Gender.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.Terminators != null)
                    hashCode = hashCode * 59 + this.Terminators.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
