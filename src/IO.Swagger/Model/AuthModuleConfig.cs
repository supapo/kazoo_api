/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// crossbar authenticator module configuration
    /// </summary>
    [DataContract]
    public partial class AuthModuleConfig :  IEquatable<AuthModuleConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthModuleConfig" /> class.
        /// </summary>
        /// <param name="enabled">whether or not this authenticator module is enabled.</param>
        /// <param name="logFailedAttempts">should log failed logging attempts.</param>
        /// <param name="logSuccessfulAttempts">should log successful logging attempts.</param>
        /// <param name="multiFactor">multiFactor.</param>
        /// <param name="tokenAuthExpiryS">expiration period of the JWT token (seconds).</param>
        public AuthModuleConfig(bool? enabled = default(bool?), bool? logFailedAttempts = default(bool?), bool? logSuccessfulAttempts = default(bool?), AuthModuleConfigMultiFactor multiFactor = default(AuthModuleConfigMultiFactor), int? tokenAuthExpiryS = default(int?))
        {
            this.Enabled = enabled;
            this.LogFailedAttempts = logFailedAttempts;
            this.LogSuccessfulAttempts = logSuccessfulAttempts;
            this.MultiFactor = multiFactor;
            this.TokenAuthExpiryS = tokenAuthExpiryS;
        }
        
        /// <summary>
        /// whether or not this authenticator module is enabled
        /// </summary>
        /// <value>whether or not this authenticator module is enabled</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// should log failed logging attempts
        /// </summary>
        /// <value>should log failed logging attempts</value>
        [DataMember(Name="log_failed_attempts", EmitDefaultValue=false)]
        public bool? LogFailedAttempts { get; set; }

        /// <summary>
        /// should log successful logging attempts
        /// </summary>
        /// <value>should log successful logging attempts</value>
        [DataMember(Name="log_successful_attempts", EmitDefaultValue=false)]
        public bool? LogSuccessfulAttempts { get; set; }

        /// <summary>
        /// Gets or Sets MultiFactor
        /// </summary>
        [DataMember(Name="multi_factor", EmitDefaultValue=false)]
        public AuthModuleConfigMultiFactor MultiFactor { get; set; }

        /// <summary>
        /// expiration period of the JWT token (seconds)
        /// </summary>
        /// <value>expiration period of the JWT token (seconds)</value>
        [DataMember(Name="token_auth_expiry_s", EmitDefaultValue=false)]
        public int? TokenAuthExpiryS { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthModuleConfig {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  LogFailedAttempts: ").Append(LogFailedAttempts).Append("\n");
            sb.Append("  LogSuccessfulAttempts: ").Append(LogSuccessfulAttempts).Append("\n");
            sb.Append("  MultiFactor: ").Append(MultiFactor).Append("\n");
            sb.Append("  TokenAuthExpiryS: ").Append(TokenAuthExpiryS).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthModuleConfig);
        }

        /// <summary>
        /// Returns true if AuthModuleConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthModuleConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthModuleConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.LogFailedAttempts == input.LogFailedAttempts ||
                    (this.LogFailedAttempts != null &&
                    this.LogFailedAttempts.Equals(input.LogFailedAttempts))
                ) && 
                (
                    this.LogSuccessfulAttempts == input.LogSuccessfulAttempts ||
                    (this.LogSuccessfulAttempts != null &&
                    this.LogSuccessfulAttempts.Equals(input.LogSuccessfulAttempts))
                ) && 
                (
                    this.MultiFactor == input.MultiFactor ||
                    (this.MultiFactor != null &&
                    this.MultiFactor.Equals(input.MultiFactor))
                ) && 
                (
                    this.TokenAuthExpiryS == input.TokenAuthExpiryS ||
                    (this.TokenAuthExpiryS != null &&
                    this.TokenAuthExpiryS.Equals(input.TokenAuthExpiryS))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.LogFailedAttempts != null)
                    hashCode = hashCode * 59 + this.LogFailedAttempts.GetHashCode();
                if (this.LogSuccessfulAttempts != null)
                    hashCode = hashCode * 59 + this.LogSuccessfulAttempts.GetHashCode();
                if (this.MultiFactor != null)
                    hashCode = hashCode * 59 + this.MultiFactor.GetHashCode();
                if (this.TokenAuthExpiryS != null)
                    hashCode = hashCode * 59 + this.TokenAuthExpiryS.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
