/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Whitelabel settings
    /// </summary>
    [DataContract]
    public partial class Whitelabel :  IEquatable<Whitelabel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Whitelabel" /> class.
        /// </summary>
        /// <param name="companyName">The company name to display to users.</param>
        /// <param name="domain">This is the whitelabeled domain that users will be entering to reach the UI.</param>
        /// <param name="fakeApiUrl">This is a whitelabeled API URL, primarily used by the developer application.</param>
        /// <param name="hideCredits">When checked this hides the credits (default to false).</param>
        /// <param name="hidePowered">When checked this hides the powered by 2600Hz on the bottom right (default to false).</param>
        /// <param name="hideRegistration">When checked this hides the ability to register for a new account (default to false).</param>
        /// <param name="inboundTrunksPrice">The price to show for inbound trunks, this is currently only for display purposes.</param>
        /// <param name="nav">nav.</param>
        /// <param name="outboundTrunksPrice">The price to show for outbound trunks, this is currently only for display purposes.</param>
        /// <param name="port">port.</param>
        /// <param name="twowayTrunksPrice">The price to show for twoway trunks, this is currently only for display purposes.</param>
        public Whitelabel(string companyName = default(string), string domain = default(string), string fakeApiUrl = default(string), bool? hideCredits = false, bool? hidePowered = false, bool? hideRegistration = false, string inboundTrunksPrice = default(string), WhitelabelNav nav = default(WhitelabelNav), string outboundTrunksPrice = default(string), WhitelabelPort port = default(WhitelabelPort), string twowayTrunksPrice = default(string))
        {
            this.CompanyName = companyName;
            this.Domain = domain;
            this.FakeApiUrl = fakeApiUrl;
            // use default value if no "hideCredits" provided
            if (hideCredits == null)
            {
                this.HideCredits = false;
            }
            else
            {
                this.HideCredits = hideCredits;
            }
            // use default value if no "hidePowered" provided
            if (hidePowered == null)
            {
                this.HidePowered = false;
            }
            else
            {
                this.HidePowered = hidePowered;
            }
            // use default value if no "hideRegistration" provided
            if (hideRegistration == null)
            {
                this.HideRegistration = false;
            }
            else
            {
                this.HideRegistration = hideRegistration;
            }
            this.InboundTrunksPrice = inboundTrunksPrice;
            this.Nav = nav;
            this.OutboundTrunksPrice = outboundTrunksPrice;
            this.Port = port;
            this.TwowayTrunksPrice = twowayTrunksPrice;
        }
        
        /// <summary>
        /// The company name to display to users
        /// </summary>
        /// <value>The company name to display to users</value>
        [DataMember(Name="company_name", EmitDefaultValue=false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// This is the whitelabeled domain that users will be entering to reach the UI
        /// </summary>
        /// <value>This is the whitelabeled domain that users will be entering to reach the UI</value>
        [DataMember(Name="domain", EmitDefaultValue=false)]
        public string Domain { get; set; }

        /// <summary>
        /// This is a whitelabeled API URL, primarily used by the developer application
        /// </summary>
        /// <value>This is a whitelabeled API URL, primarily used by the developer application</value>
        [DataMember(Name="fake_api_url", EmitDefaultValue=false)]
        public string FakeApiUrl { get; set; }

        /// <summary>
        /// When checked this hides the credits
        /// </summary>
        /// <value>When checked this hides the credits</value>
        [DataMember(Name="hide_credits", EmitDefaultValue=false)]
        public bool? HideCredits { get; set; }

        /// <summary>
        /// When checked this hides the powered by 2600Hz on the bottom right
        /// </summary>
        /// <value>When checked this hides the powered by 2600Hz on the bottom right</value>
        [DataMember(Name="hide_powered", EmitDefaultValue=false)]
        public bool? HidePowered { get; set; }

        /// <summary>
        /// When checked this hides the ability to register for a new account
        /// </summary>
        /// <value>When checked this hides the ability to register for a new account</value>
        [DataMember(Name="hide_registration", EmitDefaultValue=false)]
        public bool? HideRegistration { get; set; }

        /// <summary>
        /// The price to show for inbound trunks, this is currently only for display purposes
        /// </summary>
        /// <value>The price to show for inbound trunks, this is currently only for display purposes</value>
        [DataMember(Name="inbound_trunks_price", EmitDefaultValue=false)]
        public string InboundTrunksPrice { get; set; }

        /// <summary>
        /// Gets or Sets Nav
        /// </summary>
        [DataMember(Name="nav", EmitDefaultValue=false)]
        public WhitelabelNav Nav { get; set; }

        /// <summary>
        /// The price to show for outbound trunks, this is currently only for display purposes
        /// </summary>
        /// <value>The price to show for outbound trunks, this is currently only for display purposes</value>
        [DataMember(Name="outbound_trunks_price", EmitDefaultValue=false)]
        public string OutboundTrunksPrice { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public WhitelabelPort Port { get; set; }

        /// <summary>
        /// The price to show for twoway trunks, this is currently only for display purposes
        /// </summary>
        /// <value>The price to show for twoway trunks, this is currently only for display purposes</value>
        [DataMember(Name="twoway_trunks_price", EmitDefaultValue=false)]
        public string TwowayTrunksPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Whitelabel {\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  FakeApiUrl: ").Append(FakeApiUrl).Append("\n");
            sb.Append("  HideCredits: ").Append(HideCredits).Append("\n");
            sb.Append("  HidePowered: ").Append(HidePowered).Append("\n");
            sb.Append("  HideRegistration: ").Append(HideRegistration).Append("\n");
            sb.Append("  InboundTrunksPrice: ").Append(InboundTrunksPrice).Append("\n");
            sb.Append("  Nav: ").Append(Nav).Append("\n");
            sb.Append("  OutboundTrunksPrice: ").Append(OutboundTrunksPrice).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  TwowayTrunksPrice: ").Append(TwowayTrunksPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Whitelabel);
        }

        /// <summary>
        /// Returns true if Whitelabel instances are equal
        /// </summary>
        /// <param name="input">Instance of Whitelabel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Whitelabel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.FakeApiUrl == input.FakeApiUrl ||
                    (this.FakeApiUrl != null &&
                    this.FakeApiUrl.Equals(input.FakeApiUrl))
                ) && 
                (
                    this.HideCredits == input.HideCredits ||
                    (this.HideCredits != null &&
                    this.HideCredits.Equals(input.HideCredits))
                ) && 
                (
                    this.HidePowered == input.HidePowered ||
                    (this.HidePowered != null &&
                    this.HidePowered.Equals(input.HidePowered))
                ) && 
                (
                    this.HideRegistration == input.HideRegistration ||
                    (this.HideRegistration != null &&
                    this.HideRegistration.Equals(input.HideRegistration))
                ) && 
                (
                    this.InboundTrunksPrice == input.InboundTrunksPrice ||
                    (this.InboundTrunksPrice != null &&
                    this.InboundTrunksPrice.Equals(input.InboundTrunksPrice))
                ) && 
                (
                    this.Nav == input.Nav ||
                    (this.Nav != null &&
                    this.Nav.Equals(input.Nav))
                ) && 
                (
                    this.OutboundTrunksPrice == input.OutboundTrunksPrice ||
                    (this.OutboundTrunksPrice != null &&
                    this.OutboundTrunksPrice.Equals(input.OutboundTrunksPrice))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.TwowayTrunksPrice == input.TwowayTrunksPrice ||
                    (this.TwowayTrunksPrice != null &&
                    this.TwowayTrunksPrice.Equals(input.TwowayTrunksPrice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                if (this.FakeApiUrl != null)
                    hashCode = hashCode * 59 + this.FakeApiUrl.GetHashCode();
                if (this.HideCredits != null)
                    hashCode = hashCode * 59 + this.HideCredits.GetHashCode();
                if (this.HidePowered != null)
                    hashCode = hashCode * 59 + this.HidePowered.GetHashCode();
                if (this.HideRegistration != null)
                    hashCode = hashCode * 59 + this.HideRegistration.GetHashCode();
                if (this.InboundTrunksPrice != null)
                    hashCode = hashCode * 59 + this.InboundTrunksPrice.GetHashCode();
                if (this.Nav != null)
                    hashCode = hashCode * 59 + this.Nav.GetHashCode();
                if (this.OutboundTrunksPrice != null)
                    hashCode = hashCode * 59 + this.OutboundTrunksPrice.GetHashCode();
                if (this.Port != null)
                    hashCode = hashCode * 59 + this.Port.GetHashCode();
                if (this.TwowayTrunksPrice != null)
                    hashCode = hashCode * 59 + this.TwowayTrunksPrice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
