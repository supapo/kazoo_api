/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Endpoints lookup by cid number
    /// </summary>
    [DataContract]
    public partial class CallflowsRouteToCid :  IEquatable<CallflowsRouteToCid>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsRouteToCid" /> class.
        /// </summary>
        /// <param name="canCallSelf">Toggle whether devices of the same owner can call each other.</param>
        /// <param name="canTextSelf">Toggle whether devices of the same owner can text each other.</param>
        /// <param name="cidTypes">CID types to perform search: internal, external, custom.</param>
        /// <param name="delay">How long to delay ringing the device, in seconds.</param>
        /// <param name="endpointTypes">Endpoint types to perform search: user, device.</param>
        /// <param name="skipModule">When set to true this callflow action is skipped, advancing to the wildcard branch (if any).</param>
        /// <param name="staticInvite">Override the SIP Username.</param>
        /// <param name="suppressClid">Suppress sending caller ID.</param>
        /// <param name="timeout">Time, in seconds, to wait for device to bridge.</param>
        public CallflowsRouteToCid(bool? canCallSelf = default(bool?), bool? canTextSelf = default(bool?), List<string> cidTypes = default(List<string>), int? delay = default(int?), List<string> endpointTypes = default(List<string>), bool? skipModule = default(bool?), string staticInvite = default(string), bool? suppressClid = default(bool?), int? timeout = default(int?))
        {
            this.CanCallSelf = canCallSelf;
            this.CanTextSelf = canTextSelf;
            this.CidTypes = cidTypes;
            this.Delay = delay;
            this.EndpointTypes = endpointTypes;
            this.SkipModule = skipModule;
            this.StaticInvite = staticInvite;
            this.SuppressClid = suppressClid;
            this.Timeout = timeout;
        }
        
        /// <summary>
        /// Toggle whether devices of the same owner can call each other
        /// </summary>
        /// <value>Toggle whether devices of the same owner can call each other</value>
        [DataMember(Name="can_call_self", EmitDefaultValue=false)]
        public bool? CanCallSelf { get; set; }

        /// <summary>
        /// Toggle whether devices of the same owner can text each other
        /// </summary>
        /// <value>Toggle whether devices of the same owner can text each other</value>
        [DataMember(Name="can_text_self", EmitDefaultValue=false)]
        public bool? CanTextSelf { get; set; }

        /// <summary>
        /// CID types to perform search: internal, external, custom
        /// </summary>
        /// <value>CID types to perform search: internal, external, custom</value>
        [DataMember(Name="cid_types", EmitDefaultValue=false)]
        public List<string> CidTypes { get; set; }

        /// <summary>
        /// How long to delay ringing the device, in seconds
        /// </summary>
        /// <value>How long to delay ringing the device, in seconds</value>
        [DataMember(Name="delay", EmitDefaultValue=false)]
        public int? Delay { get; set; }

        /// <summary>
        /// Endpoint types to perform search: user, device
        /// </summary>
        /// <value>Endpoint types to perform search: user, device</value>
        [DataMember(Name="endpoint_types", EmitDefaultValue=false)]
        public List<string> EndpointTypes { get; set; }

        /// <summary>
        /// When set to true this callflow action is skipped, advancing to the wildcard branch (if any)
        /// </summary>
        /// <value>When set to true this callflow action is skipped, advancing to the wildcard branch (if any)</value>
        [DataMember(Name="skip_module", EmitDefaultValue=false)]
        public bool? SkipModule { get; set; }

        /// <summary>
        /// Override the SIP Username
        /// </summary>
        /// <value>Override the SIP Username</value>
        [DataMember(Name="static_invite", EmitDefaultValue=false)]
        public string StaticInvite { get; set; }

        /// <summary>
        /// Suppress sending caller ID
        /// </summary>
        /// <value>Suppress sending caller ID</value>
        [DataMember(Name="suppress_clid", EmitDefaultValue=false)]
        public bool? SuppressClid { get; set; }

        /// <summary>
        /// Time, in seconds, to wait for device to bridge
        /// </summary>
        /// <value>Time, in seconds, to wait for device to bridge</value>
        [DataMember(Name="timeout", EmitDefaultValue=false)]
        public int? Timeout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallflowsRouteToCid {\n");
            sb.Append("  CanCallSelf: ").Append(CanCallSelf).Append("\n");
            sb.Append("  CanTextSelf: ").Append(CanTextSelf).Append("\n");
            sb.Append("  CidTypes: ").Append(CidTypes).Append("\n");
            sb.Append("  Delay: ").Append(Delay).Append("\n");
            sb.Append("  EndpointTypes: ").Append(EndpointTypes).Append("\n");
            sb.Append("  SkipModule: ").Append(SkipModule).Append("\n");
            sb.Append("  StaticInvite: ").Append(StaticInvite).Append("\n");
            sb.Append("  SuppressClid: ").Append(SuppressClid).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallflowsRouteToCid);
        }

        /// <summary>
        /// Returns true if CallflowsRouteToCid instances are equal
        /// </summary>
        /// <param name="input">Instance of CallflowsRouteToCid to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallflowsRouteToCid input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CanCallSelf == input.CanCallSelf ||
                    (this.CanCallSelf != null &&
                    this.CanCallSelf.Equals(input.CanCallSelf))
                ) && 
                (
                    this.CanTextSelf == input.CanTextSelf ||
                    (this.CanTextSelf != null &&
                    this.CanTextSelf.Equals(input.CanTextSelf))
                ) && 
                (
                    this.CidTypes == input.CidTypes ||
                    this.CidTypes != null &&
                    this.CidTypes.SequenceEqual(input.CidTypes)
                ) && 
                (
                    this.Delay == input.Delay ||
                    (this.Delay != null &&
                    this.Delay.Equals(input.Delay))
                ) && 
                (
                    this.EndpointTypes == input.EndpointTypes ||
                    this.EndpointTypes != null &&
                    this.EndpointTypes.SequenceEqual(input.EndpointTypes)
                ) && 
                (
                    this.SkipModule == input.SkipModule ||
                    (this.SkipModule != null &&
                    this.SkipModule.Equals(input.SkipModule))
                ) && 
                (
                    this.StaticInvite == input.StaticInvite ||
                    (this.StaticInvite != null &&
                    this.StaticInvite.Equals(input.StaticInvite))
                ) && 
                (
                    this.SuppressClid == input.SuppressClid ||
                    (this.SuppressClid != null &&
                    this.SuppressClid.Equals(input.SuppressClid))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    (this.Timeout != null &&
                    this.Timeout.Equals(input.Timeout))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CanCallSelf != null)
                    hashCode = hashCode * 59 + this.CanCallSelf.GetHashCode();
                if (this.CanTextSelf != null)
                    hashCode = hashCode * 59 + this.CanTextSelf.GetHashCode();
                if (this.CidTypes != null)
                    hashCode = hashCode * 59 + this.CidTypes.GetHashCode();
                if (this.Delay != null)
                    hashCode = hashCode * 59 + this.Delay.GetHashCode();
                if (this.EndpointTypes != null)
                    hashCode = hashCode * 59 + this.EndpointTypes.GetHashCode();
                if (this.SkipModule != null)
                    hashCode = hashCode * 59 + this.SkipModule.GetHashCode();
                if (this.StaticInvite != null)
                    hashCode = hashCode * 59 + this.StaticInvite.GetHashCode();
                if (this.SuppressClid != null)
                    hashCode = hashCode * 59 + this.SuppressClid.GetHashCode();
                if (this.Timeout != null)
                    hashCode = hashCode * 59 + this.Timeout.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
