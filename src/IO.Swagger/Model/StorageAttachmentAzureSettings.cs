/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Settings for the Azure account
    /// </summary>
    [DataContract]
    public partial class StorageAttachmentAzureSettings :  IEquatable<StorageAttachmentAzureSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageAttachmentAzureSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StorageAttachmentAzureSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageAttachmentAzureSettings" /> class.
        /// </summary>
        /// <param name="account">the azure account name (required).</param>
        /// <param name="container">the azure container where the files should be saved (required).</param>
        /// <param name="key">the azure api key (required).</param>
        public StorageAttachmentAzureSettings(string account = default(string), string container = default(string), string key = default(string))
        {
            // to ensure "account" is required (not null)
            if (account == null)
            {
                throw new InvalidDataException("account is a required property for StorageAttachmentAzureSettings and cannot be null");
            }
            else
            {
                this.Account = account;
            }
            // to ensure "container" is required (not null)
            if (container == null)
            {
                throw new InvalidDataException("container is a required property for StorageAttachmentAzureSettings and cannot be null");
            }
            else
            {
                this.Container = container;
            }
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new InvalidDataException("key is a required property for StorageAttachmentAzureSettings and cannot be null");
            }
            else
            {
                this.Key = key;
            }
        }
        
        /// <summary>
        /// the azure account name
        /// </summary>
        /// <value>the azure account name</value>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public string Account { get; set; }

        /// <summary>
        /// the azure container where the files should be saved
        /// </summary>
        /// <value>the azure container where the files should be saved</value>
        [DataMember(Name="container", EmitDefaultValue=false)]
        public string Container { get; set; }

        /// <summary>
        /// the azure api key
        /// </summary>
        /// <value>the azure api key</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StorageAttachmentAzureSettings {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Container: ").Append(Container).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StorageAttachmentAzureSettings);
        }

        /// <summary>
        /// Returns true if StorageAttachmentAzureSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of StorageAttachmentAzureSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorageAttachmentAzureSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Container == input.Container ||
                    (this.Container != null &&
                    this.Container.Equals(input.Container))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.Container != null)
                    hashCode = hashCode * 59 + this.Container.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
