/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Settings for the Google Drive account
    /// </summary>
    [DataContract]
    public partial class StorageAttachmentGoogleDriveSettings :  IEquatable<StorageAttachmentGoogleDriveSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageAttachmentGoogleDriveSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StorageAttachmentGoogleDriveSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageAttachmentGoogleDriveSettings" /> class.
        /// </summary>
        /// <param name="folderId">Folder ID in which to store the file, if any.</param>
        /// <param name="oauthDocId">Doc ID in the system &#39;auth&#39; database (required).</param>
        public StorageAttachmentGoogleDriveSettings(string folderId = default(string), string oauthDocId = default(string))
        {
            // to ensure "oauthDocId" is required (not null)
            if (oauthDocId == null)
            {
                throw new InvalidDataException("oauthDocId is a required property for StorageAttachmentGoogleDriveSettings and cannot be null");
            }
            else
            {
                this.OauthDocId = oauthDocId;
            }
            this.FolderId = folderId;
        }
        
        /// <summary>
        /// Folder ID in which to store the file, if any
        /// </summary>
        /// <value>Folder ID in which to store the file, if any</value>
        [DataMember(Name="folder_id", EmitDefaultValue=false)]
        public string FolderId { get; set; }

        /// <summary>
        /// Doc ID in the system &#39;auth&#39; database
        /// </summary>
        /// <value>Doc ID in the system &#39;auth&#39; database</value>
        [DataMember(Name="oauth_doc_id", EmitDefaultValue=false)]
        public string OauthDocId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StorageAttachmentGoogleDriveSettings {\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  OauthDocId: ").Append(OauthDocId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StorageAttachmentGoogleDriveSettings);
        }

        /// <summary>
        /// Returns true if StorageAttachmentGoogleDriveSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of StorageAttachmentGoogleDriveSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorageAttachmentGoogleDriveSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FolderId == input.FolderId ||
                    (this.FolderId != null &&
                    this.FolderId.Equals(input.FolderId))
                ) && 
                (
                    this.OauthDocId == input.OauthDocId ||
                    (this.OauthDocId != null &&
                    this.OauthDocId.Equals(input.OauthDocId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FolderId != null)
                    hashCode = hashCode * 59 + this.FolderId.GetHashCode();
                if (this.OauthDocId != null)
                    hashCode = hashCode * 59 + this.OauthDocId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // OauthDocId (string) minLength
            if(this.OauthDocId != null && this.OauthDocId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OauthDocId, length must be greater than 1.", new [] { "OauthDocId" });
            }

            yield break;
        }
    }

}
