/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TrunkstoreServers
    /// </summary>
    [DataContract]
    public partial class TrunkstoreServers :  IEquatable<TrunkstoreServers>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrunkstoreServers" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TrunkstoreServers() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrunkstoreServers" /> class.
        /// </summary>
        /// <param name="dIDs">dIDs.</param>
        /// <param name="auth">auth (required).</param>
        /// <param name="name">Human-friendly name of the server.</param>
        /// <param name="options">options.</param>
        public TrunkstoreServers(Object dIDs = default(Object), TrunkstoreAuth auth = default(TrunkstoreAuth), string name = default(string), TrunkstoreOptions options = default(TrunkstoreOptions))
        {
            // to ensure "auth" is required (not null)
            if (auth == null)
            {
                throw new InvalidDataException("auth is a required property for TrunkstoreServers and cannot be null");
            }
            else
            {
                this.Auth = auth;
            }
            this.DIDs = dIDs;
            this.Name = name;
            this.Options = options;
        }
        
        /// <summary>
        /// Gets or Sets DIDs
        /// </summary>
        [DataMember(Name="DIDs", EmitDefaultValue=false)]
        public Object DIDs { get; set; }

        /// <summary>
        /// Gets or Sets Auth
        /// </summary>
        [DataMember(Name="auth", EmitDefaultValue=false)]
        public TrunkstoreAuth Auth { get; set; }

        /// <summary>
        /// Human-friendly name of the server
        /// </summary>
        /// <value>Human-friendly name of the server</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public TrunkstoreOptions Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrunkstoreServers {\n");
            sb.Append("  DIDs: ").Append(DIDs).Append("\n");
            sb.Append("  Auth: ").Append(Auth).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrunkstoreServers);
        }

        /// <summary>
        /// Returns true if TrunkstoreServers instances are equal
        /// </summary>
        /// <param name="input">Instance of TrunkstoreServers to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrunkstoreServers input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DIDs == input.DIDs ||
                    (this.DIDs != null &&
                    this.DIDs.Equals(input.DIDs))
                ) && 
                (
                    this.Auth == input.Auth ||
                    (this.Auth != null &&
                    this.Auth.Equals(input.Auth))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Options == input.Options ||
                    (this.Options != null &&
                    this.Options.Equals(input.Options))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DIDs != null)
                    hashCode = hashCode * 59 + this.DIDs.GetHashCode();
                if (this.Auth != null)
                    hashCode = hashCode * 59 + this.Auth.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            yield break;
        }
    }

}
