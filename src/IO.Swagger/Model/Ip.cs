/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// IP address assigned to the cluster
    /// </summary>
    [DataContract]
    public partial class Ip :  IEquatable<Ip>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ip" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Ip() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Ip" /> class.
        /// </summary>
        /// <param name="host">The hostname the IP belongs to (required).</param>
        /// <param name="ip">The IP addresses (required).</param>
        /// <param name="zone">The zone name the IP belongs to (required).</param>
        public Ip(string host = default(string), Object ip = default(Object), string zone = default(string))
        {
            // to ensure "host" is required (not null)
            if (host == null)
            {
                throw new InvalidDataException("host is a required property for Ip and cannot be null");
            }
            else
            {
                this.Host = host;
            }
            // to ensure "ip" is required (not null)
            if (ip == null)
            {
                throw new InvalidDataException("ip is a required property for Ip and cannot be null");
            }
            else
            {
                this._Ip = ip;
            }
            // to ensure "zone" is required (not null)
            if (zone == null)
            {
                throw new InvalidDataException("zone is a required property for Ip and cannot be null");
            }
            else
            {
                this.Zone = zone;
            }
        }
        
        /// <summary>
        /// The hostname the IP belongs to
        /// </summary>
        /// <value>The hostname the IP belongs to</value>
        [DataMember(Name="host", EmitDefaultValue=false)]
        public string Host { get; set; }

        /// <summary>
        /// The IP addresses
        /// </summary>
        /// <value>The IP addresses</value>
        [DataMember(Name="ip", EmitDefaultValue=false)]
        public Object _Ip { get; set; }

        /// <summary>
        /// The zone name the IP belongs to
        /// </summary>
        /// <value>The zone name the IP belongs to</value>
        [DataMember(Name="zone", EmitDefaultValue=false)]
        public string Zone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ip {\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  _Ip: ").Append(_Ip).Append("\n");
            sb.Append("  Zone: ").Append(Zone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Ip);
        }

        /// <summary>
        /// Returns true if Ip instances are equal
        /// </summary>
        /// <param name="input">Instance of Ip to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ip input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this._Ip == input._Ip ||
                    (this._Ip != null &&
                    this._Ip.Equals(input._Ip))
                ) && 
                (
                    this.Zone == input.Zone ||
                    (this.Zone != null &&
                    this.Zone.Equals(input.Zone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Host != null)
                    hashCode = hashCode * 59 + this.Host.GetHashCode();
                if (this._Ip != null)
                    hashCode = hashCode * 59 + this._Ip.GetHashCode();
                if (this.Zone != null)
                    hashCode = hashCode * 59 + this.Zone.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Host (string) minLength
            if(this.Host != null && this.Host.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Host, length must be greater than 1.", new [] { "Host" });
            }

            // Zone (string) minLength
            if(this.Zone != null && this.Zone.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Zone, length must be greater than 1.", new [] { "Zone" });
            }

            yield break;
        }
    }

}
