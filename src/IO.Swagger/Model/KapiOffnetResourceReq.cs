/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for offnet_resource.req
    /// </summary>
    [DataContract]
    public partial class KapiOffnetResourceReq :  IEquatable<KapiOffnetResourceReq>, IValidatableObject
    {
        /// <summary>
        /// Defines ApplicationName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApplicationNameEnum
        {
            
            /// <summary>
            /// Enum Bridge for value: bridge
            /// </summary>
            [EnumMember(Value = "bridge")]
            Bridge = 1,
            
            /// <summary>
            /// Enum Eavesdrop for value: eavesdrop
            /// </summary>
            [EnumMember(Value = "eavesdrop")]
            Eavesdrop = 2,
            
            /// <summary>
            /// Enum Fax for value: fax
            /// </summary>
            [EnumMember(Value = "fax")]
            Fax = 3,
            
            /// <summary>
            /// Enum Park for value: park
            /// </summary>
            [EnumMember(Value = "park")]
            Park = 4,
            
            /// <summary>
            /// Enum Sms for value: sms
            /// </summary>
            [EnumMember(Value = "sms")]
            Sms = 5,
            
            /// <summary>
            /// Enum Transfer for value: transfer
            /// </summary>
            [EnumMember(Value = "transfer")]
            Transfer = 6
        }

        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name="Application-Name", EmitDefaultValue=false)]
        public ApplicationNameEnum ApplicationName { get; set; }
        /// <summary>
        /// Defines BLegEvents
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BLegEventsEnum
        {
            
            /// <summary>
            /// Enum CALLSECURE for value: CALL_SECURE
            /// </summary>
            [EnumMember(Value = "CALL_SECURE")]
            CALLSECURE = 1,
            
            /// <summary>
            /// Enum CALLUPDATE for value: CALL_UPDATE
            /// </summary>
            [EnumMember(Value = "CALL_UPDATE")]
            CALLUPDATE = 2,
            
            /// <summary>
            /// Enum CHANNELANSWER for value: CHANNEL_ANSWER
            /// </summary>
            [EnumMember(Value = "CHANNEL_ANSWER")]
            CHANNELANSWER = 3,
            
            /// <summary>
            /// Enum CHANNELCREATE for value: CHANNEL_CREATE
            /// </summary>
            [EnumMember(Value = "CHANNEL_CREATE")]
            CHANNELCREATE = 4,
            
            /// <summary>
            /// Enum CHANNELDESTROY for value: CHANNEL_DESTROY
            /// </summary>
            [EnumMember(Value = "CHANNEL_DESTROY")]
            CHANNELDESTROY = 5,
            
            /// <summary>
            /// Enum CHANNELEXECUTE for value: CHANNEL_EXECUTE
            /// </summary>
            [EnumMember(Value = "CHANNEL_EXECUTE")]
            CHANNELEXECUTE = 6,
            
            /// <summary>
            /// Enum CHANNELEXECUTECOMPLETE for value: CHANNEL_EXECUTE_COMPLETE
            /// </summary>
            [EnumMember(Value = "CHANNEL_EXECUTE_COMPLETE")]
            CHANNELEXECUTECOMPLETE = 7,
            
            /// <summary>
            /// Enum CHANNELEXECUTEERROR for value: CHANNEL_EXECUTE_ERROR
            /// </summary>
            [EnumMember(Value = "CHANNEL_EXECUTE_ERROR")]
            CHANNELEXECUTEERROR = 8,
            
            /// <summary>
            /// Enum CHANNELFAXSTATUS for value: CHANNEL_FAX_STATUS
            /// </summary>
            [EnumMember(Value = "CHANNEL_FAX_STATUS")]
            CHANNELFAXSTATUS = 9,
            
            /// <summary>
            /// Enum CHANNELINTERCEPTED for value: CHANNEL_INTERCEPTED
            /// </summary>
            [EnumMember(Value = "CHANNEL_INTERCEPTED")]
            CHANNELINTERCEPTED = 10,
            
            /// <summary>
            /// Enum CHANNELPROGRESSMEDIA for value: CHANNEL_PROGRESS_MEDIA
            /// </summary>
            [EnumMember(Value = "CHANNEL_PROGRESS_MEDIA")]
            CHANNELPROGRESSMEDIA = 11,
            
            /// <summary>
            /// Enum CHANNELREPLACED for value: CHANNEL_REPLACED
            /// </summary>
            [EnumMember(Value = "CHANNEL_REPLACED")]
            CHANNELREPLACED = 12,
            
            /// <summary>
            /// Enum CHANNELTRANSFEREE for value: CHANNEL_TRANSFEREE
            /// </summary>
            [EnumMember(Value = "CHANNEL_TRANSFEREE")]
            CHANNELTRANSFEREE = 13,
            
            /// <summary>
            /// Enum CHANNELTRANSFEROR for value: CHANNEL_TRANSFEROR
            /// </summary>
            [EnumMember(Value = "CHANNEL_TRANSFEROR")]
            CHANNELTRANSFEROR = 14,
            
            /// <summary>
            /// Enum CHANNELBRIDGE for value: CHANNEL_BRIDGE
            /// </summary>
            [EnumMember(Value = "CHANNEL_BRIDGE")]
            CHANNELBRIDGE = 15,
            
            /// <summary>
            /// Enum CHANNELUNBRIDGE for value: CHANNEL_UNBRIDGE
            /// </summary>
            [EnumMember(Value = "CHANNEL_UNBRIDGE")]
            CHANNELUNBRIDGE = 16,
            
            /// <summary>
            /// Enum CHANNELHOLD for value: CHANNEL_HOLD
            /// </summary>
            [EnumMember(Value = "CHANNEL_HOLD")]
            CHANNELHOLD = 17,
            
            /// <summary>
            /// Enum CHANNELUNHOLD for value: CHANNEL_UNHOLD
            /// </summary>
            [EnumMember(Value = "CHANNEL_UNHOLD")]
            CHANNELUNHOLD = 18,
            
            /// <summary>
            /// Enum DETECTEDTONE for value: DETECTED_TONE
            /// </summary>
            [EnumMember(Value = "DETECTED_TONE")]
            DETECTEDTONE = 19,
            
            /// <summary>
            /// Enum DTMF for value: DTMF
            /// </summary>
            [EnumMember(Value = "DTMF")]
            DTMF = 20,
            
            /// <summary>
            /// Enum LEGCREATED for value: LEG_CREATED
            /// </summary>
            [EnumMember(Value = "LEG_CREATED")]
            LEGCREATED = 21,
            
            /// <summary>
            /// Enum LEGDESTROYED for value: LEG_DESTROYED
            /// </summary>
            [EnumMember(Value = "LEG_DESTROYED")]
            LEGDESTROYED = 22,
            
            /// <summary>
            /// Enum RECORDSTART for value: RECORD_START
            /// </summary>
            [EnumMember(Value = "RECORD_START")]
            RECORDSTART = 23,
            
            /// <summary>
            /// Enum RECORDSTOP for value: RECORD_STOP
            /// </summary>
            [EnumMember(Value = "RECORD_STOP")]
            RECORDSTOP = 24,
            
            /// <summary>
            /// Enum Dialplan for value: dialplan
            /// </summary>
            [EnumMember(Value = "dialplan")]
            Dialplan = 25
        }


        /// <summary>
        /// Gets or Sets BLegEvents
        /// </summary>
        [DataMember(Name="B-Leg-Events", EmitDefaultValue=false)]
        public List<BLegEventsEnum> BLegEvents { get; set; }
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Resource for value: resource
            /// </summary>
            [EnumMember(Value = "resource")]
            Resource = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Offnetreq for value: offnet_req
            /// </summary>
            [EnumMember(Value = "offnet_req")]
            Offnetreq = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Defines Media
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MediaEnum
        {
            
            /// <summary>
            /// Enum Process for value: process
            /// </summary>
            [EnumMember(Value = "process")]
            Process = 1,
            
            /// <summary>
            /// Enum Bypass for value: bypass
            /// </summary>
            [EnumMember(Value = "bypass")]
            Bypass = 2,
            
            /// <summary>
            /// Enum Auto for value: auto
            /// </summary>
            [EnumMember(Value = "auto")]
            Auto = 3
        }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name="Media", EmitDefaultValue=false)]
        public MediaEnum? Media { get; set; }
        /// <summary>
        /// Defines Mode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            
            /// <summary>
            /// Enum Full for value: full
            /// </summary>
            [EnumMember(Value = "full")]
            Full = 1,
            
            /// <summary>
            /// Enum Listen for value: listen
            /// </summary>
            [EnumMember(Value = "listen")]
            Listen = 2,
            
            /// <summary>
            /// Enum Whisper for value: whisper
            /// </summary>
            [EnumMember(Value = "whisper")]
            Whisper = 3
        }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name="Mode", EmitDefaultValue=false)]
        public ModeEnum? Mode { get; set; }
        /// <summary>
        /// Defines ResourceType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResourceTypeEnum
        {
            
            /// <summary>
            /// Enum Audio for value: audio
            /// </summary>
            [EnumMember(Value = "audio")]
            Audio = 1,
            
            /// <summary>
            /// Enum Video for value: video
            /// </summary>
            [EnumMember(Value = "video")]
            Video = 2,
            
            /// <summary>
            /// Enum Originate for value: originate
            /// </summary>
            [EnumMember(Value = "originate")]
            Originate = 3,
            
            /// <summary>
            /// Enum Sms for value: sms
            /// </summary>
            [EnumMember(Value = "sms")]
            Sms = 4
        }

        /// <summary>
        /// Gets or Sets ResourceType
        /// </summary>
        [DataMember(Name="Resource-Type", EmitDefaultValue=false)]
        public ResourceTypeEnum ResourceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiOffnetResourceReq" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiOffnetResourceReq() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiOffnetResourceReq" /> class.
        /// </summary>
        /// <param name="accountID">accountID.</param>
        /// <param name="accountRealm">accountRealm.</param>
        /// <param name="applicationData">applicationData.</param>
        /// <param name="applicationName">applicationName (required).</param>
        /// <param name="assertedIdentityName">assertedIdentityName.</param>
        /// <param name="assertedIdentityNumber">assertedIdentityNumber.</param>
        /// <param name="assertedIdentityRealm">assertedIdentityRealm.</param>
        /// <param name="bLegEvents">bLegEvents.</param>
        /// <param name="body">body.</param>
        /// <param name="bypassE164">bypassE164.</param>
        /// <param name="callID">callID.</param>
        /// <param name="controlQueue">controlQueue.</param>
        /// <param name="customApplicationVars">customApplicationVars.</param>
        /// <param name="customChannelVars">customChannelVars.</param>
        /// <param name="customSIPHeaders">customSIPHeaders.</param>
        /// <param name="deniedCallRestrictions">deniedCallRestrictions.</param>
        /// <param name="emergencyCallerIDName">emergencyCallerIDName.</param>
        /// <param name="emergencyCallerIDNumber">emergencyCallerIDNumber.</param>
        /// <param name="enableT38Fax">enableT38Fax.</param>
        /// <param name="enableT38FaxRequest">enableT38FaxRequest.</param>
        /// <param name="enableT38Gateway">enableT38Gateway.</param>
        /// <param name="enableT38Passthrough">enableT38Passthrough.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="faxIdentityName">faxIdentityName.</param>
        /// <param name="faxIdentityNumber">faxIdentityNumber.</param>
        /// <param name="faxT38Enabled">faxT38Enabled.</param>
        /// <param name="faxTimezone">faxTimezone.</param>
        /// <param name="flags">flags.</param>
        /// <param name="forceFax">forceFax.</param>
        /// <param name="forceOutbound">forceOutbound.</param>
        /// <param name="formatFromURI">formatFromURI.</param>
        /// <param name="fromURIRealm">fromURIRealm.</param>
        /// <param name="groupID">groupID.</param>
        /// <param name="holdMedia">holdMedia.</param>
        /// <param name="huntAccountID">huntAccountID.</param>
        /// <param name="ignoreEarlyMedia">ignoreEarlyMedia.</param>
        /// <param name="inception">inception.</param>
        /// <param name="media">media.</param>
        /// <param name="messageID">messageID.</param>
        /// <param name="mode">mode.</param>
        /// <param name="originalResourceType">originalResourceType.</param>
        /// <param name="originationCallID">originationCallID.</param>
        /// <param name="outboundActions">outboundActions.</param>
        /// <param name="outboundCallID">outboundCallID.</param>
        /// <param name="outboundCallerIDName">outboundCallerIDName.</param>
        /// <param name="outboundCallerIDNumber">outboundCallerIDNumber.</param>
        /// <param name="presenceID">presenceID.</param>
        /// <param name="privacyHideName">privacyHideName.</param>
        /// <param name="privacyHideNumber">privacyHideNumber.</param>
        /// <param name="privacyMethod">privacyMethod.</param>
        /// <param name="requestorCustomChannelVars">requestorCustomChannelVars.</param>
        /// <param name="requestorCustomSIPHeaders">requestorCustomSIPHeaders.</param>
        /// <param name="resourceType">resourceType (required).</param>
        /// <param name="ringback">ringback.</param>
        /// <param name="timeout">timeout.</param>
        /// <param name="toDID">toDID (required).</param>
        public KapiOffnetResourceReq(string accountID = default(string), string accountRealm = default(string), string applicationData = default(string), ApplicationNameEnum applicationName = default(ApplicationNameEnum), string assertedIdentityName = default(string), string assertedIdentityNumber = default(string), string assertedIdentityRealm = default(string), List<BLegEventsEnum> bLegEvents = default(List<BLegEventsEnum>), string body = default(string), bool? bypassE164 = default(bool?), string callID = default(string), string controlQueue = default(string), Object customApplicationVars = default(Object), Object customChannelVars = default(Object), Object customSIPHeaders = default(Object), Object deniedCallRestrictions = default(Object), string emergencyCallerIDName = default(string), string emergencyCallerIDNumber = default(string), string enableT38Fax = default(string), string enableT38FaxRequest = default(string), string enableT38Gateway = default(string), string enableT38Passthrough = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string faxIdentityName = default(string), string faxIdentityNumber = default(string), string faxT38Enabled = default(string), string faxTimezone = default(string), List<string> flags = default(List<string>), bool? forceFax = default(bool?), bool? forceOutbound = default(bool?), string formatFromURI = default(string), string fromURIRealm = default(string), string groupID = default(string), string holdMedia = default(string), string huntAccountID = default(string), string ignoreEarlyMedia = default(string), string inception = default(string), MediaEnum? media = default(MediaEnum?), string messageID = default(string), ModeEnum? mode = default(ModeEnum?), string originalResourceType = default(string), string originationCallID = default(string), Object outboundActions = default(Object), string outboundCallID = default(string), string outboundCallerIDName = default(string), string outboundCallerIDNumber = default(string), string presenceID = default(string), string privacyHideName = default(string), string privacyHideNumber = default(string), string privacyMethod = default(string), Object requestorCustomChannelVars = default(Object), Object requestorCustomSIPHeaders = default(Object), ResourceTypeEnum resourceType = default(ResourceTypeEnum), string ringback = default(string), string timeout = default(string), string toDID = default(string))
        {
            // to ensure "applicationName" is required (not null)
            if (applicationName == null)
            {
                throw new InvalidDataException("applicationName is a required property for KapiOffnetResourceReq and cannot be null");
            }
            else
            {
                this.ApplicationName = applicationName;
            }
            // to ensure "resourceType" is required (not null)
            if (resourceType == null)
            {
                throw new InvalidDataException("resourceType is a required property for KapiOffnetResourceReq and cannot be null");
            }
            else
            {
                this.ResourceType = resourceType;
            }
            // to ensure "toDID" is required (not null)
            if (toDID == null)
            {
                throw new InvalidDataException("toDID is a required property for KapiOffnetResourceReq and cannot be null");
            }
            else
            {
                this.ToDID = toDID;
            }
            this.AccountID = accountID;
            this.AccountRealm = accountRealm;
            this.ApplicationData = applicationData;
            this.AssertedIdentityName = assertedIdentityName;
            this.AssertedIdentityNumber = assertedIdentityNumber;
            this.AssertedIdentityRealm = assertedIdentityRealm;
            this.BLegEvents = bLegEvents;
            this.Body = body;
            this.BypassE164 = bypassE164;
            this.CallID = callID;
            this.ControlQueue = controlQueue;
            this.CustomApplicationVars = customApplicationVars;
            this.CustomChannelVars = customChannelVars;
            this.CustomSIPHeaders = customSIPHeaders;
            this.DeniedCallRestrictions = deniedCallRestrictions;
            this.EmergencyCallerIDName = emergencyCallerIDName;
            this.EmergencyCallerIDNumber = emergencyCallerIDNumber;
            this.EnableT38Fax = enableT38Fax;
            this.EnableT38FaxRequest = enableT38FaxRequest;
            this.EnableT38Gateway = enableT38Gateway;
            this.EnableT38Passthrough = enableT38Passthrough;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.FaxIdentityName = faxIdentityName;
            this.FaxIdentityNumber = faxIdentityNumber;
            this.FaxT38Enabled = faxT38Enabled;
            this.FaxTimezone = faxTimezone;
            this.Flags = flags;
            this.ForceFax = forceFax;
            this.ForceOutbound = forceOutbound;
            this.FormatFromURI = formatFromURI;
            this.FromURIRealm = fromURIRealm;
            this.GroupID = groupID;
            this.HoldMedia = holdMedia;
            this.HuntAccountID = huntAccountID;
            this.IgnoreEarlyMedia = ignoreEarlyMedia;
            this.Inception = inception;
            this.Media = media;
            this.MessageID = messageID;
            this.Mode = mode;
            this.OriginalResourceType = originalResourceType;
            this.OriginationCallID = originationCallID;
            this.OutboundActions = outboundActions;
            this.OutboundCallID = outboundCallID;
            this.OutboundCallerIDName = outboundCallerIDName;
            this.OutboundCallerIDNumber = outboundCallerIDNumber;
            this.PresenceID = presenceID;
            this.PrivacyHideName = privacyHideName;
            this.PrivacyHideNumber = privacyHideNumber;
            this.PrivacyMethod = privacyMethod;
            this.RequestorCustomChannelVars = requestorCustomChannelVars;
            this.RequestorCustomSIPHeaders = requestorCustomSIPHeaders;
            this.Ringback = ringback;
            this.Timeout = timeout;
        }
        
        /// <summary>
        /// Gets or Sets AccountID
        /// </summary>
        [DataMember(Name="Account-ID", EmitDefaultValue=false)]
        public string AccountID { get; set; }

        /// <summary>
        /// Gets or Sets AccountRealm
        /// </summary>
        [DataMember(Name="Account-Realm", EmitDefaultValue=false)]
        public string AccountRealm { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationData
        /// </summary>
        [DataMember(Name="Application-Data", EmitDefaultValue=false)]
        public string ApplicationData { get; set; }


        /// <summary>
        /// Gets or Sets AssertedIdentityName
        /// </summary>
        [DataMember(Name="Asserted-Identity-Name", EmitDefaultValue=false)]
        public string AssertedIdentityName { get; set; }

        /// <summary>
        /// Gets or Sets AssertedIdentityNumber
        /// </summary>
        [DataMember(Name="Asserted-Identity-Number", EmitDefaultValue=false)]
        public string AssertedIdentityNumber { get; set; }

        /// <summary>
        /// Gets or Sets AssertedIdentityRealm
        /// </summary>
        [DataMember(Name="Asserted-Identity-Realm", EmitDefaultValue=false)]
        public string AssertedIdentityRealm { get; set; }


        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name="Body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets BypassE164
        /// </summary>
        [DataMember(Name="Bypass-E164", EmitDefaultValue=false)]
        public bool? BypassE164 { get; set; }

        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }

        /// <summary>
        /// Gets or Sets ControlQueue
        /// </summary>
        [DataMember(Name="Control-Queue", EmitDefaultValue=false)]
        public string ControlQueue { get; set; }

        /// <summary>
        /// Gets or Sets CustomApplicationVars
        /// </summary>
        [DataMember(Name="Custom-Application-Vars", EmitDefaultValue=false)]
        public Object CustomApplicationVars { get; set; }

        /// <summary>
        /// Gets or Sets CustomChannelVars
        /// </summary>
        [DataMember(Name="Custom-Channel-Vars", EmitDefaultValue=false)]
        public Object CustomChannelVars { get; set; }

        /// <summary>
        /// Gets or Sets CustomSIPHeaders
        /// </summary>
        [DataMember(Name="Custom-SIP-Headers", EmitDefaultValue=false)]
        public Object CustomSIPHeaders { get; set; }

        /// <summary>
        /// Gets or Sets DeniedCallRestrictions
        /// </summary>
        [DataMember(Name="Denied-Call-Restrictions", EmitDefaultValue=false)]
        public Object DeniedCallRestrictions { get; set; }

        /// <summary>
        /// Gets or Sets EmergencyCallerIDName
        /// </summary>
        [DataMember(Name="Emergency-Caller-ID-Name", EmitDefaultValue=false)]
        public string EmergencyCallerIDName { get; set; }

        /// <summary>
        /// Gets or Sets EmergencyCallerIDNumber
        /// </summary>
        [DataMember(Name="Emergency-Caller-ID-Number", EmitDefaultValue=false)]
        public string EmergencyCallerIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets EnableT38Fax
        /// </summary>
        [DataMember(Name="Enable-T38-Fax", EmitDefaultValue=false)]
        public string EnableT38Fax { get; set; }

        /// <summary>
        /// Gets or Sets EnableT38FaxRequest
        /// </summary>
        [DataMember(Name="Enable-T38-Fax-Request", EmitDefaultValue=false)]
        public string EnableT38FaxRequest { get; set; }

        /// <summary>
        /// Gets or Sets EnableT38Gateway
        /// </summary>
        [DataMember(Name="Enable-T38-Gateway", EmitDefaultValue=false)]
        public string EnableT38Gateway { get; set; }

        /// <summary>
        /// Gets or Sets EnableT38Passthrough
        /// </summary>
        [DataMember(Name="Enable-T38-Passthrough", EmitDefaultValue=false)]
        public string EnableT38Passthrough { get; set; }



        /// <summary>
        /// Gets or Sets FaxIdentityName
        /// </summary>
        [DataMember(Name="Fax-Identity-Name", EmitDefaultValue=false)]
        public string FaxIdentityName { get; set; }

        /// <summary>
        /// Gets or Sets FaxIdentityNumber
        /// </summary>
        [DataMember(Name="Fax-Identity-Number", EmitDefaultValue=false)]
        public string FaxIdentityNumber { get; set; }

        /// <summary>
        /// Gets or Sets FaxT38Enabled
        /// </summary>
        [DataMember(Name="Fax-T38-Enabled", EmitDefaultValue=false)]
        public string FaxT38Enabled { get; set; }

        /// <summary>
        /// Gets or Sets FaxTimezone
        /// </summary>
        [DataMember(Name="Fax-Timezone", EmitDefaultValue=false)]
        public string FaxTimezone { get; set; }

        /// <summary>
        /// Gets or Sets Flags
        /// </summary>
        [DataMember(Name="Flags", EmitDefaultValue=false)]
        public List<string> Flags { get; set; }

        /// <summary>
        /// Gets or Sets ForceFax
        /// </summary>
        [DataMember(Name="Force-Fax", EmitDefaultValue=false)]
        public bool? ForceFax { get; set; }

        /// <summary>
        /// Gets or Sets ForceOutbound
        /// </summary>
        [DataMember(Name="Force-Outbound", EmitDefaultValue=false)]
        public bool? ForceOutbound { get; set; }

        /// <summary>
        /// Gets or Sets FormatFromURI
        /// </summary>
        [DataMember(Name="Format-From-URI", EmitDefaultValue=false)]
        public string FormatFromURI { get; set; }

        /// <summary>
        /// Gets or Sets FromURIRealm
        /// </summary>
        [DataMember(Name="From-URI-Realm", EmitDefaultValue=false)]
        public string FromURIRealm { get; set; }

        /// <summary>
        /// Gets or Sets GroupID
        /// </summary>
        [DataMember(Name="Group-ID", EmitDefaultValue=false)]
        public string GroupID { get; set; }

        /// <summary>
        /// Gets or Sets HoldMedia
        /// </summary>
        [DataMember(Name="Hold-Media", EmitDefaultValue=false)]
        public string HoldMedia { get; set; }

        /// <summary>
        /// Gets or Sets HuntAccountID
        /// </summary>
        [DataMember(Name="Hunt-Account-ID", EmitDefaultValue=false)]
        public string HuntAccountID { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreEarlyMedia
        /// </summary>
        [DataMember(Name="Ignore-Early-Media", EmitDefaultValue=false)]
        public string IgnoreEarlyMedia { get; set; }

        /// <summary>
        /// Gets or Sets Inception
        /// </summary>
        [DataMember(Name="Inception", EmitDefaultValue=false)]
        public string Inception { get; set; }


        /// <summary>
        /// Gets or Sets MessageID
        /// </summary>
        [DataMember(Name="Message-ID", EmitDefaultValue=false)]
        public string MessageID { get; set; }


        /// <summary>
        /// Gets or Sets OriginalResourceType
        /// </summary>
        [DataMember(Name="Original-Resource-Type", EmitDefaultValue=false)]
        public string OriginalResourceType { get; set; }

        /// <summary>
        /// Gets or Sets OriginationCallID
        /// </summary>
        [DataMember(Name="Origination-Call-ID", EmitDefaultValue=false)]
        public string OriginationCallID { get; set; }

        /// <summary>
        /// Gets or Sets OutboundActions
        /// </summary>
        [DataMember(Name="Outbound-Actions", EmitDefaultValue=false)]
        public Object OutboundActions { get; set; }

        /// <summary>
        /// Gets or Sets OutboundCallID
        /// </summary>
        [DataMember(Name="Outbound-Call-ID", EmitDefaultValue=false)]
        public string OutboundCallID { get; set; }

        /// <summary>
        /// Gets or Sets OutboundCallerIDName
        /// </summary>
        [DataMember(Name="Outbound-Caller-ID-Name", EmitDefaultValue=false)]
        public string OutboundCallerIDName { get; set; }

        /// <summary>
        /// Gets or Sets OutboundCallerIDNumber
        /// </summary>
        [DataMember(Name="Outbound-Caller-ID-Number", EmitDefaultValue=false)]
        public string OutboundCallerIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets PresenceID
        /// </summary>
        [DataMember(Name="Presence-ID", EmitDefaultValue=false)]
        public string PresenceID { get; set; }

        /// <summary>
        /// Gets or Sets PrivacyHideName
        /// </summary>
        [DataMember(Name="Privacy-Hide-Name", EmitDefaultValue=false)]
        public string PrivacyHideName { get; set; }

        /// <summary>
        /// Gets or Sets PrivacyHideNumber
        /// </summary>
        [DataMember(Name="Privacy-Hide-Number", EmitDefaultValue=false)]
        public string PrivacyHideNumber { get; set; }

        /// <summary>
        /// Gets or Sets PrivacyMethod
        /// </summary>
        [DataMember(Name="Privacy-Method", EmitDefaultValue=false)]
        public string PrivacyMethod { get; set; }

        /// <summary>
        /// Gets or Sets RequestorCustomChannelVars
        /// </summary>
        [DataMember(Name="Requestor-Custom-Channel-Vars", EmitDefaultValue=false)]
        public Object RequestorCustomChannelVars { get; set; }

        /// <summary>
        /// Gets or Sets RequestorCustomSIPHeaders
        /// </summary>
        [DataMember(Name="Requestor-Custom-SIP-Headers", EmitDefaultValue=false)]
        public Object RequestorCustomSIPHeaders { get; set; }


        /// <summary>
        /// Gets or Sets Ringback
        /// </summary>
        [DataMember(Name="Ringback", EmitDefaultValue=false)]
        public string Ringback { get; set; }

        /// <summary>
        /// Gets or Sets Timeout
        /// </summary>
        [DataMember(Name="Timeout", EmitDefaultValue=false)]
        public string Timeout { get; set; }

        /// <summary>
        /// Gets or Sets ToDID
        /// </summary>
        [DataMember(Name="To-DID", EmitDefaultValue=false)]
        public string ToDID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiOffnetResourceReq {\n");
            sb.Append("  AccountID: ").Append(AccountID).Append("\n");
            sb.Append("  AccountRealm: ").Append(AccountRealm).Append("\n");
            sb.Append("  ApplicationData: ").Append(ApplicationData).Append("\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  AssertedIdentityName: ").Append(AssertedIdentityName).Append("\n");
            sb.Append("  AssertedIdentityNumber: ").Append(AssertedIdentityNumber).Append("\n");
            sb.Append("  AssertedIdentityRealm: ").Append(AssertedIdentityRealm).Append("\n");
            sb.Append("  BLegEvents: ").Append(BLegEvents).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  BypassE164: ").Append(BypassE164).Append("\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  ControlQueue: ").Append(ControlQueue).Append("\n");
            sb.Append("  CustomApplicationVars: ").Append(CustomApplicationVars).Append("\n");
            sb.Append("  CustomChannelVars: ").Append(CustomChannelVars).Append("\n");
            sb.Append("  CustomSIPHeaders: ").Append(CustomSIPHeaders).Append("\n");
            sb.Append("  DeniedCallRestrictions: ").Append(DeniedCallRestrictions).Append("\n");
            sb.Append("  EmergencyCallerIDName: ").Append(EmergencyCallerIDName).Append("\n");
            sb.Append("  EmergencyCallerIDNumber: ").Append(EmergencyCallerIDNumber).Append("\n");
            sb.Append("  EnableT38Fax: ").Append(EnableT38Fax).Append("\n");
            sb.Append("  EnableT38FaxRequest: ").Append(EnableT38FaxRequest).Append("\n");
            sb.Append("  EnableT38Gateway: ").Append(EnableT38Gateway).Append("\n");
            sb.Append("  EnableT38Passthrough: ").Append(EnableT38Passthrough).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  FaxIdentityName: ").Append(FaxIdentityName).Append("\n");
            sb.Append("  FaxIdentityNumber: ").Append(FaxIdentityNumber).Append("\n");
            sb.Append("  FaxT38Enabled: ").Append(FaxT38Enabled).Append("\n");
            sb.Append("  FaxTimezone: ").Append(FaxTimezone).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  ForceFax: ").Append(ForceFax).Append("\n");
            sb.Append("  ForceOutbound: ").Append(ForceOutbound).Append("\n");
            sb.Append("  FormatFromURI: ").Append(FormatFromURI).Append("\n");
            sb.Append("  FromURIRealm: ").Append(FromURIRealm).Append("\n");
            sb.Append("  GroupID: ").Append(GroupID).Append("\n");
            sb.Append("  HoldMedia: ").Append(HoldMedia).Append("\n");
            sb.Append("  HuntAccountID: ").Append(HuntAccountID).Append("\n");
            sb.Append("  IgnoreEarlyMedia: ").Append(IgnoreEarlyMedia).Append("\n");
            sb.Append("  Inception: ").Append(Inception).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  MessageID: ").Append(MessageID).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  OriginalResourceType: ").Append(OriginalResourceType).Append("\n");
            sb.Append("  OriginationCallID: ").Append(OriginationCallID).Append("\n");
            sb.Append("  OutboundActions: ").Append(OutboundActions).Append("\n");
            sb.Append("  OutboundCallID: ").Append(OutboundCallID).Append("\n");
            sb.Append("  OutboundCallerIDName: ").Append(OutboundCallerIDName).Append("\n");
            sb.Append("  OutboundCallerIDNumber: ").Append(OutboundCallerIDNumber).Append("\n");
            sb.Append("  PresenceID: ").Append(PresenceID).Append("\n");
            sb.Append("  PrivacyHideName: ").Append(PrivacyHideName).Append("\n");
            sb.Append("  PrivacyHideNumber: ").Append(PrivacyHideNumber).Append("\n");
            sb.Append("  PrivacyMethod: ").Append(PrivacyMethod).Append("\n");
            sb.Append("  RequestorCustomChannelVars: ").Append(RequestorCustomChannelVars).Append("\n");
            sb.Append("  RequestorCustomSIPHeaders: ").Append(RequestorCustomSIPHeaders).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Ringback: ").Append(Ringback).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  ToDID: ").Append(ToDID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiOffnetResourceReq);
        }

        /// <summary>
        /// Returns true if KapiOffnetResourceReq instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiOffnetResourceReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiOffnetResourceReq input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountID == input.AccountID ||
                    (this.AccountID != null &&
                    this.AccountID.Equals(input.AccountID))
                ) && 
                (
                    this.AccountRealm == input.AccountRealm ||
                    (this.AccountRealm != null &&
                    this.AccountRealm.Equals(input.AccountRealm))
                ) && 
                (
                    this.ApplicationData == input.ApplicationData ||
                    (this.ApplicationData != null &&
                    this.ApplicationData.Equals(input.ApplicationData))
                ) && 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.AssertedIdentityName == input.AssertedIdentityName ||
                    (this.AssertedIdentityName != null &&
                    this.AssertedIdentityName.Equals(input.AssertedIdentityName))
                ) && 
                (
                    this.AssertedIdentityNumber == input.AssertedIdentityNumber ||
                    (this.AssertedIdentityNumber != null &&
                    this.AssertedIdentityNumber.Equals(input.AssertedIdentityNumber))
                ) && 
                (
                    this.AssertedIdentityRealm == input.AssertedIdentityRealm ||
                    (this.AssertedIdentityRealm != null &&
                    this.AssertedIdentityRealm.Equals(input.AssertedIdentityRealm))
                ) && 
                (
                    this.BLegEvents == input.BLegEvents ||
                    this.BLegEvents != null &&
                    this.BLegEvents.SequenceEqual(input.BLegEvents)
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.BypassE164 == input.BypassE164 ||
                    (this.BypassE164 != null &&
                    this.BypassE164.Equals(input.BypassE164))
                ) && 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.ControlQueue == input.ControlQueue ||
                    (this.ControlQueue != null &&
                    this.ControlQueue.Equals(input.ControlQueue))
                ) && 
                (
                    this.CustomApplicationVars == input.CustomApplicationVars ||
                    (this.CustomApplicationVars != null &&
                    this.CustomApplicationVars.Equals(input.CustomApplicationVars))
                ) && 
                (
                    this.CustomChannelVars == input.CustomChannelVars ||
                    (this.CustomChannelVars != null &&
                    this.CustomChannelVars.Equals(input.CustomChannelVars))
                ) && 
                (
                    this.CustomSIPHeaders == input.CustomSIPHeaders ||
                    (this.CustomSIPHeaders != null &&
                    this.CustomSIPHeaders.Equals(input.CustomSIPHeaders))
                ) && 
                (
                    this.DeniedCallRestrictions == input.DeniedCallRestrictions ||
                    (this.DeniedCallRestrictions != null &&
                    this.DeniedCallRestrictions.Equals(input.DeniedCallRestrictions))
                ) && 
                (
                    this.EmergencyCallerIDName == input.EmergencyCallerIDName ||
                    (this.EmergencyCallerIDName != null &&
                    this.EmergencyCallerIDName.Equals(input.EmergencyCallerIDName))
                ) && 
                (
                    this.EmergencyCallerIDNumber == input.EmergencyCallerIDNumber ||
                    (this.EmergencyCallerIDNumber != null &&
                    this.EmergencyCallerIDNumber.Equals(input.EmergencyCallerIDNumber))
                ) && 
                (
                    this.EnableT38Fax == input.EnableT38Fax ||
                    (this.EnableT38Fax != null &&
                    this.EnableT38Fax.Equals(input.EnableT38Fax))
                ) && 
                (
                    this.EnableT38FaxRequest == input.EnableT38FaxRequest ||
                    (this.EnableT38FaxRequest != null &&
                    this.EnableT38FaxRequest.Equals(input.EnableT38FaxRequest))
                ) && 
                (
                    this.EnableT38Gateway == input.EnableT38Gateway ||
                    (this.EnableT38Gateway != null &&
                    this.EnableT38Gateway.Equals(input.EnableT38Gateway))
                ) && 
                (
                    this.EnableT38Passthrough == input.EnableT38Passthrough ||
                    (this.EnableT38Passthrough != null &&
                    this.EnableT38Passthrough.Equals(input.EnableT38Passthrough))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.FaxIdentityName == input.FaxIdentityName ||
                    (this.FaxIdentityName != null &&
                    this.FaxIdentityName.Equals(input.FaxIdentityName))
                ) && 
                (
                    this.FaxIdentityNumber == input.FaxIdentityNumber ||
                    (this.FaxIdentityNumber != null &&
                    this.FaxIdentityNumber.Equals(input.FaxIdentityNumber))
                ) && 
                (
                    this.FaxT38Enabled == input.FaxT38Enabled ||
                    (this.FaxT38Enabled != null &&
                    this.FaxT38Enabled.Equals(input.FaxT38Enabled))
                ) && 
                (
                    this.FaxTimezone == input.FaxTimezone ||
                    (this.FaxTimezone != null &&
                    this.FaxTimezone.Equals(input.FaxTimezone))
                ) && 
                (
                    this.Flags == input.Flags ||
                    this.Flags != null &&
                    this.Flags.SequenceEqual(input.Flags)
                ) && 
                (
                    this.ForceFax == input.ForceFax ||
                    (this.ForceFax != null &&
                    this.ForceFax.Equals(input.ForceFax))
                ) && 
                (
                    this.ForceOutbound == input.ForceOutbound ||
                    (this.ForceOutbound != null &&
                    this.ForceOutbound.Equals(input.ForceOutbound))
                ) && 
                (
                    this.FormatFromURI == input.FormatFromURI ||
                    (this.FormatFromURI != null &&
                    this.FormatFromURI.Equals(input.FormatFromURI))
                ) && 
                (
                    this.FromURIRealm == input.FromURIRealm ||
                    (this.FromURIRealm != null &&
                    this.FromURIRealm.Equals(input.FromURIRealm))
                ) && 
                (
                    this.GroupID == input.GroupID ||
                    (this.GroupID != null &&
                    this.GroupID.Equals(input.GroupID))
                ) && 
                (
                    this.HoldMedia == input.HoldMedia ||
                    (this.HoldMedia != null &&
                    this.HoldMedia.Equals(input.HoldMedia))
                ) && 
                (
                    this.HuntAccountID == input.HuntAccountID ||
                    (this.HuntAccountID != null &&
                    this.HuntAccountID.Equals(input.HuntAccountID))
                ) && 
                (
                    this.IgnoreEarlyMedia == input.IgnoreEarlyMedia ||
                    (this.IgnoreEarlyMedia != null &&
                    this.IgnoreEarlyMedia.Equals(input.IgnoreEarlyMedia))
                ) && 
                (
                    this.Inception == input.Inception ||
                    (this.Inception != null &&
                    this.Inception.Equals(input.Inception))
                ) && 
                (
                    this.Media == input.Media ||
                    (this.Media != null &&
                    this.Media.Equals(input.Media))
                ) && 
                (
                    this.MessageID == input.MessageID ||
                    (this.MessageID != null &&
                    this.MessageID.Equals(input.MessageID))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.OriginalResourceType == input.OriginalResourceType ||
                    (this.OriginalResourceType != null &&
                    this.OriginalResourceType.Equals(input.OriginalResourceType))
                ) && 
                (
                    this.OriginationCallID == input.OriginationCallID ||
                    (this.OriginationCallID != null &&
                    this.OriginationCallID.Equals(input.OriginationCallID))
                ) && 
                (
                    this.OutboundActions == input.OutboundActions ||
                    (this.OutboundActions != null &&
                    this.OutboundActions.Equals(input.OutboundActions))
                ) && 
                (
                    this.OutboundCallID == input.OutboundCallID ||
                    (this.OutboundCallID != null &&
                    this.OutboundCallID.Equals(input.OutboundCallID))
                ) && 
                (
                    this.OutboundCallerIDName == input.OutboundCallerIDName ||
                    (this.OutboundCallerIDName != null &&
                    this.OutboundCallerIDName.Equals(input.OutboundCallerIDName))
                ) && 
                (
                    this.OutboundCallerIDNumber == input.OutboundCallerIDNumber ||
                    (this.OutboundCallerIDNumber != null &&
                    this.OutboundCallerIDNumber.Equals(input.OutboundCallerIDNumber))
                ) && 
                (
                    this.PresenceID == input.PresenceID ||
                    (this.PresenceID != null &&
                    this.PresenceID.Equals(input.PresenceID))
                ) && 
                (
                    this.PrivacyHideName == input.PrivacyHideName ||
                    (this.PrivacyHideName != null &&
                    this.PrivacyHideName.Equals(input.PrivacyHideName))
                ) && 
                (
                    this.PrivacyHideNumber == input.PrivacyHideNumber ||
                    (this.PrivacyHideNumber != null &&
                    this.PrivacyHideNumber.Equals(input.PrivacyHideNumber))
                ) && 
                (
                    this.PrivacyMethod == input.PrivacyMethod ||
                    (this.PrivacyMethod != null &&
                    this.PrivacyMethod.Equals(input.PrivacyMethod))
                ) && 
                (
                    this.RequestorCustomChannelVars == input.RequestorCustomChannelVars ||
                    (this.RequestorCustomChannelVars != null &&
                    this.RequestorCustomChannelVars.Equals(input.RequestorCustomChannelVars))
                ) && 
                (
                    this.RequestorCustomSIPHeaders == input.RequestorCustomSIPHeaders ||
                    (this.RequestorCustomSIPHeaders != null &&
                    this.RequestorCustomSIPHeaders.Equals(input.RequestorCustomSIPHeaders))
                ) && 
                (
                    this.ResourceType == input.ResourceType ||
                    (this.ResourceType != null &&
                    this.ResourceType.Equals(input.ResourceType))
                ) && 
                (
                    this.Ringback == input.Ringback ||
                    (this.Ringback != null &&
                    this.Ringback.Equals(input.Ringback))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    (this.Timeout != null &&
                    this.Timeout.Equals(input.Timeout))
                ) && 
                (
                    this.ToDID == input.ToDID ||
                    (this.ToDID != null &&
                    this.ToDID.Equals(input.ToDID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountID != null)
                    hashCode = hashCode * 59 + this.AccountID.GetHashCode();
                if (this.AccountRealm != null)
                    hashCode = hashCode * 59 + this.AccountRealm.GetHashCode();
                if (this.ApplicationData != null)
                    hashCode = hashCode * 59 + this.ApplicationData.GetHashCode();
                if (this.ApplicationName != null)
                    hashCode = hashCode * 59 + this.ApplicationName.GetHashCode();
                if (this.AssertedIdentityName != null)
                    hashCode = hashCode * 59 + this.AssertedIdentityName.GetHashCode();
                if (this.AssertedIdentityNumber != null)
                    hashCode = hashCode * 59 + this.AssertedIdentityNumber.GetHashCode();
                if (this.AssertedIdentityRealm != null)
                    hashCode = hashCode * 59 + this.AssertedIdentityRealm.GetHashCode();
                if (this.BLegEvents != null)
                    hashCode = hashCode * 59 + this.BLegEvents.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.BypassE164 != null)
                    hashCode = hashCode * 59 + this.BypassE164.GetHashCode();
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.ControlQueue != null)
                    hashCode = hashCode * 59 + this.ControlQueue.GetHashCode();
                if (this.CustomApplicationVars != null)
                    hashCode = hashCode * 59 + this.CustomApplicationVars.GetHashCode();
                if (this.CustomChannelVars != null)
                    hashCode = hashCode * 59 + this.CustomChannelVars.GetHashCode();
                if (this.CustomSIPHeaders != null)
                    hashCode = hashCode * 59 + this.CustomSIPHeaders.GetHashCode();
                if (this.DeniedCallRestrictions != null)
                    hashCode = hashCode * 59 + this.DeniedCallRestrictions.GetHashCode();
                if (this.EmergencyCallerIDName != null)
                    hashCode = hashCode * 59 + this.EmergencyCallerIDName.GetHashCode();
                if (this.EmergencyCallerIDNumber != null)
                    hashCode = hashCode * 59 + this.EmergencyCallerIDNumber.GetHashCode();
                if (this.EnableT38Fax != null)
                    hashCode = hashCode * 59 + this.EnableT38Fax.GetHashCode();
                if (this.EnableT38FaxRequest != null)
                    hashCode = hashCode * 59 + this.EnableT38FaxRequest.GetHashCode();
                if (this.EnableT38Gateway != null)
                    hashCode = hashCode * 59 + this.EnableT38Gateway.GetHashCode();
                if (this.EnableT38Passthrough != null)
                    hashCode = hashCode * 59 + this.EnableT38Passthrough.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.FaxIdentityName != null)
                    hashCode = hashCode * 59 + this.FaxIdentityName.GetHashCode();
                if (this.FaxIdentityNumber != null)
                    hashCode = hashCode * 59 + this.FaxIdentityNumber.GetHashCode();
                if (this.FaxT38Enabled != null)
                    hashCode = hashCode * 59 + this.FaxT38Enabled.GetHashCode();
                if (this.FaxTimezone != null)
                    hashCode = hashCode * 59 + this.FaxTimezone.GetHashCode();
                if (this.Flags != null)
                    hashCode = hashCode * 59 + this.Flags.GetHashCode();
                if (this.ForceFax != null)
                    hashCode = hashCode * 59 + this.ForceFax.GetHashCode();
                if (this.ForceOutbound != null)
                    hashCode = hashCode * 59 + this.ForceOutbound.GetHashCode();
                if (this.FormatFromURI != null)
                    hashCode = hashCode * 59 + this.FormatFromURI.GetHashCode();
                if (this.FromURIRealm != null)
                    hashCode = hashCode * 59 + this.FromURIRealm.GetHashCode();
                if (this.GroupID != null)
                    hashCode = hashCode * 59 + this.GroupID.GetHashCode();
                if (this.HoldMedia != null)
                    hashCode = hashCode * 59 + this.HoldMedia.GetHashCode();
                if (this.HuntAccountID != null)
                    hashCode = hashCode * 59 + this.HuntAccountID.GetHashCode();
                if (this.IgnoreEarlyMedia != null)
                    hashCode = hashCode * 59 + this.IgnoreEarlyMedia.GetHashCode();
                if (this.Inception != null)
                    hashCode = hashCode * 59 + this.Inception.GetHashCode();
                if (this.Media != null)
                    hashCode = hashCode * 59 + this.Media.GetHashCode();
                if (this.MessageID != null)
                    hashCode = hashCode * 59 + this.MessageID.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.OriginalResourceType != null)
                    hashCode = hashCode * 59 + this.OriginalResourceType.GetHashCode();
                if (this.OriginationCallID != null)
                    hashCode = hashCode * 59 + this.OriginationCallID.GetHashCode();
                if (this.OutboundActions != null)
                    hashCode = hashCode * 59 + this.OutboundActions.GetHashCode();
                if (this.OutboundCallID != null)
                    hashCode = hashCode * 59 + this.OutboundCallID.GetHashCode();
                if (this.OutboundCallerIDName != null)
                    hashCode = hashCode * 59 + this.OutboundCallerIDName.GetHashCode();
                if (this.OutboundCallerIDNumber != null)
                    hashCode = hashCode * 59 + this.OutboundCallerIDNumber.GetHashCode();
                if (this.PresenceID != null)
                    hashCode = hashCode * 59 + this.PresenceID.GetHashCode();
                if (this.PrivacyHideName != null)
                    hashCode = hashCode * 59 + this.PrivacyHideName.GetHashCode();
                if (this.PrivacyHideNumber != null)
                    hashCode = hashCode * 59 + this.PrivacyHideNumber.GetHashCode();
                if (this.PrivacyMethod != null)
                    hashCode = hashCode * 59 + this.PrivacyMethod.GetHashCode();
                if (this.RequestorCustomChannelVars != null)
                    hashCode = hashCode * 59 + this.RequestorCustomChannelVars.GetHashCode();
                if (this.RequestorCustomSIPHeaders != null)
                    hashCode = hashCode * 59 + this.RequestorCustomSIPHeaders.GetHashCode();
                if (this.ResourceType != null)
                    hashCode = hashCode * 59 + this.ResourceType.GetHashCode();
                if (this.Ringback != null)
                    hashCode = hashCode * 59 + this.Ringback.GetHashCode();
                if (this.Timeout != null)
                    hashCode = hashCode * 59 + this.Timeout.GetHashCode();
                if (this.ToDID != null)
                    hashCode = hashCode * 59 + this.ToDID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ToDID (string) minLength
            if(this.ToDID != null && this.ToDID.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ToDID, length must be greater than 1.", new [] { "ToDID" });
            }

            yield break;
        }
    }

}
