/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for rate.req
    /// </summary>
    [DataContract]
    public partial class KapiRateReq :  IEquatable<KapiRateReq>, IValidatableObject
    {
        /// <summary>
        /// Defines Direction
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DirectionEnum
        {
            
            /// <summary>
            /// Enum Inbound for value: inbound
            /// </summary>
            [EnumMember(Value = "inbound")]
            Inbound = 1,
            
            /// <summary>
            /// Enum Outbound for value: outbound
            /// </summary>
            [EnumMember(Value = "outbound")]
            Outbound = 2
        }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name="Direction", EmitDefaultValue=false)]
        public DirectionEnum? Direction { get; set; }
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Rate for value: rate
            /// </summary>
            [EnumMember(Value = "rate")]
            Rate = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Req for value: req
            /// </summary>
            [EnumMember(Value = "req")]
            Req = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Defines ResourceType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResourceTypeEnum
        {
            
            /// <summary>
            /// Enum Audio for value: audio
            /// </summary>
            [EnumMember(Value = "audio")]
            Audio = 1,
            
            /// <summary>
            /// Enum Video for value: video
            /// </summary>
            [EnumMember(Value = "video")]
            Video = 2,
            
            /// <summary>
            /// Enum Sms for value: sms
            /// </summary>
            [EnumMember(Value = "sms")]
            Sms = 3
        }

        /// <summary>
        /// Gets or Sets ResourceType
        /// </summary>
        [DataMember(Name="Resource-Type", EmitDefaultValue=false)]
        public ResourceTypeEnum? ResourceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiRateReq" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiRateReq() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiRateReq" /> class.
        /// </summary>
        /// <param name="accountID">accountID.</param>
        /// <param name="authorizingType">authorizingType.</param>
        /// <param name="callID">callID.</param>
        /// <param name="direction">direction.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="fromDID">fromDID.</param>
        /// <param name="options">options.</param>
        /// <param name="outboundFlags">outboundFlags.</param>
        /// <param name="ratedeckID">ratedeckID.</param>
        /// <param name="resourceID">resourceID.</param>
        /// <param name="resourceType">resourceType.</param>
        /// <param name="sendEmpty">sendEmpty.</param>
        /// <param name="toDID">toDID (required).</param>
        public KapiRateReq(string accountID = default(string), string authorizingType = default(string), string callID = default(string), DirectionEnum? direction = default(DirectionEnum?), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string fromDID = default(string), List<string> options = default(List<string>), string outboundFlags = default(string), string ratedeckID = default(string), string resourceID = default(string), ResourceTypeEnum? resourceType = default(ResourceTypeEnum?), bool? sendEmpty = default(bool?), string toDID = default(string))
        {
            // to ensure "toDID" is required (not null)
            if (toDID == null)
            {
                throw new InvalidDataException("toDID is a required property for KapiRateReq and cannot be null");
            }
            else
            {
                this.ToDID = toDID;
            }
            this.AccountID = accountID;
            this.AuthorizingType = authorizingType;
            this.CallID = callID;
            this.Direction = direction;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.FromDID = fromDID;
            this.Options = options;
            this.OutboundFlags = outboundFlags;
            this.RatedeckID = ratedeckID;
            this.ResourceID = resourceID;
            this.ResourceType = resourceType;
            this.SendEmpty = sendEmpty;
        }
        
        /// <summary>
        /// Gets or Sets AccountID
        /// </summary>
        [DataMember(Name="Account-ID", EmitDefaultValue=false)]
        public string AccountID { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizingType
        /// </summary>
        [DataMember(Name="Authorizing-Type", EmitDefaultValue=false)]
        public string AuthorizingType { get; set; }

        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }




        /// <summary>
        /// Gets or Sets FromDID
        /// </summary>
        [DataMember(Name="From-DID", EmitDefaultValue=false)]
        public string FromDID { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="Options", EmitDefaultValue=false)]
        public List<string> Options { get; set; }

        /// <summary>
        /// Gets or Sets OutboundFlags
        /// </summary>
        [DataMember(Name="Outbound-Flags", EmitDefaultValue=false)]
        public string OutboundFlags { get; set; }

        /// <summary>
        /// Gets or Sets RatedeckID
        /// </summary>
        [DataMember(Name="Ratedeck-ID", EmitDefaultValue=false)]
        public string RatedeckID { get; set; }

        /// <summary>
        /// Gets or Sets ResourceID
        /// </summary>
        [DataMember(Name="Resource-ID", EmitDefaultValue=false)]
        public string ResourceID { get; set; }


        /// <summary>
        /// Gets or Sets SendEmpty
        /// </summary>
        [DataMember(Name="Send-Empty", EmitDefaultValue=false)]
        public bool? SendEmpty { get; set; }

        /// <summary>
        /// Gets or Sets ToDID
        /// </summary>
        [DataMember(Name="To-DID", EmitDefaultValue=false)]
        public string ToDID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiRateReq {\n");
            sb.Append("  AccountID: ").Append(AccountID).Append("\n");
            sb.Append("  AuthorizingType: ").Append(AuthorizingType).Append("\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  FromDID: ").Append(FromDID).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  OutboundFlags: ").Append(OutboundFlags).Append("\n");
            sb.Append("  RatedeckID: ").Append(RatedeckID).Append("\n");
            sb.Append("  ResourceID: ").Append(ResourceID).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  SendEmpty: ").Append(SendEmpty).Append("\n");
            sb.Append("  ToDID: ").Append(ToDID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiRateReq);
        }

        /// <summary>
        /// Returns true if KapiRateReq instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiRateReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiRateReq input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountID == input.AccountID ||
                    (this.AccountID != null &&
                    this.AccountID.Equals(input.AccountID))
                ) && 
                (
                    this.AuthorizingType == input.AuthorizingType ||
                    (this.AuthorizingType != null &&
                    this.AuthorizingType.Equals(input.AuthorizingType))
                ) && 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.FromDID == input.FromDID ||
                    (this.FromDID != null &&
                    this.FromDID.Equals(input.FromDID))
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                ) && 
                (
                    this.OutboundFlags == input.OutboundFlags ||
                    (this.OutboundFlags != null &&
                    this.OutboundFlags.Equals(input.OutboundFlags))
                ) && 
                (
                    this.RatedeckID == input.RatedeckID ||
                    (this.RatedeckID != null &&
                    this.RatedeckID.Equals(input.RatedeckID))
                ) && 
                (
                    this.ResourceID == input.ResourceID ||
                    (this.ResourceID != null &&
                    this.ResourceID.Equals(input.ResourceID))
                ) && 
                (
                    this.ResourceType == input.ResourceType ||
                    (this.ResourceType != null &&
                    this.ResourceType.Equals(input.ResourceType))
                ) && 
                (
                    this.SendEmpty == input.SendEmpty ||
                    (this.SendEmpty != null &&
                    this.SendEmpty.Equals(input.SendEmpty))
                ) && 
                (
                    this.ToDID == input.ToDID ||
                    (this.ToDID != null &&
                    this.ToDID.Equals(input.ToDID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountID != null)
                    hashCode = hashCode * 59 + this.AccountID.GetHashCode();
                if (this.AuthorizingType != null)
                    hashCode = hashCode * 59 + this.AuthorizingType.GetHashCode();
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.FromDID != null)
                    hashCode = hashCode * 59 + this.FromDID.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                if (this.OutboundFlags != null)
                    hashCode = hashCode * 59 + this.OutboundFlags.GetHashCode();
                if (this.RatedeckID != null)
                    hashCode = hashCode * 59 + this.RatedeckID.GetHashCode();
                if (this.ResourceID != null)
                    hashCode = hashCode * 59 + this.ResourceID.GetHashCode();
                if (this.ResourceType != null)
                    hashCode = hashCode * 59 + this.ResourceType.GetHashCode();
                if (this.SendEmpty != null)
                    hashCode = hashCode * 59 + this.SendEmpty.GetHashCode();
                if (this.ToDID != null)
                    hashCode = hashCode * 59 + this.ToDID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
