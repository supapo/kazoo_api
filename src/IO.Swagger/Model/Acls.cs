/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Access Control List entries
    /// </summary>
    [DataContract]
    public partial class Acls :  IEquatable<Acls>, IValidatableObject
    {
        /// <summary>
        /// The trusted list should represent anything that can issue calls without authorization.  The authoritative list should indicate inter-network routing equipment (SBC, etc).
        /// </summary>
        /// <value>The trusted list should represent anything that can issue calls without authorization.  The authoritative list should indicate inter-network routing equipment (SBC, etc).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NetworkListNameEnum
        {
            
            /// <summary>
            /// Enum Authoritative for value: authoritative
            /// </summary>
            [EnumMember(Value = "authoritative")]
            Authoritative = 1,
            
            /// <summary>
            /// Enum Trusted for value: trusted
            /// </summary>
            [EnumMember(Value = "trusted")]
            Trusted = 2
        }

        /// <summary>
        /// The trusted list should represent anything that can issue calls without authorization.  The authoritative list should indicate inter-network routing equipment (SBC, etc).
        /// </summary>
        /// <value>The trusted list should represent anything that can issue calls without authorization.  The authoritative list should indicate inter-network routing equipment (SBC, etc).</value>
        [DataMember(Name="network-list-name", EmitDefaultValue=false)]
        public NetworkListNameEnum NetworkListName { get; set; }
        /// <summary>
        /// Allow or deny this CIDR
        /// </summary>
        /// <value>Allow or deny this CIDR</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Allow for value: allow
            /// </summary>
            [EnumMember(Value = "allow")]
            Allow = 1,
            
            /// <summary>
            /// Enum Deny for value: deny
            /// </summary>
            [EnumMember(Value = "deny")]
            Deny = 2
        }

        /// <summary>
        /// Allow or deny this CIDR
        /// </summary>
        /// <value>Allow or deny this CIDR</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Acls" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Acls() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Acls" /> class.
        /// </summary>
        /// <param name="cidr">Classless Inter-Domain Routing IP notation for use on the ACL (required).</param>
        /// <param name="description">Will be added as a comment for quick identification later.</param>
        /// <param name="networkListName">The trusted list should represent anything that can issue calls without authorization.  The authoritative list should indicate inter-network routing equipment (SBC, etc). (required).</param>
        /// <param name="type">Allow or deny this CIDR (required) (default to TypeEnum.Allow).</param>
        public Acls(string cidr = default(string), string description = default(string), NetworkListNameEnum networkListName = default(NetworkListNameEnum), TypeEnum type = TypeEnum.Allow)
        {
            // to ensure "cidr" is required (not null)
            if (cidr == null)
            {
                throw new InvalidDataException("cidr is a required property for Acls and cannot be null");
            }
            else
            {
                this.Cidr = cidr;
            }
            // to ensure "networkListName" is required (not null)
            if (networkListName == null)
            {
                throw new InvalidDataException("networkListName is a required property for Acls and cannot be null");
            }
            else
            {
                this.NetworkListName = networkListName;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Acls and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Description = description;
        }
        
        /// <summary>
        /// Classless Inter-Domain Routing IP notation for use on the ACL
        /// </summary>
        /// <value>Classless Inter-Domain Routing IP notation for use on the ACL</value>
        [DataMember(Name="cidr", EmitDefaultValue=false)]
        public string Cidr { get; set; }

        /// <summary>
        /// Will be added as a comment for quick identification later
        /// </summary>
        /// <value>Will be added as a comment for quick identification later</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Acls {\n");
            sb.Append("  Cidr: ").Append(Cidr).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  NetworkListName: ").Append(NetworkListName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Acls);
        }

        /// <summary>
        /// Returns true if Acls instances are equal
        /// </summary>
        /// <param name="input">Instance of Acls to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Acls input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Cidr == input.Cidr ||
                    (this.Cidr != null &&
                    this.Cidr.Equals(input.Cidr))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.NetworkListName == input.NetworkListName ||
                    (this.NetworkListName != null &&
                    this.NetworkListName.Equals(input.NetworkListName))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cidr != null)
                    hashCode = hashCode * 59 + this.Cidr.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.NetworkListName != null)
                    hashCode = hashCode * 59 + this.NetworkListName.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 30.", new [] { "Description" });
            }

            yield break;
        }
    }

}
