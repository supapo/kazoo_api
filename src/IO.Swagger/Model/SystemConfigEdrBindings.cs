/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// An edr binding
    /// </summary>
    [DataContract]
    public partial class SystemConfigEdrBindings :  IEquatable<SystemConfigEdrBindings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigEdrBindings" /> class.
        /// </summary>
        /// <param name="accountId">accountId.</param>
        /// <param name="appName">Which apps should we receive events from? If not specified or * then events for all apps will be received (default to &quot;*&quot;).</param>
        /// <param name="exactSeverity">If true, then only events with severity exactly matching the severity field will be received. If false then more severe events will also be received (default to false).</param>
        /// <param name="exactVerbosity">If true, then only events with verbosity exactly matching the verbosity field will be received. If false then less verbose events will also be received (default to false).</param>
        /// <param name="includeDescendants">Should we receive events relating to descendant accounts if an account is specified? (default to false).</param>
        /// <param name="severity">severity.</param>
        /// <param name="verbosity">verbosity.</param>
        public SystemConfigEdrBindings(Object accountId = default(Object), string appName = "*", bool? exactSeverity = false, bool? exactVerbosity = false, bool? includeDescendants = false, Object severity = default(Object), Object verbosity = default(Object))
        {
            this.AccountId = accountId;
            // use default value if no "appName" provided
            if (appName == null)
            {
                this.AppName = "*";
            }
            else
            {
                this.AppName = appName;
            }
            // use default value if no "exactSeverity" provided
            if (exactSeverity == null)
            {
                this.ExactSeverity = false;
            }
            else
            {
                this.ExactSeverity = exactSeverity;
            }
            // use default value if no "exactVerbosity" provided
            if (exactVerbosity == null)
            {
                this.ExactVerbosity = false;
            }
            else
            {
                this.ExactVerbosity = exactVerbosity;
            }
            // use default value if no "includeDescendants" provided
            if (includeDescendants == null)
            {
                this.IncludeDescendants = false;
            }
            else
            {
                this.IncludeDescendants = includeDescendants;
            }
            this.Severity = severity;
            this.Verbosity = verbosity;
        }
        
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public Object AccountId { get; set; }

        /// <summary>
        /// Which apps should we receive events from? If not specified or * then events for all apps will be received
        /// </summary>
        /// <value>Which apps should we receive events from? If not specified or * then events for all apps will be received</value>
        [DataMember(Name="app_name", EmitDefaultValue=false)]
        public string AppName { get; set; }

        /// <summary>
        /// If true, then only events with severity exactly matching the severity field will be received. If false then more severe events will also be received
        /// </summary>
        /// <value>If true, then only events with severity exactly matching the severity field will be received. If false then more severe events will also be received</value>
        [DataMember(Name="exact_severity", EmitDefaultValue=false)]
        public bool? ExactSeverity { get; set; }

        /// <summary>
        /// If true, then only events with verbosity exactly matching the verbosity field will be received. If false then less verbose events will also be received
        /// </summary>
        /// <value>If true, then only events with verbosity exactly matching the verbosity field will be received. If false then less verbose events will also be received</value>
        [DataMember(Name="exact_verbosity", EmitDefaultValue=false)]
        public bool? ExactVerbosity { get; set; }

        /// <summary>
        /// Should we receive events relating to descendant accounts if an account is specified?
        /// </summary>
        /// <value>Should we receive events relating to descendant accounts if an account is specified?</value>
        [DataMember(Name="include_descendants", EmitDefaultValue=false)]
        public bool? IncludeDescendants { get; set; }

        /// <summary>
        /// Gets or Sets Severity
        /// </summary>
        [DataMember(Name="severity", EmitDefaultValue=false)]
        public Object Severity { get; set; }

        /// <summary>
        /// Gets or Sets Verbosity
        /// </summary>
        [DataMember(Name="verbosity", EmitDefaultValue=false)]
        public Object Verbosity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigEdrBindings {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  ExactSeverity: ").Append(ExactSeverity).Append("\n");
            sb.Append("  ExactVerbosity: ").Append(ExactVerbosity).Append("\n");
            sb.Append("  IncludeDescendants: ").Append(IncludeDescendants).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Verbosity: ").Append(Verbosity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigEdrBindings);
        }

        /// <summary>
        /// Returns true if SystemConfigEdrBindings instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigEdrBindings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigEdrBindings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.AppName == input.AppName ||
                    (this.AppName != null &&
                    this.AppName.Equals(input.AppName))
                ) && 
                (
                    this.ExactSeverity == input.ExactSeverity ||
                    (this.ExactSeverity != null &&
                    this.ExactSeverity.Equals(input.ExactSeverity))
                ) && 
                (
                    this.ExactVerbosity == input.ExactVerbosity ||
                    (this.ExactVerbosity != null &&
                    this.ExactVerbosity.Equals(input.ExactVerbosity))
                ) && 
                (
                    this.IncludeDescendants == input.IncludeDescendants ||
                    (this.IncludeDescendants != null &&
                    this.IncludeDescendants.Equals(input.IncludeDescendants))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.Verbosity == input.Verbosity ||
                    (this.Verbosity != null &&
                    this.Verbosity.Equals(input.Verbosity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.AppName != null)
                    hashCode = hashCode * 59 + this.AppName.GetHashCode();
                if (this.ExactSeverity != null)
                    hashCode = hashCode * 59 + this.ExactSeverity.GetHashCode();
                if (this.ExactVerbosity != null)
                    hashCode = hashCode * 59 + this.ExactVerbosity.GetHashCode();
                if (this.IncludeDescendants != null)
                    hashCode = hashCode * 59 + this.IncludeDescendants.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                if (this.Verbosity != null)
                    hashCode = hashCode * 59 + this.Verbosity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
