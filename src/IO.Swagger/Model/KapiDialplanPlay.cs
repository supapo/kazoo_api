/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for dialplan.play
    /// </summary>
    [DataContract]
    public partial class KapiDialplanPlay :  IEquatable<KapiDialplanPlay>, IValidatableObject
    {
        /// <summary>
        /// Defines ApplicationName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApplicationNameEnum
        {
            
            /// <summary>
            /// Enum Play for value: play
            /// </summary>
            [EnumMember(Value = "play")]
            Play = 1
        }

        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name="Application-Name", EmitDefaultValue=false)]
        public ApplicationNameEnum ApplicationName { get; set; }
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Call for value: call
            /// </summary>
            [EnumMember(Value = "call")]
            Call = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Command for value: command
            /// </summary>
            [EnumMember(Value = "command")]
            Command = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Defines InsertAt
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InsertAtEnum
        {
            
            /// <summary>
            /// Enum Head for value: head
            /// </summary>
            [EnumMember(Value = "head")]
            Head = 1,
            
            /// <summary>
            /// Enum Tail for value: tail
            /// </summary>
            [EnumMember(Value = "tail")]
            Tail = 2,
            
            /// <summary>
            /// Enum Flush for value: flush
            /// </summary>
            [EnumMember(Value = "flush")]
            Flush = 3,
            
            /// <summary>
            /// Enum Now for value: now
            /// </summary>
            [EnumMember(Value = "now")]
            Now = 4
        }

        /// <summary>
        /// Gets or Sets InsertAt
        /// </summary>
        [DataMember(Name="Insert-At", EmitDefaultValue=false)]
        public InsertAtEnum? InsertAt { get; set; }
        /// <summary>
        /// Defines Leg
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LegEnum
        {
            
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            [EnumMember(Value = "A")]
            A = 1,
            
            /// <summary>
            /// Enum B for value: B
            /// </summary>
            [EnumMember(Value = "B")]
            B = 2,
            
            /// <summary>
            /// Enum Both for value: Both
            /// </summary>
            [EnumMember(Value = "Both")]
            Both = 3
        }

        /// <summary>
        /// Gets or Sets Leg
        /// </summary>
        [DataMember(Name="Leg", EmitDefaultValue=false)]
        public LegEnum? Leg { get; set; }
        /// <summary>
        /// Defines Terminators
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TerminatorsEnum
        {
            
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 1,
            
            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 2,
            
            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 3,
            
            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 4,
            
            /// <summary>
            /// Enum _5 for value: 5
            /// </summary>
            [EnumMember(Value = "5")]
            _5 = 5,
            
            /// <summary>
            /// Enum _6 for value: 6
            /// </summary>
            [EnumMember(Value = "6")]
            _6 = 6,
            
            /// <summary>
            /// Enum _7 for value: 7
            /// </summary>
            [EnumMember(Value = "7")]
            _7 = 7,
            
            /// <summary>
            /// Enum _8 for value: 8
            /// </summary>
            [EnumMember(Value = "8")]
            _8 = 8,
            
            /// <summary>
            /// Enum _9 for value: 9
            /// </summary>
            [EnumMember(Value = "9")]
            _9 = 9,
            
            /// <summary>
            /// Enum Star for value: *
            /// </summary>
            [EnumMember(Value = "*")]
            Star = 10,
            
            /// <summary>
            /// Enum _0 for value: 0
            /// </summary>
            [EnumMember(Value = "0")]
            _0 = 11,
            
            /// <summary>
            /// Enum Hash for value: #
            /// </summary>
            [EnumMember(Value = "#")]
            Hash = 12
        }


        /// <summary>
        /// Gets or Sets Terminators
        /// </summary>
        [DataMember(Name="Terminators", EmitDefaultValue=false)]
        public List<TerminatorsEnum> Terminators { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanPlay" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiDialplanPlay() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanPlay" /> class.
        /// </summary>
        /// <param name="applicationName">applicationName (required).</param>
        /// <param name="callID">callID (required).</param>
        /// <param name="endlessPlayback">endlessPlayback.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="format">format.</param>
        /// <param name="groupID">groupID.</param>
        /// <param name="insertAt">insertAt.</param>
        /// <param name="language">language.</param>
        /// <param name="leg">leg.</param>
        /// <param name="loopCount">loopCount.</param>
        /// <param name="mediaName">mediaName (required).</param>
        /// <param name="terminators">terminators.</param>
        /// <param name="voice">voice.</param>
        public KapiDialplanPlay(ApplicationNameEnum applicationName = default(ApplicationNameEnum), string callID = default(string), bool? endlessPlayback = default(bool?), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string format = default(string), string groupID = default(string), InsertAtEnum? insertAt = default(InsertAtEnum?), string language = default(string), LegEnum? leg = default(LegEnum?), int? loopCount = default(int?), string mediaName = default(string), List<TerminatorsEnum> terminators = default(List<TerminatorsEnum>), string voice = default(string))
        {
            // to ensure "applicationName" is required (not null)
            if (applicationName == null)
            {
                throw new InvalidDataException("applicationName is a required property for KapiDialplanPlay and cannot be null");
            }
            else
            {
                this.ApplicationName = applicationName;
            }
            // to ensure "callID" is required (not null)
            if (callID == null)
            {
                throw new InvalidDataException("callID is a required property for KapiDialplanPlay and cannot be null");
            }
            else
            {
                this.CallID = callID;
            }
            // to ensure "mediaName" is required (not null)
            if (mediaName == null)
            {
                throw new InvalidDataException("mediaName is a required property for KapiDialplanPlay and cannot be null");
            }
            else
            {
                this.MediaName = mediaName;
            }
            this.EndlessPlayback = endlessPlayback;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.Format = format;
            this.GroupID = groupID;
            this.InsertAt = insertAt;
            this.Language = language;
            this.Leg = leg;
            this.LoopCount = loopCount;
            this.Terminators = terminators;
            this.Voice = voice;
        }
        

        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }

        /// <summary>
        /// Gets or Sets EndlessPlayback
        /// </summary>
        [DataMember(Name="Endless-Playback", EmitDefaultValue=false)]
        public bool? EndlessPlayback { get; set; }



        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="Format", EmitDefaultValue=false)]
        public string Format { get; set; }

        /// <summary>
        /// Gets or Sets GroupID
        /// </summary>
        [DataMember(Name="Group-ID", EmitDefaultValue=false)]
        public string GroupID { get; set; }


        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name="Language", EmitDefaultValue=false)]
        public string Language { get; set; }


        /// <summary>
        /// Gets or Sets LoopCount
        /// </summary>
        [DataMember(Name="Loop-Count", EmitDefaultValue=false)]
        public int? LoopCount { get; set; }

        /// <summary>
        /// Gets or Sets MediaName
        /// </summary>
        [DataMember(Name="Media-Name", EmitDefaultValue=false)]
        public string MediaName { get; set; }


        /// <summary>
        /// Gets or Sets Voice
        /// </summary>
        [DataMember(Name="Voice", EmitDefaultValue=false)]
        public string Voice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiDialplanPlay {\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  EndlessPlayback: ").Append(EndlessPlayback).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  GroupID: ").Append(GroupID).Append("\n");
            sb.Append("  InsertAt: ").Append(InsertAt).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Leg: ").Append(Leg).Append("\n");
            sb.Append("  LoopCount: ").Append(LoopCount).Append("\n");
            sb.Append("  MediaName: ").Append(MediaName).Append("\n");
            sb.Append("  Terminators: ").Append(Terminators).Append("\n");
            sb.Append("  Voice: ").Append(Voice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiDialplanPlay);
        }

        /// <summary>
        /// Returns true if KapiDialplanPlay instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiDialplanPlay to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiDialplanPlay input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.EndlessPlayback == input.EndlessPlayback ||
                    (this.EndlessPlayback != null &&
                    this.EndlessPlayback.Equals(input.EndlessPlayback))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.GroupID == input.GroupID ||
                    (this.GroupID != null &&
                    this.GroupID.Equals(input.GroupID))
                ) && 
                (
                    this.InsertAt == input.InsertAt ||
                    (this.InsertAt != null &&
                    this.InsertAt.Equals(input.InsertAt))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Leg == input.Leg ||
                    (this.Leg != null &&
                    this.Leg.Equals(input.Leg))
                ) && 
                (
                    this.LoopCount == input.LoopCount ||
                    (this.LoopCount != null &&
                    this.LoopCount.Equals(input.LoopCount))
                ) && 
                (
                    this.MediaName == input.MediaName ||
                    (this.MediaName != null &&
                    this.MediaName.Equals(input.MediaName))
                ) && 
                (
                    this.Terminators == input.Terminators ||
                    this.Terminators != null &&
                    this.Terminators.SequenceEqual(input.Terminators)
                ) && 
                (
                    this.Voice == input.Voice ||
                    (this.Voice != null &&
                    this.Voice.Equals(input.Voice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationName != null)
                    hashCode = hashCode * 59 + this.ApplicationName.GetHashCode();
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.EndlessPlayback != null)
                    hashCode = hashCode * 59 + this.EndlessPlayback.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.GroupID != null)
                    hashCode = hashCode * 59 + this.GroupID.GetHashCode();
                if (this.InsertAt != null)
                    hashCode = hashCode * 59 + this.InsertAt.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.Leg != null)
                    hashCode = hashCode * 59 + this.Leg.GetHashCode();
                if (this.LoopCount != null)
                    hashCode = hashCode * 59 + this.LoopCount.GetHashCode();
                if (this.MediaName != null)
                    hashCode = hashCode * 59 + this.MediaName.GetHashCode();
                if (this.Terminators != null)
                    hashCode = hashCode * 59 + this.Terminators.GetHashCode();
                if (this.Voice != null)
                    hashCode = hashCode * 59 + this.Voice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LoopCount (int?) minimum
            if(this.LoopCount < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LoopCount, must be a value greater than or equal to 1.", new [] { "LoopCount" });
            }

            yield break;
        }
    }

}
