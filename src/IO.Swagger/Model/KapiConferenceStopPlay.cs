/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for conference.stop_play
    /// </summary>
    [DataContract]
    public partial class KapiConferenceStopPlay :  IEquatable<KapiConferenceStopPlay>, IValidatableObject
    {
        /// <summary>
        /// Defines Affects
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AffectsEnum
        {
            
            /// <summary>
            /// Enum Current for value: current
            /// </summary>
            [EnumMember(Value = "current")]
            Current = 1,
            
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 2
        }

        /// <summary>
        /// Gets or Sets Affects
        /// </summary>
        [DataMember(Name="Affects", EmitDefaultValue=false)]
        public AffectsEnum? Affects { get; set; }
        /// <summary>
        /// Defines ApplicationName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApplicationNameEnum
        {
            
            /// <summary>
            /// Enum Stopplay for value: stop_play
            /// </summary>
            [EnumMember(Value = "stop_play")]
            Stopplay = 1
        }

        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name="Application-Name", EmitDefaultValue=false)]
        public ApplicationNameEnum ApplicationName { get; set; }
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Conference for value: conference
            /// </summary>
            [EnumMember(Value = "conference")]
            Conference = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Command for value: command
            /// </summary>
            [EnumMember(Value = "command")]
            Command = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiConferenceStopPlay" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiConferenceStopPlay() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiConferenceStopPlay" /> class.
        /// </summary>
        /// <param name="affects">affects.</param>
        /// <param name="applicationName">applicationName (required).</param>
        /// <param name="conferenceID">conferenceID (required).</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="participantID">participantID.</param>
        public KapiConferenceStopPlay(AffectsEnum? affects = default(AffectsEnum?), ApplicationNameEnum applicationName = default(ApplicationNameEnum), string conferenceID = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string participantID = default(string))
        {
            // to ensure "applicationName" is required (not null)
            if (applicationName == null)
            {
                throw new InvalidDataException("applicationName is a required property for KapiConferenceStopPlay and cannot be null");
            }
            else
            {
                this.ApplicationName = applicationName;
            }
            // to ensure "conferenceID" is required (not null)
            if (conferenceID == null)
            {
                throw new InvalidDataException("conferenceID is a required property for KapiConferenceStopPlay and cannot be null");
            }
            else
            {
                this.ConferenceID = conferenceID;
            }
            this.Affects = affects;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.ParticipantID = participantID;
        }
        


        /// <summary>
        /// Gets or Sets ConferenceID
        /// </summary>
        [DataMember(Name="Conference-ID", EmitDefaultValue=false)]
        public string ConferenceID { get; set; }



        /// <summary>
        /// Gets or Sets ParticipantID
        /// </summary>
        [DataMember(Name="Participant-ID", EmitDefaultValue=false)]
        public string ParticipantID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiConferenceStopPlay {\n");
            sb.Append("  Affects: ").Append(Affects).Append("\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  ConferenceID: ").Append(ConferenceID).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  ParticipantID: ").Append(ParticipantID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiConferenceStopPlay);
        }

        /// <summary>
        /// Returns true if KapiConferenceStopPlay instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiConferenceStopPlay to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiConferenceStopPlay input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Affects == input.Affects ||
                    (this.Affects != null &&
                    this.Affects.Equals(input.Affects))
                ) && 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.ConferenceID == input.ConferenceID ||
                    (this.ConferenceID != null &&
                    this.ConferenceID.Equals(input.ConferenceID))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.ParticipantID == input.ParticipantID ||
                    (this.ParticipantID != null &&
                    this.ParticipantID.Equals(input.ParticipantID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Affects != null)
                    hashCode = hashCode * 59 + this.Affects.GetHashCode();
                if (this.ApplicationName != null)
                    hashCode = hashCode * 59 + this.ApplicationName.GetHashCode();
                if (this.ConferenceID != null)
                    hashCode = hashCode * 59 + this.ConferenceID.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.ParticipantID != null)
                    hashCode = hashCode * 59 + this.ParticipantID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
