/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for notify.fax system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigNotifyFax :  IEquatable<SystemConfigNotifyFax>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigNotifyFax" /> class.
        /// </summary>
        /// <param name="attachmentFormat">notify.fax attachment format (default to &quot;pdf&quot;).</param>
        /// <param name="tiffToPdfConversionCommand">notify.fax tiff to pdf conversion command (default to &quot;tiff2pdf -o ~s ~s &amp;&gt; /dev/null &amp;&amp; echo -n &quot;success&quot;&quot;).</param>
        public SystemConfigNotifyFax(string attachmentFormat = "pdf", string tiffToPdfConversionCommand = "tiff2pdf -o ~s ~s &> /dev/null && echo -n "success"")
        {
            // use default value if no "attachmentFormat" provided
            if (attachmentFormat == null)
            {
                this.AttachmentFormat = "pdf";
            }
            else
            {
                this.AttachmentFormat = attachmentFormat;
            }
            // use default value if no "tiffToPdfConversionCommand" provided
            if (tiffToPdfConversionCommand == null)
            {
                this.TiffToPdfConversionCommand = "tiff2pdf -o ~s ~s &> /dev/null && echo -n "success"";
            }
            else
            {
                this.TiffToPdfConversionCommand = tiffToPdfConversionCommand;
            }
        }
        
        /// <summary>
        /// notify.fax attachment format
        /// </summary>
        /// <value>notify.fax attachment format</value>
        [DataMember(Name="attachment_format", EmitDefaultValue=false)]
        public string AttachmentFormat { get; set; }

        /// <summary>
        /// notify.fax tiff to pdf conversion command
        /// </summary>
        /// <value>notify.fax tiff to pdf conversion command</value>
        [DataMember(Name="tiff_to_pdf_conversion_command", EmitDefaultValue=false)]
        public string TiffToPdfConversionCommand { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigNotifyFax {\n");
            sb.Append("  AttachmentFormat: ").Append(AttachmentFormat).Append("\n");
            sb.Append("  TiffToPdfConversionCommand: ").Append(TiffToPdfConversionCommand).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigNotifyFax);
        }

        /// <summary>
        /// Returns true if SystemConfigNotifyFax instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigNotifyFax to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigNotifyFax input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AttachmentFormat == input.AttachmentFormat ||
                    (this.AttachmentFormat != null &&
                    this.AttachmentFormat.Equals(input.AttachmentFormat))
                ) && 
                (
                    this.TiffToPdfConversionCommand == input.TiffToPdfConversionCommand ||
                    (this.TiffToPdfConversionCommand != null &&
                    this.TiffToPdfConversionCommand.Equals(input.TiffToPdfConversionCommand))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AttachmentFormat != null)
                    hashCode = hashCode * 59 + this.AttachmentFormat.GetHashCode();
                if (this.TiffToPdfConversionCommand != null)
                    hashCode = hashCode * 59 + this.TiffToPdfConversionCommand.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
