/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Validator for the acdc_agent callflow data object
    /// </summary>
    [DataContract]
    public partial class CallflowsAcdcAgent :  IEquatable<CallflowsAcdcAgent>, IValidatableObject
    {
        /// <summary>
        /// Set which action to perform
        /// </summary>
        /// <value>Set which action to perform</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            
            /// <summary>
            /// Enum Login for value: login
            /// </summary>
            [EnumMember(Value = "login")]
            Login = 1,
            
            /// <summary>
            /// Enum Logout for value: logout
            /// </summary>
            [EnumMember(Value = "logout")]
            Logout = 2,
            
            /// <summary>
            /// Enum Paused for value: paused
            /// </summary>
            [EnumMember(Value = "paused")]
            Paused = 3,
            
            /// <summary>
            /// Enum Resume for value: resume
            /// </summary>
            [EnumMember(Value = "resume")]
            Resume = 4
        }

        /// <summary>
        /// Set which action to perform
        /// </summary>
        /// <value>Set which action to perform</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Custom presence state to send
        /// </summary>
        /// <value>Custom presence state to send</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PresenceStateEnum
        {
            
            /// <summary>
            /// Enum Early for value: early
            /// </summary>
            [EnumMember(Value = "early")]
            Early = 1,
            
            /// <summary>
            /// Enum Confirmed for value: confirmed
            /// </summary>
            [EnumMember(Value = "confirmed")]
            Confirmed = 2,
            
            /// <summary>
            /// Enum Terminated for value: terminated
            /// </summary>
            [EnumMember(Value = "terminated")]
            Terminated = 3,
            
            /// <summary>
            /// Enum Redflash for value: red_flash
            /// </summary>
            [EnumMember(Value = "red_flash")]
            Redflash = 4,
            
            /// <summary>
            /// Enum Redsolid for value: red_solid
            /// </summary>
            [EnumMember(Value = "red_solid")]
            Redsolid = 5,
            
            /// <summary>
            /// Enum Green for value: green
            /// </summary>
            [EnumMember(Value = "green")]
            Green = 6
        }

        /// <summary>
        /// Custom presence state to send
        /// </summary>
        /// <value>Custom presence state to send</value>
        [DataMember(Name="presence_state", EmitDefaultValue=false)]
        public PresenceStateEnum? PresenceState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsAcdcAgent" /> class.
        /// </summary>
        /// <param name="action">Set which action to perform.</param>
        /// <param name="presenceId">Static presence ID to send BLF updates to.</param>
        /// <param name="presenceState">Custom presence state to send.</param>
        /// <param name="skipModule">When set to true this callflow action is skipped, advancing to the wildcard branch (if any).</param>
        /// <param name="timeout">Time, in seconds, for &#39;paused&#39; state.</param>
        public CallflowsAcdcAgent(ActionEnum? action = default(ActionEnum?), string presenceId = default(string), PresenceStateEnum? presenceState = default(PresenceStateEnum?), bool? skipModule = default(bool?), int? timeout = default(int?))
        {
            this.Action = action;
            this.PresenceId = presenceId;
            this.PresenceState = presenceState;
            this.SkipModule = skipModule;
            this.Timeout = timeout;
        }
        

        /// <summary>
        /// Static presence ID to send BLF updates to
        /// </summary>
        /// <value>Static presence ID to send BLF updates to</value>
        [DataMember(Name="presence_id", EmitDefaultValue=false)]
        public string PresenceId { get; set; }


        /// <summary>
        /// When set to true this callflow action is skipped, advancing to the wildcard branch (if any)
        /// </summary>
        /// <value>When set to true this callflow action is skipped, advancing to the wildcard branch (if any)</value>
        [DataMember(Name="skip_module", EmitDefaultValue=false)]
        public bool? SkipModule { get; set; }

        /// <summary>
        /// Time, in seconds, for &#39;paused&#39; state
        /// </summary>
        /// <value>Time, in seconds, for &#39;paused&#39; state</value>
        [DataMember(Name="timeout", EmitDefaultValue=false)]
        public int? Timeout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallflowsAcdcAgent {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  PresenceId: ").Append(PresenceId).Append("\n");
            sb.Append("  PresenceState: ").Append(PresenceState).Append("\n");
            sb.Append("  SkipModule: ").Append(SkipModule).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallflowsAcdcAgent);
        }

        /// <summary>
        /// Returns true if CallflowsAcdcAgent instances are equal
        /// </summary>
        /// <param name="input">Instance of CallflowsAcdcAgent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallflowsAcdcAgent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.PresenceId == input.PresenceId ||
                    (this.PresenceId != null &&
                    this.PresenceId.Equals(input.PresenceId))
                ) && 
                (
                    this.PresenceState == input.PresenceState ||
                    (this.PresenceState != null &&
                    this.PresenceState.Equals(input.PresenceState))
                ) && 
                (
                    this.SkipModule == input.SkipModule ||
                    (this.SkipModule != null &&
                    this.SkipModule.Equals(input.SkipModule))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    (this.Timeout != null &&
                    this.Timeout.Equals(input.Timeout))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.PresenceId != null)
                    hashCode = hashCode * 59 + this.PresenceId.GetHashCode();
                if (this.PresenceState != null)
                    hashCode = hashCode * 59 + this.PresenceState.GetHashCode();
                if (this.SkipModule != null)
                    hashCode = hashCode * 59 + this.SkipModule.GetHashCode();
                if (this.Timeout != null)
                    hashCode = hashCode * 59 + this.Timeout.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
