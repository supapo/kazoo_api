/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Validator for the Conference callflow element
    /// </summary>
    [DataContract]
    public partial class CallflowsConference :  IEquatable<CallflowsConference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsConference" /> class.
        /// </summary>
        /// <param name="config">Build an ad-hoc conference using the conferences JSON schema.</param>
        /// <param name="id">Kazoo ID of the conference.</param>
        /// <param name="moderator">Is the caller entering the conference as a moderator.</param>
        /// <param name="playEntryTone">Should the Entry Tone be played.</param>
        /// <param name="playExitTone">Should the Exit Tone be played.</param>
        /// <param name="skipModule">When set to true this callflow action is skipped, advancing to the wildcard branch (if any).</param>
        /// <param name="welcomePrompt">welcomePrompt.</param>
        public CallflowsConference(Conferences config = default(Conferences), string id = default(string), bool? moderator = default(bool?), Object playEntryTone = default(Object), Object playExitTone = default(Object), bool? skipModule = default(bool?), CallflowsConferenceWelcomePrompt welcomePrompt = default(CallflowsConferenceWelcomePrompt))
        {
            this.Config = config;
            this.Id = id;
            this.Moderator = moderator;
            this.PlayEntryTone = playEntryTone;
            this.PlayExitTone = playExitTone;
            this.SkipModule = skipModule;
            this.WelcomePrompt = welcomePrompt;
        }
        
        /// <summary>
        /// Build an ad-hoc conference using the conferences JSON schema
        /// </summary>
        /// <value>Build an ad-hoc conference using the conferences JSON schema</value>
        [DataMember(Name="config", EmitDefaultValue=false)]
        public Conferences Config { get; set; }

        /// <summary>
        /// Kazoo ID of the conference
        /// </summary>
        /// <value>Kazoo ID of the conference</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Is the caller entering the conference as a moderator
        /// </summary>
        /// <value>Is the caller entering the conference as a moderator</value>
        [DataMember(Name="moderator", EmitDefaultValue=false)]
        public bool? Moderator { get; set; }

        /// <summary>
        /// Should the Entry Tone be played
        /// </summary>
        /// <value>Should the Entry Tone be played</value>
        [DataMember(Name="play_entry_tone", EmitDefaultValue=false)]
        public Object PlayEntryTone { get; set; }

        /// <summary>
        /// Should the Exit Tone be played
        /// </summary>
        /// <value>Should the Exit Tone be played</value>
        [DataMember(Name="play_exit_tone", EmitDefaultValue=false)]
        public Object PlayExitTone { get; set; }

        /// <summary>
        /// When set to true this callflow action is skipped, advancing to the wildcard branch (if any)
        /// </summary>
        /// <value>When set to true this callflow action is skipped, advancing to the wildcard branch (if any)</value>
        [DataMember(Name="skip_module", EmitDefaultValue=false)]
        public bool? SkipModule { get; set; }

        /// <summary>
        /// Gets or Sets WelcomePrompt
        /// </summary>
        [DataMember(Name="welcome_prompt", EmitDefaultValue=false)]
        public CallflowsConferenceWelcomePrompt WelcomePrompt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallflowsConference {\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Moderator: ").Append(Moderator).Append("\n");
            sb.Append("  PlayEntryTone: ").Append(PlayEntryTone).Append("\n");
            sb.Append("  PlayExitTone: ").Append(PlayExitTone).Append("\n");
            sb.Append("  SkipModule: ").Append(SkipModule).Append("\n");
            sb.Append("  WelcomePrompt: ").Append(WelcomePrompt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallflowsConference);
        }

        /// <summary>
        /// Returns true if CallflowsConference instances are equal
        /// </summary>
        /// <param name="input">Instance of CallflowsConference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallflowsConference input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Config == input.Config ||
                    (this.Config != null &&
                    this.Config.Equals(input.Config))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Moderator == input.Moderator ||
                    (this.Moderator != null &&
                    this.Moderator.Equals(input.Moderator))
                ) && 
                (
                    this.PlayEntryTone == input.PlayEntryTone ||
                    (this.PlayEntryTone != null &&
                    this.PlayEntryTone.Equals(input.PlayEntryTone))
                ) && 
                (
                    this.PlayExitTone == input.PlayExitTone ||
                    (this.PlayExitTone != null &&
                    this.PlayExitTone.Equals(input.PlayExitTone))
                ) && 
                (
                    this.SkipModule == input.SkipModule ||
                    (this.SkipModule != null &&
                    this.SkipModule.Equals(input.SkipModule))
                ) && 
                (
                    this.WelcomePrompt == input.WelcomePrompt ||
                    (this.WelcomePrompt != null &&
                    this.WelcomePrompt.Equals(input.WelcomePrompt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Config != null)
                    hashCode = hashCode * 59 + this.Config.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Moderator != null)
                    hashCode = hashCode * 59 + this.Moderator.GetHashCode();
                if (this.PlayEntryTone != null)
                    hashCode = hashCode * 59 + this.PlayEntryTone.GetHashCode();
                if (this.PlayExitTone != null)
                    hashCode = hashCode * 59 + this.PlayExitTone.GetHashCode();
                if (this.SkipModule != null)
                    hashCode = hashCode * 59 + this.SkipModule.GetHashCode();
                if (this.WelcomePrompt != null)
                    hashCode = hashCode * 59 + this.WelcomePrompt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (string) maxLength
            if(this.Id != null && this.Id.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be less than 32.", new [] { "Id" });
            }

            // Id (string) minLength
            if(this.Id != null && this.Id.Length < 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be greater than 32.", new [] { "Id" });
            }

            yield break;
        }
    }

}
