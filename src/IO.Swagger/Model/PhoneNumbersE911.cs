/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PhoneNumbersE911
    /// </summary>
    [DataContract]
    public partial class PhoneNumbersE911 :  IEquatable<PhoneNumbersE911>, IValidatableObject
    {
        /// <summary>
        /// The e911 provisioning system status for this service address
        /// </summary>
        /// <value>The e911 provisioning system status for this service address</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum INVALID for value: INVALID
            /// </summary>
            [EnumMember(Value = "INVALID")]
            INVALID = 1,
            
            /// <summary>
            /// Enum GEOCODED for value: GEOCODED
            /// </summary>
            [EnumMember(Value = "GEOCODED")]
            GEOCODED = 2,
            
            /// <summary>
            /// Enum PROVISIONED for value: PROVISIONED
            /// </summary>
            [EnumMember(Value = "PROVISIONED")]
            PROVISIONED = 3,
            
            /// <summary>
            /// Enum REMOVED for value: REMOVED
            /// </summary>
            [EnumMember(Value = "REMOVED")]
            REMOVED = 4,
            
            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 5
        }

        /// <summary>
        /// The e911 provisioning system status for this service address
        /// </summary>
        /// <value>The e911 provisioning system status for this service address</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneNumbersE911" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PhoneNumbersE911() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneNumbersE911" /> class.
        /// </summary>
        /// <param name="activatedTime">The time stamp e911 was provisioned.</param>
        /// <param name="callerName">The name that will show to emergency services.</param>
        /// <param name="extendedAddress">The suit/floor/apt. address where the number is in service.</param>
        /// <param name="latitude">The e911 provisioning system calculated service address latitude.</param>
        /// <param name="legacyData">legacyData.</param>
        /// <param name="locality">The locality (city) where the number is in service (required).</param>
        /// <param name="locationId">The e911 provisioning system internal id for this service address.</param>
        /// <param name="longitude">The e911 provisioning system calculated service address longitude.</param>
        /// <param name="plusFour">The extended zip/postal code where the number is in service.</param>
        /// <param name="postalCode">The zip/postal code where the number is in service (required).</param>
        /// <param name="region">The region (state) where the number is in service (required).</param>
        /// <param name="status">The e911 provisioning system status for this service address.</param>
        /// <param name="streetAddress">The street address where the number is in service (required).</param>
        public PhoneNumbersE911(string activatedTime = default(string), string callerName = default(string), string extendedAddress = default(string), string latitude = default(string), PhoneNumbersE911LegacyData legacyData = default(PhoneNumbersE911LegacyData), string locality = default(string), string locationId = default(string), string longitude = default(string), string plusFour = default(string), string postalCode = default(string), string region = default(string), StatusEnum? status = default(StatusEnum?), string streetAddress = default(string))
        {
            // to ensure "locality" is required (not null)
            if (locality == null)
            {
                throw new InvalidDataException("locality is a required property for PhoneNumbersE911 and cannot be null");
            }
            else
            {
                this.Locality = locality;
            }
            // to ensure "postalCode" is required (not null)
            if (postalCode == null)
            {
                throw new InvalidDataException("postalCode is a required property for PhoneNumbersE911 and cannot be null");
            }
            else
            {
                this.PostalCode = postalCode;
            }
            // to ensure "region" is required (not null)
            if (region == null)
            {
                throw new InvalidDataException("region is a required property for PhoneNumbersE911 and cannot be null");
            }
            else
            {
                this.Region = region;
            }
            // to ensure "streetAddress" is required (not null)
            if (streetAddress == null)
            {
                throw new InvalidDataException("streetAddress is a required property for PhoneNumbersE911 and cannot be null");
            }
            else
            {
                this.StreetAddress = streetAddress;
            }
            this.ActivatedTime = activatedTime;
            this.CallerName = callerName;
            this.ExtendedAddress = extendedAddress;
            this.Latitude = latitude;
            this.LegacyData = legacyData;
            this.LocationId = locationId;
            this.Longitude = longitude;
            this.PlusFour = plusFour;
            this.Status = status;
        }
        
        /// <summary>
        /// The time stamp e911 was provisioned
        /// </summary>
        /// <value>The time stamp e911 was provisioned</value>
        [DataMember(Name="activated_time", EmitDefaultValue=false)]
        public string ActivatedTime { get; set; }

        /// <summary>
        /// The name that will show to emergency services
        /// </summary>
        /// <value>The name that will show to emergency services</value>
        [DataMember(Name="caller_name", EmitDefaultValue=false)]
        public string CallerName { get; set; }

        /// <summary>
        /// The suit/floor/apt. address where the number is in service
        /// </summary>
        /// <value>The suit/floor/apt. address where the number is in service</value>
        [DataMember(Name="extended_address", EmitDefaultValue=false)]
        public string ExtendedAddress { get; set; }

        /// <summary>
        /// The e911 provisioning system calculated service address latitude
        /// </summary>
        /// <value>The e911 provisioning system calculated service address latitude</value>
        [DataMember(Name="latitude", EmitDefaultValue=false)]
        public string Latitude { get; set; }

        /// <summary>
        /// Gets or Sets LegacyData
        /// </summary>
        [DataMember(Name="legacy_data", EmitDefaultValue=false)]
        public PhoneNumbersE911LegacyData LegacyData { get; set; }

        /// <summary>
        /// The locality (city) where the number is in service
        /// </summary>
        /// <value>The locality (city) where the number is in service</value>
        [DataMember(Name="locality", EmitDefaultValue=false)]
        public string Locality { get; set; }

        /// <summary>
        /// The e911 provisioning system internal id for this service address
        /// </summary>
        /// <value>The e911 provisioning system internal id for this service address</value>
        [DataMember(Name="location_id", EmitDefaultValue=false)]
        public string LocationId { get; set; }

        /// <summary>
        /// The e911 provisioning system calculated service address longitude
        /// </summary>
        /// <value>The e911 provisioning system calculated service address longitude</value>
        [DataMember(Name="longitude", EmitDefaultValue=false)]
        public string Longitude { get; set; }

        /// <summary>
        /// The extended zip/postal code where the number is in service
        /// </summary>
        /// <value>The extended zip/postal code where the number is in service</value>
        [DataMember(Name="plus_four", EmitDefaultValue=false)]
        public string PlusFour { get; set; }

        /// <summary>
        /// The zip/postal code where the number is in service
        /// </summary>
        /// <value>The zip/postal code where the number is in service</value>
        [DataMember(Name="postal_code", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The region (state) where the number is in service
        /// </summary>
        /// <value>The region (state) where the number is in service</value>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public string Region { get; set; }


        /// <summary>
        /// The street address where the number is in service
        /// </summary>
        /// <value>The street address where the number is in service</value>
        [DataMember(Name="street_address", EmitDefaultValue=false)]
        public string StreetAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PhoneNumbersE911 {\n");
            sb.Append("  ActivatedTime: ").Append(ActivatedTime).Append("\n");
            sb.Append("  CallerName: ").Append(CallerName).Append("\n");
            sb.Append("  ExtendedAddress: ").Append(ExtendedAddress).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  LegacyData: ").Append(LegacyData).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  PlusFour: ").Append(PlusFour).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StreetAddress: ").Append(StreetAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PhoneNumbersE911);
        }

        /// <summary>
        /// Returns true if PhoneNumbersE911 instances are equal
        /// </summary>
        /// <param name="input">Instance of PhoneNumbersE911 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhoneNumbersE911 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActivatedTime == input.ActivatedTime ||
                    (this.ActivatedTime != null &&
                    this.ActivatedTime.Equals(input.ActivatedTime))
                ) && 
                (
                    this.CallerName == input.CallerName ||
                    (this.CallerName != null &&
                    this.CallerName.Equals(input.CallerName))
                ) && 
                (
                    this.ExtendedAddress == input.ExtendedAddress ||
                    (this.ExtendedAddress != null &&
                    this.ExtendedAddress.Equals(input.ExtendedAddress))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.LegacyData == input.LegacyData ||
                    (this.LegacyData != null &&
                    this.LegacyData.Equals(input.LegacyData))
                ) && 
                (
                    this.Locality == input.Locality ||
                    (this.Locality != null &&
                    this.Locality.Equals(input.Locality))
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    (this.LocationId != null &&
                    this.LocationId.Equals(input.LocationId))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.PlusFour == input.PlusFour ||
                    (this.PlusFour != null &&
                    this.PlusFour.Equals(input.PlusFour))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StreetAddress == input.StreetAddress ||
                    (this.StreetAddress != null &&
                    this.StreetAddress.Equals(input.StreetAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActivatedTime != null)
                    hashCode = hashCode * 59 + this.ActivatedTime.GetHashCode();
                if (this.CallerName != null)
                    hashCode = hashCode * 59 + this.CallerName.GetHashCode();
                if (this.ExtendedAddress != null)
                    hashCode = hashCode * 59 + this.ExtendedAddress.GetHashCode();
                if (this.Latitude != null)
                    hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                if (this.LegacyData != null)
                    hashCode = hashCode * 59 + this.LegacyData.GetHashCode();
                if (this.Locality != null)
                    hashCode = hashCode * 59 + this.Locality.GetHashCode();
                if (this.LocationId != null)
                    hashCode = hashCode * 59 + this.LocationId.GetHashCode();
                if (this.Longitude != null)
                    hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                if (this.PlusFour != null)
                    hashCode = hashCode * 59 + this.PlusFour.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.Region != null)
                    hashCode = hashCode * 59 + this.Region.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StreetAddress != null)
                    hashCode = hashCode * 59 + this.StreetAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CallerName (string) minLength
            if(this.CallerName != null && this.CallerName.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CallerName, length must be greater than 3.", new [] { "CallerName" });
            }

            // Region (string) maxLength
            if(this.Region != null && this.Region.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Region, length must be less than 2.", new [] { "Region" });
            }

            // Region (string) minLength
            if(this.Region != null && this.Region.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Region, length must be greater than 2.", new [] { "Region" });
            }

            yield break;
        }
    }

}
