/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for authn.req
    /// </summary>
    [DataContract]
    public partial class KapiAuthnReq :  IEquatable<KapiAuthnReq>, IValidatableObject
    {
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Directory for value: directory
            /// </summary>
            [EnumMember(Value = "directory")]
            Directory = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Authnreq for value: authn_req
            /// </summary>
            [EnumMember(Value = "authn_req")]
            Authnreq = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiAuthnReq" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiAuthnReq() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiAuthnReq" /> class.
        /// </summary>
        /// <param name="authNonce">authNonce.</param>
        /// <param name="authRealm">authRealm (required).</param>
        /// <param name="authResponse">authResponse.</param>
        /// <param name="authUser">authUser (required).</param>
        /// <param name="callID">callID.</param>
        /// <param name="contact">contact.</param>
        /// <param name="customSIPHeaders">customSIPHeaders.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="expires">expires.</param>
        /// <param name="from">from (required).</param>
        /// <param name="method">method.</param>
        /// <param name="origIP">origIP.</param>
        /// <param name="origPort">origPort.</param>
        /// <param name="switchHostname">switchHostname.</param>
        /// <param name="to">to (required).</param>
        /// <param name="userAgent">userAgent.</param>
        public KapiAuthnReq(string authNonce = default(string), string authRealm = default(string), string authResponse = default(string), string authUser = default(string), string callID = default(string), string contact = default(string), Object customSIPHeaders = default(Object), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string expires = default(string), string from = default(string), string method = default(string), string origIP = default(string), string origPort = default(string), string switchHostname = default(string), string to = default(string), string userAgent = default(string))
        {
            // to ensure "authRealm" is required (not null)
            if (authRealm == null)
            {
                throw new InvalidDataException("authRealm is a required property for KapiAuthnReq and cannot be null");
            }
            else
            {
                this.AuthRealm = authRealm;
            }
            // to ensure "authUser" is required (not null)
            if (authUser == null)
            {
                throw new InvalidDataException("authUser is a required property for KapiAuthnReq and cannot be null");
            }
            else
            {
                this.AuthUser = authUser;
            }
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new InvalidDataException("from is a required property for KapiAuthnReq and cannot be null");
            }
            else
            {
                this.From = from;
            }
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new InvalidDataException("to is a required property for KapiAuthnReq and cannot be null");
            }
            else
            {
                this.To = to;
            }
            this.AuthNonce = authNonce;
            this.AuthResponse = authResponse;
            this.CallID = callID;
            this.Contact = contact;
            this.CustomSIPHeaders = customSIPHeaders;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.Expires = expires;
            this.Method = method;
            this.OrigIP = origIP;
            this.OrigPort = origPort;
            this.SwitchHostname = switchHostname;
            this.UserAgent = userAgent;
        }
        
        /// <summary>
        /// Gets or Sets AuthNonce
        /// </summary>
        [DataMember(Name="Auth-Nonce", EmitDefaultValue=false)]
        public string AuthNonce { get; set; }

        /// <summary>
        /// Gets or Sets AuthRealm
        /// </summary>
        [DataMember(Name="Auth-Realm", EmitDefaultValue=false)]
        public string AuthRealm { get; set; }

        /// <summary>
        /// Gets or Sets AuthResponse
        /// </summary>
        [DataMember(Name="Auth-Response", EmitDefaultValue=false)]
        public string AuthResponse { get; set; }

        /// <summary>
        /// Gets or Sets AuthUser
        /// </summary>
        [DataMember(Name="Auth-User", EmitDefaultValue=false)]
        public string AuthUser { get; set; }

        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name="Contact", EmitDefaultValue=false)]
        public string Contact { get; set; }

        /// <summary>
        /// Gets or Sets CustomSIPHeaders
        /// </summary>
        [DataMember(Name="Custom-SIP-Headers", EmitDefaultValue=false)]
        public Object CustomSIPHeaders { get; set; }



        /// <summary>
        /// Gets or Sets Expires
        /// </summary>
        [DataMember(Name="Expires", EmitDefaultValue=false)]
        public string Expires { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="From", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name="Method", EmitDefaultValue=false)]
        public string Method { get; set; }

        /// <summary>
        /// Gets or Sets OrigIP
        /// </summary>
        [DataMember(Name="Orig-IP", EmitDefaultValue=false)]
        public string OrigIP { get; set; }

        /// <summary>
        /// Gets or Sets OrigPort
        /// </summary>
        [DataMember(Name="Orig-Port", EmitDefaultValue=false)]
        public string OrigPort { get; set; }

        /// <summary>
        /// Gets or Sets SwitchHostname
        /// </summary>
        [DataMember(Name="Switch-Hostname", EmitDefaultValue=false)]
        public string SwitchHostname { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="To", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// Gets or Sets UserAgent
        /// </summary>
        [DataMember(Name="User-Agent", EmitDefaultValue=false)]
        public string UserAgent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiAuthnReq {\n");
            sb.Append("  AuthNonce: ").Append(AuthNonce).Append("\n");
            sb.Append("  AuthRealm: ").Append(AuthRealm).Append("\n");
            sb.Append("  AuthResponse: ").Append(AuthResponse).Append("\n");
            sb.Append("  AuthUser: ").Append(AuthUser).Append("\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  CustomSIPHeaders: ").Append(CustomSIPHeaders).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  OrigIP: ").Append(OrigIP).Append("\n");
            sb.Append("  OrigPort: ").Append(OrigPort).Append("\n");
            sb.Append("  SwitchHostname: ").Append(SwitchHostname).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiAuthnReq);
        }

        /// <summary>
        /// Returns true if KapiAuthnReq instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiAuthnReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiAuthnReq input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthNonce == input.AuthNonce ||
                    (this.AuthNonce != null &&
                    this.AuthNonce.Equals(input.AuthNonce))
                ) && 
                (
                    this.AuthRealm == input.AuthRealm ||
                    (this.AuthRealm != null &&
                    this.AuthRealm.Equals(input.AuthRealm))
                ) && 
                (
                    this.AuthResponse == input.AuthResponse ||
                    (this.AuthResponse != null &&
                    this.AuthResponse.Equals(input.AuthResponse))
                ) && 
                (
                    this.AuthUser == input.AuthUser ||
                    (this.AuthUser != null &&
                    this.AuthUser.Equals(input.AuthUser))
                ) && 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                ) && 
                (
                    this.CustomSIPHeaders == input.CustomSIPHeaders ||
                    (this.CustomSIPHeaders != null &&
                    this.CustomSIPHeaders.Equals(input.CustomSIPHeaders))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.Expires == input.Expires ||
                    (this.Expires != null &&
                    this.Expires.Equals(input.Expires))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.OrigIP == input.OrigIP ||
                    (this.OrigIP != null &&
                    this.OrigIP.Equals(input.OrigIP))
                ) && 
                (
                    this.OrigPort == input.OrigPort ||
                    (this.OrigPort != null &&
                    this.OrigPort.Equals(input.OrigPort))
                ) && 
                (
                    this.SwitchHostname == input.SwitchHostname ||
                    (this.SwitchHostname != null &&
                    this.SwitchHostname.Equals(input.SwitchHostname))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.UserAgent == input.UserAgent ||
                    (this.UserAgent != null &&
                    this.UserAgent.Equals(input.UserAgent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthNonce != null)
                    hashCode = hashCode * 59 + this.AuthNonce.GetHashCode();
                if (this.AuthRealm != null)
                    hashCode = hashCode * 59 + this.AuthRealm.GetHashCode();
                if (this.AuthResponse != null)
                    hashCode = hashCode * 59 + this.AuthResponse.GetHashCode();
                if (this.AuthUser != null)
                    hashCode = hashCode * 59 + this.AuthUser.GetHashCode();
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.Contact != null)
                    hashCode = hashCode * 59 + this.Contact.GetHashCode();
                if (this.CustomSIPHeaders != null)
                    hashCode = hashCode * 59 + this.CustomSIPHeaders.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.Expires != null)
                    hashCode = hashCode * 59 + this.Expires.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.OrigIP != null)
                    hashCode = hashCode * 59 + this.OrigIP.GetHashCode();
                if (this.OrigPort != null)
                    hashCode = hashCode * 59 + this.OrigPort.GetHashCode();
                if (this.SwitchHostname != null)
                    hashCode = hashCode * 59 + this.SwitchHostname.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.UserAgent != null)
                    hashCode = hashCode * 59 + this.UserAgent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
