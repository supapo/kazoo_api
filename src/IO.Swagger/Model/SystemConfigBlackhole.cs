/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for blackhole system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigBlackhole :  IEquatable<SystemConfigBlackhole>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigBlackhole" /> class.
        /// </summary>
        /// <param name="acceptors">blackhole acceptors.</param>
        /// <param name="autoloadModules">blackhole autoload modules.</param>
        /// <param name="bindings">blackhole bindings.</param>
        /// <param name="compressResponseBody">blackhole compress_response_body (default to true).</param>
        /// <param name="ip">blackhole ip.</param>
        /// <param name="port">blackhole port.</param>
        /// <param name="requestTimeoutMs">blackhole request_timeout_ms.</param>
        /// <param name="sslCaCert">blackhole ssl_ca_cert.</param>
        /// <param name="sslCert">blackhole ssl_cert.</param>
        /// <param name="sslKey">blackhole ssl_key.</param>
        /// <param name="sslPassword">blackhole ssl_password (default to &quot;&quot;).</param>
        /// <param name="sslPort">blackhole ssl_port.</param>
        /// <param name="sslWorkers">blackhole ssl_workers.</param>
        /// <param name="usePlaintext">blackhole use_plaintext (default to true).</param>
        /// <param name="useSsl">blackhole use_ssl (default to false).</param>
        public SystemConfigBlackhole(int? acceptors = default(int?), List<string> autoloadModules = default(List<string>), Object bindings = default(Object), bool? compressResponseBody = true, string ip = default(string), int? port = default(int?), int? requestTimeoutMs = default(int?), string sslCaCert = default(string), string sslCert = default(string), string sslKey = default(string), string sslPassword = "", int? sslPort = default(int?), int? sslWorkers = default(int?), bool? usePlaintext = true, bool? useSsl = false)
        {
            this.Acceptors = acceptors;
            this.AutoloadModules = autoloadModules;
            this.Bindings = bindings;
            // use default value if no "compressResponseBody" provided
            if (compressResponseBody == null)
            {
                this.CompressResponseBody = true;
            }
            else
            {
                this.CompressResponseBody = compressResponseBody;
            }
            this.Ip = ip;
            this.Port = port;
            this.RequestTimeoutMs = requestTimeoutMs;
            this.SslCaCert = sslCaCert;
            this.SslCert = sslCert;
            this.SslKey = sslKey;
            // use default value if no "sslPassword" provided
            if (sslPassword == null)
            {
                this.SslPassword = "";
            }
            else
            {
                this.SslPassword = sslPassword;
            }
            this.SslPort = sslPort;
            this.SslWorkers = sslWorkers;
            // use default value if no "usePlaintext" provided
            if (usePlaintext == null)
            {
                this.UsePlaintext = true;
            }
            else
            {
                this.UsePlaintext = usePlaintext;
            }
            // use default value if no "useSsl" provided
            if (useSsl == null)
            {
                this.UseSsl = false;
            }
            else
            {
                this.UseSsl = useSsl;
            }
        }
        
        /// <summary>
        /// blackhole acceptors
        /// </summary>
        /// <value>blackhole acceptors</value>
        [DataMember(Name="acceptors", EmitDefaultValue=false)]
        public int? Acceptors { get; set; }

        /// <summary>
        /// blackhole autoload modules
        /// </summary>
        /// <value>blackhole autoload modules</value>
        [DataMember(Name="autoload_modules", EmitDefaultValue=false)]
        public List<string> AutoloadModules { get; set; }

        /// <summary>
        /// blackhole bindings
        /// </summary>
        /// <value>blackhole bindings</value>
        [DataMember(Name="bindings", EmitDefaultValue=false)]
        public Object Bindings { get; set; }

        /// <summary>
        /// blackhole compress_response_body
        /// </summary>
        /// <value>blackhole compress_response_body</value>
        [DataMember(Name="compress_response_body", EmitDefaultValue=false)]
        public bool? CompressResponseBody { get; set; }

        /// <summary>
        /// blackhole ip
        /// </summary>
        /// <value>blackhole ip</value>
        [DataMember(Name="ip", EmitDefaultValue=false)]
        public string Ip { get; set; }

        /// <summary>
        /// blackhole port
        /// </summary>
        /// <value>blackhole port</value>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public int? Port { get; set; }

        /// <summary>
        /// blackhole request_timeout_ms
        /// </summary>
        /// <value>blackhole request_timeout_ms</value>
        [DataMember(Name="request_timeout_ms", EmitDefaultValue=false)]
        public int? RequestTimeoutMs { get; set; }

        /// <summary>
        /// blackhole ssl_ca_cert
        /// </summary>
        /// <value>blackhole ssl_ca_cert</value>
        [DataMember(Name="ssl_ca_cert", EmitDefaultValue=false)]
        public string SslCaCert { get; set; }

        /// <summary>
        /// blackhole ssl_cert
        /// </summary>
        /// <value>blackhole ssl_cert</value>
        [DataMember(Name="ssl_cert", EmitDefaultValue=false)]
        public string SslCert { get; set; }

        /// <summary>
        /// blackhole ssl_key
        /// </summary>
        /// <value>blackhole ssl_key</value>
        [DataMember(Name="ssl_key", EmitDefaultValue=false)]
        public string SslKey { get; set; }

        /// <summary>
        /// blackhole ssl_password
        /// </summary>
        /// <value>blackhole ssl_password</value>
        [DataMember(Name="ssl_password", EmitDefaultValue=false)]
        public string SslPassword { get; set; }

        /// <summary>
        /// blackhole ssl_port
        /// </summary>
        /// <value>blackhole ssl_port</value>
        [DataMember(Name="ssl_port", EmitDefaultValue=false)]
        public int? SslPort { get; set; }

        /// <summary>
        /// blackhole ssl_workers
        /// </summary>
        /// <value>blackhole ssl_workers</value>
        [DataMember(Name="ssl_workers", EmitDefaultValue=false)]
        public int? SslWorkers { get; set; }

        /// <summary>
        /// blackhole use_plaintext
        /// </summary>
        /// <value>blackhole use_plaintext</value>
        [DataMember(Name="use_plaintext", EmitDefaultValue=false)]
        public bool? UsePlaintext { get; set; }

        /// <summary>
        /// blackhole use_ssl
        /// </summary>
        /// <value>blackhole use_ssl</value>
        [DataMember(Name="use_ssl", EmitDefaultValue=false)]
        public bool? UseSsl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigBlackhole {\n");
            sb.Append("  Acceptors: ").Append(Acceptors).Append("\n");
            sb.Append("  AutoloadModules: ").Append(AutoloadModules).Append("\n");
            sb.Append("  Bindings: ").Append(Bindings).Append("\n");
            sb.Append("  CompressResponseBody: ").Append(CompressResponseBody).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  RequestTimeoutMs: ").Append(RequestTimeoutMs).Append("\n");
            sb.Append("  SslCaCert: ").Append(SslCaCert).Append("\n");
            sb.Append("  SslCert: ").Append(SslCert).Append("\n");
            sb.Append("  SslKey: ").Append(SslKey).Append("\n");
            sb.Append("  SslPassword: ").Append(SslPassword).Append("\n");
            sb.Append("  SslPort: ").Append(SslPort).Append("\n");
            sb.Append("  SslWorkers: ").Append(SslWorkers).Append("\n");
            sb.Append("  UsePlaintext: ").Append(UsePlaintext).Append("\n");
            sb.Append("  UseSsl: ").Append(UseSsl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigBlackhole);
        }

        /// <summary>
        /// Returns true if SystemConfigBlackhole instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigBlackhole to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigBlackhole input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Acceptors == input.Acceptors ||
                    (this.Acceptors != null &&
                    this.Acceptors.Equals(input.Acceptors))
                ) && 
                (
                    this.AutoloadModules == input.AutoloadModules ||
                    this.AutoloadModules != null &&
                    this.AutoloadModules.SequenceEqual(input.AutoloadModules)
                ) && 
                (
                    this.Bindings == input.Bindings ||
                    (this.Bindings != null &&
                    this.Bindings.Equals(input.Bindings))
                ) && 
                (
                    this.CompressResponseBody == input.CompressResponseBody ||
                    (this.CompressResponseBody != null &&
                    this.CompressResponseBody.Equals(input.CompressResponseBody))
                ) && 
                (
                    this.Ip == input.Ip ||
                    (this.Ip != null &&
                    this.Ip.Equals(input.Ip))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.RequestTimeoutMs == input.RequestTimeoutMs ||
                    (this.RequestTimeoutMs != null &&
                    this.RequestTimeoutMs.Equals(input.RequestTimeoutMs))
                ) && 
                (
                    this.SslCaCert == input.SslCaCert ||
                    (this.SslCaCert != null &&
                    this.SslCaCert.Equals(input.SslCaCert))
                ) && 
                (
                    this.SslCert == input.SslCert ||
                    (this.SslCert != null &&
                    this.SslCert.Equals(input.SslCert))
                ) && 
                (
                    this.SslKey == input.SslKey ||
                    (this.SslKey != null &&
                    this.SslKey.Equals(input.SslKey))
                ) && 
                (
                    this.SslPassword == input.SslPassword ||
                    (this.SslPassword != null &&
                    this.SslPassword.Equals(input.SslPassword))
                ) && 
                (
                    this.SslPort == input.SslPort ||
                    (this.SslPort != null &&
                    this.SslPort.Equals(input.SslPort))
                ) && 
                (
                    this.SslWorkers == input.SslWorkers ||
                    (this.SslWorkers != null &&
                    this.SslWorkers.Equals(input.SslWorkers))
                ) && 
                (
                    this.UsePlaintext == input.UsePlaintext ||
                    (this.UsePlaintext != null &&
                    this.UsePlaintext.Equals(input.UsePlaintext))
                ) && 
                (
                    this.UseSsl == input.UseSsl ||
                    (this.UseSsl != null &&
                    this.UseSsl.Equals(input.UseSsl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Acceptors != null)
                    hashCode = hashCode * 59 + this.Acceptors.GetHashCode();
                if (this.AutoloadModules != null)
                    hashCode = hashCode * 59 + this.AutoloadModules.GetHashCode();
                if (this.Bindings != null)
                    hashCode = hashCode * 59 + this.Bindings.GetHashCode();
                if (this.CompressResponseBody != null)
                    hashCode = hashCode * 59 + this.CompressResponseBody.GetHashCode();
                if (this.Ip != null)
                    hashCode = hashCode * 59 + this.Ip.GetHashCode();
                if (this.Port != null)
                    hashCode = hashCode * 59 + this.Port.GetHashCode();
                if (this.RequestTimeoutMs != null)
                    hashCode = hashCode * 59 + this.RequestTimeoutMs.GetHashCode();
                if (this.SslCaCert != null)
                    hashCode = hashCode * 59 + this.SslCaCert.GetHashCode();
                if (this.SslCert != null)
                    hashCode = hashCode * 59 + this.SslCert.GetHashCode();
                if (this.SslKey != null)
                    hashCode = hashCode * 59 + this.SslKey.GetHashCode();
                if (this.SslPassword != null)
                    hashCode = hashCode * 59 + this.SslPassword.GetHashCode();
                if (this.SslPort != null)
                    hashCode = hashCode * 59 + this.SslPort.GetHashCode();
                if (this.SslWorkers != null)
                    hashCode = hashCode * 59 + this.SslWorkers.GetHashCode();
                if (this.UsePlaintext != null)
                    hashCode = hashCode * 59 + this.UsePlaintext.GetHashCode();
                if (this.UseSsl != null)
                    hashCode = hashCode * 59 + this.UseSsl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
