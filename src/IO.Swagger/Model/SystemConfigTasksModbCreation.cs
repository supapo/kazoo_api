/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for tasks.modb_creation system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigTasksModbCreation :  IEquatable<SystemConfigTasksModbCreation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigTasksModbCreation" /> class.
        /// </summary>
        /// <param name="createInParallel">How many accounts to process per pass (in parallel)..</param>
        /// <param name="creationDay">Which day of the month (of current month) to create next month&#39;s MODBs on.</param>
        public SystemConfigTasksModbCreation(int? createInParallel = default(int?), int? creationDay = default(int?))
        {
            this.CreateInParallel = createInParallel;
            this.CreationDay = creationDay;
        }
        
        /// <summary>
        /// How many accounts to process per pass (in parallel).
        /// </summary>
        /// <value>How many accounts to process per pass (in parallel).</value>
        [DataMember(Name="create_in_parallel", EmitDefaultValue=false)]
        public int? CreateInParallel { get; set; }

        /// <summary>
        /// Which day of the month (of current month) to create next month&#39;s MODBs on
        /// </summary>
        /// <value>Which day of the month (of current month) to create next month&#39;s MODBs on</value>
        [DataMember(Name="creation_day", EmitDefaultValue=false)]
        public int? CreationDay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigTasksModbCreation {\n");
            sb.Append("  CreateInParallel: ").Append(CreateInParallel).Append("\n");
            sb.Append("  CreationDay: ").Append(CreationDay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigTasksModbCreation);
        }

        /// <summary>
        /// Returns true if SystemConfigTasksModbCreation instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigTasksModbCreation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigTasksModbCreation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreateInParallel == input.CreateInParallel ||
                    (this.CreateInParallel != null &&
                    this.CreateInParallel.Equals(input.CreateInParallel))
                ) && 
                (
                    this.CreationDay == input.CreationDay ||
                    (this.CreationDay != null &&
                    this.CreationDay.Equals(input.CreationDay))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreateInParallel != null)
                    hashCode = hashCode * 59 + this.CreateInParallel.GetHashCode();
                if (this.CreationDay != null)
                    hashCode = hashCode * 59 + this.CreationDay.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
