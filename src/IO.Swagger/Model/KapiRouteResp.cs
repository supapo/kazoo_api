/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for route.resp
    /// </summary>
    [DataContract]
    public partial class KapiRouteResp :  IEquatable<KapiRouteResp>, IValidatableObject
    {
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Dialplan for value: dialplan
            /// </summary>
            [EnumMember(Value = "dialplan")]
            Dialplan = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Routeresp for value: route_resp
            /// </summary>
            [EnumMember(Value = "route_resp")]
            Routeresp = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Defines Method
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodEnum
        {
            
            /// <summary>
            /// Enum Bridge for value: bridge
            /// </summary>
            [EnumMember(Value = "bridge")]
            Bridge = 1,
            
            /// <summary>
            /// Enum Park for value: park
            /// </summary>
            [EnumMember(Value = "park")]
            Park = 2,
            
            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 3,
            
            /// <summary>
            /// Enum Sms for value: sms
            /// </summary>
            [EnumMember(Value = "sms")]
            Sms = 4,
            
            /// <summary>
            /// Enum Plan for value: plan
            /// </summary>
            [EnumMember(Value = "plan")]
            Plan = 5,
            
            /// <summary>
            /// Enum Application for value: application
            /// </summary>
            [EnumMember(Value = "application")]
            Application = 6
        }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name="Method", EmitDefaultValue=false)]
        public MethodEnum Method { get; set; }
        /// <summary>
        /// Defines PrePark
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PreParkEnum
        {
            
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,
            
            /// <summary>
            /// Enum Ringready for value: ring_ready
            /// </summary>
            [EnumMember(Value = "ring_ready")]
            Ringready = 2,
            
            /// <summary>
            /// Enum Answer for value: answer
            /// </summary>
            [EnumMember(Value = "answer")]
            Answer = 3
        }

        /// <summary>
        /// Gets or Sets PrePark
        /// </summary>
        [DataMember(Name="Pre-Park", EmitDefaultValue=false)]
        public PreParkEnum? PrePark { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiRouteResp" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiRouteResp() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiRouteResp" /> class.
        /// </summary>
        /// <param name="applicationData">applicationData.</param>
        /// <param name="customApplicationVars">customApplicationVars.</param>
        /// <param name="customChannelVars">customChannelVars.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="fromRealm">fromRealm.</param>
        /// <param name="fromURI">fromURI.</param>
        /// <param name="fromUser">fromUser.</param>
        /// <param name="method">method (required).</param>
        /// <param name="planData">planData.</param>
        /// <param name="prePark">prePark.</param>
        /// <param name="ringbackMedia">ringbackMedia.</param>
        /// <param name="routeErrorCode">routeErrorCode.</param>
        /// <param name="routeErrorMessage">routeErrorMessage.</param>
        /// <param name="routes">routes.</param>
        /// <param name="transferMedia">transferMedia.</param>
        public KapiRouteResp(string applicationData = default(string), Object customApplicationVars = default(Object), Object customChannelVars = default(Object), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string fromRealm = default(string), string fromURI = default(string), string fromUser = default(string), MethodEnum method = default(MethodEnum), string planData = default(string), PreParkEnum? prePark = default(PreParkEnum?), string ringbackMedia = default(string), string routeErrorCode = default(string), string routeErrorMessage = default(string), List<KapiRouteRespRoute> routes = default(List<KapiRouteRespRoute>), string transferMedia = default(string))
        {
            // to ensure "method" is required (not null)
            if (method == null)
            {
                throw new InvalidDataException("method is a required property for KapiRouteResp and cannot be null");
            }
            else
            {
                this.Method = method;
            }
            this.ApplicationData = applicationData;
            this.CustomApplicationVars = customApplicationVars;
            this.CustomChannelVars = customChannelVars;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.FromRealm = fromRealm;
            this.FromURI = fromURI;
            this.FromUser = fromUser;
            this.PlanData = planData;
            this.PrePark = prePark;
            this.RingbackMedia = ringbackMedia;
            this.RouteErrorCode = routeErrorCode;
            this.RouteErrorMessage = routeErrorMessage;
            this.Routes = routes;
            this.TransferMedia = transferMedia;
        }
        
        /// <summary>
        /// Gets or Sets ApplicationData
        /// </summary>
        [DataMember(Name="Application-Data", EmitDefaultValue=false)]
        public string ApplicationData { get; set; }

        /// <summary>
        /// Gets or Sets CustomApplicationVars
        /// </summary>
        [DataMember(Name="Custom-Application-Vars", EmitDefaultValue=false)]
        public Object CustomApplicationVars { get; set; }

        /// <summary>
        /// Gets or Sets CustomChannelVars
        /// </summary>
        [DataMember(Name="Custom-Channel-Vars", EmitDefaultValue=false)]
        public Object CustomChannelVars { get; set; }



        /// <summary>
        /// Gets or Sets FromRealm
        /// </summary>
        [DataMember(Name="From-Realm", EmitDefaultValue=false)]
        public string FromRealm { get; set; }

        /// <summary>
        /// Gets or Sets FromURI
        /// </summary>
        [DataMember(Name="From-URI", EmitDefaultValue=false)]
        public string FromURI { get; set; }

        /// <summary>
        /// Gets or Sets FromUser
        /// </summary>
        [DataMember(Name="From-User", EmitDefaultValue=false)]
        public string FromUser { get; set; }


        /// <summary>
        /// Gets or Sets PlanData
        /// </summary>
        [DataMember(Name="Plan-Data", EmitDefaultValue=false)]
        public string PlanData { get; set; }


        /// <summary>
        /// Gets or Sets RingbackMedia
        /// </summary>
        [DataMember(Name="Ringback-Media", EmitDefaultValue=false)]
        public string RingbackMedia { get; set; }

        /// <summary>
        /// Gets or Sets RouteErrorCode
        /// </summary>
        [DataMember(Name="Route-Error-Code", EmitDefaultValue=false)]
        public string RouteErrorCode { get; set; }

        /// <summary>
        /// Gets or Sets RouteErrorMessage
        /// </summary>
        [DataMember(Name="Route-Error-Message", EmitDefaultValue=false)]
        public string RouteErrorMessage { get; set; }

        /// <summary>
        /// Gets or Sets Routes
        /// </summary>
        [DataMember(Name="Routes", EmitDefaultValue=false)]
        public List<KapiRouteRespRoute> Routes { get; set; }

        /// <summary>
        /// Gets or Sets TransferMedia
        /// </summary>
        [DataMember(Name="Transfer-Media", EmitDefaultValue=false)]
        public string TransferMedia { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiRouteResp {\n");
            sb.Append("  ApplicationData: ").Append(ApplicationData).Append("\n");
            sb.Append("  CustomApplicationVars: ").Append(CustomApplicationVars).Append("\n");
            sb.Append("  CustomChannelVars: ").Append(CustomChannelVars).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  FromRealm: ").Append(FromRealm).Append("\n");
            sb.Append("  FromURI: ").Append(FromURI).Append("\n");
            sb.Append("  FromUser: ").Append(FromUser).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  PlanData: ").Append(PlanData).Append("\n");
            sb.Append("  PrePark: ").Append(PrePark).Append("\n");
            sb.Append("  RingbackMedia: ").Append(RingbackMedia).Append("\n");
            sb.Append("  RouteErrorCode: ").Append(RouteErrorCode).Append("\n");
            sb.Append("  RouteErrorMessage: ").Append(RouteErrorMessage).Append("\n");
            sb.Append("  Routes: ").Append(Routes).Append("\n");
            sb.Append("  TransferMedia: ").Append(TransferMedia).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiRouteResp);
        }

        /// <summary>
        /// Returns true if KapiRouteResp instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiRouteResp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiRouteResp input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationData == input.ApplicationData ||
                    (this.ApplicationData != null &&
                    this.ApplicationData.Equals(input.ApplicationData))
                ) && 
                (
                    this.CustomApplicationVars == input.CustomApplicationVars ||
                    (this.CustomApplicationVars != null &&
                    this.CustomApplicationVars.Equals(input.CustomApplicationVars))
                ) && 
                (
                    this.CustomChannelVars == input.CustomChannelVars ||
                    (this.CustomChannelVars != null &&
                    this.CustomChannelVars.Equals(input.CustomChannelVars))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.FromRealm == input.FromRealm ||
                    (this.FromRealm != null &&
                    this.FromRealm.Equals(input.FromRealm))
                ) && 
                (
                    this.FromURI == input.FromURI ||
                    (this.FromURI != null &&
                    this.FromURI.Equals(input.FromURI))
                ) && 
                (
                    this.FromUser == input.FromUser ||
                    (this.FromUser != null &&
                    this.FromUser.Equals(input.FromUser))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.PlanData == input.PlanData ||
                    (this.PlanData != null &&
                    this.PlanData.Equals(input.PlanData))
                ) && 
                (
                    this.PrePark == input.PrePark ||
                    (this.PrePark != null &&
                    this.PrePark.Equals(input.PrePark))
                ) && 
                (
                    this.RingbackMedia == input.RingbackMedia ||
                    (this.RingbackMedia != null &&
                    this.RingbackMedia.Equals(input.RingbackMedia))
                ) && 
                (
                    this.RouteErrorCode == input.RouteErrorCode ||
                    (this.RouteErrorCode != null &&
                    this.RouteErrorCode.Equals(input.RouteErrorCode))
                ) && 
                (
                    this.RouteErrorMessage == input.RouteErrorMessage ||
                    (this.RouteErrorMessage != null &&
                    this.RouteErrorMessage.Equals(input.RouteErrorMessage))
                ) && 
                (
                    this.Routes == input.Routes ||
                    this.Routes != null &&
                    this.Routes.SequenceEqual(input.Routes)
                ) && 
                (
                    this.TransferMedia == input.TransferMedia ||
                    (this.TransferMedia != null &&
                    this.TransferMedia.Equals(input.TransferMedia))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationData != null)
                    hashCode = hashCode * 59 + this.ApplicationData.GetHashCode();
                if (this.CustomApplicationVars != null)
                    hashCode = hashCode * 59 + this.CustomApplicationVars.GetHashCode();
                if (this.CustomChannelVars != null)
                    hashCode = hashCode * 59 + this.CustomChannelVars.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.FromRealm != null)
                    hashCode = hashCode * 59 + this.FromRealm.GetHashCode();
                if (this.FromURI != null)
                    hashCode = hashCode * 59 + this.FromURI.GetHashCode();
                if (this.FromUser != null)
                    hashCode = hashCode * 59 + this.FromUser.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.PlanData != null)
                    hashCode = hashCode * 59 + this.PlanData.GetHashCode();
                if (this.PrePark != null)
                    hashCode = hashCode * 59 + this.PrePark.GetHashCode();
                if (this.RingbackMedia != null)
                    hashCode = hashCode * 59 + this.RingbackMedia.GetHashCode();
                if (this.RouteErrorCode != null)
                    hashCode = hashCode * 59 + this.RouteErrorCode.GetHashCode();
                if (this.RouteErrorMessage != null)
                    hashCode = hashCode * 59 + this.RouteErrorMessage.GetHashCode();
                if (this.Routes != null)
                    hashCode = hashCode * 59 + this.Routes.GetHashCode();
                if (this.TransferMedia != null)
                    hashCode = hashCode * 59 + this.TransferMedia.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
