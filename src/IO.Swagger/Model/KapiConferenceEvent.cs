/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for conference.event
    /// </summary>
    [DataContract]
    public partial class KapiConferenceEvent :  IEquatable<KapiConferenceEvent>, IValidatableObject
    {
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Conference for value: conference
            /// </summary>
            [EnumMember(Value = "conference")]
            Conference = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Event for value: event
            /// </summary>
            [EnumMember(Value = "event")]
            Event = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiConferenceEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiConferenceEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiConferenceEvent" /> class.
        /// </summary>
        /// <param name="callID">callID.</param>
        /// <param name="callerIDName">callerIDName.</param>
        /// <param name="callerIDNumber">callerIDNumber.</param>
        /// <param name="channelPresenceID">channelPresenceID.</param>
        /// <param name="conferenceChannelVars">conferenceChannelVars.</param>
        /// <param name="conferenceID">conferenceID (required).</param>
        /// <param name="customChannelVars">customChannelVars.</param>
        /// <param name="_event">_event (required).</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="instanceID">instanceID (required).</param>
        /// <param name="participantID">participantID.</param>
        public KapiConferenceEvent(string callID = default(string), string callerIDName = default(string), string callerIDNumber = default(string), string channelPresenceID = default(string), Object conferenceChannelVars = default(Object), string conferenceID = default(string), Object customChannelVars = default(Object), string _event = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string instanceID = default(string), string participantID = default(string))
        {
            // to ensure "conferenceID" is required (not null)
            if (conferenceID == null)
            {
                throw new InvalidDataException("conferenceID is a required property for KapiConferenceEvent and cannot be null");
            }
            else
            {
                this.ConferenceID = conferenceID;
            }
            // to ensure "_event" is required (not null)
            if (_event == null)
            {
                throw new InvalidDataException("_event is a required property for KapiConferenceEvent and cannot be null");
            }
            else
            {
                this.Event = _event;
            }
            // to ensure "instanceID" is required (not null)
            if (instanceID == null)
            {
                throw new InvalidDataException("instanceID is a required property for KapiConferenceEvent and cannot be null");
            }
            else
            {
                this.InstanceID = instanceID;
            }
            this.CallID = callID;
            this.CallerIDName = callerIDName;
            this.CallerIDNumber = callerIDNumber;
            this.ChannelPresenceID = channelPresenceID;
            this.ConferenceChannelVars = conferenceChannelVars;
            this.CustomChannelVars = customChannelVars;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.ParticipantID = participantID;
        }
        
        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }

        /// <summary>
        /// Gets or Sets CallerIDName
        /// </summary>
        [DataMember(Name="Caller-ID-Name", EmitDefaultValue=false)]
        public string CallerIDName { get; set; }

        /// <summary>
        /// Gets or Sets CallerIDNumber
        /// </summary>
        [DataMember(Name="Caller-ID-Number", EmitDefaultValue=false)]
        public string CallerIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets ChannelPresenceID
        /// </summary>
        [DataMember(Name="Channel-Presence-ID", EmitDefaultValue=false)]
        public string ChannelPresenceID { get; set; }

        /// <summary>
        /// Gets or Sets ConferenceChannelVars
        /// </summary>
        [DataMember(Name="Conference-Channel-Vars", EmitDefaultValue=false)]
        public Object ConferenceChannelVars { get; set; }

        /// <summary>
        /// Gets or Sets ConferenceID
        /// </summary>
        [DataMember(Name="Conference-ID", EmitDefaultValue=false)]
        public string ConferenceID { get; set; }

        /// <summary>
        /// Gets or Sets CustomChannelVars
        /// </summary>
        [DataMember(Name="Custom-Channel-Vars", EmitDefaultValue=false)]
        public Object CustomChannelVars { get; set; }

        /// <summary>
        /// Gets or Sets Event
        /// </summary>
        [DataMember(Name="Event", EmitDefaultValue=false)]
        public string Event { get; set; }



        /// <summary>
        /// Gets or Sets InstanceID
        /// </summary>
        [DataMember(Name="Instance-ID", EmitDefaultValue=false)]
        public string InstanceID { get; set; }

        /// <summary>
        /// Gets or Sets ParticipantID
        /// </summary>
        [DataMember(Name="Participant-ID", EmitDefaultValue=false)]
        public string ParticipantID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiConferenceEvent {\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  CallerIDName: ").Append(CallerIDName).Append("\n");
            sb.Append("  CallerIDNumber: ").Append(CallerIDNumber).Append("\n");
            sb.Append("  ChannelPresenceID: ").Append(ChannelPresenceID).Append("\n");
            sb.Append("  ConferenceChannelVars: ").Append(ConferenceChannelVars).Append("\n");
            sb.Append("  ConferenceID: ").Append(ConferenceID).Append("\n");
            sb.Append("  CustomChannelVars: ").Append(CustomChannelVars).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  InstanceID: ").Append(InstanceID).Append("\n");
            sb.Append("  ParticipantID: ").Append(ParticipantID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiConferenceEvent);
        }

        /// <summary>
        /// Returns true if KapiConferenceEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiConferenceEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiConferenceEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.CallerIDName == input.CallerIDName ||
                    (this.CallerIDName != null &&
                    this.CallerIDName.Equals(input.CallerIDName))
                ) && 
                (
                    this.CallerIDNumber == input.CallerIDNumber ||
                    (this.CallerIDNumber != null &&
                    this.CallerIDNumber.Equals(input.CallerIDNumber))
                ) && 
                (
                    this.ChannelPresenceID == input.ChannelPresenceID ||
                    (this.ChannelPresenceID != null &&
                    this.ChannelPresenceID.Equals(input.ChannelPresenceID))
                ) && 
                (
                    this.ConferenceChannelVars == input.ConferenceChannelVars ||
                    (this.ConferenceChannelVars != null &&
                    this.ConferenceChannelVars.Equals(input.ConferenceChannelVars))
                ) && 
                (
                    this.ConferenceID == input.ConferenceID ||
                    (this.ConferenceID != null &&
                    this.ConferenceID.Equals(input.ConferenceID))
                ) && 
                (
                    this.CustomChannelVars == input.CustomChannelVars ||
                    (this.CustomChannelVars != null &&
                    this.CustomChannelVars.Equals(input.CustomChannelVars))
                ) && 
                (
                    this.Event == input.Event ||
                    (this.Event != null &&
                    this.Event.Equals(input.Event))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.InstanceID == input.InstanceID ||
                    (this.InstanceID != null &&
                    this.InstanceID.Equals(input.InstanceID))
                ) && 
                (
                    this.ParticipantID == input.ParticipantID ||
                    (this.ParticipantID != null &&
                    this.ParticipantID.Equals(input.ParticipantID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.CallerIDName != null)
                    hashCode = hashCode * 59 + this.CallerIDName.GetHashCode();
                if (this.CallerIDNumber != null)
                    hashCode = hashCode * 59 + this.CallerIDNumber.GetHashCode();
                if (this.ChannelPresenceID != null)
                    hashCode = hashCode * 59 + this.ChannelPresenceID.GetHashCode();
                if (this.ConferenceChannelVars != null)
                    hashCode = hashCode * 59 + this.ConferenceChannelVars.GetHashCode();
                if (this.ConferenceID != null)
                    hashCode = hashCode * 59 + this.ConferenceID.GetHashCode();
                if (this.CustomChannelVars != null)
                    hashCode = hashCode * 59 + this.CustomChannelVars.GetHashCode();
                if (this.Event != null)
                    hashCode = hashCode * 59 + this.Event.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.InstanceID != null)
                    hashCode = hashCode * 59 + this.InstanceID.GetHashCode();
                if (this.ParticipantID != null)
                    hashCode = hashCode * 59 + this.ParticipantID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
