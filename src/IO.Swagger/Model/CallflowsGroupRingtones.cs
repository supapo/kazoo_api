/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CallflowsGroupRingtones
    /// </summary>
    [DataContract]
    public partial class CallflowsGroupRingtones :  IEquatable<CallflowsGroupRingtones>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsGroupRingtones" /> class.
        /// </summary>
        /// <param name="external">Ring tone for calls from external sources.</param>
        /// <param name="_internal">Ring tone for calls from external sources.</param>
        public CallflowsGroupRingtones(string external = default(string), string _internal = default(string))
        {
            this.External = external;
            this.Internal = _internal;
        }
        
        /// <summary>
        /// Ring tone for calls from external sources
        /// </summary>
        /// <value>Ring tone for calls from external sources</value>
        [DataMember(Name="external", EmitDefaultValue=false)]
        public string External { get; set; }

        /// <summary>
        /// Ring tone for calls from external sources
        /// </summary>
        /// <value>Ring tone for calls from external sources</value>
        [DataMember(Name="internal", EmitDefaultValue=false)]
        public string Internal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallflowsGroupRingtones {\n");
            sb.Append("  External: ").Append(External).Append("\n");
            sb.Append("  Internal: ").Append(Internal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallflowsGroupRingtones);
        }

        /// <summary>
        /// Returns true if CallflowsGroupRingtones instances are equal
        /// </summary>
        /// <param name="input">Instance of CallflowsGroupRingtones to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallflowsGroupRingtones input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.External == input.External ||
                    (this.External != null &&
                    this.External.Equals(input.External))
                ) && 
                (
                    this.Internal == input.Internal ||
                    (this.Internal != null &&
                    this.Internal.Equals(input.Internal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.External != null)
                    hashCode = hashCode * 59 + this.External.GetHashCode();
                if (this.Internal != null)
                    hashCode = hashCode * 59 + this.Internal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
