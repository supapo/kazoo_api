/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Information that applies to the account as a whole
    /// </summary>
    [DataContract]
    public partial class ConnectivityAccount :  IEquatable<ConnectivityAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectivityAccount" /> class.
        /// </summary>
        /// <param name="authRealm">The realm any device in the account will use to authenticate with.</param>
        /// <param name="callerId">callerId.</param>
        /// <param name="emergencyCallerId">emergencyCallerId.</param>
        /// <param name="trunks">The number of two-way trunks this account has purchased.</param>
        public ConnectivityAccount(string authRealm = default(string), ConnectivityAccountCallerId callerId = default(ConnectivityAccountCallerId), ConnectivityAccountCallerId emergencyCallerId = default(ConnectivityAccountCallerId), int? trunks = default(int?))
        {
            this.AuthRealm = authRealm;
            this.CallerId = callerId;
            this.EmergencyCallerId = emergencyCallerId;
            this.Trunks = trunks;
        }
        
        /// <summary>
        /// The realm any device in the account will use to authenticate with
        /// </summary>
        /// <value>The realm any device in the account will use to authenticate with</value>
        [DataMember(Name="auth_realm", EmitDefaultValue=false)]
        public string AuthRealm { get; set; }

        /// <summary>
        /// Gets or Sets CallerId
        /// </summary>
        [DataMember(Name="caller_id", EmitDefaultValue=false)]
        public ConnectivityAccountCallerId CallerId { get; set; }

        /// <summary>
        /// Gets or Sets EmergencyCallerId
        /// </summary>
        [DataMember(Name="emergency_caller_id", EmitDefaultValue=false)]
        public ConnectivityAccountCallerId EmergencyCallerId { get; set; }

        /// <summary>
        /// The number of two-way trunks this account has purchased
        /// </summary>
        /// <value>The number of two-way trunks this account has purchased</value>
        [DataMember(Name="trunks", EmitDefaultValue=false)]
        public int? Trunks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConnectivityAccount {\n");
            sb.Append("  AuthRealm: ").Append(AuthRealm).Append("\n");
            sb.Append("  CallerId: ").Append(CallerId).Append("\n");
            sb.Append("  EmergencyCallerId: ").Append(EmergencyCallerId).Append("\n");
            sb.Append("  Trunks: ").Append(Trunks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConnectivityAccount);
        }

        /// <summary>
        /// Returns true if ConnectivityAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of ConnectivityAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConnectivityAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthRealm == input.AuthRealm ||
                    (this.AuthRealm != null &&
                    this.AuthRealm.Equals(input.AuthRealm))
                ) && 
                (
                    this.CallerId == input.CallerId ||
                    (this.CallerId != null &&
                    this.CallerId.Equals(input.CallerId))
                ) && 
                (
                    this.EmergencyCallerId == input.EmergencyCallerId ||
                    (this.EmergencyCallerId != null &&
                    this.EmergencyCallerId.Equals(input.EmergencyCallerId))
                ) && 
                (
                    this.Trunks == input.Trunks ||
                    (this.Trunks != null &&
                    this.Trunks.Equals(input.Trunks))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthRealm != null)
                    hashCode = hashCode * 59 + this.AuthRealm.GetHashCode();
                if (this.CallerId != null)
                    hashCode = hashCode * 59 + this.CallerId.GetHashCode();
                if (this.EmergencyCallerId != null)
                    hashCode = hashCode * 59 + this.EmergencyCallerId.GetHashCode();
                if (this.Trunks != null)
                    hashCode = hashCode * 59 + this.Trunks.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AuthRealm (string) minLength
            if(this.AuthRealm != null && this.AuthRealm.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthRealm, length must be greater than 1.", new [] { "AuthRealm" });
            }

            // Trunks (int?) minimum
            if(this.Trunks < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Trunks, must be a value greater than or equal to 0.", new [] { "Trunks" });
            }

            yield break;
        }
    }

}
