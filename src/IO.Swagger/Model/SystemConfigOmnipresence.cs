/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for omnipresence system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigOmnipresence :  IEquatable<SystemConfigOmnipresence>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigOmnipresence" /> class.
        /// </summary>
        /// <param name="dialogSubscribedMwiPrefix">prefix used when subscribing vm updates for dialog (default to &quot;*98&quot;).</param>
        /// <param name="expireCheckMs">omnipresence expire check in milliseconds.</param>
        /// <param name="expiresFudgeS">omnipresence expires fudge in seconds.</param>
        /// <param name="subscriptionsSyncEnabled">omnipresence subscriptions sync enabled (default to false).</param>
        public SystemConfigOmnipresence(string dialogSubscribedMwiPrefix = "*98", int? expireCheckMs = default(int?), int? expiresFudgeS = default(int?), bool? subscriptionsSyncEnabled = false)
        {
            // use default value if no "dialogSubscribedMwiPrefix" provided
            if (dialogSubscribedMwiPrefix == null)
            {
                this.DialogSubscribedMwiPrefix = "*98";
            }
            else
            {
                this.DialogSubscribedMwiPrefix = dialogSubscribedMwiPrefix;
            }
            this.ExpireCheckMs = expireCheckMs;
            this.ExpiresFudgeS = expiresFudgeS;
            // use default value if no "subscriptionsSyncEnabled" provided
            if (subscriptionsSyncEnabled == null)
            {
                this.SubscriptionsSyncEnabled = false;
            }
            else
            {
                this.SubscriptionsSyncEnabled = subscriptionsSyncEnabled;
            }
        }
        
        /// <summary>
        /// prefix used when subscribing vm updates for dialog
        /// </summary>
        /// <value>prefix used when subscribing vm updates for dialog</value>
        [DataMember(Name="dialog_subscribed_mwi_prefix", EmitDefaultValue=false)]
        public string DialogSubscribedMwiPrefix { get; set; }

        /// <summary>
        /// omnipresence expire check in milliseconds
        /// </summary>
        /// <value>omnipresence expire check in milliseconds</value>
        [DataMember(Name="expire_check_ms", EmitDefaultValue=false)]
        public int? ExpireCheckMs { get; set; }

        /// <summary>
        /// omnipresence expires fudge in seconds
        /// </summary>
        /// <value>omnipresence expires fudge in seconds</value>
        [DataMember(Name="expires_fudge_s", EmitDefaultValue=false)]
        public int? ExpiresFudgeS { get; set; }

        /// <summary>
        /// omnipresence subscriptions sync enabled
        /// </summary>
        /// <value>omnipresence subscriptions sync enabled</value>
        [DataMember(Name="subscriptions_sync_enabled", EmitDefaultValue=false)]
        public bool? SubscriptionsSyncEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigOmnipresence {\n");
            sb.Append("  DialogSubscribedMwiPrefix: ").Append(DialogSubscribedMwiPrefix).Append("\n");
            sb.Append("  ExpireCheckMs: ").Append(ExpireCheckMs).Append("\n");
            sb.Append("  ExpiresFudgeS: ").Append(ExpiresFudgeS).Append("\n");
            sb.Append("  SubscriptionsSyncEnabled: ").Append(SubscriptionsSyncEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigOmnipresence);
        }

        /// <summary>
        /// Returns true if SystemConfigOmnipresence instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigOmnipresence to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigOmnipresence input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DialogSubscribedMwiPrefix == input.DialogSubscribedMwiPrefix ||
                    (this.DialogSubscribedMwiPrefix != null &&
                    this.DialogSubscribedMwiPrefix.Equals(input.DialogSubscribedMwiPrefix))
                ) && 
                (
                    this.ExpireCheckMs == input.ExpireCheckMs ||
                    (this.ExpireCheckMs != null &&
                    this.ExpireCheckMs.Equals(input.ExpireCheckMs))
                ) && 
                (
                    this.ExpiresFudgeS == input.ExpiresFudgeS ||
                    (this.ExpiresFudgeS != null &&
                    this.ExpiresFudgeS.Equals(input.ExpiresFudgeS))
                ) && 
                (
                    this.SubscriptionsSyncEnabled == input.SubscriptionsSyncEnabled ||
                    (this.SubscriptionsSyncEnabled != null &&
                    this.SubscriptionsSyncEnabled.Equals(input.SubscriptionsSyncEnabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DialogSubscribedMwiPrefix != null)
                    hashCode = hashCode * 59 + this.DialogSubscribedMwiPrefix.GetHashCode();
                if (this.ExpireCheckMs != null)
                    hashCode = hashCode * 59 + this.ExpireCheckMs.GetHashCode();
                if (this.ExpiresFudgeS != null)
                    hashCode = hashCode * 59 + this.ExpiresFudgeS.GetHashCode();
                if (this.SubscriptionsSyncEnabled != null)
                    hashCode = hashCode * 59 + this.SubscriptionsSyncEnabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
