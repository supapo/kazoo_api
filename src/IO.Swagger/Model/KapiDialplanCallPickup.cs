/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for dialplan.call_pickup
    /// </summary>
    [DataContract]
    public partial class KapiDialplanCallPickup :  IEquatable<KapiDialplanCallPickup>, IValidatableObject
    {
        /// <summary>
        /// Defines ApplicationName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApplicationNameEnum
        {
            
            /// <summary>
            /// Enum Callpickup for value: call_pickup
            /// </summary>
            [EnumMember(Value = "call_pickup")]
            Callpickup = 1
        }

        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name="Application-Name", EmitDefaultValue=false)]
        public ApplicationNameEnum ApplicationName { get; set; }
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Call for value: call
            /// </summary>
            [EnumMember(Value = "call")]
            Call = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Command for value: command
            /// </summary>
            [EnumMember(Value = "command")]
            Command = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Defines InsertAt
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InsertAtEnum
        {
            
            /// <summary>
            /// Enum Head for value: head
            /// </summary>
            [EnumMember(Value = "head")]
            Head = 1,
            
            /// <summary>
            /// Enum Tail for value: tail
            /// </summary>
            [EnumMember(Value = "tail")]
            Tail = 2,
            
            /// <summary>
            /// Enum Flush for value: flush
            /// </summary>
            [EnumMember(Value = "flush")]
            Flush = 3,
            
            /// <summary>
            /// Enum Now for value: now
            /// </summary>
            [EnumMember(Value = "now")]
            Now = 4
        }

        /// <summary>
        /// Gets or Sets InsertAt
        /// </summary>
        [DataMember(Name="Insert-At", EmitDefaultValue=false)]
        public InsertAtEnum? InsertAt { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanCallPickup" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiDialplanCallPickup() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanCallPickup" /> class.
        /// </summary>
        /// <param name="applicationName">applicationName (required).</param>
        /// <param name="callID">callID (required).</param>
        /// <param name="continueOnCancel">continueOnCancel.</param>
        /// <param name="continueOnFail">continueOnFail.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="hangupAfterPickup">hangupAfterPickup.</param>
        /// <param name="insertAt">insertAt.</param>
        /// <param name="moveChannelIfNecessary">moveChannelIfNecessary.</param>
        /// <param name="otherLeg">otherLeg.</param>
        /// <param name="parkAfterPickup">parkAfterPickup.</param>
        /// <param name="targetCallID">targetCallID (required).</param>
        /// <param name="unansweredOnly">unansweredOnly.</param>
        /// <param name="unbridgedOnly">unbridgedOnly.</param>
        public KapiDialplanCallPickup(ApplicationNameEnum applicationName = default(ApplicationNameEnum), string callID = default(string), string continueOnCancel = default(string), string continueOnFail = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), bool? hangupAfterPickup = default(bool?), InsertAtEnum? insertAt = default(InsertAtEnum?), bool? moveChannelIfNecessary = default(bool?), string otherLeg = default(string), bool? parkAfterPickup = default(bool?), string targetCallID = default(string), string unansweredOnly = default(string), string unbridgedOnly = default(string))
        {
            // to ensure "applicationName" is required (not null)
            if (applicationName == null)
            {
                throw new InvalidDataException("applicationName is a required property for KapiDialplanCallPickup and cannot be null");
            }
            else
            {
                this.ApplicationName = applicationName;
            }
            // to ensure "callID" is required (not null)
            if (callID == null)
            {
                throw new InvalidDataException("callID is a required property for KapiDialplanCallPickup and cannot be null");
            }
            else
            {
                this.CallID = callID;
            }
            // to ensure "targetCallID" is required (not null)
            if (targetCallID == null)
            {
                throw new InvalidDataException("targetCallID is a required property for KapiDialplanCallPickup and cannot be null");
            }
            else
            {
                this.TargetCallID = targetCallID;
            }
            this.ContinueOnCancel = continueOnCancel;
            this.ContinueOnFail = continueOnFail;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.HangupAfterPickup = hangupAfterPickup;
            this.InsertAt = insertAt;
            this.MoveChannelIfNecessary = moveChannelIfNecessary;
            this.OtherLeg = otherLeg;
            this.ParkAfterPickup = parkAfterPickup;
            this.UnansweredOnly = unansweredOnly;
            this.UnbridgedOnly = unbridgedOnly;
        }
        

        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }

        /// <summary>
        /// Gets or Sets ContinueOnCancel
        /// </summary>
        [DataMember(Name="Continue-On-Cancel", EmitDefaultValue=false)]
        public string ContinueOnCancel { get; set; }

        /// <summary>
        /// Gets or Sets ContinueOnFail
        /// </summary>
        [DataMember(Name="Continue-On-Fail", EmitDefaultValue=false)]
        public string ContinueOnFail { get; set; }



        /// <summary>
        /// Gets or Sets HangupAfterPickup
        /// </summary>
        [DataMember(Name="Hangup-After-Pickup", EmitDefaultValue=false)]
        public bool? HangupAfterPickup { get; set; }


        /// <summary>
        /// Gets or Sets MoveChannelIfNecessary
        /// </summary>
        [DataMember(Name="Move-Channel-If-Necessary", EmitDefaultValue=false)]
        public bool? MoveChannelIfNecessary { get; set; }

        /// <summary>
        /// Gets or Sets OtherLeg
        /// </summary>
        [DataMember(Name="Other-Leg", EmitDefaultValue=false)]
        public string OtherLeg { get; set; }

        /// <summary>
        /// Gets or Sets ParkAfterPickup
        /// </summary>
        [DataMember(Name="Park-After-Pickup", EmitDefaultValue=false)]
        public bool? ParkAfterPickup { get; set; }

        /// <summary>
        /// Gets or Sets TargetCallID
        /// </summary>
        [DataMember(Name="Target-Call-ID", EmitDefaultValue=false)]
        public string TargetCallID { get; set; }

        /// <summary>
        /// Gets or Sets UnansweredOnly
        /// </summary>
        [DataMember(Name="Unanswered-Only", EmitDefaultValue=false)]
        public string UnansweredOnly { get; set; }

        /// <summary>
        /// Gets or Sets UnbridgedOnly
        /// </summary>
        [DataMember(Name="Unbridged-Only", EmitDefaultValue=false)]
        public string UnbridgedOnly { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiDialplanCallPickup {\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  ContinueOnCancel: ").Append(ContinueOnCancel).Append("\n");
            sb.Append("  ContinueOnFail: ").Append(ContinueOnFail).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  HangupAfterPickup: ").Append(HangupAfterPickup).Append("\n");
            sb.Append("  InsertAt: ").Append(InsertAt).Append("\n");
            sb.Append("  MoveChannelIfNecessary: ").Append(MoveChannelIfNecessary).Append("\n");
            sb.Append("  OtherLeg: ").Append(OtherLeg).Append("\n");
            sb.Append("  ParkAfterPickup: ").Append(ParkAfterPickup).Append("\n");
            sb.Append("  TargetCallID: ").Append(TargetCallID).Append("\n");
            sb.Append("  UnansweredOnly: ").Append(UnansweredOnly).Append("\n");
            sb.Append("  UnbridgedOnly: ").Append(UnbridgedOnly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiDialplanCallPickup);
        }

        /// <summary>
        /// Returns true if KapiDialplanCallPickup instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiDialplanCallPickup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiDialplanCallPickup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.ContinueOnCancel == input.ContinueOnCancel ||
                    (this.ContinueOnCancel != null &&
                    this.ContinueOnCancel.Equals(input.ContinueOnCancel))
                ) && 
                (
                    this.ContinueOnFail == input.ContinueOnFail ||
                    (this.ContinueOnFail != null &&
                    this.ContinueOnFail.Equals(input.ContinueOnFail))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.HangupAfterPickup == input.HangupAfterPickup ||
                    (this.HangupAfterPickup != null &&
                    this.HangupAfterPickup.Equals(input.HangupAfterPickup))
                ) && 
                (
                    this.InsertAt == input.InsertAt ||
                    (this.InsertAt != null &&
                    this.InsertAt.Equals(input.InsertAt))
                ) && 
                (
                    this.MoveChannelIfNecessary == input.MoveChannelIfNecessary ||
                    (this.MoveChannelIfNecessary != null &&
                    this.MoveChannelIfNecessary.Equals(input.MoveChannelIfNecessary))
                ) && 
                (
                    this.OtherLeg == input.OtherLeg ||
                    (this.OtherLeg != null &&
                    this.OtherLeg.Equals(input.OtherLeg))
                ) && 
                (
                    this.ParkAfterPickup == input.ParkAfterPickup ||
                    (this.ParkAfterPickup != null &&
                    this.ParkAfterPickup.Equals(input.ParkAfterPickup))
                ) && 
                (
                    this.TargetCallID == input.TargetCallID ||
                    (this.TargetCallID != null &&
                    this.TargetCallID.Equals(input.TargetCallID))
                ) && 
                (
                    this.UnansweredOnly == input.UnansweredOnly ||
                    (this.UnansweredOnly != null &&
                    this.UnansweredOnly.Equals(input.UnansweredOnly))
                ) && 
                (
                    this.UnbridgedOnly == input.UnbridgedOnly ||
                    (this.UnbridgedOnly != null &&
                    this.UnbridgedOnly.Equals(input.UnbridgedOnly))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationName != null)
                    hashCode = hashCode * 59 + this.ApplicationName.GetHashCode();
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.ContinueOnCancel != null)
                    hashCode = hashCode * 59 + this.ContinueOnCancel.GetHashCode();
                if (this.ContinueOnFail != null)
                    hashCode = hashCode * 59 + this.ContinueOnFail.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.HangupAfterPickup != null)
                    hashCode = hashCode * 59 + this.HangupAfterPickup.GetHashCode();
                if (this.InsertAt != null)
                    hashCode = hashCode * 59 + this.InsertAt.GetHashCode();
                if (this.MoveChannelIfNecessary != null)
                    hashCode = hashCode * 59 + this.MoveChannelIfNecessary.GetHashCode();
                if (this.OtherLeg != null)
                    hashCode = hashCode * 59 + this.OtherLeg.GetHashCode();
                if (this.ParkAfterPickup != null)
                    hashCode = hashCode * 59 + this.ParkAfterPickup.GetHashCode();
                if (this.TargetCallID != null)
                    hashCode = hashCode * 59 + this.TargetCallID.GetHashCode();
                if (this.UnansweredOnly != null)
                    hashCode = hashCode * 59 + this.UnansweredOnly.GetHashCode();
                if (this.UnbridgedOnly != null)
                    hashCode = hashCode * 59 + this.UnbridgedOnly.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
