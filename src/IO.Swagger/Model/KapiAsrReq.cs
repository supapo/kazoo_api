/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for asr.req
    /// </summary>
    [DataContract]
    public partial class KapiAsrReq :  IEquatable<KapiAsrReq>, IValidatableObject
    {
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Asr for value: asr
            /// </summary>
            [EnumMember(Value = "asr")]
            Asr = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Req for value: req
            /// </summary>
            [EnumMember(Value = "req")]
            Req = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiAsrReq" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiAsrReq() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiAsrReq" /> class.
        /// </summary>
        /// <param name="aSRAccountID">aSRAccountID (required).</param>
        /// <param name="aSRAccountPassword">aSRAccountPassword (required).</param>
        /// <param name="aSREndpoint">aSREndpoint (required).</param>
        /// <param name="callID">callID (required).</param>
        /// <param name="controlQueue">controlQueue (required).</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="language">language.</param>
        /// <param name="streamResponse">streamResponse.</param>
        public KapiAsrReq(string aSRAccountID = default(string), string aSRAccountPassword = default(string), string aSREndpoint = default(string), string callID = default(string), string controlQueue = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string language = default(string), bool? streamResponse = default(bool?))
        {
            // to ensure "aSRAccountID" is required (not null)
            if (aSRAccountID == null)
            {
                throw new InvalidDataException("aSRAccountID is a required property for KapiAsrReq and cannot be null");
            }
            else
            {
                this.ASRAccountID = aSRAccountID;
            }
            // to ensure "aSRAccountPassword" is required (not null)
            if (aSRAccountPassword == null)
            {
                throw new InvalidDataException("aSRAccountPassword is a required property for KapiAsrReq and cannot be null");
            }
            else
            {
                this.ASRAccountPassword = aSRAccountPassword;
            }
            // to ensure "aSREndpoint" is required (not null)
            if (aSREndpoint == null)
            {
                throw new InvalidDataException("aSREndpoint is a required property for KapiAsrReq and cannot be null");
            }
            else
            {
                this.ASREndpoint = aSREndpoint;
            }
            // to ensure "callID" is required (not null)
            if (callID == null)
            {
                throw new InvalidDataException("callID is a required property for KapiAsrReq and cannot be null");
            }
            else
            {
                this.CallID = callID;
            }
            // to ensure "controlQueue" is required (not null)
            if (controlQueue == null)
            {
                throw new InvalidDataException("controlQueue is a required property for KapiAsrReq and cannot be null");
            }
            else
            {
                this.ControlQueue = controlQueue;
            }
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.Language = language;
            this.StreamResponse = streamResponse;
        }
        
        /// <summary>
        /// Gets or Sets ASRAccountID
        /// </summary>
        [DataMember(Name="ASR-Account-ID", EmitDefaultValue=false)]
        public string ASRAccountID { get; set; }

        /// <summary>
        /// Gets or Sets ASRAccountPassword
        /// </summary>
        [DataMember(Name="ASR-Account-Password", EmitDefaultValue=false)]
        public string ASRAccountPassword { get; set; }

        /// <summary>
        /// Gets or Sets ASREndpoint
        /// </summary>
        [DataMember(Name="ASR-Endpoint", EmitDefaultValue=false)]
        public string ASREndpoint { get; set; }

        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }

        /// <summary>
        /// Gets or Sets ControlQueue
        /// </summary>
        [DataMember(Name="Control-Queue", EmitDefaultValue=false)]
        public string ControlQueue { get; set; }



        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name="Language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets StreamResponse
        /// </summary>
        [DataMember(Name="Stream-Response", EmitDefaultValue=false)]
        public bool? StreamResponse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiAsrReq {\n");
            sb.Append("  ASRAccountID: ").Append(ASRAccountID).Append("\n");
            sb.Append("  ASRAccountPassword: ").Append(ASRAccountPassword).Append("\n");
            sb.Append("  ASREndpoint: ").Append(ASREndpoint).Append("\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  ControlQueue: ").Append(ControlQueue).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  StreamResponse: ").Append(StreamResponse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiAsrReq);
        }

        /// <summary>
        /// Returns true if KapiAsrReq instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiAsrReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiAsrReq input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ASRAccountID == input.ASRAccountID ||
                    (this.ASRAccountID != null &&
                    this.ASRAccountID.Equals(input.ASRAccountID))
                ) && 
                (
                    this.ASRAccountPassword == input.ASRAccountPassword ||
                    (this.ASRAccountPassword != null &&
                    this.ASRAccountPassword.Equals(input.ASRAccountPassword))
                ) && 
                (
                    this.ASREndpoint == input.ASREndpoint ||
                    (this.ASREndpoint != null &&
                    this.ASREndpoint.Equals(input.ASREndpoint))
                ) && 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.ControlQueue == input.ControlQueue ||
                    (this.ControlQueue != null &&
                    this.ControlQueue.Equals(input.ControlQueue))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.StreamResponse == input.StreamResponse ||
                    (this.StreamResponse != null &&
                    this.StreamResponse.Equals(input.StreamResponse))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ASRAccountID != null)
                    hashCode = hashCode * 59 + this.ASRAccountID.GetHashCode();
                if (this.ASRAccountPassword != null)
                    hashCode = hashCode * 59 + this.ASRAccountPassword.GetHashCode();
                if (this.ASREndpoint != null)
                    hashCode = hashCode * 59 + this.ASREndpoint.GetHashCode();
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.ControlQueue != null)
                    hashCode = hashCode * 59 + this.ControlQueue.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.StreamResponse != null)
                    hashCode = hashCode * 59 + this.StreamResponse.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
