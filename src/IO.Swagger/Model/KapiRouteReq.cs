/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for route.req
    /// </summary>
    [DataContract]
    public partial class KapiRouteReq :  IEquatable<KapiRouteReq>, IValidatableObject
    {
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Dialplan for value: dialplan
            /// </summary>
            [EnumMember(Value = "dialplan")]
            Dialplan = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Routereq for value: route_req
            /// </summary>
            [EnumMember(Value = "route_req")]
            Routereq = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Defines Media
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MediaEnum
        {
            
            /// <summary>
            /// Enum Process for value: process
            /// </summary>
            [EnumMember(Value = "process")]
            Process = 1,
            
            /// <summary>
            /// Enum Proxy for value: proxy
            /// </summary>
            [EnumMember(Value = "proxy")]
            Proxy = 2,
            
            /// <summary>
            /// Enum Bypass for value: bypass
            /// </summary>
            [EnumMember(Value = "bypass")]
            Bypass = 3
        }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name="Media", EmitDefaultValue=false)]
        public MediaEnum? Media { get; set; }
        /// <summary>
        /// Defines ResourceType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResourceTypeEnum
        {
            
            /// <summary>
            /// Enum Mms for value: mms
            /// </summary>
            [EnumMember(Value = "mms")]
            Mms = 1,
            
            /// <summary>
            /// Enum Sms for value: sms
            /// </summary>
            [EnumMember(Value = "sms")]
            Sms = 2,
            
            /// <summary>
            /// Enum Audio for value: audio
            /// </summary>
            [EnumMember(Value = "audio")]
            Audio = 3,
            
            /// <summary>
            /// Enum Video for value: video
            /// </summary>
            [EnumMember(Value = "video")]
            Video = 4,
            
            /// <summary>
            /// Enum Chat for value: chat
            /// </summary>
            [EnumMember(Value = "chat")]
            Chat = 5,
            
            /// <summary>
            /// Enum Metaflow for value: metaflow
            /// </summary>
            [EnumMember(Value = "metaflow")]
            Metaflow = 6
        }

        /// <summary>
        /// Gets or Sets ResourceType
        /// </summary>
        [DataMember(Name="Resource-Type", EmitDefaultValue=false)]
        public ResourceTypeEnum? ResourceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiRouteReq" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiRouteReq() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiRouteReq" /> class.
        /// </summary>
        /// <param name="body">body.</param>
        /// <param name="callDirection">callDirection.</param>
        /// <param name="callID">callID (required).</param>
        /// <param name="callerIDName">callerIDName.</param>
        /// <param name="callerIDNumber">callerIDNumber.</param>
        /// <param name="codecs">codecs.</param>
        /// <param name="context">context.</param>
        /// <param name="costParameters">costParameters.</param>
        /// <param name="customApplicationVars">customApplicationVars.</param>
        /// <param name="customChannelVars">customChannelVars.</param>
        /// <param name="customRoutingHeaders">customRoutingHeaders.</param>
        /// <param name="customSIPHeaders">customSIPHeaders.</param>
        /// <param name="destinationNumber">destinationNumber.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="eventQueue">eventQueue.</param>
        /// <param name="from">from (required).</param>
        /// <param name="fromNetworkAddr">fromNetworkAddr.</param>
        /// <param name="fromNetworkPort">fromNetworkPort.</param>
        /// <param name="fromTag">fromTag.</param>
        /// <param name="geoLocation">geoLocation.</param>
        /// <param name="maxCallLength">maxCallLength.</param>
        /// <param name="media">media.</param>
        /// <param name="messageID">messageID.</param>
        /// <param name="origIP">origIP.</param>
        /// <param name="origPort">origPort.</param>
        /// <param name="originationCallID">originationCallID.</param>
        /// <param name="prependCIDName">prependCIDName.</param>
        /// <param name="request">request (required).</param>
        /// <param name="resourceType">resourceType.</param>
        /// <param name="ringbackMedia">ringbackMedia.</param>
        /// <param name="sIPRequestHost">sIPRequestHost.</param>
        /// <param name="switchHostname">switchHostname.</param>
        /// <param name="switchNodename">switchNodename.</param>
        /// <param name="switchURI">switchURI.</param>
        /// <param name="switchURL">switchURL.</param>
        /// <param name="to">to (required).</param>
        /// <param name="toTag">toTag.</param>
        /// <param name="transcode">transcode.</param>
        /// <param name="transferMedia">transferMedia.</param>
        /// <param name="userAgent">userAgent.</param>
        public KapiRouteReq(string body = default(string), string callDirection = default(string), string callID = default(string), string callerIDName = default(string), string callerIDNumber = default(string), string codecs = default(string), string context = default(string), KapiRouteReqCostParameters costParameters = default(KapiRouteReqCostParameters), Object customApplicationVars = default(Object), Object customChannelVars = default(Object), Object customRoutingHeaders = default(Object), Object customSIPHeaders = default(Object), string destinationNumber = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string eventQueue = default(string), string from = default(string), string fromNetworkAddr = default(string), string fromNetworkPort = default(string), string fromTag = default(string), string geoLocation = default(string), string maxCallLength = default(string), MediaEnum? media = default(MediaEnum?), string messageID = default(string), string origIP = default(string), string origPort = default(string), string originationCallID = default(string), string prependCIDName = default(string), string request = default(string), ResourceTypeEnum? resourceType = default(ResourceTypeEnum?), string ringbackMedia = default(string), string sIPRequestHost = default(string), string switchHostname = default(string), string switchNodename = default(string), string switchURI = default(string), string switchURL = default(string), string to = default(string), string toTag = default(string), string transcode = default(string), string transferMedia = default(string), string userAgent = default(string))
        {
            // to ensure "callID" is required (not null)
            if (callID == null)
            {
                throw new InvalidDataException("callID is a required property for KapiRouteReq and cannot be null");
            }
            else
            {
                this.CallID = callID;
            }
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new InvalidDataException("from is a required property for KapiRouteReq and cannot be null");
            }
            else
            {
                this.From = from;
            }
            // to ensure "request" is required (not null)
            if (request == null)
            {
                throw new InvalidDataException("request is a required property for KapiRouteReq and cannot be null");
            }
            else
            {
                this.Request = request;
            }
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new InvalidDataException("to is a required property for KapiRouteReq and cannot be null");
            }
            else
            {
                this.To = to;
            }
            this.Body = body;
            this.CallDirection = callDirection;
            this.CallerIDName = callerIDName;
            this.CallerIDNumber = callerIDNumber;
            this.Codecs = codecs;
            this.Context = context;
            this.CostParameters = costParameters;
            this.CustomApplicationVars = customApplicationVars;
            this.CustomChannelVars = customChannelVars;
            this.CustomRoutingHeaders = customRoutingHeaders;
            this.CustomSIPHeaders = customSIPHeaders;
            this.DestinationNumber = destinationNumber;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.EventQueue = eventQueue;
            this.FromNetworkAddr = fromNetworkAddr;
            this.FromNetworkPort = fromNetworkPort;
            this.FromTag = fromTag;
            this.GeoLocation = geoLocation;
            this.MaxCallLength = maxCallLength;
            this.Media = media;
            this.MessageID = messageID;
            this.OrigIP = origIP;
            this.OrigPort = origPort;
            this.OriginationCallID = originationCallID;
            this.PrependCIDName = prependCIDName;
            this.ResourceType = resourceType;
            this.RingbackMedia = ringbackMedia;
            this.SIPRequestHost = sIPRequestHost;
            this.SwitchHostname = switchHostname;
            this.SwitchNodename = switchNodename;
            this.SwitchURI = switchURI;
            this.SwitchURL = switchURL;
            this.ToTag = toTag;
            this.Transcode = transcode;
            this.TransferMedia = transferMedia;
            this.UserAgent = userAgent;
        }
        
        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name="Body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets CallDirection
        /// </summary>
        [DataMember(Name="Call-Direction", EmitDefaultValue=false)]
        public string CallDirection { get; set; }

        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }

        /// <summary>
        /// Gets or Sets CallerIDName
        /// </summary>
        [DataMember(Name="Caller-ID-Name", EmitDefaultValue=false)]
        public string CallerIDName { get; set; }

        /// <summary>
        /// Gets or Sets CallerIDNumber
        /// </summary>
        [DataMember(Name="Caller-ID-Number", EmitDefaultValue=false)]
        public string CallerIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets Codecs
        /// </summary>
        [DataMember(Name="Codecs", EmitDefaultValue=false)]
        public string Codecs { get; set; }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name="Context", EmitDefaultValue=false)]
        public string Context { get; set; }

        /// <summary>
        /// Gets or Sets CostParameters
        /// </summary>
        [DataMember(Name="Cost-Parameters", EmitDefaultValue=false)]
        public KapiRouteReqCostParameters CostParameters { get; set; }

        /// <summary>
        /// Gets or Sets CustomApplicationVars
        /// </summary>
        [DataMember(Name="Custom-Application-Vars", EmitDefaultValue=false)]
        public Object CustomApplicationVars { get; set; }

        /// <summary>
        /// Gets or Sets CustomChannelVars
        /// </summary>
        [DataMember(Name="Custom-Channel-Vars", EmitDefaultValue=false)]
        public Object CustomChannelVars { get; set; }

        /// <summary>
        /// Gets or Sets CustomRoutingHeaders
        /// </summary>
        [DataMember(Name="Custom-Routing-Headers", EmitDefaultValue=false)]
        public Object CustomRoutingHeaders { get; set; }

        /// <summary>
        /// Gets or Sets CustomSIPHeaders
        /// </summary>
        [DataMember(Name="Custom-SIP-Headers", EmitDefaultValue=false)]
        public Object CustomSIPHeaders { get; set; }

        /// <summary>
        /// Gets or Sets DestinationNumber
        /// </summary>
        [DataMember(Name="Destination-Number", EmitDefaultValue=false)]
        public string DestinationNumber { get; set; }



        /// <summary>
        /// Gets or Sets EventQueue
        /// </summary>
        [DataMember(Name="Event-Queue", EmitDefaultValue=false)]
        public string EventQueue { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="From", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// Gets or Sets FromNetworkAddr
        /// </summary>
        [DataMember(Name="From-Network-Addr", EmitDefaultValue=false)]
        public string FromNetworkAddr { get; set; }

        /// <summary>
        /// Gets or Sets FromNetworkPort
        /// </summary>
        [DataMember(Name="From-Network-Port", EmitDefaultValue=false)]
        public string FromNetworkPort { get; set; }

        /// <summary>
        /// Gets or Sets FromTag
        /// </summary>
        [DataMember(Name="From-Tag", EmitDefaultValue=false)]
        public string FromTag { get; set; }

        /// <summary>
        /// Gets or Sets GeoLocation
        /// </summary>
        [DataMember(Name="Geo-Location", EmitDefaultValue=false)]
        public string GeoLocation { get; set; }

        /// <summary>
        /// Gets or Sets MaxCallLength
        /// </summary>
        [DataMember(Name="Max-Call-Length", EmitDefaultValue=false)]
        public string MaxCallLength { get; set; }


        /// <summary>
        /// Gets or Sets MessageID
        /// </summary>
        [DataMember(Name="Message-ID", EmitDefaultValue=false)]
        public string MessageID { get; set; }

        /// <summary>
        /// Gets or Sets OrigIP
        /// </summary>
        [DataMember(Name="Orig-IP", EmitDefaultValue=false)]
        public string OrigIP { get; set; }

        /// <summary>
        /// Gets or Sets OrigPort
        /// </summary>
        [DataMember(Name="Orig-Port", EmitDefaultValue=false)]
        public string OrigPort { get; set; }

        /// <summary>
        /// Gets or Sets OriginationCallID
        /// </summary>
        [DataMember(Name="Origination-Call-ID", EmitDefaultValue=false)]
        public string OriginationCallID { get; set; }

        /// <summary>
        /// Gets or Sets PrependCIDName
        /// </summary>
        [DataMember(Name="Prepend-CID-Name", EmitDefaultValue=false)]
        public string PrependCIDName { get; set; }

        /// <summary>
        /// Gets or Sets Request
        /// </summary>
        [DataMember(Name="Request", EmitDefaultValue=false)]
        public string Request { get; set; }


        /// <summary>
        /// Gets or Sets RingbackMedia
        /// </summary>
        [DataMember(Name="Ringback-Media", EmitDefaultValue=false)]
        public string RingbackMedia { get; set; }

        /// <summary>
        /// Gets or Sets SIPRequestHost
        /// </summary>
        [DataMember(Name="SIP-Request-Host", EmitDefaultValue=false)]
        public string SIPRequestHost { get; set; }

        /// <summary>
        /// Gets or Sets SwitchHostname
        /// </summary>
        [DataMember(Name="Switch-Hostname", EmitDefaultValue=false)]
        public string SwitchHostname { get; set; }

        /// <summary>
        /// Gets or Sets SwitchNodename
        /// </summary>
        [DataMember(Name="Switch-Nodename", EmitDefaultValue=false)]
        public string SwitchNodename { get; set; }

        /// <summary>
        /// Gets or Sets SwitchURI
        /// </summary>
        [DataMember(Name="Switch-URI", EmitDefaultValue=false)]
        public string SwitchURI { get; set; }

        /// <summary>
        /// Gets or Sets SwitchURL
        /// </summary>
        [DataMember(Name="Switch-URL", EmitDefaultValue=false)]
        public string SwitchURL { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="To", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// Gets or Sets ToTag
        /// </summary>
        [DataMember(Name="To-Tag", EmitDefaultValue=false)]
        public string ToTag { get; set; }

        /// <summary>
        /// Gets or Sets Transcode
        /// </summary>
        [DataMember(Name="Transcode", EmitDefaultValue=false)]
        public string Transcode { get; set; }

        /// <summary>
        /// Gets or Sets TransferMedia
        /// </summary>
        [DataMember(Name="Transfer-Media", EmitDefaultValue=false)]
        public string TransferMedia { get; set; }

        /// <summary>
        /// Gets or Sets UserAgent
        /// </summary>
        [DataMember(Name="User-Agent", EmitDefaultValue=false)]
        public string UserAgent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiRouteReq {\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  CallDirection: ").Append(CallDirection).Append("\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  CallerIDName: ").Append(CallerIDName).Append("\n");
            sb.Append("  CallerIDNumber: ").Append(CallerIDNumber).Append("\n");
            sb.Append("  Codecs: ").Append(Codecs).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  CostParameters: ").Append(CostParameters).Append("\n");
            sb.Append("  CustomApplicationVars: ").Append(CustomApplicationVars).Append("\n");
            sb.Append("  CustomChannelVars: ").Append(CustomChannelVars).Append("\n");
            sb.Append("  CustomRoutingHeaders: ").Append(CustomRoutingHeaders).Append("\n");
            sb.Append("  CustomSIPHeaders: ").Append(CustomSIPHeaders).Append("\n");
            sb.Append("  DestinationNumber: ").Append(DestinationNumber).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  EventQueue: ").Append(EventQueue).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  FromNetworkAddr: ").Append(FromNetworkAddr).Append("\n");
            sb.Append("  FromNetworkPort: ").Append(FromNetworkPort).Append("\n");
            sb.Append("  FromTag: ").Append(FromTag).Append("\n");
            sb.Append("  GeoLocation: ").Append(GeoLocation).Append("\n");
            sb.Append("  MaxCallLength: ").Append(MaxCallLength).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  MessageID: ").Append(MessageID).Append("\n");
            sb.Append("  OrigIP: ").Append(OrigIP).Append("\n");
            sb.Append("  OrigPort: ").Append(OrigPort).Append("\n");
            sb.Append("  OriginationCallID: ").Append(OriginationCallID).Append("\n");
            sb.Append("  PrependCIDName: ").Append(PrependCIDName).Append("\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  RingbackMedia: ").Append(RingbackMedia).Append("\n");
            sb.Append("  SIPRequestHost: ").Append(SIPRequestHost).Append("\n");
            sb.Append("  SwitchHostname: ").Append(SwitchHostname).Append("\n");
            sb.Append("  SwitchNodename: ").Append(SwitchNodename).Append("\n");
            sb.Append("  SwitchURI: ").Append(SwitchURI).Append("\n");
            sb.Append("  SwitchURL: ").Append(SwitchURL).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  ToTag: ").Append(ToTag).Append("\n");
            sb.Append("  Transcode: ").Append(Transcode).Append("\n");
            sb.Append("  TransferMedia: ").Append(TransferMedia).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiRouteReq);
        }

        /// <summary>
        /// Returns true if KapiRouteReq instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiRouteReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiRouteReq input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.CallDirection == input.CallDirection ||
                    (this.CallDirection != null &&
                    this.CallDirection.Equals(input.CallDirection))
                ) && 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.CallerIDName == input.CallerIDName ||
                    (this.CallerIDName != null &&
                    this.CallerIDName.Equals(input.CallerIDName))
                ) && 
                (
                    this.CallerIDNumber == input.CallerIDNumber ||
                    (this.CallerIDNumber != null &&
                    this.CallerIDNumber.Equals(input.CallerIDNumber))
                ) && 
                (
                    this.Codecs == input.Codecs ||
                    (this.Codecs != null &&
                    this.Codecs.Equals(input.Codecs))
                ) && 
                (
                    this.Context == input.Context ||
                    (this.Context != null &&
                    this.Context.Equals(input.Context))
                ) && 
                (
                    this.CostParameters == input.CostParameters ||
                    (this.CostParameters != null &&
                    this.CostParameters.Equals(input.CostParameters))
                ) && 
                (
                    this.CustomApplicationVars == input.CustomApplicationVars ||
                    (this.CustomApplicationVars != null &&
                    this.CustomApplicationVars.Equals(input.CustomApplicationVars))
                ) && 
                (
                    this.CustomChannelVars == input.CustomChannelVars ||
                    (this.CustomChannelVars != null &&
                    this.CustomChannelVars.Equals(input.CustomChannelVars))
                ) && 
                (
                    this.CustomRoutingHeaders == input.CustomRoutingHeaders ||
                    (this.CustomRoutingHeaders != null &&
                    this.CustomRoutingHeaders.Equals(input.CustomRoutingHeaders))
                ) && 
                (
                    this.CustomSIPHeaders == input.CustomSIPHeaders ||
                    (this.CustomSIPHeaders != null &&
                    this.CustomSIPHeaders.Equals(input.CustomSIPHeaders))
                ) && 
                (
                    this.DestinationNumber == input.DestinationNumber ||
                    (this.DestinationNumber != null &&
                    this.DestinationNumber.Equals(input.DestinationNumber))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.EventQueue == input.EventQueue ||
                    (this.EventQueue != null &&
                    this.EventQueue.Equals(input.EventQueue))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.FromNetworkAddr == input.FromNetworkAddr ||
                    (this.FromNetworkAddr != null &&
                    this.FromNetworkAddr.Equals(input.FromNetworkAddr))
                ) && 
                (
                    this.FromNetworkPort == input.FromNetworkPort ||
                    (this.FromNetworkPort != null &&
                    this.FromNetworkPort.Equals(input.FromNetworkPort))
                ) && 
                (
                    this.FromTag == input.FromTag ||
                    (this.FromTag != null &&
                    this.FromTag.Equals(input.FromTag))
                ) && 
                (
                    this.GeoLocation == input.GeoLocation ||
                    (this.GeoLocation != null &&
                    this.GeoLocation.Equals(input.GeoLocation))
                ) && 
                (
                    this.MaxCallLength == input.MaxCallLength ||
                    (this.MaxCallLength != null &&
                    this.MaxCallLength.Equals(input.MaxCallLength))
                ) && 
                (
                    this.Media == input.Media ||
                    (this.Media != null &&
                    this.Media.Equals(input.Media))
                ) && 
                (
                    this.MessageID == input.MessageID ||
                    (this.MessageID != null &&
                    this.MessageID.Equals(input.MessageID))
                ) && 
                (
                    this.OrigIP == input.OrigIP ||
                    (this.OrigIP != null &&
                    this.OrigIP.Equals(input.OrigIP))
                ) && 
                (
                    this.OrigPort == input.OrigPort ||
                    (this.OrigPort != null &&
                    this.OrigPort.Equals(input.OrigPort))
                ) && 
                (
                    this.OriginationCallID == input.OriginationCallID ||
                    (this.OriginationCallID != null &&
                    this.OriginationCallID.Equals(input.OriginationCallID))
                ) && 
                (
                    this.PrependCIDName == input.PrependCIDName ||
                    (this.PrependCIDName != null &&
                    this.PrependCIDName.Equals(input.PrependCIDName))
                ) && 
                (
                    this.Request == input.Request ||
                    (this.Request != null &&
                    this.Request.Equals(input.Request))
                ) && 
                (
                    this.ResourceType == input.ResourceType ||
                    (this.ResourceType != null &&
                    this.ResourceType.Equals(input.ResourceType))
                ) && 
                (
                    this.RingbackMedia == input.RingbackMedia ||
                    (this.RingbackMedia != null &&
                    this.RingbackMedia.Equals(input.RingbackMedia))
                ) && 
                (
                    this.SIPRequestHost == input.SIPRequestHost ||
                    (this.SIPRequestHost != null &&
                    this.SIPRequestHost.Equals(input.SIPRequestHost))
                ) && 
                (
                    this.SwitchHostname == input.SwitchHostname ||
                    (this.SwitchHostname != null &&
                    this.SwitchHostname.Equals(input.SwitchHostname))
                ) && 
                (
                    this.SwitchNodename == input.SwitchNodename ||
                    (this.SwitchNodename != null &&
                    this.SwitchNodename.Equals(input.SwitchNodename))
                ) && 
                (
                    this.SwitchURI == input.SwitchURI ||
                    (this.SwitchURI != null &&
                    this.SwitchURI.Equals(input.SwitchURI))
                ) && 
                (
                    this.SwitchURL == input.SwitchURL ||
                    (this.SwitchURL != null &&
                    this.SwitchURL.Equals(input.SwitchURL))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.ToTag == input.ToTag ||
                    (this.ToTag != null &&
                    this.ToTag.Equals(input.ToTag))
                ) && 
                (
                    this.Transcode == input.Transcode ||
                    (this.Transcode != null &&
                    this.Transcode.Equals(input.Transcode))
                ) && 
                (
                    this.TransferMedia == input.TransferMedia ||
                    (this.TransferMedia != null &&
                    this.TransferMedia.Equals(input.TransferMedia))
                ) && 
                (
                    this.UserAgent == input.UserAgent ||
                    (this.UserAgent != null &&
                    this.UserAgent.Equals(input.UserAgent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.CallDirection != null)
                    hashCode = hashCode * 59 + this.CallDirection.GetHashCode();
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.CallerIDName != null)
                    hashCode = hashCode * 59 + this.CallerIDName.GetHashCode();
                if (this.CallerIDNumber != null)
                    hashCode = hashCode * 59 + this.CallerIDNumber.GetHashCode();
                if (this.Codecs != null)
                    hashCode = hashCode * 59 + this.Codecs.GetHashCode();
                if (this.Context != null)
                    hashCode = hashCode * 59 + this.Context.GetHashCode();
                if (this.CostParameters != null)
                    hashCode = hashCode * 59 + this.CostParameters.GetHashCode();
                if (this.CustomApplicationVars != null)
                    hashCode = hashCode * 59 + this.CustomApplicationVars.GetHashCode();
                if (this.CustomChannelVars != null)
                    hashCode = hashCode * 59 + this.CustomChannelVars.GetHashCode();
                if (this.CustomRoutingHeaders != null)
                    hashCode = hashCode * 59 + this.CustomRoutingHeaders.GetHashCode();
                if (this.CustomSIPHeaders != null)
                    hashCode = hashCode * 59 + this.CustomSIPHeaders.GetHashCode();
                if (this.DestinationNumber != null)
                    hashCode = hashCode * 59 + this.DestinationNumber.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.EventQueue != null)
                    hashCode = hashCode * 59 + this.EventQueue.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.FromNetworkAddr != null)
                    hashCode = hashCode * 59 + this.FromNetworkAddr.GetHashCode();
                if (this.FromNetworkPort != null)
                    hashCode = hashCode * 59 + this.FromNetworkPort.GetHashCode();
                if (this.FromTag != null)
                    hashCode = hashCode * 59 + this.FromTag.GetHashCode();
                if (this.GeoLocation != null)
                    hashCode = hashCode * 59 + this.GeoLocation.GetHashCode();
                if (this.MaxCallLength != null)
                    hashCode = hashCode * 59 + this.MaxCallLength.GetHashCode();
                if (this.Media != null)
                    hashCode = hashCode * 59 + this.Media.GetHashCode();
                if (this.MessageID != null)
                    hashCode = hashCode * 59 + this.MessageID.GetHashCode();
                if (this.OrigIP != null)
                    hashCode = hashCode * 59 + this.OrigIP.GetHashCode();
                if (this.OrigPort != null)
                    hashCode = hashCode * 59 + this.OrigPort.GetHashCode();
                if (this.OriginationCallID != null)
                    hashCode = hashCode * 59 + this.OriginationCallID.GetHashCode();
                if (this.PrependCIDName != null)
                    hashCode = hashCode * 59 + this.PrependCIDName.GetHashCode();
                if (this.Request != null)
                    hashCode = hashCode * 59 + this.Request.GetHashCode();
                if (this.ResourceType != null)
                    hashCode = hashCode * 59 + this.ResourceType.GetHashCode();
                if (this.RingbackMedia != null)
                    hashCode = hashCode * 59 + this.RingbackMedia.GetHashCode();
                if (this.SIPRequestHost != null)
                    hashCode = hashCode * 59 + this.SIPRequestHost.GetHashCode();
                if (this.SwitchHostname != null)
                    hashCode = hashCode * 59 + this.SwitchHostname.GetHashCode();
                if (this.SwitchNodename != null)
                    hashCode = hashCode * 59 + this.SwitchNodename.GetHashCode();
                if (this.SwitchURI != null)
                    hashCode = hashCode * 59 + this.SwitchURI.GetHashCode();
                if (this.SwitchURL != null)
                    hashCode = hashCode * 59 + this.SwitchURL.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.ToTag != null)
                    hashCode = hashCode * 59 + this.ToTag.GetHashCode();
                if (this.Transcode != null)
                    hashCode = hashCode * 59 + this.Transcode.GetHashCode();
                if (this.TransferMedia != null)
                    hashCode = hashCode * 59 + this.TransferMedia.GetHashCode();
                if (this.UserAgent != null)
                    hashCode = hashCode * 59 + this.UserAgent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
