/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Default crossbar authentication modules configuration
    /// </summary>
    [DataContract]
    public partial class AccountConfigCrossbarAuthAuthModules :  IEquatable<AccountConfigCrossbarAuthAuthModules>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountConfigCrossbarAuthAuthModules" /> class.
        /// </summary>
        /// <param name="cbApiAuth">cbApiAuth.</param>
        /// <param name="cbAuth">cbAuth.</param>
        /// <param name="cbIpAuth">cbIpAuth.</param>
        /// <param name="cbUbiquitiAuth">cbUbiquitiAuth.</param>
        /// <param name="cbUserAuth">cbUserAuth.</param>
        public AccountConfigCrossbarAuthAuthModules(AuthModuleConfig cbApiAuth = default(AuthModuleConfig), AuthModuleConfig cbAuth = default(AuthModuleConfig), AuthModuleConfig cbIpAuth = default(AuthModuleConfig), AuthModuleConfig cbUbiquitiAuth = default(AuthModuleConfig), AuthModuleConfig cbUserAuth = default(AuthModuleConfig))
        {
            this.CbApiAuth = cbApiAuth;
            this.CbAuth = cbAuth;
            this.CbIpAuth = cbIpAuth;
            this.CbUbiquitiAuth = cbUbiquitiAuth;
            this.CbUserAuth = cbUserAuth;
        }
        
        /// <summary>
        /// Gets or Sets CbApiAuth
        /// </summary>
        [DataMember(Name="cb_api_auth", EmitDefaultValue=false)]
        public AuthModuleConfig CbApiAuth { get; set; }

        /// <summary>
        /// Gets or Sets CbAuth
        /// </summary>
        [DataMember(Name="cb_auth", EmitDefaultValue=false)]
        public AuthModuleConfig CbAuth { get; set; }

        /// <summary>
        /// Gets or Sets CbIpAuth
        /// </summary>
        [DataMember(Name="cb_ip_auth", EmitDefaultValue=false)]
        public AuthModuleConfig CbIpAuth { get; set; }

        /// <summary>
        /// Gets or Sets CbUbiquitiAuth
        /// </summary>
        [DataMember(Name="cb_ubiquiti_auth", EmitDefaultValue=false)]
        public AuthModuleConfig CbUbiquitiAuth { get; set; }

        /// <summary>
        /// Gets or Sets CbUserAuth
        /// </summary>
        [DataMember(Name="cb_user_auth", EmitDefaultValue=false)]
        public AuthModuleConfig CbUserAuth { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountConfigCrossbarAuthAuthModules {\n");
            sb.Append("  CbApiAuth: ").Append(CbApiAuth).Append("\n");
            sb.Append("  CbAuth: ").Append(CbAuth).Append("\n");
            sb.Append("  CbIpAuth: ").Append(CbIpAuth).Append("\n");
            sb.Append("  CbUbiquitiAuth: ").Append(CbUbiquitiAuth).Append("\n");
            sb.Append("  CbUserAuth: ").Append(CbUserAuth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountConfigCrossbarAuthAuthModules);
        }

        /// <summary>
        /// Returns true if AccountConfigCrossbarAuthAuthModules instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountConfigCrossbarAuthAuthModules to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountConfigCrossbarAuthAuthModules input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CbApiAuth == input.CbApiAuth ||
                    (this.CbApiAuth != null &&
                    this.CbApiAuth.Equals(input.CbApiAuth))
                ) && 
                (
                    this.CbAuth == input.CbAuth ||
                    (this.CbAuth != null &&
                    this.CbAuth.Equals(input.CbAuth))
                ) && 
                (
                    this.CbIpAuth == input.CbIpAuth ||
                    (this.CbIpAuth != null &&
                    this.CbIpAuth.Equals(input.CbIpAuth))
                ) && 
                (
                    this.CbUbiquitiAuth == input.CbUbiquitiAuth ||
                    (this.CbUbiquitiAuth != null &&
                    this.CbUbiquitiAuth.Equals(input.CbUbiquitiAuth))
                ) && 
                (
                    this.CbUserAuth == input.CbUserAuth ||
                    (this.CbUserAuth != null &&
                    this.CbUserAuth.Equals(input.CbUserAuth))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CbApiAuth != null)
                    hashCode = hashCode * 59 + this.CbApiAuth.GetHashCode();
                if (this.CbAuth != null)
                    hashCode = hashCode * 59 + this.CbAuth.GetHashCode();
                if (this.CbIpAuth != null)
                    hashCode = hashCode * 59 + this.CbIpAuth.GetHashCode();
                if (this.CbUbiquitiAuth != null)
                    hashCode = hashCode * 59 + this.CbUbiquitiAuth.GetHashCode();
                if (this.CbUserAuth != null)
                    hashCode = hashCode * 59 + this.CbUserAuth.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
