/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for number_manager.bandwidth2 system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigNumberManagerBandwidth2 :  IEquatable<SystemConfigNumberManagerBandwidth2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigNumberManagerBandwidth2" /> class.
        /// </summary>
        /// <param name="accountId">account ID for the asynchronous Bandwidth API (default to &quot;&quot;).</param>
        /// <param name="apiPassword">number_manager.bandwidth2 api password (default to &quot;&quot;).</param>
        /// <param name="apiUsername">number_manager.bandwidth2 api username (default to &quot;&quot;).</param>
        /// <param name="debug">should the debug mode be activated for the asynchronous Bandwidth API? (default to false).</param>
        /// <param name="enableProvisioning">number_manager.bandwidth2 enable provisioning (default to true).</param>
        /// <param name="maxSearchQuantity">number_manager.bandwidth2 max search quantity.</param>
        /// <param name="orderNamePrefix">number_manager.bandwidth2 order name prefix (default to &quot;Kazoo&quot;).</param>
        /// <param name="sandboxProvisioning">number_manager.bandwidth2 sandbox provisioning (default to true).</param>
        /// <param name="sipPeer">number_manager.bandwidth2 sip peer (default to &quot;&quot;).</param>
        /// <param name="siteId">number_manager.bandwidth2 site id (default to &quot;&quot;).</param>
        public SystemConfigNumberManagerBandwidth2(string accountId = "", string apiPassword = "", string apiUsername = "", bool? debug = false, bool? enableProvisioning = true, int? maxSearchQuantity = default(int?), string orderNamePrefix = "Kazoo", bool? sandboxProvisioning = true, string sipPeer = "", string siteId = "")
        {
            // use default value if no "accountId" provided
            if (accountId == null)
            {
                this.AccountId = "";
            }
            else
            {
                this.AccountId = accountId;
            }
            // use default value if no "apiPassword" provided
            if (apiPassword == null)
            {
                this.ApiPassword = "";
            }
            else
            {
                this.ApiPassword = apiPassword;
            }
            // use default value if no "apiUsername" provided
            if (apiUsername == null)
            {
                this.ApiUsername = "";
            }
            else
            {
                this.ApiUsername = apiUsername;
            }
            // use default value if no "debug" provided
            if (debug == null)
            {
                this.Debug = false;
            }
            else
            {
                this.Debug = debug;
            }
            // use default value if no "enableProvisioning" provided
            if (enableProvisioning == null)
            {
                this.EnableProvisioning = true;
            }
            else
            {
                this.EnableProvisioning = enableProvisioning;
            }
            this.MaxSearchQuantity = maxSearchQuantity;
            // use default value if no "orderNamePrefix" provided
            if (orderNamePrefix == null)
            {
                this.OrderNamePrefix = "Kazoo";
            }
            else
            {
                this.OrderNamePrefix = orderNamePrefix;
            }
            // use default value if no "sandboxProvisioning" provided
            if (sandboxProvisioning == null)
            {
                this.SandboxProvisioning = true;
            }
            else
            {
                this.SandboxProvisioning = sandboxProvisioning;
            }
            // use default value if no "sipPeer" provided
            if (sipPeer == null)
            {
                this.SipPeer = "";
            }
            else
            {
                this.SipPeer = sipPeer;
            }
            // use default value if no "siteId" provided
            if (siteId == null)
            {
                this.SiteId = "";
            }
            else
            {
                this.SiteId = siteId;
            }
        }
        
        /// <summary>
        /// account ID for the asynchronous Bandwidth API
        /// </summary>
        /// <value>account ID for the asynchronous Bandwidth API</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// number_manager.bandwidth2 api password
        /// </summary>
        /// <value>number_manager.bandwidth2 api password</value>
        [DataMember(Name="api_password", EmitDefaultValue=false)]
        public string ApiPassword { get; set; }

        /// <summary>
        /// number_manager.bandwidth2 api username
        /// </summary>
        /// <value>number_manager.bandwidth2 api username</value>
        [DataMember(Name="api_username", EmitDefaultValue=false)]
        public string ApiUsername { get; set; }

        /// <summary>
        /// should the debug mode be activated for the asynchronous Bandwidth API?
        /// </summary>
        /// <value>should the debug mode be activated for the asynchronous Bandwidth API?</value>
        [DataMember(Name="debug", EmitDefaultValue=false)]
        public bool? Debug { get; set; }

        /// <summary>
        /// number_manager.bandwidth2 enable provisioning
        /// </summary>
        /// <value>number_manager.bandwidth2 enable provisioning</value>
        [DataMember(Name="enable_provisioning", EmitDefaultValue=false)]
        public bool? EnableProvisioning { get; set; }

        /// <summary>
        /// number_manager.bandwidth2 max search quantity
        /// </summary>
        /// <value>number_manager.bandwidth2 max search quantity</value>
        [DataMember(Name="max_search_quantity", EmitDefaultValue=false)]
        public int? MaxSearchQuantity { get; set; }

        /// <summary>
        /// number_manager.bandwidth2 order name prefix
        /// </summary>
        /// <value>number_manager.bandwidth2 order name prefix</value>
        [DataMember(Name="order_name_prefix", EmitDefaultValue=false)]
        public string OrderNamePrefix { get; set; }

        /// <summary>
        /// number_manager.bandwidth2 sandbox provisioning
        /// </summary>
        /// <value>number_manager.bandwidth2 sandbox provisioning</value>
        [DataMember(Name="sandbox_provisioning", EmitDefaultValue=false)]
        public bool? SandboxProvisioning { get; set; }

        /// <summary>
        /// number_manager.bandwidth2 sip peer
        /// </summary>
        /// <value>number_manager.bandwidth2 sip peer</value>
        [DataMember(Name="sip_peer", EmitDefaultValue=false)]
        public string SipPeer { get; set; }

        /// <summary>
        /// number_manager.bandwidth2 site id
        /// </summary>
        /// <value>number_manager.bandwidth2 site id</value>
        [DataMember(Name="site_id", EmitDefaultValue=false)]
        public string SiteId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigNumberManagerBandwidth2 {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ApiPassword: ").Append(ApiPassword).Append("\n");
            sb.Append("  ApiUsername: ").Append(ApiUsername).Append("\n");
            sb.Append("  Debug: ").Append(Debug).Append("\n");
            sb.Append("  EnableProvisioning: ").Append(EnableProvisioning).Append("\n");
            sb.Append("  MaxSearchQuantity: ").Append(MaxSearchQuantity).Append("\n");
            sb.Append("  OrderNamePrefix: ").Append(OrderNamePrefix).Append("\n");
            sb.Append("  SandboxProvisioning: ").Append(SandboxProvisioning).Append("\n");
            sb.Append("  SipPeer: ").Append(SipPeer).Append("\n");
            sb.Append("  SiteId: ").Append(SiteId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigNumberManagerBandwidth2);
        }

        /// <summary>
        /// Returns true if SystemConfigNumberManagerBandwidth2 instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigNumberManagerBandwidth2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigNumberManagerBandwidth2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.ApiPassword == input.ApiPassword ||
                    (this.ApiPassword != null &&
                    this.ApiPassword.Equals(input.ApiPassword))
                ) && 
                (
                    this.ApiUsername == input.ApiUsername ||
                    (this.ApiUsername != null &&
                    this.ApiUsername.Equals(input.ApiUsername))
                ) && 
                (
                    this.Debug == input.Debug ||
                    (this.Debug != null &&
                    this.Debug.Equals(input.Debug))
                ) && 
                (
                    this.EnableProvisioning == input.EnableProvisioning ||
                    (this.EnableProvisioning != null &&
                    this.EnableProvisioning.Equals(input.EnableProvisioning))
                ) && 
                (
                    this.MaxSearchQuantity == input.MaxSearchQuantity ||
                    (this.MaxSearchQuantity != null &&
                    this.MaxSearchQuantity.Equals(input.MaxSearchQuantity))
                ) && 
                (
                    this.OrderNamePrefix == input.OrderNamePrefix ||
                    (this.OrderNamePrefix != null &&
                    this.OrderNamePrefix.Equals(input.OrderNamePrefix))
                ) && 
                (
                    this.SandboxProvisioning == input.SandboxProvisioning ||
                    (this.SandboxProvisioning != null &&
                    this.SandboxProvisioning.Equals(input.SandboxProvisioning))
                ) && 
                (
                    this.SipPeer == input.SipPeer ||
                    (this.SipPeer != null &&
                    this.SipPeer.Equals(input.SipPeer))
                ) && 
                (
                    this.SiteId == input.SiteId ||
                    (this.SiteId != null &&
                    this.SiteId.Equals(input.SiteId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.ApiPassword != null)
                    hashCode = hashCode * 59 + this.ApiPassword.GetHashCode();
                if (this.ApiUsername != null)
                    hashCode = hashCode * 59 + this.ApiUsername.GetHashCode();
                if (this.Debug != null)
                    hashCode = hashCode * 59 + this.Debug.GetHashCode();
                if (this.EnableProvisioning != null)
                    hashCode = hashCode * 59 + this.EnableProvisioning.GetHashCode();
                if (this.MaxSearchQuantity != null)
                    hashCode = hashCode * 59 + this.MaxSearchQuantity.GetHashCode();
                if (this.OrderNamePrefix != null)
                    hashCode = hashCode * 59 + this.OrderNamePrefix.GetHashCode();
                if (this.SandboxProvisioning != null)
                    hashCode = hashCode * 59 + this.SandboxProvisioning.GetHashCode();
                if (this.SipPeer != null)
                    hashCode = hashCode * 59 + this.SipPeer.GetHashCode();
                if (this.SiteId != null)
                    hashCode = hashCode * 59 + this.SiteId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MaxSearchQuantity (int?) minimum
            if(this.MaxSearchQuantity < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxSearchQuantity, must be a value greater than or equal to 1.", new [] { "MaxSearchQuantity" });
            }

            yield break;
        }
    }

}
