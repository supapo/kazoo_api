/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Relate two participants to each other in a conference
    /// </summary>
    [DataContract]
    public partial class MetaflowsRelate :  IEquatable<MetaflowsRelate>, IValidatableObject
    {
        /// <summary>
        /// The relationship to establish between the two participants
        /// </summary>
        /// <value>The relationship to establish between the two participants</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RelationshipEnum
        {
            
            /// <summary>
            /// Enum Deaf for value: deaf
            /// </summary>
            [EnumMember(Value = "deaf")]
            Deaf = 1,
            
            /// <summary>
            /// Enum Clear for value: clear
            /// </summary>
            [EnumMember(Value = "clear")]
            Clear = 2,
            
            /// <summary>
            /// Enum Mute for value: mute
            /// </summary>
            [EnumMember(Value = "mute")]
            Mute = 3
        }

        /// <summary>
        /// The relationship to establish between the two participants
        /// </summary>
        /// <value>The relationship to establish between the two participants</value>
        [DataMember(Name="relationship", EmitDefaultValue=false)]
        public RelationshipEnum? Relationship { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetaflowsRelate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MetaflowsRelate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetaflowsRelate" /> class.
        /// </summary>
        /// <param name="conferenceId">The ID of the conference (required).</param>
        /// <param name="otherParticipant">The other participant ID to relate (required).</param>
        /// <param name="participantId">The participant ID to relate (required).</param>
        /// <param name="relationship">The relationship to establish between the two participants (default to RelationshipEnum.Clear).</param>
        public MetaflowsRelate(string conferenceId = default(string), Object otherParticipant = default(Object), Object participantId = default(Object), RelationshipEnum? relationship = RelationshipEnum.Clear)
        {
            // to ensure "conferenceId" is required (not null)
            if (conferenceId == null)
            {
                throw new InvalidDataException("conferenceId is a required property for MetaflowsRelate and cannot be null");
            }
            else
            {
                this.ConferenceId = conferenceId;
            }
            // to ensure "otherParticipant" is required (not null)
            if (otherParticipant == null)
            {
                throw new InvalidDataException("otherParticipant is a required property for MetaflowsRelate and cannot be null");
            }
            else
            {
                this.OtherParticipant = otherParticipant;
            }
            // to ensure "participantId" is required (not null)
            if (participantId == null)
            {
                throw new InvalidDataException("participantId is a required property for MetaflowsRelate and cannot be null");
            }
            else
            {
                this.ParticipantId = participantId;
            }
            // use default value if no "relationship" provided
            if (relationship == null)
            {
                this.Relationship = RelationshipEnum.Clear;
            }
            else
            {
                this.Relationship = relationship;
            }
        }
        
        /// <summary>
        /// The ID of the conference
        /// </summary>
        /// <value>The ID of the conference</value>
        [DataMember(Name="conference_id", EmitDefaultValue=false)]
        public string ConferenceId { get; set; }

        /// <summary>
        /// The other participant ID to relate
        /// </summary>
        /// <value>The other participant ID to relate</value>
        [DataMember(Name="other_participant", EmitDefaultValue=false)]
        public Object OtherParticipant { get; set; }

        /// <summary>
        /// The participant ID to relate
        /// </summary>
        /// <value>The participant ID to relate</value>
        [DataMember(Name="participant_id", EmitDefaultValue=false)]
        public Object ParticipantId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MetaflowsRelate {\n");
            sb.Append("  ConferenceId: ").Append(ConferenceId).Append("\n");
            sb.Append("  OtherParticipant: ").Append(OtherParticipant).Append("\n");
            sb.Append("  ParticipantId: ").Append(ParticipantId).Append("\n");
            sb.Append("  Relationship: ").Append(Relationship).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MetaflowsRelate);
        }

        /// <summary>
        /// Returns true if MetaflowsRelate instances are equal
        /// </summary>
        /// <param name="input">Instance of MetaflowsRelate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetaflowsRelate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConferenceId == input.ConferenceId ||
                    (this.ConferenceId != null &&
                    this.ConferenceId.Equals(input.ConferenceId))
                ) && 
                (
                    this.OtherParticipant == input.OtherParticipant ||
                    (this.OtherParticipant != null &&
                    this.OtherParticipant.Equals(input.OtherParticipant))
                ) && 
                (
                    this.ParticipantId == input.ParticipantId ||
                    (this.ParticipantId != null &&
                    this.ParticipantId.Equals(input.ParticipantId))
                ) && 
                (
                    this.Relationship == input.Relationship ||
                    (this.Relationship != null &&
                    this.Relationship.Equals(input.Relationship))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConferenceId != null)
                    hashCode = hashCode * 59 + this.ConferenceId.GetHashCode();
                if (this.OtherParticipant != null)
                    hashCode = hashCode * 59 + this.OtherParticipant.GetHashCode();
                if (this.ParticipantId != null)
                    hashCode = hashCode * 59 + this.ParticipantId.GetHashCode();
                if (this.Relationship != null)
                    hashCode = hashCode * 59 + this.Relationship.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
