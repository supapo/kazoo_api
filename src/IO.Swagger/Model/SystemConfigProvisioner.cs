/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for provisioner system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigProvisioner :  IEquatable<SystemConfigProvisioner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigProvisioner" /> class.
        /// </summary>
        /// <param name="comboKeys">provisioner combo keys.</param>
        /// <param name="featureKeys">provisioner feature keys.</param>
        /// <param name="provisioningType">provisioner provisioning type.</param>
        /// <param name="provisioningUrl">provisioner provisioning url.</param>
        public SystemConfigProvisioner(Object comboKeys = default(Object), Object featureKeys = default(Object), string provisioningType = default(string), string provisioningUrl = default(string))
        {
            this.ComboKeys = comboKeys;
            this.FeatureKeys = featureKeys;
            this.ProvisioningType = provisioningType;
            this.ProvisioningUrl = provisioningUrl;
        }
        
        /// <summary>
        /// provisioner combo keys
        /// </summary>
        /// <value>provisioner combo keys</value>
        [DataMember(Name="combo_keys", EmitDefaultValue=false)]
        public Object ComboKeys { get; set; }

        /// <summary>
        /// provisioner feature keys
        /// </summary>
        /// <value>provisioner feature keys</value>
        [DataMember(Name="feature_keys", EmitDefaultValue=false)]
        public Object FeatureKeys { get; set; }

        /// <summary>
        /// provisioner provisioning type
        /// </summary>
        /// <value>provisioner provisioning type</value>
        [DataMember(Name="provisioning_type", EmitDefaultValue=false)]
        public string ProvisioningType { get; set; }

        /// <summary>
        /// provisioner provisioning url
        /// </summary>
        /// <value>provisioner provisioning url</value>
        [DataMember(Name="provisioning_url", EmitDefaultValue=false)]
        public string ProvisioningUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigProvisioner {\n");
            sb.Append("  ComboKeys: ").Append(ComboKeys).Append("\n");
            sb.Append("  FeatureKeys: ").Append(FeatureKeys).Append("\n");
            sb.Append("  ProvisioningType: ").Append(ProvisioningType).Append("\n");
            sb.Append("  ProvisioningUrl: ").Append(ProvisioningUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigProvisioner);
        }

        /// <summary>
        /// Returns true if SystemConfigProvisioner instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigProvisioner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigProvisioner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ComboKeys == input.ComboKeys ||
                    (this.ComboKeys != null &&
                    this.ComboKeys.Equals(input.ComboKeys))
                ) && 
                (
                    this.FeatureKeys == input.FeatureKeys ||
                    (this.FeatureKeys != null &&
                    this.FeatureKeys.Equals(input.FeatureKeys))
                ) && 
                (
                    this.ProvisioningType == input.ProvisioningType ||
                    (this.ProvisioningType != null &&
                    this.ProvisioningType.Equals(input.ProvisioningType))
                ) && 
                (
                    this.ProvisioningUrl == input.ProvisioningUrl ||
                    (this.ProvisioningUrl != null &&
                    this.ProvisioningUrl.Equals(input.ProvisioningUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ComboKeys != null)
                    hashCode = hashCode * 59 + this.ComboKeys.GetHashCode();
                if (this.FeatureKeys != null)
                    hashCode = hashCode * 59 + this.FeatureKeys.GetHashCode();
                if (this.ProvisioningType != null)
                    hashCode = hashCode * 59 + this.ProvisioningType.GetHashCode();
                if (this.ProvisioningUrl != null)
                    hashCode = hashCode * 59 + this.ProvisioningUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
