/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for call.event
    /// </summary>
    [DataContract]
    public partial class KapiCallEvent :  IEquatable<KapiCallEvent>, IValidatableObject
    {
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Callevent for value: call_event
            /// </summary>
            [EnumMember(Value = "call_event")]
            Callevent = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiCallEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiCallEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiCallEvent" /> class.
        /// </summary>
        /// <param name="applicationData">applicationData.</param>
        /// <param name="applicationEvent">applicationEvent.</param>
        /// <param name="applicationName">applicationName.</param>
        /// <param name="applicationResponse">applicationResponse.</param>
        /// <param name="billingSeconds">billingSeconds.</param>
        /// <param name="bridgeBUniqueID">bridgeBUniqueID.</param>
        /// <param name="bridgeHangupCause">bridgeHangupCause.</param>
        /// <param name="callDebug">callDebug.</param>
        /// <param name="callDirection">callDirection.</param>
        /// <param name="callID">callID (required).</param>
        /// <param name="calleeIDName">calleeIDName.</param>
        /// <param name="calleeIDNumber">calleeIDNumber.</param>
        /// <param name="callerDestinationNumber">callerDestinationNumber.</param>
        /// <param name="callerIDName">callerIDName.</param>
        /// <param name="callerIDNumber">callerIDNumber.</param>
        /// <param name="channelAnswerState">channelAnswerState.</param>
        /// <param name="channelCallState">channelCallState.</param>
        /// <param name="channelCreatedTime">channelCreatedTime.</param>
        /// <param name="channelDebug">channelDebug.</param>
        /// <param name="channelIsLoopback">channelIsLoopback.</param>
        /// <param name="channelLoopbackBowout">channelLoopbackBowout.</param>
        /// <param name="channelLoopbackBowoutExecute">channelLoopbackBowoutExecute.</param>
        /// <param name="channelLoopbackLeg">channelLoopbackLeg.</param>
        /// <param name="channelLoopbackOtherLegID">channelLoopbackOtherLegID.</param>
        /// <param name="channelMoving">channelMoving.</param>
        /// <param name="channelName">channelName.</param>
        /// <param name="channelState">channelState.</param>
        /// <param name="conferenceConfig">conferenceConfig.</param>
        /// <param name="conferenceName">conferenceName.</param>
        /// <param name="connectingLegAUUID">connectingLegAUUID.</param>
        /// <param name="connectingLegBUUID">connectingLegBUUID.</param>
        /// <param name="controlQueue">controlQueue.</param>
        /// <param name="customApplicationVars">customApplicationVars.</param>
        /// <param name="customChannelVars">customChannelVars.</param>
        /// <param name="customSIPHeaders">customSIPHeaders.</param>
        /// <param name="dTMFDigit">dTMFDigit.</param>
        /// <param name="dTMFDuration">dTMFDuration.</param>
        /// <param name="detectedTone">detectedTone.</param>
        /// <param name="digitsDialed">digitsDialed.</param>
        /// <param name="disposition">disposition.</param>
        /// <param name="durationSeconds">durationSeconds.</param>
        /// <param name="endpointDisposition">endpointDisposition.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="faxInfo">faxInfo.</param>
        /// <param name="from">from.</param>
        /// <param name="fromTag">fromTag.</param>
        /// <param name="fromUri">fromUri.</param>
        /// <param name="hangupCause">hangupCause.</param>
        /// <param name="hangupCode">hangupCode.</param>
        /// <param name="interactionID">interactionID.</param>
        /// <param name="interceptedBy">interceptedBy.</param>
        /// <param name="length">length.</param>
        /// <param name="localSDP">localSDP.</param>
        /// <param name="mediaRecordings">mediaRecordings.</param>
        /// <param name="mediaServer">mediaServer.</param>
        /// <param name="originationCallID">originationCallID.</param>
        /// <param name="otherLegCallID">otherLegCallID.</param>
        /// <param name="otherLegCallerIDName">otherLegCallerIDName.</param>
        /// <param name="otherLegCallerIDNumber">otherLegCallerIDNumber.</param>
        /// <param name="otherLegDestinationNumber">otherLegDestinationNumber.</param>
        /// <param name="otherLegDirection">otherLegDirection.</param>
        /// <param name="parkingSlot">parkingSlot.</param>
        /// <param name="presenceID">presenceID.</param>
        /// <param name="rawApplicationData">rawApplicationData.</param>
        /// <param name="rawApplicationName">rawApplicationName.</param>
        /// <param name="recording">recording.</param>
        /// <param name="remoteSDP">remoteSDP.</param>
        /// <param name="replacedBy">replacedBy.</param>
        /// <param name="request">request.</param>
        /// <param name="resigningPeerUUID">resigningPeerUUID.</param>
        /// <param name="resigningUUID">resigningUUID.</param>
        /// <param name="ringingSeconds">ringingSeconds.</param>
        /// <param name="rootCallInteractionID">rootCallInteractionID.</param>
        /// <param name="silenceTerminated">silenceTerminated.</param>
        /// <param name="switchHostname">switchHostname.</param>
        /// <param name="switchNodename">switchNodename.</param>
        /// <param name="switchURI">switchURI.</param>
        /// <param name="switchURL">switchURL.</param>
        /// <param name="targetCallID">targetCallID.</param>
        /// <param name="terminator">terminator.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="to">to.</param>
        /// <param name="toTag">toTag.</param>
        /// <param name="toUri">toUri.</param>
        /// <param name="transferDisposition">transferDisposition.</param>
        /// <param name="transferHistory">transferHistory.</param>
        /// <param name="transferSource">transferSource.</param>
        /// <param name="transferTo">transferTo.</param>
        /// <param name="transferType">transferType.</param>
        /// <param name="userAgent">userAgent.</param>
        public KapiCallEvent(string applicationData = default(string), string applicationEvent = default(string), string applicationName = default(string), string applicationResponse = default(string), string billingSeconds = default(string), string bridgeBUniqueID = default(string), string bridgeHangupCause = default(string), string callDebug = default(string), string callDirection = default(string), string callID = default(string), string calleeIDName = default(string), string calleeIDNumber = default(string), string callerDestinationNumber = default(string), string callerIDName = default(string), string callerIDNumber = default(string), string channelAnswerState = default(string), string channelCallState = default(string), int? channelCreatedTime = default(int?), string channelDebug = default(string), string channelIsLoopback = default(string), string channelLoopbackBowout = default(string), string channelLoopbackBowoutExecute = default(string), string channelLoopbackLeg = default(string), string channelLoopbackOtherLegID = default(string), string channelMoving = default(string), string channelName = default(string), string channelState = default(string), string conferenceConfig = default(string), string conferenceName = default(string), string connectingLegAUUID = default(string), string connectingLegBUUID = default(string), string controlQueue = default(string), Object customApplicationVars = default(Object), Object customChannelVars = default(Object), Object customSIPHeaders = default(Object), string dTMFDigit = default(string), string dTMFDuration = default(string), string detectedTone = default(string), string digitsDialed = default(string), string disposition = default(string), string durationSeconds = default(string), string endpointDisposition = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), Object faxInfo = default(Object), string from = default(string), string fromTag = default(string), string fromUri = default(string), string hangupCause = default(string), string hangupCode = default(string), string interactionID = default(string), string interceptedBy = default(string), string length = default(string), string localSDP = default(string), string mediaRecordings = default(string), string mediaServer = default(string), string originationCallID = default(string), string otherLegCallID = default(string), string otherLegCallerIDName = default(string), string otherLegCallerIDNumber = default(string), string otherLegDestinationNumber = default(string), string otherLegDirection = default(string), string parkingSlot = default(string), string presenceID = default(string), string rawApplicationData = default(string), string rawApplicationName = default(string), string recording = default(string), string remoteSDP = default(string), string replacedBy = default(string), string request = default(string), string resigningPeerUUID = default(string), string resigningUUID = default(string), string ringingSeconds = default(string), string rootCallInteractionID = default(string), string silenceTerminated = default(string), string switchHostname = default(string), string switchNodename = default(string), string switchURI = default(string), string switchURL = default(string), string targetCallID = default(string), string terminator = default(string), string timestamp = default(string), string to = default(string), string toTag = default(string), string toUri = default(string), string transferDisposition = default(string), string transferHistory = default(string), string transferSource = default(string), string transferTo = default(string), string transferType = default(string), string userAgent = default(string))
        {
            // to ensure "callID" is required (not null)
            if (callID == null)
            {
                throw new InvalidDataException("callID is a required property for KapiCallEvent and cannot be null");
            }
            else
            {
                this.CallID = callID;
            }
            this.ApplicationData = applicationData;
            this.ApplicationEvent = applicationEvent;
            this.ApplicationName = applicationName;
            this.ApplicationResponse = applicationResponse;
            this.BillingSeconds = billingSeconds;
            this.BridgeBUniqueID = bridgeBUniqueID;
            this.BridgeHangupCause = bridgeHangupCause;
            this.CallDebug = callDebug;
            this.CallDirection = callDirection;
            this.CalleeIDName = calleeIDName;
            this.CalleeIDNumber = calleeIDNumber;
            this.CallerDestinationNumber = callerDestinationNumber;
            this.CallerIDName = callerIDName;
            this.CallerIDNumber = callerIDNumber;
            this.ChannelAnswerState = channelAnswerState;
            this.ChannelCallState = channelCallState;
            this.ChannelCreatedTime = channelCreatedTime;
            this.ChannelDebug = channelDebug;
            this.ChannelIsLoopback = channelIsLoopback;
            this.ChannelLoopbackBowout = channelLoopbackBowout;
            this.ChannelLoopbackBowoutExecute = channelLoopbackBowoutExecute;
            this.ChannelLoopbackLeg = channelLoopbackLeg;
            this.ChannelLoopbackOtherLegID = channelLoopbackOtherLegID;
            this.ChannelMoving = channelMoving;
            this.ChannelName = channelName;
            this.ChannelState = channelState;
            this.ConferenceConfig = conferenceConfig;
            this.ConferenceName = conferenceName;
            this.ConnectingLegAUUID = connectingLegAUUID;
            this.ConnectingLegBUUID = connectingLegBUUID;
            this.ControlQueue = controlQueue;
            this.CustomApplicationVars = customApplicationVars;
            this.CustomChannelVars = customChannelVars;
            this.CustomSIPHeaders = customSIPHeaders;
            this.DTMFDigit = dTMFDigit;
            this.DTMFDuration = dTMFDuration;
            this.DetectedTone = detectedTone;
            this.DigitsDialed = digitsDialed;
            this.Disposition = disposition;
            this.DurationSeconds = durationSeconds;
            this.EndpointDisposition = endpointDisposition;
            this.EventCategory = eventCategory;
            this.FaxInfo = faxInfo;
            this.From = from;
            this.FromTag = fromTag;
            this.FromUri = fromUri;
            this.HangupCause = hangupCause;
            this.HangupCode = hangupCode;
            this.InteractionID = interactionID;
            this.InterceptedBy = interceptedBy;
            this.Length = length;
            this.LocalSDP = localSDP;
            this.MediaRecordings = mediaRecordings;
            this.MediaServer = mediaServer;
            this.OriginationCallID = originationCallID;
            this.OtherLegCallID = otherLegCallID;
            this.OtherLegCallerIDName = otherLegCallerIDName;
            this.OtherLegCallerIDNumber = otherLegCallerIDNumber;
            this.OtherLegDestinationNumber = otherLegDestinationNumber;
            this.OtherLegDirection = otherLegDirection;
            this.ParkingSlot = parkingSlot;
            this.PresenceID = presenceID;
            this.RawApplicationData = rawApplicationData;
            this.RawApplicationName = rawApplicationName;
            this.Recording = recording;
            this.RemoteSDP = remoteSDP;
            this.ReplacedBy = replacedBy;
            this.Request = request;
            this.ResigningPeerUUID = resigningPeerUUID;
            this.ResigningUUID = resigningUUID;
            this.RingingSeconds = ringingSeconds;
            this.RootCallInteractionID = rootCallInteractionID;
            this.SilenceTerminated = silenceTerminated;
            this.SwitchHostname = switchHostname;
            this.SwitchNodename = switchNodename;
            this.SwitchURI = switchURI;
            this.SwitchURL = switchURL;
            this.TargetCallID = targetCallID;
            this.Terminator = terminator;
            this.Timestamp = timestamp;
            this.To = to;
            this.ToTag = toTag;
            this.ToUri = toUri;
            this.TransferDisposition = transferDisposition;
            this.TransferHistory = transferHistory;
            this.TransferSource = transferSource;
            this.TransferTo = transferTo;
            this.TransferType = transferType;
            this.UserAgent = userAgent;
        }
        
        /// <summary>
        /// Gets or Sets ApplicationData
        /// </summary>
        [DataMember(Name="Application-Data", EmitDefaultValue=false)]
        public string ApplicationData { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationEvent
        /// </summary>
        [DataMember(Name="Application-Event", EmitDefaultValue=false)]
        public string ApplicationEvent { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name="Application-Name", EmitDefaultValue=false)]
        public string ApplicationName { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationResponse
        /// </summary>
        [DataMember(Name="Application-Response", EmitDefaultValue=false)]
        public string ApplicationResponse { get; set; }

        /// <summary>
        /// Gets or Sets BillingSeconds
        /// </summary>
        [DataMember(Name="Billing-Seconds", EmitDefaultValue=false)]
        public string BillingSeconds { get; set; }

        /// <summary>
        /// Gets or Sets BridgeBUniqueID
        /// </summary>
        [DataMember(Name="Bridge-B-Unique-ID", EmitDefaultValue=false)]
        public string BridgeBUniqueID { get; set; }

        /// <summary>
        /// Gets or Sets BridgeHangupCause
        /// </summary>
        [DataMember(Name="Bridge-Hangup-Cause", EmitDefaultValue=false)]
        public string BridgeHangupCause { get; set; }

        /// <summary>
        /// Gets or Sets CallDebug
        /// </summary>
        [DataMember(Name="Call-Debug", EmitDefaultValue=false)]
        public string CallDebug { get; set; }

        /// <summary>
        /// Gets or Sets CallDirection
        /// </summary>
        [DataMember(Name="Call-Direction", EmitDefaultValue=false)]
        public string CallDirection { get; set; }

        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }

        /// <summary>
        /// Gets or Sets CalleeIDName
        /// </summary>
        [DataMember(Name="Callee-ID-Name", EmitDefaultValue=false)]
        public string CalleeIDName { get; set; }

        /// <summary>
        /// Gets or Sets CalleeIDNumber
        /// </summary>
        [DataMember(Name="Callee-ID-Number", EmitDefaultValue=false)]
        public string CalleeIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets CallerDestinationNumber
        /// </summary>
        [DataMember(Name="Caller-Destination-Number", EmitDefaultValue=false)]
        public string CallerDestinationNumber { get; set; }

        /// <summary>
        /// Gets or Sets CallerIDName
        /// </summary>
        [DataMember(Name="Caller-ID-Name", EmitDefaultValue=false)]
        public string CallerIDName { get; set; }

        /// <summary>
        /// Gets or Sets CallerIDNumber
        /// </summary>
        [DataMember(Name="Caller-ID-Number", EmitDefaultValue=false)]
        public string CallerIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets ChannelAnswerState
        /// </summary>
        [DataMember(Name="Channel-Answer-State", EmitDefaultValue=false)]
        public string ChannelAnswerState { get; set; }

        /// <summary>
        /// Gets or Sets ChannelCallState
        /// </summary>
        [DataMember(Name="Channel-Call-State", EmitDefaultValue=false)]
        public string ChannelCallState { get; set; }

        /// <summary>
        /// Gets or Sets ChannelCreatedTime
        /// </summary>
        [DataMember(Name="Channel-Created-Time", EmitDefaultValue=false)]
        public int? ChannelCreatedTime { get; set; }

        /// <summary>
        /// Gets or Sets ChannelDebug
        /// </summary>
        [DataMember(Name="Channel-Debug", EmitDefaultValue=false)]
        public string ChannelDebug { get; set; }

        /// <summary>
        /// Gets or Sets ChannelIsLoopback
        /// </summary>
        [DataMember(Name="Channel-Is-Loopback", EmitDefaultValue=false)]
        public string ChannelIsLoopback { get; set; }

        /// <summary>
        /// Gets or Sets ChannelLoopbackBowout
        /// </summary>
        [DataMember(Name="Channel-Loopback-Bowout", EmitDefaultValue=false)]
        public string ChannelLoopbackBowout { get; set; }

        /// <summary>
        /// Gets or Sets ChannelLoopbackBowoutExecute
        /// </summary>
        [DataMember(Name="Channel-Loopback-Bowout-Execute", EmitDefaultValue=false)]
        public string ChannelLoopbackBowoutExecute { get; set; }

        /// <summary>
        /// Gets or Sets ChannelLoopbackLeg
        /// </summary>
        [DataMember(Name="Channel-Loopback-Leg", EmitDefaultValue=false)]
        public string ChannelLoopbackLeg { get; set; }

        /// <summary>
        /// Gets or Sets ChannelLoopbackOtherLegID
        /// </summary>
        [DataMember(Name="Channel-Loopback-Other-Leg-ID", EmitDefaultValue=false)]
        public string ChannelLoopbackOtherLegID { get; set; }

        /// <summary>
        /// Gets or Sets ChannelMoving
        /// </summary>
        [DataMember(Name="Channel-Moving", EmitDefaultValue=false)]
        public string ChannelMoving { get; set; }

        /// <summary>
        /// Gets or Sets ChannelName
        /// </summary>
        [DataMember(Name="Channel-Name", EmitDefaultValue=false)]
        public string ChannelName { get; set; }

        /// <summary>
        /// Gets or Sets ChannelState
        /// </summary>
        [DataMember(Name="Channel-State", EmitDefaultValue=false)]
        public string ChannelState { get; set; }

        /// <summary>
        /// Gets or Sets ConferenceConfig
        /// </summary>
        [DataMember(Name="Conference-Config", EmitDefaultValue=false)]
        public string ConferenceConfig { get; set; }

        /// <summary>
        /// Gets or Sets ConferenceName
        /// </summary>
        [DataMember(Name="Conference-Name", EmitDefaultValue=false)]
        public string ConferenceName { get; set; }

        /// <summary>
        /// Gets or Sets ConnectingLegAUUID
        /// </summary>
        [DataMember(Name="Connecting-Leg-A-UUID", EmitDefaultValue=false)]
        public string ConnectingLegAUUID { get; set; }

        /// <summary>
        /// Gets or Sets ConnectingLegBUUID
        /// </summary>
        [DataMember(Name="Connecting-Leg-B-UUID", EmitDefaultValue=false)]
        public string ConnectingLegBUUID { get; set; }

        /// <summary>
        /// Gets or Sets ControlQueue
        /// </summary>
        [DataMember(Name="Control-Queue", EmitDefaultValue=false)]
        public string ControlQueue { get; set; }

        /// <summary>
        /// Gets or Sets CustomApplicationVars
        /// </summary>
        [DataMember(Name="Custom-Application-Vars", EmitDefaultValue=false)]
        public Object CustomApplicationVars { get; set; }

        /// <summary>
        /// Gets or Sets CustomChannelVars
        /// </summary>
        [DataMember(Name="Custom-Channel-Vars", EmitDefaultValue=false)]
        public Object CustomChannelVars { get; set; }

        /// <summary>
        /// Gets or Sets CustomSIPHeaders
        /// </summary>
        [DataMember(Name="Custom-SIP-Headers", EmitDefaultValue=false)]
        public Object CustomSIPHeaders { get; set; }

        /// <summary>
        /// Gets or Sets DTMFDigit
        /// </summary>
        [DataMember(Name="DTMF-Digit", EmitDefaultValue=false)]
        public string DTMFDigit { get; set; }

        /// <summary>
        /// Gets or Sets DTMFDuration
        /// </summary>
        [DataMember(Name="DTMF-Duration", EmitDefaultValue=false)]
        public string DTMFDuration { get; set; }

        /// <summary>
        /// Gets or Sets DetectedTone
        /// </summary>
        [DataMember(Name="Detected-Tone", EmitDefaultValue=false)]
        public string DetectedTone { get; set; }

        /// <summary>
        /// Gets or Sets DigitsDialed
        /// </summary>
        [DataMember(Name="Digits-Dialed", EmitDefaultValue=false)]
        public string DigitsDialed { get; set; }

        /// <summary>
        /// Gets or Sets Disposition
        /// </summary>
        [DataMember(Name="Disposition", EmitDefaultValue=false)]
        public string Disposition { get; set; }

        /// <summary>
        /// Gets or Sets DurationSeconds
        /// </summary>
        [DataMember(Name="Duration-Seconds", EmitDefaultValue=false)]
        public string DurationSeconds { get; set; }

        /// <summary>
        /// Gets or Sets EndpointDisposition
        /// </summary>
        [DataMember(Name="Endpoint-Disposition", EmitDefaultValue=false)]
        public string EndpointDisposition { get; set; }


        /// <summary>
        /// Gets or Sets FaxInfo
        /// </summary>
        [DataMember(Name="Fax-Info", EmitDefaultValue=false)]
        public Object FaxInfo { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="From", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// Gets or Sets FromTag
        /// </summary>
        [DataMember(Name="From-Tag", EmitDefaultValue=false)]
        public string FromTag { get; set; }

        /// <summary>
        /// Gets or Sets FromUri
        /// </summary>
        [DataMember(Name="From-Uri", EmitDefaultValue=false)]
        public string FromUri { get; set; }

        /// <summary>
        /// Gets or Sets HangupCause
        /// </summary>
        [DataMember(Name="Hangup-Cause", EmitDefaultValue=false)]
        public string HangupCause { get; set; }

        /// <summary>
        /// Gets or Sets HangupCode
        /// </summary>
        [DataMember(Name="Hangup-Code", EmitDefaultValue=false)]
        public string HangupCode { get; set; }

        /// <summary>
        /// Gets or Sets InteractionID
        /// </summary>
        [DataMember(Name="Interaction-ID", EmitDefaultValue=false)]
        public string InteractionID { get; set; }

        /// <summary>
        /// Gets or Sets InterceptedBy
        /// </summary>
        [DataMember(Name="Intercepted-By", EmitDefaultValue=false)]
        public string InterceptedBy { get; set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name="Length", EmitDefaultValue=false)]
        public string Length { get; set; }

        /// <summary>
        /// Gets or Sets LocalSDP
        /// </summary>
        [DataMember(Name="Local-SDP", EmitDefaultValue=false)]
        public string LocalSDP { get; set; }

        /// <summary>
        /// Gets or Sets MediaRecordings
        /// </summary>
        [DataMember(Name="Media-Recordings", EmitDefaultValue=false)]
        public string MediaRecordings { get; set; }

        /// <summary>
        /// Gets or Sets MediaServer
        /// </summary>
        [DataMember(Name="Media-Server", EmitDefaultValue=false)]
        public string MediaServer { get; set; }

        /// <summary>
        /// Gets or Sets OriginationCallID
        /// </summary>
        [DataMember(Name="Origination-Call-ID", EmitDefaultValue=false)]
        public string OriginationCallID { get; set; }

        /// <summary>
        /// Gets or Sets OtherLegCallID
        /// </summary>
        [DataMember(Name="Other-Leg-Call-ID", EmitDefaultValue=false)]
        public string OtherLegCallID { get; set; }

        /// <summary>
        /// Gets or Sets OtherLegCallerIDName
        /// </summary>
        [DataMember(Name="Other-Leg-Caller-ID-Name", EmitDefaultValue=false)]
        public string OtherLegCallerIDName { get; set; }

        /// <summary>
        /// Gets or Sets OtherLegCallerIDNumber
        /// </summary>
        [DataMember(Name="Other-Leg-Caller-ID-Number", EmitDefaultValue=false)]
        public string OtherLegCallerIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets OtherLegDestinationNumber
        /// </summary>
        [DataMember(Name="Other-Leg-Destination-Number", EmitDefaultValue=false)]
        public string OtherLegDestinationNumber { get; set; }

        /// <summary>
        /// Gets or Sets OtherLegDirection
        /// </summary>
        [DataMember(Name="Other-Leg-Direction", EmitDefaultValue=false)]
        public string OtherLegDirection { get; set; }

        /// <summary>
        /// Gets or Sets ParkingSlot
        /// </summary>
        [DataMember(Name="Parking-Slot", EmitDefaultValue=false)]
        public string ParkingSlot { get; set; }

        /// <summary>
        /// Gets or Sets PresenceID
        /// </summary>
        [DataMember(Name="Presence-ID", EmitDefaultValue=false)]
        public string PresenceID { get; set; }

        /// <summary>
        /// Gets or Sets RawApplicationData
        /// </summary>
        [DataMember(Name="Raw-Application-Data", EmitDefaultValue=false)]
        public string RawApplicationData { get; set; }

        /// <summary>
        /// Gets or Sets RawApplicationName
        /// </summary>
        [DataMember(Name="Raw-Application-Name", EmitDefaultValue=false)]
        public string RawApplicationName { get; set; }

        /// <summary>
        /// Gets or Sets Recording
        /// </summary>
        [DataMember(Name="Recording", EmitDefaultValue=false)]
        public string Recording { get; set; }

        /// <summary>
        /// Gets or Sets RemoteSDP
        /// </summary>
        [DataMember(Name="Remote-SDP", EmitDefaultValue=false)]
        public string RemoteSDP { get; set; }

        /// <summary>
        /// Gets or Sets ReplacedBy
        /// </summary>
        [DataMember(Name="Replaced-By", EmitDefaultValue=false)]
        public string ReplacedBy { get; set; }

        /// <summary>
        /// Gets or Sets Request
        /// </summary>
        [DataMember(Name="Request", EmitDefaultValue=false)]
        public string Request { get; set; }

        /// <summary>
        /// Gets or Sets ResigningPeerUUID
        /// </summary>
        [DataMember(Name="Resigning-Peer-UUID", EmitDefaultValue=false)]
        public string ResigningPeerUUID { get; set; }

        /// <summary>
        /// Gets or Sets ResigningUUID
        /// </summary>
        [DataMember(Name="Resigning-UUID", EmitDefaultValue=false)]
        public string ResigningUUID { get; set; }

        /// <summary>
        /// Gets or Sets RingingSeconds
        /// </summary>
        [DataMember(Name="Ringing-Seconds", EmitDefaultValue=false)]
        public string RingingSeconds { get; set; }

        /// <summary>
        /// Gets or Sets RootCallInteractionID
        /// </summary>
        [DataMember(Name="Root-Call-Interaction-ID", EmitDefaultValue=false)]
        public string RootCallInteractionID { get; set; }

        /// <summary>
        /// Gets or Sets SilenceTerminated
        /// </summary>
        [DataMember(Name="Silence-Terminated", EmitDefaultValue=false)]
        public string SilenceTerminated { get; set; }

        /// <summary>
        /// Gets or Sets SwitchHostname
        /// </summary>
        [DataMember(Name="Switch-Hostname", EmitDefaultValue=false)]
        public string SwitchHostname { get; set; }

        /// <summary>
        /// Gets or Sets SwitchNodename
        /// </summary>
        [DataMember(Name="Switch-Nodename", EmitDefaultValue=false)]
        public string SwitchNodename { get; set; }

        /// <summary>
        /// Gets or Sets SwitchURI
        /// </summary>
        [DataMember(Name="Switch-URI", EmitDefaultValue=false)]
        public string SwitchURI { get; set; }

        /// <summary>
        /// Gets or Sets SwitchURL
        /// </summary>
        [DataMember(Name="Switch-URL", EmitDefaultValue=false)]
        public string SwitchURL { get; set; }

        /// <summary>
        /// Gets or Sets TargetCallID
        /// </summary>
        [DataMember(Name="Target-Call-ID", EmitDefaultValue=false)]
        public string TargetCallID { get; set; }

        /// <summary>
        /// Gets or Sets Terminator
        /// </summary>
        [DataMember(Name="Terminator", EmitDefaultValue=false)]
        public string Terminator { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="Timestamp", EmitDefaultValue=false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="To", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// Gets or Sets ToTag
        /// </summary>
        [DataMember(Name="To-Tag", EmitDefaultValue=false)]
        public string ToTag { get; set; }

        /// <summary>
        /// Gets or Sets ToUri
        /// </summary>
        [DataMember(Name="To-Uri", EmitDefaultValue=false)]
        public string ToUri { get; set; }

        /// <summary>
        /// Gets or Sets TransferDisposition
        /// </summary>
        [DataMember(Name="Transfer-Disposition", EmitDefaultValue=false)]
        public string TransferDisposition { get; set; }

        /// <summary>
        /// Gets or Sets TransferHistory
        /// </summary>
        [DataMember(Name="Transfer-History", EmitDefaultValue=false)]
        public string TransferHistory { get; set; }

        /// <summary>
        /// Gets or Sets TransferSource
        /// </summary>
        [DataMember(Name="Transfer-Source", EmitDefaultValue=false)]
        public string TransferSource { get; set; }

        /// <summary>
        /// Gets or Sets TransferTo
        /// </summary>
        [DataMember(Name="Transfer-To", EmitDefaultValue=false)]
        public string TransferTo { get; set; }

        /// <summary>
        /// Gets or Sets TransferType
        /// </summary>
        [DataMember(Name="Transfer-Type", EmitDefaultValue=false)]
        public string TransferType { get; set; }

        /// <summary>
        /// Gets or Sets UserAgent
        /// </summary>
        [DataMember(Name="User-Agent", EmitDefaultValue=false)]
        public string UserAgent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiCallEvent {\n");
            sb.Append("  ApplicationData: ").Append(ApplicationData).Append("\n");
            sb.Append("  ApplicationEvent: ").Append(ApplicationEvent).Append("\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  ApplicationResponse: ").Append(ApplicationResponse).Append("\n");
            sb.Append("  BillingSeconds: ").Append(BillingSeconds).Append("\n");
            sb.Append("  BridgeBUniqueID: ").Append(BridgeBUniqueID).Append("\n");
            sb.Append("  BridgeHangupCause: ").Append(BridgeHangupCause).Append("\n");
            sb.Append("  CallDebug: ").Append(CallDebug).Append("\n");
            sb.Append("  CallDirection: ").Append(CallDirection).Append("\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  CalleeIDName: ").Append(CalleeIDName).Append("\n");
            sb.Append("  CalleeIDNumber: ").Append(CalleeIDNumber).Append("\n");
            sb.Append("  CallerDestinationNumber: ").Append(CallerDestinationNumber).Append("\n");
            sb.Append("  CallerIDName: ").Append(CallerIDName).Append("\n");
            sb.Append("  CallerIDNumber: ").Append(CallerIDNumber).Append("\n");
            sb.Append("  ChannelAnswerState: ").Append(ChannelAnswerState).Append("\n");
            sb.Append("  ChannelCallState: ").Append(ChannelCallState).Append("\n");
            sb.Append("  ChannelCreatedTime: ").Append(ChannelCreatedTime).Append("\n");
            sb.Append("  ChannelDebug: ").Append(ChannelDebug).Append("\n");
            sb.Append("  ChannelIsLoopback: ").Append(ChannelIsLoopback).Append("\n");
            sb.Append("  ChannelLoopbackBowout: ").Append(ChannelLoopbackBowout).Append("\n");
            sb.Append("  ChannelLoopbackBowoutExecute: ").Append(ChannelLoopbackBowoutExecute).Append("\n");
            sb.Append("  ChannelLoopbackLeg: ").Append(ChannelLoopbackLeg).Append("\n");
            sb.Append("  ChannelLoopbackOtherLegID: ").Append(ChannelLoopbackOtherLegID).Append("\n");
            sb.Append("  ChannelMoving: ").Append(ChannelMoving).Append("\n");
            sb.Append("  ChannelName: ").Append(ChannelName).Append("\n");
            sb.Append("  ChannelState: ").Append(ChannelState).Append("\n");
            sb.Append("  ConferenceConfig: ").Append(ConferenceConfig).Append("\n");
            sb.Append("  ConferenceName: ").Append(ConferenceName).Append("\n");
            sb.Append("  ConnectingLegAUUID: ").Append(ConnectingLegAUUID).Append("\n");
            sb.Append("  ConnectingLegBUUID: ").Append(ConnectingLegBUUID).Append("\n");
            sb.Append("  ControlQueue: ").Append(ControlQueue).Append("\n");
            sb.Append("  CustomApplicationVars: ").Append(CustomApplicationVars).Append("\n");
            sb.Append("  CustomChannelVars: ").Append(CustomChannelVars).Append("\n");
            sb.Append("  CustomSIPHeaders: ").Append(CustomSIPHeaders).Append("\n");
            sb.Append("  DTMFDigit: ").Append(DTMFDigit).Append("\n");
            sb.Append("  DTMFDuration: ").Append(DTMFDuration).Append("\n");
            sb.Append("  DetectedTone: ").Append(DetectedTone).Append("\n");
            sb.Append("  DigitsDialed: ").Append(DigitsDialed).Append("\n");
            sb.Append("  Disposition: ").Append(Disposition).Append("\n");
            sb.Append("  DurationSeconds: ").Append(DurationSeconds).Append("\n");
            sb.Append("  EndpointDisposition: ").Append(EndpointDisposition).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  FaxInfo: ").Append(FaxInfo).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  FromTag: ").Append(FromTag).Append("\n");
            sb.Append("  FromUri: ").Append(FromUri).Append("\n");
            sb.Append("  HangupCause: ").Append(HangupCause).Append("\n");
            sb.Append("  HangupCode: ").Append(HangupCode).Append("\n");
            sb.Append("  InteractionID: ").Append(InteractionID).Append("\n");
            sb.Append("  InterceptedBy: ").Append(InterceptedBy).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  LocalSDP: ").Append(LocalSDP).Append("\n");
            sb.Append("  MediaRecordings: ").Append(MediaRecordings).Append("\n");
            sb.Append("  MediaServer: ").Append(MediaServer).Append("\n");
            sb.Append("  OriginationCallID: ").Append(OriginationCallID).Append("\n");
            sb.Append("  OtherLegCallID: ").Append(OtherLegCallID).Append("\n");
            sb.Append("  OtherLegCallerIDName: ").Append(OtherLegCallerIDName).Append("\n");
            sb.Append("  OtherLegCallerIDNumber: ").Append(OtherLegCallerIDNumber).Append("\n");
            sb.Append("  OtherLegDestinationNumber: ").Append(OtherLegDestinationNumber).Append("\n");
            sb.Append("  OtherLegDirection: ").Append(OtherLegDirection).Append("\n");
            sb.Append("  ParkingSlot: ").Append(ParkingSlot).Append("\n");
            sb.Append("  PresenceID: ").Append(PresenceID).Append("\n");
            sb.Append("  RawApplicationData: ").Append(RawApplicationData).Append("\n");
            sb.Append("  RawApplicationName: ").Append(RawApplicationName).Append("\n");
            sb.Append("  Recording: ").Append(Recording).Append("\n");
            sb.Append("  RemoteSDP: ").Append(RemoteSDP).Append("\n");
            sb.Append("  ReplacedBy: ").Append(ReplacedBy).Append("\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("  ResigningPeerUUID: ").Append(ResigningPeerUUID).Append("\n");
            sb.Append("  ResigningUUID: ").Append(ResigningUUID).Append("\n");
            sb.Append("  RingingSeconds: ").Append(RingingSeconds).Append("\n");
            sb.Append("  RootCallInteractionID: ").Append(RootCallInteractionID).Append("\n");
            sb.Append("  SilenceTerminated: ").Append(SilenceTerminated).Append("\n");
            sb.Append("  SwitchHostname: ").Append(SwitchHostname).Append("\n");
            sb.Append("  SwitchNodename: ").Append(SwitchNodename).Append("\n");
            sb.Append("  SwitchURI: ").Append(SwitchURI).Append("\n");
            sb.Append("  SwitchURL: ").Append(SwitchURL).Append("\n");
            sb.Append("  TargetCallID: ").Append(TargetCallID).Append("\n");
            sb.Append("  Terminator: ").Append(Terminator).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  ToTag: ").Append(ToTag).Append("\n");
            sb.Append("  ToUri: ").Append(ToUri).Append("\n");
            sb.Append("  TransferDisposition: ").Append(TransferDisposition).Append("\n");
            sb.Append("  TransferHistory: ").Append(TransferHistory).Append("\n");
            sb.Append("  TransferSource: ").Append(TransferSource).Append("\n");
            sb.Append("  TransferTo: ").Append(TransferTo).Append("\n");
            sb.Append("  TransferType: ").Append(TransferType).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiCallEvent);
        }

        /// <summary>
        /// Returns true if KapiCallEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiCallEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiCallEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationData == input.ApplicationData ||
                    (this.ApplicationData != null &&
                    this.ApplicationData.Equals(input.ApplicationData))
                ) && 
                (
                    this.ApplicationEvent == input.ApplicationEvent ||
                    (this.ApplicationEvent != null &&
                    this.ApplicationEvent.Equals(input.ApplicationEvent))
                ) && 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.ApplicationResponse == input.ApplicationResponse ||
                    (this.ApplicationResponse != null &&
                    this.ApplicationResponse.Equals(input.ApplicationResponse))
                ) && 
                (
                    this.BillingSeconds == input.BillingSeconds ||
                    (this.BillingSeconds != null &&
                    this.BillingSeconds.Equals(input.BillingSeconds))
                ) && 
                (
                    this.BridgeBUniqueID == input.BridgeBUniqueID ||
                    (this.BridgeBUniqueID != null &&
                    this.BridgeBUniqueID.Equals(input.BridgeBUniqueID))
                ) && 
                (
                    this.BridgeHangupCause == input.BridgeHangupCause ||
                    (this.BridgeHangupCause != null &&
                    this.BridgeHangupCause.Equals(input.BridgeHangupCause))
                ) && 
                (
                    this.CallDebug == input.CallDebug ||
                    (this.CallDebug != null &&
                    this.CallDebug.Equals(input.CallDebug))
                ) && 
                (
                    this.CallDirection == input.CallDirection ||
                    (this.CallDirection != null &&
                    this.CallDirection.Equals(input.CallDirection))
                ) && 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.CalleeIDName == input.CalleeIDName ||
                    (this.CalleeIDName != null &&
                    this.CalleeIDName.Equals(input.CalleeIDName))
                ) && 
                (
                    this.CalleeIDNumber == input.CalleeIDNumber ||
                    (this.CalleeIDNumber != null &&
                    this.CalleeIDNumber.Equals(input.CalleeIDNumber))
                ) && 
                (
                    this.CallerDestinationNumber == input.CallerDestinationNumber ||
                    (this.CallerDestinationNumber != null &&
                    this.CallerDestinationNumber.Equals(input.CallerDestinationNumber))
                ) && 
                (
                    this.CallerIDName == input.CallerIDName ||
                    (this.CallerIDName != null &&
                    this.CallerIDName.Equals(input.CallerIDName))
                ) && 
                (
                    this.CallerIDNumber == input.CallerIDNumber ||
                    (this.CallerIDNumber != null &&
                    this.CallerIDNumber.Equals(input.CallerIDNumber))
                ) && 
                (
                    this.ChannelAnswerState == input.ChannelAnswerState ||
                    (this.ChannelAnswerState != null &&
                    this.ChannelAnswerState.Equals(input.ChannelAnswerState))
                ) && 
                (
                    this.ChannelCallState == input.ChannelCallState ||
                    (this.ChannelCallState != null &&
                    this.ChannelCallState.Equals(input.ChannelCallState))
                ) && 
                (
                    this.ChannelCreatedTime == input.ChannelCreatedTime ||
                    (this.ChannelCreatedTime != null &&
                    this.ChannelCreatedTime.Equals(input.ChannelCreatedTime))
                ) && 
                (
                    this.ChannelDebug == input.ChannelDebug ||
                    (this.ChannelDebug != null &&
                    this.ChannelDebug.Equals(input.ChannelDebug))
                ) && 
                (
                    this.ChannelIsLoopback == input.ChannelIsLoopback ||
                    (this.ChannelIsLoopback != null &&
                    this.ChannelIsLoopback.Equals(input.ChannelIsLoopback))
                ) && 
                (
                    this.ChannelLoopbackBowout == input.ChannelLoopbackBowout ||
                    (this.ChannelLoopbackBowout != null &&
                    this.ChannelLoopbackBowout.Equals(input.ChannelLoopbackBowout))
                ) && 
                (
                    this.ChannelLoopbackBowoutExecute == input.ChannelLoopbackBowoutExecute ||
                    (this.ChannelLoopbackBowoutExecute != null &&
                    this.ChannelLoopbackBowoutExecute.Equals(input.ChannelLoopbackBowoutExecute))
                ) && 
                (
                    this.ChannelLoopbackLeg == input.ChannelLoopbackLeg ||
                    (this.ChannelLoopbackLeg != null &&
                    this.ChannelLoopbackLeg.Equals(input.ChannelLoopbackLeg))
                ) && 
                (
                    this.ChannelLoopbackOtherLegID == input.ChannelLoopbackOtherLegID ||
                    (this.ChannelLoopbackOtherLegID != null &&
                    this.ChannelLoopbackOtherLegID.Equals(input.ChannelLoopbackOtherLegID))
                ) && 
                (
                    this.ChannelMoving == input.ChannelMoving ||
                    (this.ChannelMoving != null &&
                    this.ChannelMoving.Equals(input.ChannelMoving))
                ) && 
                (
                    this.ChannelName == input.ChannelName ||
                    (this.ChannelName != null &&
                    this.ChannelName.Equals(input.ChannelName))
                ) && 
                (
                    this.ChannelState == input.ChannelState ||
                    (this.ChannelState != null &&
                    this.ChannelState.Equals(input.ChannelState))
                ) && 
                (
                    this.ConferenceConfig == input.ConferenceConfig ||
                    (this.ConferenceConfig != null &&
                    this.ConferenceConfig.Equals(input.ConferenceConfig))
                ) && 
                (
                    this.ConferenceName == input.ConferenceName ||
                    (this.ConferenceName != null &&
                    this.ConferenceName.Equals(input.ConferenceName))
                ) && 
                (
                    this.ConnectingLegAUUID == input.ConnectingLegAUUID ||
                    (this.ConnectingLegAUUID != null &&
                    this.ConnectingLegAUUID.Equals(input.ConnectingLegAUUID))
                ) && 
                (
                    this.ConnectingLegBUUID == input.ConnectingLegBUUID ||
                    (this.ConnectingLegBUUID != null &&
                    this.ConnectingLegBUUID.Equals(input.ConnectingLegBUUID))
                ) && 
                (
                    this.ControlQueue == input.ControlQueue ||
                    (this.ControlQueue != null &&
                    this.ControlQueue.Equals(input.ControlQueue))
                ) && 
                (
                    this.CustomApplicationVars == input.CustomApplicationVars ||
                    (this.CustomApplicationVars != null &&
                    this.CustomApplicationVars.Equals(input.CustomApplicationVars))
                ) && 
                (
                    this.CustomChannelVars == input.CustomChannelVars ||
                    (this.CustomChannelVars != null &&
                    this.CustomChannelVars.Equals(input.CustomChannelVars))
                ) && 
                (
                    this.CustomSIPHeaders == input.CustomSIPHeaders ||
                    (this.CustomSIPHeaders != null &&
                    this.CustomSIPHeaders.Equals(input.CustomSIPHeaders))
                ) && 
                (
                    this.DTMFDigit == input.DTMFDigit ||
                    (this.DTMFDigit != null &&
                    this.DTMFDigit.Equals(input.DTMFDigit))
                ) && 
                (
                    this.DTMFDuration == input.DTMFDuration ||
                    (this.DTMFDuration != null &&
                    this.DTMFDuration.Equals(input.DTMFDuration))
                ) && 
                (
                    this.DetectedTone == input.DetectedTone ||
                    (this.DetectedTone != null &&
                    this.DetectedTone.Equals(input.DetectedTone))
                ) && 
                (
                    this.DigitsDialed == input.DigitsDialed ||
                    (this.DigitsDialed != null &&
                    this.DigitsDialed.Equals(input.DigitsDialed))
                ) && 
                (
                    this.Disposition == input.Disposition ||
                    (this.Disposition != null &&
                    this.Disposition.Equals(input.Disposition))
                ) && 
                (
                    this.DurationSeconds == input.DurationSeconds ||
                    (this.DurationSeconds != null &&
                    this.DurationSeconds.Equals(input.DurationSeconds))
                ) && 
                (
                    this.EndpointDisposition == input.EndpointDisposition ||
                    (this.EndpointDisposition != null &&
                    this.EndpointDisposition.Equals(input.EndpointDisposition))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.FaxInfo == input.FaxInfo ||
                    (this.FaxInfo != null &&
                    this.FaxInfo.Equals(input.FaxInfo))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.FromTag == input.FromTag ||
                    (this.FromTag != null &&
                    this.FromTag.Equals(input.FromTag))
                ) && 
                (
                    this.FromUri == input.FromUri ||
                    (this.FromUri != null &&
                    this.FromUri.Equals(input.FromUri))
                ) && 
                (
                    this.HangupCause == input.HangupCause ||
                    (this.HangupCause != null &&
                    this.HangupCause.Equals(input.HangupCause))
                ) && 
                (
                    this.HangupCode == input.HangupCode ||
                    (this.HangupCode != null &&
                    this.HangupCode.Equals(input.HangupCode))
                ) && 
                (
                    this.InteractionID == input.InteractionID ||
                    (this.InteractionID != null &&
                    this.InteractionID.Equals(input.InteractionID))
                ) && 
                (
                    this.InterceptedBy == input.InterceptedBy ||
                    (this.InterceptedBy != null &&
                    this.InterceptedBy.Equals(input.InterceptedBy))
                ) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                ) && 
                (
                    this.LocalSDP == input.LocalSDP ||
                    (this.LocalSDP != null &&
                    this.LocalSDP.Equals(input.LocalSDP))
                ) && 
                (
                    this.MediaRecordings == input.MediaRecordings ||
                    (this.MediaRecordings != null &&
                    this.MediaRecordings.Equals(input.MediaRecordings))
                ) && 
                (
                    this.MediaServer == input.MediaServer ||
                    (this.MediaServer != null &&
                    this.MediaServer.Equals(input.MediaServer))
                ) && 
                (
                    this.OriginationCallID == input.OriginationCallID ||
                    (this.OriginationCallID != null &&
                    this.OriginationCallID.Equals(input.OriginationCallID))
                ) && 
                (
                    this.OtherLegCallID == input.OtherLegCallID ||
                    (this.OtherLegCallID != null &&
                    this.OtherLegCallID.Equals(input.OtherLegCallID))
                ) && 
                (
                    this.OtherLegCallerIDName == input.OtherLegCallerIDName ||
                    (this.OtherLegCallerIDName != null &&
                    this.OtherLegCallerIDName.Equals(input.OtherLegCallerIDName))
                ) && 
                (
                    this.OtherLegCallerIDNumber == input.OtherLegCallerIDNumber ||
                    (this.OtherLegCallerIDNumber != null &&
                    this.OtherLegCallerIDNumber.Equals(input.OtherLegCallerIDNumber))
                ) && 
                (
                    this.OtherLegDestinationNumber == input.OtherLegDestinationNumber ||
                    (this.OtherLegDestinationNumber != null &&
                    this.OtherLegDestinationNumber.Equals(input.OtherLegDestinationNumber))
                ) && 
                (
                    this.OtherLegDirection == input.OtherLegDirection ||
                    (this.OtherLegDirection != null &&
                    this.OtherLegDirection.Equals(input.OtherLegDirection))
                ) && 
                (
                    this.ParkingSlot == input.ParkingSlot ||
                    (this.ParkingSlot != null &&
                    this.ParkingSlot.Equals(input.ParkingSlot))
                ) && 
                (
                    this.PresenceID == input.PresenceID ||
                    (this.PresenceID != null &&
                    this.PresenceID.Equals(input.PresenceID))
                ) && 
                (
                    this.RawApplicationData == input.RawApplicationData ||
                    (this.RawApplicationData != null &&
                    this.RawApplicationData.Equals(input.RawApplicationData))
                ) && 
                (
                    this.RawApplicationName == input.RawApplicationName ||
                    (this.RawApplicationName != null &&
                    this.RawApplicationName.Equals(input.RawApplicationName))
                ) && 
                (
                    this.Recording == input.Recording ||
                    (this.Recording != null &&
                    this.Recording.Equals(input.Recording))
                ) && 
                (
                    this.RemoteSDP == input.RemoteSDP ||
                    (this.RemoteSDP != null &&
                    this.RemoteSDP.Equals(input.RemoteSDP))
                ) && 
                (
                    this.ReplacedBy == input.ReplacedBy ||
                    (this.ReplacedBy != null &&
                    this.ReplacedBy.Equals(input.ReplacedBy))
                ) && 
                (
                    this.Request == input.Request ||
                    (this.Request != null &&
                    this.Request.Equals(input.Request))
                ) && 
                (
                    this.ResigningPeerUUID == input.ResigningPeerUUID ||
                    (this.ResigningPeerUUID != null &&
                    this.ResigningPeerUUID.Equals(input.ResigningPeerUUID))
                ) && 
                (
                    this.ResigningUUID == input.ResigningUUID ||
                    (this.ResigningUUID != null &&
                    this.ResigningUUID.Equals(input.ResigningUUID))
                ) && 
                (
                    this.RingingSeconds == input.RingingSeconds ||
                    (this.RingingSeconds != null &&
                    this.RingingSeconds.Equals(input.RingingSeconds))
                ) && 
                (
                    this.RootCallInteractionID == input.RootCallInteractionID ||
                    (this.RootCallInteractionID != null &&
                    this.RootCallInteractionID.Equals(input.RootCallInteractionID))
                ) && 
                (
                    this.SilenceTerminated == input.SilenceTerminated ||
                    (this.SilenceTerminated != null &&
                    this.SilenceTerminated.Equals(input.SilenceTerminated))
                ) && 
                (
                    this.SwitchHostname == input.SwitchHostname ||
                    (this.SwitchHostname != null &&
                    this.SwitchHostname.Equals(input.SwitchHostname))
                ) && 
                (
                    this.SwitchNodename == input.SwitchNodename ||
                    (this.SwitchNodename != null &&
                    this.SwitchNodename.Equals(input.SwitchNodename))
                ) && 
                (
                    this.SwitchURI == input.SwitchURI ||
                    (this.SwitchURI != null &&
                    this.SwitchURI.Equals(input.SwitchURI))
                ) && 
                (
                    this.SwitchURL == input.SwitchURL ||
                    (this.SwitchURL != null &&
                    this.SwitchURL.Equals(input.SwitchURL))
                ) && 
                (
                    this.TargetCallID == input.TargetCallID ||
                    (this.TargetCallID != null &&
                    this.TargetCallID.Equals(input.TargetCallID))
                ) && 
                (
                    this.Terminator == input.Terminator ||
                    (this.Terminator != null &&
                    this.Terminator.Equals(input.Terminator))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.ToTag == input.ToTag ||
                    (this.ToTag != null &&
                    this.ToTag.Equals(input.ToTag))
                ) && 
                (
                    this.ToUri == input.ToUri ||
                    (this.ToUri != null &&
                    this.ToUri.Equals(input.ToUri))
                ) && 
                (
                    this.TransferDisposition == input.TransferDisposition ||
                    (this.TransferDisposition != null &&
                    this.TransferDisposition.Equals(input.TransferDisposition))
                ) && 
                (
                    this.TransferHistory == input.TransferHistory ||
                    (this.TransferHistory != null &&
                    this.TransferHistory.Equals(input.TransferHistory))
                ) && 
                (
                    this.TransferSource == input.TransferSource ||
                    (this.TransferSource != null &&
                    this.TransferSource.Equals(input.TransferSource))
                ) && 
                (
                    this.TransferTo == input.TransferTo ||
                    (this.TransferTo != null &&
                    this.TransferTo.Equals(input.TransferTo))
                ) && 
                (
                    this.TransferType == input.TransferType ||
                    (this.TransferType != null &&
                    this.TransferType.Equals(input.TransferType))
                ) && 
                (
                    this.UserAgent == input.UserAgent ||
                    (this.UserAgent != null &&
                    this.UserAgent.Equals(input.UserAgent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationData != null)
                    hashCode = hashCode * 59 + this.ApplicationData.GetHashCode();
                if (this.ApplicationEvent != null)
                    hashCode = hashCode * 59 + this.ApplicationEvent.GetHashCode();
                if (this.ApplicationName != null)
                    hashCode = hashCode * 59 + this.ApplicationName.GetHashCode();
                if (this.ApplicationResponse != null)
                    hashCode = hashCode * 59 + this.ApplicationResponse.GetHashCode();
                if (this.BillingSeconds != null)
                    hashCode = hashCode * 59 + this.BillingSeconds.GetHashCode();
                if (this.BridgeBUniqueID != null)
                    hashCode = hashCode * 59 + this.BridgeBUniqueID.GetHashCode();
                if (this.BridgeHangupCause != null)
                    hashCode = hashCode * 59 + this.BridgeHangupCause.GetHashCode();
                if (this.CallDebug != null)
                    hashCode = hashCode * 59 + this.CallDebug.GetHashCode();
                if (this.CallDirection != null)
                    hashCode = hashCode * 59 + this.CallDirection.GetHashCode();
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.CalleeIDName != null)
                    hashCode = hashCode * 59 + this.CalleeIDName.GetHashCode();
                if (this.CalleeIDNumber != null)
                    hashCode = hashCode * 59 + this.CalleeIDNumber.GetHashCode();
                if (this.CallerDestinationNumber != null)
                    hashCode = hashCode * 59 + this.CallerDestinationNumber.GetHashCode();
                if (this.CallerIDName != null)
                    hashCode = hashCode * 59 + this.CallerIDName.GetHashCode();
                if (this.CallerIDNumber != null)
                    hashCode = hashCode * 59 + this.CallerIDNumber.GetHashCode();
                if (this.ChannelAnswerState != null)
                    hashCode = hashCode * 59 + this.ChannelAnswerState.GetHashCode();
                if (this.ChannelCallState != null)
                    hashCode = hashCode * 59 + this.ChannelCallState.GetHashCode();
                if (this.ChannelCreatedTime != null)
                    hashCode = hashCode * 59 + this.ChannelCreatedTime.GetHashCode();
                if (this.ChannelDebug != null)
                    hashCode = hashCode * 59 + this.ChannelDebug.GetHashCode();
                if (this.ChannelIsLoopback != null)
                    hashCode = hashCode * 59 + this.ChannelIsLoopback.GetHashCode();
                if (this.ChannelLoopbackBowout != null)
                    hashCode = hashCode * 59 + this.ChannelLoopbackBowout.GetHashCode();
                if (this.ChannelLoopbackBowoutExecute != null)
                    hashCode = hashCode * 59 + this.ChannelLoopbackBowoutExecute.GetHashCode();
                if (this.ChannelLoopbackLeg != null)
                    hashCode = hashCode * 59 + this.ChannelLoopbackLeg.GetHashCode();
                if (this.ChannelLoopbackOtherLegID != null)
                    hashCode = hashCode * 59 + this.ChannelLoopbackOtherLegID.GetHashCode();
                if (this.ChannelMoving != null)
                    hashCode = hashCode * 59 + this.ChannelMoving.GetHashCode();
                if (this.ChannelName != null)
                    hashCode = hashCode * 59 + this.ChannelName.GetHashCode();
                if (this.ChannelState != null)
                    hashCode = hashCode * 59 + this.ChannelState.GetHashCode();
                if (this.ConferenceConfig != null)
                    hashCode = hashCode * 59 + this.ConferenceConfig.GetHashCode();
                if (this.ConferenceName != null)
                    hashCode = hashCode * 59 + this.ConferenceName.GetHashCode();
                if (this.ConnectingLegAUUID != null)
                    hashCode = hashCode * 59 + this.ConnectingLegAUUID.GetHashCode();
                if (this.ConnectingLegBUUID != null)
                    hashCode = hashCode * 59 + this.ConnectingLegBUUID.GetHashCode();
                if (this.ControlQueue != null)
                    hashCode = hashCode * 59 + this.ControlQueue.GetHashCode();
                if (this.CustomApplicationVars != null)
                    hashCode = hashCode * 59 + this.CustomApplicationVars.GetHashCode();
                if (this.CustomChannelVars != null)
                    hashCode = hashCode * 59 + this.CustomChannelVars.GetHashCode();
                if (this.CustomSIPHeaders != null)
                    hashCode = hashCode * 59 + this.CustomSIPHeaders.GetHashCode();
                if (this.DTMFDigit != null)
                    hashCode = hashCode * 59 + this.DTMFDigit.GetHashCode();
                if (this.DTMFDuration != null)
                    hashCode = hashCode * 59 + this.DTMFDuration.GetHashCode();
                if (this.DetectedTone != null)
                    hashCode = hashCode * 59 + this.DetectedTone.GetHashCode();
                if (this.DigitsDialed != null)
                    hashCode = hashCode * 59 + this.DigitsDialed.GetHashCode();
                if (this.Disposition != null)
                    hashCode = hashCode * 59 + this.Disposition.GetHashCode();
                if (this.DurationSeconds != null)
                    hashCode = hashCode * 59 + this.DurationSeconds.GetHashCode();
                if (this.EndpointDisposition != null)
                    hashCode = hashCode * 59 + this.EndpointDisposition.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.FaxInfo != null)
                    hashCode = hashCode * 59 + this.FaxInfo.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.FromTag != null)
                    hashCode = hashCode * 59 + this.FromTag.GetHashCode();
                if (this.FromUri != null)
                    hashCode = hashCode * 59 + this.FromUri.GetHashCode();
                if (this.HangupCause != null)
                    hashCode = hashCode * 59 + this.HangupCause.GetHashCode();
                if (this.HangupCode != null)
                    hashCode = hashCode * 59 + this.HangupCode.GetHashCode();
                if (this.InteractionID != null)
                    hashCode = hashCode * 59 + this.InteractionID.GetHashCode();
                if (this.InterceptedBy != null)
                    hashCode = hashCode * 59 + this.InterceptedBy.GetHashCode();
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.LocalSDP != null)
                    hashCode = hashCode * 59 + this.LocalSDP.GetHashCode();
                if (this.MediaRecordings != null)
                    hashCode = hashCode * 59 + this.MediaRecordings.GetHashCode();
                if (this.MediaServer != null)
                    hashCode = hashCode * 59 + this.MediaServer.GetHashCode();
                if (this.OriginationCallID != null)
                    hashCode = hashCode * 59 + this.OriginationCallID.GetHashCode();
                if (this.OtherLegCallID != null)
                    hashCode = hashCode * 59 + this.OtherLegCallID.GetHashCode();
                if (this.OtherLegCallerIDName != null)
                    hashCode = hashCode * 59 + this.OtherLegCallerIDName.GetHashCode();
                if (this.OtherLegCallerIDNumber != null)
                    hashCode = hashCode * 59 + this.OtherLegCallerIDNumber.GetHashCode();
                if (this.OtherLegDestinationNumber != null)
                    hashCode = hashCode * 59 + this.OtherLegDestinationNumber.GetHashCode();
                if (this.OtherLegDirection != null)
                    hashCode = hashCode * 59 + this.OtherLegDirection.GetHashCode();
                if (this.ParkingSlot != null)
                    hashCode = hashCode * 59 + this.ParkingSlot.GetHashCode();
                if (this.PresenceID != null)
                    hashCode = hashCode * 59 + this.PresenceID.GetHashCode();
                if (this.RawApplicationData != null)
                    hashCode = hashCode * 59 + this.RawApplicationData.GetHashCode();
                if (this.RawApplicationName != null)
                    hashCode = hashCode * 59 + this.RawApplicationName.GetHashCode();
                if (this.Recording != null)
                    hashCode = hashCode * 59 + this.Recording.GetHashCode();
                if (this.RemoteSDP != null)
                    hashCode = hashCode * 59 + this.RemoteSDP.GetHashCode();
                if (this.ReplacedBy != null)
                    hashCode = hashCode * 59 + this.ReplacedBy.GetHashCode();
                if (this.Request != null)
                    hashCode = hashCode * 59 + this.Request.GetHashCode();
                if (this.ResigningPeerUUID != null)
                    hashCode = hashCode * 59 + this.ResigningPeerUUID.GetHashCode();
                if (this.ResigningUUID != null)
                    hashCode = hashCode * 59 + this.ResigningUUID.GetHashCode();
                if (this.RingingSeconds != null)
                    hashCode = hashCode * 59 + this.RingingSeconds.GetHashCode();
                if (this.RootCallInteractionID != null)
                    hashCode = hashCode * 59 + this.RootCallInteractionID.GetHashCode();
                if (this.SilenceTerminated != null)
                    hashCode = hashCode * 59 + this.SilenceTerminated.GetHashCode();
                if (this.SwitchHostname != null)
                    hashCode = hashCode * 59 + this.SwitchHostname.GetHashCode();
                if (this.SwitchNodename != null)
                    hashCode = hashCode * 59 + this.SwitchNodename.GetHashCode();
                if (this.SwitchURI != null)
                    hashCode = hashCode * 59 + this.SwitchURI.GetHashCode();
                if (this.SwitchURL != null)
                    hashCode = hashCode * 59 + this.SwitchURL.GetHashCode();
                if (this.TargetCallID != null)
                    hashCode = hashCode * 59 + this.TargetCallID.GetHashCode();
                if (this.Terminator != null)
                    hashCode = hashCode * 59 + this.Terminator.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.ToTag != null)
                    hashCode = hashCode * 59 + this.ToTag.GetHashCode();
                if (this.ToUri != null)
                    hashCode = hashCode * 59 + this.ToUri.GetHashCode();
                if (this.TransferDisposition != null)
                    hashCode = hashCode * 59 + this.TransferDisposition.GetHashCode();
                if (this.TransferHistory != null)
                    hashCode = hashCode * 59 + this.TransferHistory.GetHashCode();
                if (this.TransferSource != null)
                    hashCode = hashCode * 59 + this.TransferSource.GetHashCode();
                if (this.TransferTo != null)
                    hashCode = hashCode * 59 + this.TransferTo.GetHashCode();
                if (this.TransferType != null)
                    hashCode = hashCode * 59 + this.TransferType.GetHashCode();
                if (this.UserAgent != null)
                    hashCode = hashCode * 59 + this.UserAgent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
