/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Encryption Parameters
    /// </summary>
    [DataContract]
    public partial class EndpointMediaEncryption :  IEquatable<EndpointMediaEncryption>, IValidatableObject
    {
        /// <summary>
        /// Defines Methods
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodsEnum
        {
            
            /// <summary>
            /// Enum Zrtp for value: zrtp
            /// </summary>
            [EnumMember(Value = "zrtp")]
            Zrtp = 1,
            
            /// <summary>
            /// Enum Srtp for value: srtp
            /// </summary>
            [EnumMember(Value = "srtp")]
            Srtp = 2
        }


        /// <summary>
        /// Supported Encryption Types
        /// </summary>
        /// <value>Supported Encryption Types</value>
        [DataMember(Name="methods", EmitDefaultValue=false)]
        public List<MethodsEnum> Methods { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EndpointMediaEncryption" /> class.
        /// </summary>
        /// <param name="enforceSecurity">Is Encryption Enabled? (default to false).</param>
        /// <param name="methods">Supported Encryption Types.</param>
        public EndpointMediaEncryption(bool? enforceSecurity = false, List<MethodsEnum> methods = default(List<MethodsEnum>))
        {
            // use default value if no "enforceSecurity" provided
            if (enforceSecurity == null)
            {
                this.EnforceSecurity = false;
            }
            else
            {
                this.EnforceSecurity = enforceSecurity;
            }
            this.Methods = methods;
        }
        
        /// <summary>
        /// Is Encryption Enabled?
        /// </summary>
        /// <value>Is Encryption Enabled?</value>
        [DataMember(Name="enforce_security", EmitDefaultValue=false)]
        public bool? EnforceSecurity { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EndpointMediaEncryption {\n");
            sb.Append("  EnforceSecurity: ").Append(EnforceSecurity).Append("\n");
            sb.Append("  Methods: ").Append(Methods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EndpointMediaEncryption);
        }

        /// <summary>
        /// Returns true if EndpointMediaEncryption instances are equal
        /// </summary>
        /// <param name="input">Instance of EndpointMediaEncryption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EndpointMediaEncryption input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EnforceSecurity == input.EnforceSecurity ||
                    (this.EnforceSecurity != null &&
                    this.EnforceSecurity.Equals(input.EnforceSecurity))
                ) && 
                (
                    this.Methods == input.Methods ||
                    this.Methods != null &&
                    this.Methods.SequenceEqual(input.Methods)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnforceSecurity != null)
                    hashCode = hashCode * 59 + this.EnforceSecurity.GetHashCode();
                if (this.Methods != null)
                    hashCode = hashCode * 59 + this.Methods.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
