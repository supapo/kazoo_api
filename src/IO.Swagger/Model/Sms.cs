/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// sms document
    /// </summary>
    [DataContract]
    public partial class Sms :  IEquatable<Sms>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Sms" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Sms() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Sms" /> class.
        /// </summary>
        /// <param name="body">text message (required).</param>
        /// <param name="from">caller-id-number, taken from user if absent.</param>
        /// <param name="scheduled">The timestamp to start delivering the message.</param>
        /// <param name="to">callee-id-number (required).</param>
        public Sms(string body = default(string), string from = default(string), int? scheduled = default(int?), string to = default(string))
        {
            // to ensure "body" is required (not null)
            if (body == null)
            {
                throw new InvalidDataException("body is a required property for Sms and cannot be null");
            }
            else
            {
                this.Body = body;
            }
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new InvalidDataException("to is a required property for Sms and cannot be null");
            }
            else
            {
                this.To = to;
            }
            this.From = from;
            this.Scheduled = scheduled;
        }
        
        /// <summary>
        /// text message
        /// </summary>
        /// <value>text message</value>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// caller-id-number, taken from user if absent
        /// </summary>
        /// <value>caller-id-number, taken from user if absent</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// The timestamp to start delivering the message
        /// </summary>
        /// <value>The timestamp to start delivering the message</value>
        [DataMember(Name="scheduled", EmitDefaultValue=false)]
        public int? Scheduled { get; set; }

        /// <summary>
        /// callee-id-number
        /// </summary>
        /// <value>callee-id-number</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Sms {\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Scheduled: ").Append(Scheduled).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Sms);
        }

        /// <summary>
        /// Returns true if Sms instances are equal
        /// </summary>
        /// <param name="input">Instance of Sms to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Sms input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.Scheduled == input.Scheduled ||
                    (this.Scheduled != null &&
                    this.Scheduled.Equals(input.Scheduled))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.Scheduled != null)
                    hashCode = hashCode * 59 + this.Scheduled.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Body (string) maxLength
            if(this.Body != null && this.Body.Length > 700)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Body, length must be less than 700.", new [] { "Body" });
            }

            // Body (string) minLength
            if(this.Body != null && this.Body.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Body, length must be greater than 1.", new [] { "Body" });
            }

            yield break;
        }
    }

}
