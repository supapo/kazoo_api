/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for resource.originate_req
    /// </summary>
    [DataContract]
    public partial class KapiResourceOriginateReq :  IEquatable<KapiResourceOriginateReq>, IValidatableObject
    {
        /// <summary>
        /// Defines ApplicationName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApplicationNameEnum
        {
            
            /// <summary>
            /// Enum Park for value: park
            /// </summary>
            [EnumMember(Value = "park")]
            Park = 1,
            
            /// <summary>
            /// Enum Bridge for value: bridge
            /// </summary>
            [EnumMember(Value = "bridge")]
            Bridge = 2,
            
            /// <summary>
            /// Enum Transfer for value: transfer
            /// </summary>
            [EnumMember(Value = "transfer")]
            Transfer = 3,
            
            /// <summary>
            /// Enum Fax for value: fax
            /// </summary>
            [EnumMember(Value = "fax")]
            Fax = 4,
            
            /// <summary>
            /// Enum Eavesdrop for value: eavesdrop
            /// </summary>
            [EnumMember(Value = "eavesdrop")]
            Eavesdrop = 5
        }

        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name="Application-Name", EmitDefaultValue=false)]
        public ApplicationNameEnum ApplicationName { get; set; }
        /// <summary>
        /// Defines DialEndpointMethod
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DialEndpointMethodEnum
        {
            
            /// <summary>
            /// Enum Single for value: single
            /// </summary>
            [EnumMember(Value = "single")]
            Single = 1,
            
            /// <summary>
            /// Enum Simultaneous for value: simultaneous
            /// </summary>
            [EnumMember(Value = "simultaneous")]
            Simultaneous = 2
        }

        /// <summary>
        /// Gets or Sets DialEndpointMethod
        /// </summary>
        [DataMember(Name="Dial-Endpoint-Method", EmitDefaultValue=false)]
        public DialEndpointMethodEnum? DialEndpointMethod { get; set; }
        /// <summary>
        /// Defines EavesdropMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EavesdropModeEnum
        {
            
            /// <summary>
            /// Enum Listen for value: listen
            /// </summary>
            [EnumMember(Value = "listen")]
            Listen = 1,
            
            /// <summary>
            /// Enum Whisper for value: whisper
            /// </summary>
            [EnumMember(Value = "whisper")]
            Whisper = 2,
            
            /// <summary>
            /// Enum Full for value: full
            /// </summary>
            [EnumMember(Value = "full")]
            Full = 3
        }

        /// <summary>
        /// Gets or Sets EavesdropMode
        /// </summary>
        [DataMember(Name="Eavesdrop-Mode", EmitDefaultValue=false)]
        public EavesdropModeEnum? EavesdropMode { get; set; }
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Resource for value: resource
            /// </summary>
            [EnumMember(Value = "resource")]
            Resource = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Originatereq for value: originate_req
            /// </summary>
            [EnumMember(Value = "originate_req")]
            Originatereq = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Defines Media
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MediaEnum
        {
            
            /// <summary>
            /// Enum Process for value: process
            /// </summary>
            [EnumMember(Value = "process")]
            Process = 1,
            
            /// <summary>
            /// Enum Bypass for value: bypass
            /// </summary>
            [EnumMember(Value = "bypass")]
            Bypass = 2,
            
            /// <summary>
            /// Enum Auto for value: auto
            /// </summary>
            [EnumMember(Value = "auto")]
            Auto = 3
        }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name="Media", EmitDefaultValue=false)]
        public MediaEnum? Media { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiResourceOriginateReq" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiResourceOriginateReq() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiResourceOriginateReq" /> class.
        /// </summary>
        /// <param name="applicationData">applicationData.</param>
        /// <param name="applicationName">applicationName (required).</param>
        /// <param name="assertedIdentityName">assertedIdentityName.</param>
        /// <param name="assertedIdentityNumber">assertedIdentityNumber.</param>
        /// <param name="assertedIdentityRealm">assertedIdentityRealm.</param>
        /// <param name="bLegEvents">bLegEvents.</param>
        /// <param name="bridgeActions">bridgeActions.</param>
        /// <param name="callRestrictionsEnabled">callRestrictionsEnabled.</param>
        /// <param name="calleeIDName">calleeIDName.</param>
        /// <param name="calleeIDNumber">calleeIDNumber.</param>
        /// <param name="callerIDName">callerIDName.</param>
        /// <param name="callerIDNumber">callerIDNumber.</param>
        /// <param name="confirmCancelTimeout">confirmCancelTimeout.</param>
        /// <param name="confirmFile">confirmFile.</param>
        /// <param name="confirmKey">confirmKey.</param>
        /// <param name="continueAfter">continueAfter.</param>
        /// <param name="continueOnFail">continueOnFail.</param>
        /// <param name="customApplicationVars">customApplicationVars.</param>
        /// <param name="customChannelVars">customChannelVars.</param>
        /// <param name="customSIPHeaders">customSIPHeaders.</param>
        /// <param name="dialEndpointMethod">dialEndpointMethod.</param>
        /// <param name="eavesdropCallID">eavesdropCallID.</param>
        /// <param name="eavesdropGroupID">eavesdropGroupID.</param>
        /// <param name="eavesdropMode">eavesdropMode.</param>
        /// <param name="enableT38Fax">enableT38Fax.</param>
        /// <param name="enableT38FaxRequest">enableT38FaxRequest.</param>
        /// <param name="enableT38Gateway">enableT38Gateway.</param>
        /// <param name="enableT38Passthrough">enableT38Passthrough.</param>
        /// <param name="endpoints">endpoints (required).</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="existingCallID">existingCallID.</param>
        /// <param name="exportBridgeVariables">exportBridgeVariables.</param>
        /// <param name="exportCustomChannelVars">exportCustomChannelVars.</param>
        /// <param name="exportVariables">exportVariables.</param>
        /// <param name="failOnSingleReject">failOnSingleReject.</param>
        /// <param name="faxIdentityName">faxIdentityName.</param>
        /// <param name="faxIdentityNumber">faxIdentityNumber.</param>
        /// <param name="faxTimezone">faxTimezone.</param>
        /// <param name="forceFax">forceFax.</param>
        /// <param name="holdMedia">holdMedia.</param>
        /// <param name="ignoreCompletedElsewhere">ignoreCompletedElsewhere.</param>
        /// <param name="ignoreEarlyMedia">ignoreEarlyMedia.</param>
        /// <param name="ignoreForward">ignoreForward.</param>
        /// <param name="insertAt">insertAt.</param>
        /// <param name="interceptUnbridgedOnly">interceptUnbridgedOnly.</param>
        /// <param name="loopbackBowout">loopbackBowout.</param>
        /// <param name="media">media.</param>
        /// <param name="originateImmediate">originateImmediate.</param>
        /// <param name="originationCallID">originationCallID.</param>
        /// <param name="outboundCallID">outboundCallID.</param>
        /// <param name="outboundCalleeIDName">outboundCalleeIDName.</param>
        /// <param name="outboundCalleeIDNumber">outboundCalleeIDNumber.</param>
        /// <param name="outboundCallerIDName">outboundCallerIDName.</param>
        /// <param name="outboundCallerIDNumber">outboundCallerIDNumber.</param>
        /// <param name="privacyHideName">privacyHideName.</param>
        /// <param name="privacyHideNumber">privacyHideNumber.</param>
        /// <param name="privacyMethod">privacyMethod.</param>
        /// <param name="ringback">ringback.</param>
        /// <param name="sIPInviteParameters">sIPInviteParameters.</param>
        /// <param name="sIPTransport">sIPTransport.</param>
        /// <param name="secureRTP">secureRTP.</param>
        /// <param name="simplifyBowout">simplifyBowout.</param>
        /// <param name="simplifyLoopback">simplifyLoopback.</param>
        /// <param name="startControlProcess">startControlProcess.</param>
        /// <param name="timeout">timeout.</param>
        public KapiResourceOriginateReq(string applicationData = default(string), ApplicationNameEnum applicationName = default(ApplicationNameEnum), string assertedIdentityName = default(string), string assertedIdentityNumber = default(string), string assertedIdentityRealm = default(string), string bLegEvents = default(string), Object bridgeActions = default(Object), string callRestrictionsEnabled = default(string), string calleeIDName = default(string), string calleeIDNumber = default(string), string callerIDName = default(string), string callerIDNumber = default(string), int? confirmCancelTimeout = default(int?), string confirmFile = default(string), string confirmKey = default(string), string continueAfter = default(string), bool? continueOnFail = default(bool?), Object customApplicationVars = default(Object), Object customChannelVars = default(Object), Object customSIPHeaders = default(Object), DialEndpointMethodEnum? dialEndpointMethod = default(DialEndpointMethodEnum?), string eavesdropCallID = default(string), string eavesdropGroupID = default(string), EavesdropModeEnum? eavesdropMode = default(EavesdropModeEnum?), string enableT38Fax = default(string), string enableT38FaxRequest = default(string), string enableT38Gateway = default(string), string enableT38Passthrough = default(string), List<KapiDialplanBridgeEndpoint> endpoints = default(List<KapiDialplanBridgeEndpoint>), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string existingCallID = default(string), string exportBridgeVariables = default(string), Object exportCustomChannelVars = default(Object), string exportVariables = default(string), string failOnSingleReject = default(string), string faxIdentityName = default(string), string faxIdentityNumber = default(string), string faxTimezone = default(string), string forceFax = default(string), string holdMedia = default(string), string ignoreCompletedElsewhere = default(string), string ignoreEarlyMedia = default(string), string ignoreForward = default(string), string insertAt = default(string), string interceptUnbridgedOnly = default(string), string loopbackBowout = default(string), MediaEnum? media = default(MediaEnum?), string originateImmediate = default(string), string originationCallID = default(string), string outboundCallID = default(string), string outboundCalleeIDName = default(string), string outboundCalleeIDNumber = default(string), string outboundCallerIDName = default(string), string outboundCallerIDNumber = default(string), string privacyHideName = default(string), string privacyHideNumber = default(string), string privacyMethod = default(string), string ringback = default(string), string sIPInviteParameters = default(string), string sIPTransport = default(string), string secureRTP = default(string), bool? simplifyBowout = default(bool?), string simplifyLoopback = default(string), string startControlProcess = default(string), string timeout = default(string))
        {
            // to ensure "applicationName" is required (not null)
            if (applicationName == null)
            {
                throw new InvalidDataException("applicationName is a required property for KapiResourceOriginateReq and cannot be null");
            }
            else
            {
                this.ApplicationName = applicationName;
            }
            // to ensure "endpoints" is required (not null)
            if (endpoints == null)
            {
                throw new InvalidDataException("endpoints is a required property for KapiResourceOriginateReq and cannot be null");
            }
            else
            {
                this.Endpoints = endpoints;
            }
            this.ApplicationData = applicationData;
            this.AssertedIdentityName = assertedIdentityName;
            this.AssertedIdentityNumber = assertedIdentityNumber;
            this.AssertedIdentityRealm = assertedIdentityRealm;
            this.BLegEvents = bLegEvents;
            this.BridgeActions = bridgeActions;
            this.CallRestrictionsEnabled = callRestrictionsEnabled;
            this.CalleeIDName = calleeIDName;
            this.CalleeIDNumber = calleeIDNumber;
            this.CallerIDName = callerIDName;
            this.CallerIDNumber = callerIDNumber;
            this.ConfirmCancelTimeout = confirmCancelTimeout;
            this.ConfirmFile = confirmFile;
            this.ConfirmKey = confirmKey;
            this.ContinueAfter = continueAfter;
            this.ContinueOnFail = continueOnFail;
            this.CustomApplicationVars = customApplicationVars;
            this.CustomChannelVars = customChannelVars;
            this.CustomSIPHeaders = customSIPHeaders;
            this.DialEndpointMethod = dialEndpointMethod;
            this.EavesdropCallID = eavesdropCallID;
            this.EavesdropGroupID = eavesdropGroupID;
            this.EavesdropMode = eavesdropMode;
            this.EnableT38Fax = enableT38Fax;
            this.EnableT38FaxRequest = enableT38FaxRequest;
            this.EnableT38Gateway = enableT38Gateway;
            this.EnableT38Passthrough = enableT38Passthrough;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.ExistingCallID = existingCallID;
            this.ExportBridgeVariables = exportBridgeVariables;
            this.ExportCustomChannelVars = exportCustomChannelVars;
            this.ExportVariables = exportVariables;
            this.FailOnSingleReject = failOnSingleReject;
            this.FaxIdentityName = faxIdentityName;
            this.FaxIdentityNumber = faxIdentityNumber;
            this.FaxTimezone = faxTimezone;
            this.ForceFax = forceFax;
            this.HoldMedia = holdMedia;
            this.IgnoreCompletedElsewhere = ignoreCompletedElsewhere;
            this.IgnoreEarlyMedia = ignoreEarlyMedia;
            this.IgnoreForward = ignoreForward;
            this.InsertAt = insertAt;
            this.InterceptUnbridgedOnly = interceptUnbridgedOnly;
            this.LoopbackBowout = loopbackBowout;
            this.Media = media;
            this.OriginateImmediate = originateImmediate;
            this.OriginationCallID = originationCallID;
            this.OutboundCallID = outboundCallID;
            this.OutboundCalleeIDName = outboundCalleeIDName;
            this.OutboundCalleeIDNumber = outboundCalleeIDNumber;
            this.OutboundCallerIDName = outboundCallerIDName;
            this.OutboundCallerIDNumber = outboundCallerIDNumber;
            this.PrivacyHideName = privacyHideName;
            this.PrivacyHideNumber = privacyHideNumber;
            this.PrivacyMethod = privacyMethod;
            this.Ringback = ringback;
            this.SIPInviteParameters = sIPInviteParameters;
            this.SIPTransport = sIPTransport;
            this.SecureRTP = secureRTP;
            this.SimplifyBowout = simplifyBowout;
            this.SimplifyLoopback = simplifyLoopback;
            this.StartControlProcess = startControlProcess;
            this.Timeout = timeout;
        }
        
        /// <summary>
        /// Gets or Sets ApplicationData
        /// </summary>
        [DataMember(Name="Application-Data", EmitDefaultValue=false)]
        public string ApplicationData { get; set; }


        /// <summary>
        /// Gets or Sets AssertedIdentityName
        /// </summary>
        [DataMember(Name="Asserted-Identity-Name", EmitDefaultValue=false)]
        public string AssertedIdentityName { get; set; }

        /// <summary>
        /// Gets or Sets AssertedIdentityNumber
        /// </summary>
        [DataMember(Name="Asserted-Identity-Number", EmitDefaultValue=false)]
        public string AssertedIdentityNumber { get; set; }

        /// <summary>
        /// Gets or Sets AssertedIdentityRealm
        /// </summary>
        [DataMember(Name="Asserted-Identity-Realm", EmitDefaultValue=false)]
        public string AssertedIdentityRealm { get; set; }

        /// <summary>
        /// Gets or Sets BLegEvents
        /// </summary>
        [DataMember(Name="B-Leg-Events", EmitDefaultValue=false)]
        public string BLegEvents { get; set; }

        /// <summary>
        /// Gets or Sets BridgeActions
        /// </summary>
        [DataMember(Name="Bridge-Actions", EmitDefaultValue=false)]
        public Object BridgeActions { get; set; }

        /// <summary>
        /// Gets or Sets CallRestrictionsEnabled
        /// </summary>
        [DataMember(Name="Call-Restrictions-Enabled", EmitDefaultValue=false)]
        public string CallRestrictionsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets CalleeIDName
        /// </summary>
        [DataMember(Name="Callee-ID-Name", EmitDefaultValue=false)]
        public string CalleeIDName { get; set; }

        /// <summary>
        /// Gets or Sets CalleeIDNumber
        /// </summary>
        [DataMember(Name="Callee-ID-Number", EmitDefaultValue=false)]
        public string CalleeIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets CallerIDName
        /// </summary>
        [DataMember(Name="Caller-ID-Name", EmitDefaultValue=false)]
        public string CallerIDName { get; set; }

        /// <summary>
        /// Gets or Sets CallerIDNumber
        /// </summary>
        [DataMember(Name="Caller-ID-Number", EmitDefaultValue=false)]
        public string CallerIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets ConfirmCancelTimeout
        /// </summary>
        [DataMember(Name="Confirm-Cancel-Timeout", EmitDefaultValue=false)]
        public int? ConfirmCancelTimeout { get; set; }

        /// <summary>
        /// Gets or Sets ConfirmFile
        /// </summary>
        [DataMember(Name="Confirm-File", EmitDefaultValue=false)]
        public string ConfirmFile { get; set; }

        /// <summary>
        /// Gets or Sets ConfirmKey
        /// </summary>
        [DataMember(Name="Confirm-Key", EmitDefaultValue=false)]
        public string ConfirmKey { get; set; }

        /// <summary>
        /// Gets or Sets ContinueAfter
        /// </summary>
        [DataMember(Name="Continue-After", EmitDefaultValue=false)]
        public string ContinueAfter { get; set; }

        /// <summary>
        /// Gets or Sets ContinueOnFail
        /// </summary>
        [DataMember(Name="Continue-On-Fail", EmitDefaultValue=false)]
        public bool? ContinueOnFail { get; set; }

        /// <summary>
        /// Gets or Sets CustomApplicationVars
        /// </summary>
        [DataMember(Name="Custom-Application-Vars", EmitDefaultValue=false)]
        public Object CustomApplicationVars { get; set; }

        /// <summary>
        /// Gets or Sets CustomChannelVars
        /// </summary>
        [DataMember(Name="Custom-Channel-Vars", EmitDefaultValue=false)]
        public Object CustomChannelVars { get; set; }

        /// <summary>
        /// Gets or Sets CustomSIPHeaders
        /// </summary>
        [DataMember(Name="Custom-SIP-Headers", EmitDefaultValue=false)]
        public Object CustomSIPHeaders { get; set; }


        /// <summary>
        /// Gets or Sets EavesdropCallID
        /// </summary>
        [DataMember(Name="Eavesdrop-Call-ID", EmitDefaultValue=false)]
        public string EavesdropCallID { get; set; }

        /// <summary>
        /// Gets or Sets EavesdropGroupID
        /// </summary>
        [DataMember(Name="Eavesdrop-Group-ID", EmitDefaultValue=false)]
        public string EavesdropGroupID { get; set; }


        /// <summary>
        /// Gets or Sets EnableT38Fax
        /// </summary>
        [DataMember(Name="Enable-T38-Fax", EmitDefaultValue=false)]
        public string EnableT38Fax { get; set; }

        /// <summary>
        /// Gets or Sets EnableT38FaxRequest
        /// </summary>
        [DataMember(Name="Enable-T38-Fax-Request", EmitDefaultValue=false)]
        public string EnableT38FaxRequest { get; set; }

        /// <summary>
        /// Gets or Sets EnableT38Gateway
        /// </summary>
        [DataMember(Name="Enable-T38-Gateway", EmitDefaultValue=false)]
        public string EnableT38Gateway { get; set; }

        /// <summary>
        /// Gets or Sets EnableT38Passthrough
        /// </summary>
        [DataMember(Name="Enable-T38-Passthrough", EmitDefaultValue=false)]
        public string EnableT38Passthrough { get; set; }

        /// <summary>
        /// Gets or Sets Endpoints
        /// </summary>
        [DataMember(Name="Endpoints", EmitDefaultValue=false)]
        public List<KapiDialplanBridgeEndpoint> Endpoints { get; set; }



        /// <summary>
        /// Gets or Sets ExistingCallID
        /// </summary>
        [DataMember(Name="Existing-Call-ID", EmitDefaultValue=false)]
        public string ExistingCallID { get; set; }

        /// <summary>
        /// Gets or Sets ExportBridgeVariables
        /// </summary>
        [DataMember(Name="Export-Bridge-Variables", EmitDefaultValue=false)]
        public string ExportBridgeVariables { get; set; }

        /// <summary>
        /// Gets or Sets ExportCustomChannelVars
        /// </summary>
        [DataMember(Name="Export-Custom-Channel-Vars", EmitDefaultValue=false)]
        public Object ExportCustomChannelVars { get; set; }

        /// <summary>
        /// Gets or Sets ExportVariables
        /// </summary>
        [DataMember(Name="Export-Variables", EmitDefaultValue=false)]
        public string ExportVariables { get; set; }

        /// <summary>
        /// Gets or Sets FailOnSingleReject
        /// </summary>
        [DataMember(Name="Fail-On-Single-Reject", EmitDefaultValue=false)]
        public string FailOnSingleReject { get; set; }

        /// <summary>
        /// Gets or Sets FaxIdentityName
        /// </summary>
        [DataMember(Name="Fax-Identity-Name", EmitDefaultValue=false)]
        public string FaxIdentityName { get; set; }

        /// <summary>
        /// Gets or Sets FaxIdentityNumber
        /// </summary>
        [DataMember(Name="Fax-Identity-Number", EmitDefaultValue=false)]
        public string FaxIdentityNumber { get; set; }

        /// <summary>
        /// Gets or Sets FaxTimezone
        /// </summary>
        [DataMember(Name="Fax-Timezone", EmitDefaultValue=false)]
        public string FaxTimezone { get; set; }

        /// <summary>
        /// Gets or Sets ForceFax
        /// </summary>
        [DataMember(Name="Force-Fax", EmitDefaultValue=false)]
        public string ForceFax { get; set; }

        /// <summary>
        /// Gets or Sets HoldMedia
        /// </summary>
        [DataMember(Name="Hold-Media", EmitDefaultValue=false)]
        public string HoldMedia { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreCompletedElsewhere
        /// </summary>
        [DataMember(Name="Ignore-Completed-Elsewhere", EmitDefaultValue=false)]
        public string IgnoreCompletedElsewhere { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreEarlyMedia
        /// </summary>
        [DataMember(Name="Ignore-Early-Media", EmitDefaultValue=false)]
        public string IgnoreEarlyMedia { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreForward
        /// </summary>
        [DataMember(Name="Ignore-Forward", EmitDefaultValue=false)]
        public string IgnoreForward { get; set; }

        /// <summary>
        /// Gets or Sets InsertAt
        /// </summary>
        [DataMember(Name="Insert-At", EmitDefaultValue=false)]
        public string InsertAt { get; set; }

        /// <summary>
        /// Gets or Sets InterceptUnbridgedOnly
        /// </summary>
        [DataMember(Name="Intercept-Unbridged-Only", EmitDefaultValue=false)]
        public string InterceptUnbridgedOnly { get; set; }

        /// <summary>
        /// Gets or Sets LoopbackBowout
        /// </summary>
        [DataMember(Name="Loopback-Bowout", EmitDefaultValue=false)]
        public string LoopbackBowout { get; set; }


        /// <summary>
        /// Gets or Sets OriginateImmediate
        /// </summary>
        [DataMember(Name="Originate-Immediate", EmitDefaultValue=false)]
        public string OriginateImmediate { get; set; }

        /// <summary>
        /// Gets or Sets OriginationCallID
        /// </summary>
        [DataMember(Name="Origination-Call-ID", EmitDefaultValue=false)]
        public string OriginationCallID { get; set; }

        /// <summary>
        /// Gets or Sets OutboundCallID
        /// </summary>
        [DataMember(Name="Outbound-Call-ID", EmitDefaultValue=false)]
        public string OutboundCallID { get; set; }

        /// <summary>
        /// Gets or Sets OutboundCalleeIDName
        /// </summary>
        [DataMember(Name="Outbound-Callee-ID-Name", EmitDefaultValue=false)]
        public string OutboundCalleeIDName { get; set; }

        /// <summary>
        /// Gets or Sets OutboundCalleeIDNumber
        /// </summary>
        [DataMember(Name="Outbound-Callee-ID-Number", EmitDefaultValue=false)]
        public string OutboundCalleeIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets OutboundCallerIDName
        /// </summary>
        [DataMember(Name="Outbound-Caller-ID-Name", EmitDefaultValue=false)]
        public string OutboundCallerIDName { get; set; }

        /// <summary>
        /// Gets or Sets OutboundCallerIDNumber
        /// </summary>
        [DataMember(Name="Outbound-Caller-ID-Number", EmitDefaultValue=false)]
        public string OutboundCallerIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets PrivacyHideName
        /// </summary>
        [DataMember(Name="Privacy-Hide-Name", EmitDefaultValue=false)]
        public string PrivacyHideName { get; set; }

        /// <summary>
        /// Gets or Sets PrivacyHideNumber
        /// </summary>
        [DataMember(Name="Privacy-Hide-Number", EmitDefaultValue=false)]
        public string PrivacyHideNumber { get; set; }

        /// <summary>
        /// Gets or Sets PrivacyMethod
        /// </summary>
        [DataMember(Name="Privacy-Method", EmitDefaultValue=false)]
        public string PrivacyMethod { get; set; }

        /// <summary>
        /// Gets or Sets Ringback
        /// </summary>
        [DataMember(Name="Ringback", EmitDefaultValue=false)]
        public string Ringback { get; set; }

        /// <summary>
        /// Gets or Sets SIPInviteParameters
        /// </summary>
        [DataMember(Name="SIP-Invite-Parameters", EmitDefaultValue=false)]
        public string SIPInviteParameters { get; set; }

        /// <summary>
        /// Gets or Sets SIPTransport
        /// </summary>
        [DataMember(Name="SIP-Transport", EmitDefaultValue=false)]
        public string SIPTransport { get; set; }

        /// <summary>
        /// Gets or Sets SecureRTP
        /// </summary>
        [DataMember(Name="Secure-RTP", EmitDefaultValue=false)]
        public string SecureRTP { get; set; }

        /// <summary>
        /// Gets or Sets SimplifyBowout
        /// </summary>
        [DataMember(Name="Simplify-Bowout", EmitDefaultValue=false)]
        public bool? SimplifyBowout { get; set; }

        /// <summary>
        /// Gets or Sets SimplifyLoopback
        /// </summary>
        [DataMember(Name="Simplify-Loopback", EmitDefaultValue=false)]
        public string SimplifyLoopback { get; set; }

        /// <summary>
        /// Gets or Sets StartControlProcess
        /// </summary>
        [DataMember(Name="Start-Control-Process", EmitDefaultValue=false)]
        public string StartControlProcess { get; set; }

        /// <summary>
        /// Gets or Sets Timeout
        /// </summary>
        [DataMember(Name="Timeout", EmitDefaultValue=false)]
        public string Timeout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiResourceOriginateReq {\n");
            sb.Append("  ApplicationData: ").Append(ApplicationData).Append("\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  AssertedIdentityName: ").Append(AssertedIdentityName).Append("\n");
            sb.Append("  AssertedIdentityNumber: ").Append(AssertedIdentityNumber).Append("\n");
            sb.Append("  AssertedIdentityRealm: ").Append(AssertedIdentityRealm).Append("\n");
            sb.Append("  BLegEvents: ").Append(BLegEvents).Append("\n");
            sb.Append("  BridgeActions: ").Append(BridgeActions).Append("\n");
            sb.Append("  CallRestrictionsEnabled: ").Append(CallRestrictionsEnabled).Append("\n");
            sb.Append("  CalleeIDName: ").Append(CalleeIDName).Append("\n");
            sb.Append("  CalleeIDNumber: ").Append(CalleeIDNumber).Append("\n");
            sb.Append("  CallerIDName: ").Append(CallerIDName).Append("\n");
            sb.Append("  CallerIDNumber: ").Append(CallerIDNumber).Append("\n");
            sb.Append("  ConfirmCancelTimeout: ").Append(ConfirmCancelTimeout).Append("\n");
            sb.Append("  ConfirmFile: ").Append(ConfirmFile).Append("\n");
            sb.Append("  ConfirmKey: ").Append(ConfirmKey).Append("\n");
            sb.Append("  ContinueAfter: ").Append(ContinueAfter).Append("\n");
            sb.Append("  ContinueOnFail: ").Append(ContinueOnFail).Append("\n");
            sb.Append("  CustomApplicationVars: ").Append(CustomApplicationVars).Append("\n");
            sb.Append("  CustomChannelVars: ").Append(CustomChannelVars).Append("\n");
            sb.Append("  CustomSIPHeaders: ").Append(CustomSIPHeaders).Append("\n");
            sb.Append("  DialEndpointMethod: ").Append(DialEndpointMethod).Append("\n");
            sb.Append("  EavesdropCallID: ").Append(EavesdropCallID).Append("\n");
            sb.Append("  EavesdropGroupID: ").Append(EavesdropGroupID).Append("\n");
            sb.Append("  EavesdropMode: ").Append(EavesdropMode).Append("\n");
            sb.Append("  EnableT38Fax: ").Append(EnableT38Fax).Append("\n");
            sb.Append("  EnableT38FaxRequest: ").Append(EnableT38FaxRequest).Append("\n");
            sb.Append("  EnableT38Gateway: ").Append(EnableT38Gateway).Append("\n");
            sb.Append("  EnableT38Passthrough: ").Append(EnableT38Passthrough).Append("\n");
            sb.Append("  Endpoints: ").Append(Endpoints).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  ExistingCallID: ").Append(ExistingCallID).Append("\n");
            sb.Append("  ExportBridgeVariables: ").Append(ExportBridgeVariables).Append("\n");
            sb.Append("  ExportCustomChannelVars: ").Append(ExportCustomChannelVars).Append("\n");
            sb.Append("  ExportVariables: ").Append(ExportVariables).Append("\n");
            sb.Append("  FailOnSingleReject: ").Append(FailOnSingleReject).Append("\n");
            sb.Append("  FaxIdentityName: ").Append(FaxIdentityName).Append("\n");
            sb.Append("  FaxIdentityNumber: ").Append(FaxIdentityNumber).Append("\n");
            sb.Append("  FaxTimezone: ").Append(FaxTimezone).Append("\n");
            sb.Append("  ForceFax: ").Append(ForceFax).Append("\n");
            sb.Append("  HoldMedia: ").Append(HoldMedia).Append("\n");
            sb.Append("  IgnoreCompletedElsewhere: ").Append(IgnoreCompletedElsewhere).Append("\n");
            sb.Append("  IgnoreEarlyMedia: ").Append(IgnoreEarlyMedia).Append("\n");
            sb.Append("  IgnoreForward: ").Append(IgnoreForward).Append("\n");
            sb.Append("  InsertAt: ").Append(InsertAt).Append("\n");
            sb.Append("  InterceptUnbridgedOnly: ").Append(InterceptUnbridgedOnly).Append("\n");
            sb.Append("  LoopbackBowout: ").Append(LoopbackBowout).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  OriginateImmediate: ").Append(OriginateImmediate).Append("\n");
            sb.Append("  OriginationCallID: ").Append(OriginationCallID).Append("\n");
            sb.Append("  OutboundCallID: ").Append(OutboundCallID).Append("\n");
            sb.Append("  OutboundCalleeIDName: ").Append(OutboundCalleeIDName).Append("\n");
            sb.Append("  OutboundCalleeIDNumber: ").Append(OutboundCalleeIDNumber).Append("\n");
            sb.Append("  OutboundCallerIDName: ").Append(OutboundCallerIDName).Append("\n");
            sb.Append("  OutboundCallerIDNumber: ").Append(OutboundCallerIDNumber).Append("\n");
            sb.Append("  PrivacyHideName: ").Append(PrivacyHideName).Append("\n");
            sb.Append("  PrivacyHideNumber: ").Append(PrivacyHideNumber).Append("\n");
            sb.Append("  PrivacyMethod: ").Append(PrivacyMethod).Append("\n");
            sb.Append("  Ringback: ").Append(Ringback).Append("\n");
            sb.Append("  SIPInviteParameters: ").Append(SIPInviteParameters).Append("\n");
            sb.Append("  SIPTransport: ").Append(SIPTransport).Append("\n");
            sb.Append("  SecureRTP: ").Append(SecureRTP).Append("\n");
            sb.Append("  SimplifyBowout: ").Append(SimplifyBowout).Append("\n");
            sb.Append("  SimplifyLoopback: ").Append(SimplifyLoopback).Append("\n");
            sb.Append("  StartControlProcess: ").Append(StartControlProcess).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiResourceOriginateReq);
        }

        /// <summary>
        /// Returns true if KapiResourceOriginateReq instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiResourceOriginateReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiResourceOriginateReq input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationData == input.ApplicationData ||
                    (this.ApplicationData != null &&
                    this.ApplicationData.Equals(input.ApplicationData))
                ) && 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.AssertedIdentityName == input.AssertedIdentityName ||
                    (this.AssertedIdentityName != null &&
                    this.AssertedIdentityName.Equals(input.AssertedIdentityName))
                ) && 
                (
                    this.AssertedIdentityNumber == input.AssertedIdentityNumber ||
                    (this.AssertedIdentityNumber != null &&
                    this.AssertedIdentityNumber.Equals(input.AssertedIdentityNumber))
                ) && 
                (
                    this.AssertedIdentityRealm == input.AssertedIdentityRealm ||
                    (this.AssertedIdentityRealm != null &&
                    this.AssertedIdentityRealm.Equals(input.AssertedIdentityRealm))
                ) && 
                (
                    this.BLegEvents == input.BLegEvents ||
                    (this.BLegEvents != null &&
                    this.BLegEvents.Equals(input.BLegEvents))
                ) && 
                (
                    this.BridgeActions == input.BridgeActions ||
                    (this.BridgeActions != null &&
                    this.BridgeActions.Equals(input.BridgeActions))
                ) && 
                (
                    this.CallRestrictionsEnabled == input.CallRestrictionsEnabled ||
                    (this.CallRestrictionsEnabled != null &&
                    this.CallRestrictionsEnabled.Equals(input.CallRestrictionsEnabled))
                ) && 
                (
                    this.CalleeIDName == input.CalleeIDName ||
                    (this.CalleeIDName != null &&
                    this.CalleeIDName.Equals(input.CalleeIDName))
                ) && 
                (
                    this.CalleeIDNumber == input.CalleeIDNumber ||
                    (this.CalleeIDNumber != null &&
                    this.CalleeIDNumber.Equals(input.CalleeIDNumber))
                ) && 
                (
                    this.CallerIDName == input.CallerIDName ||
                    (this.CallerIDName != null &&
                    this.CallerIDName.Equals(input.CallerIDName))
                ) && 
                (
                    this.CallerIDNumber == input.CallerIDNumber ||
                    (this.CallerIDNumber != null &&
                    this.CallerIDNumber.Equals(input.CallerIDNumber))
                ) && 
                (
                    this.ConfirmCancelTimeout == input.ConfirmCancelTimeout ||
                    (this.ConfirmCancelTimeout != null &&
                    this.ConfirmCancelTimeout.Equals(input.ConfirmCancelTimeout))
                ) && 
                (
                    this.ConfirmFile == input.ConfirmFile ||
                    (this.ConfirmFile != null &&
                    this.ConfirmFile.Equals(input.ConfirmFile))
                ) && 
                (
                    this.ConfirmKey == input.ConfirmKey ||
                    (this.ConfirmKey != null &&
                    this.ConfirmKey.Equals(input.ConfirmKey))
                ) && 
                (
                    this.ContinueAfter == input.ContinueAfter ||
                    (this.ContinueAfter != null &&
                    this.ContinueAfter.Equals(input.ContinueAfter))
                ) && 
                (
                    this.ContinueOnFail == input.ContinueOnFail ||
                    (this.ContinueOnFail != null &&
                    this.ContinueOnFail.Equals(input.ContinueOnFail))
                ) && 
                (
                    this.CustomApplicationVars == input.CustomApplicationVars ||
                    (this.CustomApplicationVars != null &&
                    this.CustomApplicationVars.Equals(input.CustomApplicationVars))
                ) && 
                (
                    this.CustomChannelVars == input.CustomChannelVars ||
                    (this.CustomChannelVars != null &&
                    this.CustomChannelVars.Equals(input.CustomChannelVars))
                ) && 
                (
                    this.CustomSIPHeaders == input.CustomSIPHeaders ||
                    (this.CustomSIPHeaders != null &&
                    this.CustomSIPHeaders.Equals(input.CustomSIPHeaders))
                ) && 
                (
                    this.DialEndpointMethod == input.DialEndpointMethod ||
                    (this.DialEndpointMethod != null &&
                    this.DialEndpointMethod.Equals(input.DialEndpointMethod))
                ) && 
                (
                    this.EavesdropCallID == input.EavesdropCallID ||
                    (this.EavesdropCallID != null &&
                    this.EavesdropCallID.Equals(input.EavesdropCallID))
                ) && 
                (
                    this.EavesdropGroupID == input.EavesdropGroupID ||
                    (this.EavesdropGroupID != null &&
                    this.EavesdropGroupID.Equals(input.EavesdropGroupID))
                ) && 
                (
                    this.EavesdropMode == input.EavesdropMode ||
                    (this.EavesdropMode != null &&
                    this.EavesdropMode.Equals(input.EavesdropMode))
                ) && 
                (
                    this.EnableT38Fax == input.EnableT38Fax ||
                    (this.EnableT38Fax != null &&
                    this.EnableT38Fax.Equals(input.EnableT38Fax))
                ) && 
                (
                    this.EnableT38FaxRequest == input.EnableT38FaxRequest ||
                    (this.EnableT38FaxRequest != null &&
                    this.EnableT38FaxRequest.Equals(input.EnableT38FaxRequest))
                ) && 
                (
                    this.EnableT38Gateway == input.EnableT38Gateway ||
                    (this.EnableT38Gateway != null &&
                    this.EnableT38Gateway.Equals(input.EnableT38Gateway))
                ) && 
                (
                    this.EnableT38Passthrough == input.EnableT38Passthrough ||
                    (this.EnableT38Passthrough != null &&
                    this.EnableT38Passthrough.Equals(input.EnableT38Passthrough))
                ) && 
                (
                    this.Endpoints == input.Endpoints ||
                    this.Endpoints != null &&
                    this.Endpoints.SequenceEqual(input.Endpoints)
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.ExistingCallID == input.ExistingCallID ||
                    (this.ExistingCallID != null &&
                    this.ExistingCallID.Equals(input.ExistingCallID))
                ) && 
                (
                    this.ExportBridgeVariables == input.ExportBridgeVariables ||
                    (this.ExportBridgeVariables != null &&
                    this.ExportBridgeVariables.Equals(input.ExportBridgeVariables))
                ) && 
                (
                    this.ExportCustomChannelVars == input.ExportCustomChannelVars ||
                    (this.ExportCustomChannelVars != null &&
                    this.ExportCustomChannelVars.Equals(input.ExportCustomChannelVars))
                ) && 
                (
                    this.ExportVariables == input.ExportVariables ||
                    (this.ExportVariables != null &&
                    this.ExportVariables.Equals(input.ExportVariables))
                ) && 
                (
                    this.FailOnSingleReject == input.FailOnSingleReject ||
                    (this.FailOnSingleReject != null &&
                    this.FailOnSingleReject.Equals(input.FailOnSingleReject))
                ) && 
                (
                    this.FaxIdentityName == input.FaxIdentityName ||
                    (this.FaxIdentityName != null &&
                    this.FaxIdentityName.Equals(input.FaxIdentityName))
                ) && 
                (
                    this.FaxIdentityNumber == input.FaxIdentityNumber ||
                    (this.FaxIdentityNumber != null &&
                    this.FaxIdentityNumber.Equals(input.FaxIdentityNumber))
                ) && 
                (
                    this.FaxTimezone == input.FaxTimezone ||
                    (this.FaxTimezone != null &&
                    this.FaxTimezone.Equals(input.FaxTimezone))
                ) && 
                (
                    this.ForceFax == input.ForceFax ||
                    (this.ForceFax != null &&
                    this.ForceFax.Equals(input.ForceFax))
                ) && 
                (
                    this.HoldMedia == input.HoldMedia ||
                    (this.HoldMedia != null &&
                    this.HoldMedia.Equals(input.HoldMedia))
                ) && 
                (
                    this.IgnoreCompletedElsewhere == input.IgnoreCompletedElsewhere ||
                    (this.IgnoreCompletedElsewhere != null &&
                    this.IgnoreCompletedElsewhere.Equals(input.IgnoreCompletedElsewhere))
                ) && 
                (
                    this.IgnoreEarlyMedia == input.IgnoreEarlyMedia ||
                    (this.IgnoreEarlyMedia != null &&
                    this.IgnoreEarlyMedia.Equals(input.IgnoreEarlyMedia))
                ) && 
                (
                    this.IgnoreForward == input.IgnoreForward ||
                    (this.IgnoreForward != null &&
                    this.IgnoreForward.Equals(input.IgnoreForward))
                ) && 
                (
                    this.InsertAt == input.InsertAt ||
                    (this.InsertAt != null &&
                    this.InsertAt.Equals(input.InsertAt))
                ) && 
                (
                    this.InterceptUnbridgedOnly == input.InterceptUnbridgedOnly ||
                    (this.InterceptUnbridgedOnly != null &&
                    this.InterceptUnbridgedOnly.Equals(input.InterceptUnbridgedOnly))
                ) && 
                (
                    this.LoopbackBowout == input.LoopbackBowout ||
                    (this.LoopbackBowout != null &&
                    this.LoopbackBowout.Equals(input.LoopbackBowout))
                ) && 
                (
                    this.Media == input.Media ||
                    (this.Media != null &&
                    this.Media.Equals(input.Media))
                ) && 
                (
                    this.OriginateImmediate == input.OriginateImmediate ||
                    (this.OriginateImmediate != null &&
                    this.OriginateImmediate.Equals(input.OriginateImmediate))
                ) && 
                (
                    this.OriginationCallID == input.OriginationCallID ||
                    (this.OriginationCallID != null &&
                    this.OriginationCallID.Equals(input.OriginationCallID))
                ) && 
                (
                    this.OutboundCallID == input.OutboundCallID ||
                    (this.OutboundCallID != null &&
                    this.OutboundCallID.Equals(input.OutboundCallID))
                ) && 
                (
                    this.OutboundCalleeIDName == input.OutboundCalleeIDName ||
                    (this.OutboundCalleeIDName != null &&
                    this.OutboundCalleeIDName.Equals(input.OutboundCalleeIDName))
                ) && 
                (
                    this.OutboundCalleeIDNumber == input.OutboundCalleeIDNumber ||
                    (this.OutboundCalleeIDNumber != null &&
                    this.OutboundCalleeIDNumber.Equals(input.OutboundCalleeIDNumber))
                ) && 
                (
                    this.OutboundCallerIDName == input.OutboundCallerIDName ||
                    (this.OutboundCallerIDName != null &&
                    this.OutboundCallerIDName.Equals(input.OutboundCallerIDName))
                ) && 
                (
                    this.OutboundCallerIDNumber == input.OutboundCallerIDNumber ||
                    (this.OutboundCallerIDNumber != null &&
                    this.OutboundCallerIDNumber.Equals(input.OutboundCallerIDNumber))
                ) && 
                (
                    this.PrivacyHideName == input.PrivacyHideName ||
                    (this.PrivacyHideName != null &&
                    this.PrivacyHideName.Equals(input.PrivacyHideName))
                ) && 
                (
                    this.PrivacyHideNumber == input.PrivacyHideNumber ||
                    (this.PrivacyHideNumber != null &&
                    this.PrivacyHideNumber.Equals(input.PrivacyHideNumber))
                ) && 
                (
                    this.PrivacyMethod == input.PrivacyMethod ||
                    (this.PrivacyMethod != null &&
                    this.PrivacyMethod.Equals(input.PrivacyMethod))
                ) && 
                (
                    this.Ringback == input.Ringback ||
                    (this.Ringback != null &&
                    this.Ringback.Equals(input.Ringback))
                ) && 
                (
                    this.SIPInviteParameters == input.SIPInviteParameters ||
                    (this.SIPInviteParameters != null &&
                    this.SIPInviteParameters.Equals(input.SIPInviteParameters))
                ) && 
                (
                    this.SIPTransport == input.SIPTransport ||
                    (this.SIPTransport != null &&
                    this.SIPTransport.Equals(input.SIPTransport))
                ) && 
                (
                    this.SecureRTP == input.SecureRTP ||
                    (this.SecureRTP != null &&
                    this.SecureRTP.Equals(input.SecureRTP))
                ) && 
                (
                    this.SimplifyBowout == input.SimplifyBowout ||
                    (this.SimplifyBowout != null &&
                    this.SimplifyBowout.Equals(input.SimplifyBowout))
                ) && 
                (
                    this.SimplifyLoopback == input.SimplifyLoopback ||
                    (this.SimplifyLoopback != null &&
                    this.SimplifyLoopback.Equals(input.SimplifyLoopback))
                ) && 
                (
                    this.StartControlProcess == input.StartControlProcess ||
                    (this.StartControlProcess != null &&
                    this.StartControlProcess.Equals(input.StartControlProcess))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    (this.Timeout != null &&
                    this.Timeout.Equals(input.Timeout))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationData != null)
                    hashCode = hashCode * 59 + this.ApplicationData.GetHashCode();
                if (this.ApplicationName != null)
                    hashCode = hashCode * 59 + this.ApplicationName.GetHashCode();
                if (this.AssertedIdentityName != null)
                    hashCode = hashCode * 59 + this.AssertedIdentityName.GetHashCode();
                if (this.AssertedIdentityNumber != null)
                    hashCode = hashCode * 59 + this.AssertedIdentityNumber.GetHashCode();
                if (this.AssertedIdentityRealm != null)
                    hashCode = hashCode * 59 + this.AssertedIdentityRealm.GetHashCode();
                if (this.BLegEvents != null)
                    hashCode = hashCode * 59 + this.BLegEvents.GetHashCode();
                if (this.BridgeActions != null)
                    hashCode = hashCode * 59 + this.BridgeActions.GetHashCode();
                if (this.CallRestrictionsEnabled != null)
                    hashCode = hashCode * 59 + this.CallRestrictionsEnabled.GetHashCode();
                if (this.CalleeIDName != null)
                    hashCode = hashCode * 59 + this.CalleeIDName.GetHashCode();
                if (this.CalleeIDNumber != null)
                    hashCode = hashCode * 59 + this.CalleeIDNumber.GetHashCode();
                if (this.CallerIDName != null)
                    hashCode = hashCode * 59 + this.CallerIDName.GetHashCode();
                if (this.CallerIDNumber != null)
                    hashCode = hashCode * 59 + this.CallerIDNumber.GetHashCode();
                if (this.ConfirmCancelTimeout != null)
                    hashCode = hashCode * 59 + this.ConfirmCancelTimeout.GetHashCode();
                if (this.ConfirmFile != null)
                    hashCode = hashCode * 59 + this.ConfirmFile.GetHashCode();
                if (this.ConfirmKey != null)
                    hashCode = hashCode * 59 + this.ConfirmKey.GetHashCode();
                if (this.ContinueAfter != null)
                    hashCode = hashCode * 59 + this.ContinueAfter.GetHashCode();
                if (this.ContinueOnFail != null)
                    hashCode = hashCode * 59 + this.ContinueOnFail.GetHashCode();
                if (this.CustomApplicationVars != null)
                    hashCode = hashCode * 59 + this.CustomApplicationVars.GetHashCode();
                if (this.CustomChannelVars != null)
                    hashCode = hashCode * 59 + this.CustomChannelVars.GetHashCode();
                if (this.CustomSIPHeaders != null)
                    hashCode = hashCode * 59 + this.CustomSIPHeaders.GetHashCode();
                if (this.DialEndpointMethod != null)
                    hashCode = hashCode * 59 + this.DialEndpointMethod.GetHashCode();
                if (this.EavesdropCallID != null)
                    hashCode = hashCode * 59 + this.EavesdropCallID.GetHashCode();
                if (this.EavesdropGroupID != null)
                    hashCode = hashCode * 59 + this.EavesdropGroupID.GetHashCode();
                if (this.EavesdropMode != null)
                    hashCode = hashCode * 59 + this.EavesdropMode.GetHashCode();
                if (this.EnableT38Fax != null)
                    hashCode = hashCode * 59 + this.EnableT38Fax.GetHashCode();
                if (this.EnableT38FaxRequest != null)
                    hashCode = hashCode * 59 + this.EnableT38FaxRequest.GetHashCode();
                if (this.EnableT38Gateway != null)
                    hashCode = hashCode * 59 + this.EnableT38Gateway.GetHashCode();
                if (this.EnableT38Passthrough != null)
                    hashCode = hashCode * 59 + this.EnableT38Passthrough.GetHashCode();
                if (this.Endpoints != null)
                    hashCode = hashCode * 59 + this.Endpoints.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.ExistingCallID != null)
                    hashCode = hashCode * 59 + this.ExistingCallID.GetHashCode();
                if (this.ExportBridgeVariables != null)
                    hashCode = hashCode * 59 + this.ExportBridgeVariables.GetHashCode();
                if (this.ExportCustomChannelVars != null)
                    hashCode = hashCode * 59 + this.ExportCustomChannelVars.GetHashCode();
                if (this.ExportVariables != null)
                    hashCode = hashCode * 59 + this.ExportVariables.GetHashCode();
                if (this.FailOnSingleReject != null)
                    hashCode = hashCode * 59 + this.FailOnSingleReject.GetHashCode();
                if (this.FaxIdentityName != null)
                    hashCode = hashCode * 59 + this.FaxIdentityName.GetHashCode();
                if (this.FaxIdentityNumber != null)
                    hashCode = hashCode * 59 + this.FaxIdentityNumber.GetHashCode();
                if (this.FaxTimezone != null)
                    hashCode = hashCode * 59 + this.FaxTimezone.GetHashCode();
                if (this.ForceFax != null)
                    hashCode = hashCode * 59 + this.ForceFax.GetHashCode();
                if (this.HoldMedia != null)
                    hashCode = hashCode * 59 + this.HoldMedia.GetHashCode();
                if (this.IgnoreCompletedElsewhere != null)
                    hashCode = hashCode * 59 + this.IgnoreCompletedElsewhere.GetHashCode();
                if (this.IgnoreEarlyMedia != null)
                    hashCode = hashCode * 59 + this.IgnoreEarlyMedia.GetHashCode();
                if (this.IgnoreForward != null)
                    hashCode = hashCode * 59 + this.IgnoreForward.GetHashCode();
                if (this.InsertAt != null)
                    hashCode = hashCode * 59 + this.InsertAt.GetHashCode();
                if (this.InterceptUnbridgedOnly != null)
                    hashCode = hashCode * 59 + this.InterceptUnbridgedOnly.GetHashCode();
                if (this.LoopbackBowout != null)
                    hashCode = hashCode * 59 + this.LoopbackBowout.GetHashCode();
                if (this.Media != null)
                    hashCode = hashCode * 59 + this.Media.GetHashCode();
                if (this.OriginateImmediate != null)
                    hashCode = hashCode * 59 + this.OriginateImmediate.GetHashCode();
                if (this.OriginationCallID != null)
                    hashCode = hashCode * 59 + this.OriginationCallID.GetHashCode();
                if (this.OutboundCallID != null)
                    hashCode = hashCode * 59 + this.OutboundCallID.GetHashCode();
                if (this.OutboundCalleeIDName != null)
                    hashCode = hashCode * 59 + this.OutboundCalleeIDName.GetHashCode();
                if (this.OutboundCalleeIDNumber != null)
                    hashCode = hashCode * 59 + this.OutboundCalleeIDNumber.GetHashCode();
                if (this.OutboundCallerIDName != null)
                    hashCode = hashCode * 59 + this.OutboundCallerIDName.GetHashCode();
                if (this.OutboundCallerIDNumber != null)
                    hashCode = hashCode * 59 + this.OutboundCallerIDNumber.GetHashCode();
                if (this.PrivacyHideName != null)
                    hashCode = hashCode * 59 + this.PrivacyHideName.GetHashCode();
                if (this.PrivacyHideNumber != null)
                    hashCode = hashCode * 59 + this.PrivacyHideNumber.GetHashCode();
                if (this.PrivacyMethod != null)
                    hashCode = hashCode * 59 + this.PrivacyMethod.GetHashCode();
                if (this.Ringback != null)
                    hashCode = hashCode * 59 + this.Ringback.GetHashCode();
                if (this.SIPInviteParameters != null)
                    hashCode = hashCode * 59 + this.SIPInviteParameters.GetHashCode();
                if (this.SIPTransport != null)
                    hashCode = hashCode * 59 + this.SIPTransport.GetHashCode();
                if (this.SecureRTP != null)
                    hashCode = hashCode * 59 + this.SecureRTP.GetHashCode();
                if (this.SimplifyBowout != null)
                    hashCode = hashCode * 59 + this.SimplifyBowout.GetHashCode();
                if (this.SimplifyLoopback != null)
                    hashCode = hashCode * 59 + this.SimplifyLoopback.GetHashCode();
                if (this.StartControlProcess != null)
                    hashCode = hashCode * 59 + this.StartControlProcess.GetHashCode();
                if (this.Timeout != null)
                    hashCode = hashCode * 59 + this.Timeout.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
