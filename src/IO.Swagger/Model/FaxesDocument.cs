/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Parameters related to the storage of a fax document
    /// </summary>
    [DataContract]
    public partial class FaxesDocument :  IEquatable<FaxesDocument>, IValidatableObject
    {
        /// <summary>
        /// The method that should be used to retrieve the document
        /// </summary>
        /// <value>The method that should be used to retrieve the document</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodEnum
        {
            
            /// <summary>
            /// Enum Get for value: get
            /// </summary>
            [EnumMember(Value = "get")]
            Get = 1,
            
            /// <summary>
            /// Enum Post for value: post
            /// </summary>
            [EnumMember(Value = "post")]
            Post = 2
        }

        /// <summary>
        /// The method that should be used to retrieve the document
        /// </summary>
        /// <value>The method that should be used to retrieve the document</value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public MethodEnum? Method { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FaxesDocument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FaxesDocument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FaxesDocument" /> class.
        /// </summary>
        /// <param name="content">The content provided in the body when fetching for transmission as a post.</param>
        /// <param name="contentType">The content type header to be used when fetching for transmission as a post.</param>
        /// <param name="host">The host header to be used when fetching for transmission.</param>
        /// <param name="method">The method that should be used to retrieve the document (default to MethodEnum.Get).</param>
        /// <param name="referer">The referer header to be used when fetching for transmission.</param>
        /// <param name="url">The url of the fax document (required).</param>
        public FaxesDocument(string content = default(string), string contentType = default(string), string host = default(string), MethodEnum? method = MethodEnum.Get, string referer = default(string), string url = default(string))
        {
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for FaxesDocument and cannot be null");
            }
            else
            {
                this.Url = url;
            }
            this.Content = content;
            this.ContentType = contentType;
            this.Host = host;
            // use default value if no "method" provided
            if (method == null)
            {
                this.Method = MethodEnum.Get;
            }
            else
            {
                this.Method = method;
            }
            this.Referer = referer;
        }
        
        /// <summary>
        /// The content provided in the body when fetching for transmission as a post
        /// </summary>
        /// <value>The content provided in the body when fetching for transmission as a post</value>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public string Content { get; set; }

        /// <summary>
        /// The content type header to be used when fetching for transmission as a post
        /// </summary>
        /// <value>The content type header to be used when fetching for transmission as a post</value>
        [DataMember(Name="content_type", EmitDefaultValue=false)]
        public string ContentType { get; set; }

        /// <summary>
        /// The host header to be used when fetching for transmission
        /// </summary>
        /// <value>The host header to be used when fetching for transmission</value>
        [DataMember(Name="host", EmitDefaultValue=false)]
        public string Host { get; set; }


        /// <summary>
        /// The referer header to be used when fetching for transmission
        /// </summary>
        /// <value>The referer header to be used when fetching for transmission</value>
        [DataMember(Name="referer", EmitDefaultValue=false)]
        public string Referer { get; set; }

        /// <summary>
        /// The url of the fax document
        /// </summary>
        /// <value>The url of the fax document</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FaxesDocument {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Referer: ").Append(Referer).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FaxesDocument);
        }

        /// <summary>
        /// Returns true if FaxesDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of FaxesDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FaxesDocument input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.Referer == input.Referer ||
                    (this.Referer != null &&
                    this.Referer.Equals(input.Referer))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.Host != null)
                    hashCode = hashCode * 59 + this.Host.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.Referer != null)
                    hashCode = hashCode * 59 + this.Referer.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Content (string) maxLength
            if(this.Content != null && this.Content.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Content, length must be less than 256.", new [] { "Content" });
            }

            // Url (string) pattern
            Regex regexUrl = new Regex(@"^https?:\/\/", RegexOptions.CultureInvariant);
            if (false == regexUrl.Match(this.Url).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Url, must match a pattern of " + regexUrl, new [] { "Url" });
            }

            yield break;
        }
    }

}
