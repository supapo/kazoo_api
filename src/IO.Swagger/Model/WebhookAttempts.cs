/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Log of an attempt to send a webhook to a third-party server
    /// </summary>
    [DataContract]
    public partial class WebhookAttempts :  IEquatable<WebhookAttempts>, IValidatableObject
    {
        /// <summary>
        /// Whether the attempt succeeded or not
        /// </summary>
        /// <value>Whether the attempt succeeded or not</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResultEnum
        {
            
            /// <summary>
            /// Enum Success for value: success
            /// </summary>
            [EnumMember(Value = "success")]
            Success = 1,
            
            /// <summary>
            /// Enum Failure for value: failure
            /// </summary>
            [EnumMember(Value = "failure")]
            Failure = 2
        }

        /// <summary>
        /// Whether the attempt succeeded or not
        /// </summary>
        /// <value>Whether the attempt succeeded or not</value>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public ResultEnum Result { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookAttempts" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WebhookAttempts() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookAttempts" /> class.
        /// </summary>
        /// <param name="clientError">Kazoo-side error string, if any.</param>
        /// <param name="hookId">Id of the hook attempted (required).</param>
        /// <param name="reason">short reason for the failure.</param>
        /// <param name="responseBody">HTTP response body received, if any.</param>
        /// <param name="responseCode">HTTP response code received, if any.</param>
        /// <param name="result">Whether the attempt succeeded or not (required).</param>
        /// <param name="retriesLeft">How many retries were left after this attempt.</param>
        public WebhookAttempts(string clientError = default(string), string hookId = default(string), string reason = default(string), string responseBody = default(string), string responseCode = default(string), ResultEnum result = default(ResultEnum), int? retriesLeft = default(int?))
        {
            // to ensure "hookId" is required (not null)
            if (hookId == null)
            {
                throw new InvalidDataException("hookId is a required property for WebhookAttempts and cannot be null");
            }
            else
            {
                this.HookId = hookId;
            }
            // to ensure "result" is required (not null)
            if (result == null)
            {
                throw new InvalidDataException("result is a required property for WebhookAttempts and cannot be null");
            }
            else
            {
                this.Result = result;
            }
            this.ClientError = clientError;
            this.Reason = reason;
            this.ResponseBody = responseBody;
            this.ResponseCode = responseCode;
            this.RetriesLeft = retriesLeft;
        }
        
        /// <summary>
        /// Kazoo-side error string, if any
        /// </summary>
        /// <value>Kazoo-side error string, if any</value>
        [DataMember(Name="client_error", EmitDefaultValue=false)]
        public string ClientError { get; set; }

        /// <summary>
        /// Id of the hook attempted
        /// </summary>
        /// <value>Id of the hook attempted</value>
        [DataMember(Name="hook_id", EmitDefaultValue=false)]
        public string HookId { get; set; }

        /// <summary>
        /// short reason for the failure
        /// </summary>
        /// <value>short reason for the failure</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// HTTP response body received, if any
        /// </summary>
        /// <value>HTTP response body received, if any</value>
        [DataMember(Name="response_body", EmitDefaultValue=false)]
        public string ResponseBody { get; set; }

        /// <summary>
        /// HTTP response code received, if any
        /// </summary>
        /// <value>HTTP response code received, if any</value>
        [DataMember(Name="response_code", EmitDefaultValue=false)]
        public string ResponseCode { get; set; }


        /// <summary>
        /// How many retries were left after this attempt
        /// </summary>
        /// <value>How many retries were left after this attempt</value>
        [DataMember(Name="retries_left", EmitDefaultValue=false)]
        public int? RetriesLeft { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookAttempts {\n");
            sb.Append("  ClientError: ").Append(ClientError).Append("\n");
            sb.Append("  HookId: ").Append(HookId).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  ResponseBody: ").Append(ResponseBody).Append("\n");
            sb.Append("  ResponseCode: ").Append(ResponseCode).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  RetriesLeft: ").Append(RetriesLeft).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookAttempts);
        }

        /// <summary>
        /// Returns true if WebhookAttempts instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookAttempts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookAttempts input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientError == input.ClientError ||
                    (this.ClientError != null &&
                    this.ClientError.Equals(input.ClientError))
                ) && 
                (
                    this.HookId == input.HookId ||
                    (this.HookId != null &&
                    this.HookId.Equals(input.HookId))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.ResponseBody == input.ResponseBody ||
                    (this.ResponseBody != null &&
                    this.ResponseBody.Equals(input.ResponseBody))
                ) && 
                (
                    this.ResponseCode == input.ResponseCode ||
                    (this.ResponseCode != null &&
                    this.ResponseCode.Equals(input.ResponseCode))
                ) && 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) && 
                (
                    this.RetriesLeft == input.RetriesLeft ||
                    (this.RetriesLeft != null &&
                    this.RetriesLeft.Equals(input.RetriesLeft))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientError != null)
                    hashCode = hashCode * 59 + this.ClientError.GetHashCode();
                if (this.HookId != null)
                    hashCode = hashCode * 59 + this.HookId.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.ResponseBody != null)
                    hashCode = hashCode * 59 + this.ResponseBody.GetHashCode();
                if (this.ResponseCode != null)
                    hashCode = hashCode * 59 + this.ResponseCode.GetHashCode();
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                if (this.RetriesLeft != null)
                    hashCode = hashCode * 59 + this.RetriesLeft.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
