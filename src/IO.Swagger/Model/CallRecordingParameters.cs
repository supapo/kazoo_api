/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CallRecordingParameters
    /// </summary>
    [DataContract]
    public partial class CallRecordingParameters :  IEquatable<CallRecordingParameters>, IValidatableObject
    {
        /// <summary>
        /// What format to store the recording on disk
        /// </summary>
        /// <value>What format to store the recording on disk</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormatEnum
        {
            
            /// <summary>
            /// Enum Mp3 for value: mp3
            /// </summary>
            [EnumMember(Value = "mp3")]
            Mp3 = 1,
            
            /// <summary>
            /// Enum Wav for value: wav
            /// </summary>
            [EnumMember(Value = "wav")]
            Wav = 2
        }

        /// <summary>
        /// What format to store the recording on disk
        /// </summary>
        /// <value>What format to store the recording on disk</value>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public FormatEnum? Format { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallRecordingParameters" /> class.
        /// </summary>
        /// <param name="enabled">is recording enabled.</param>
        /// <param name="format">What format to store the recording on disk.</param>
        /// <param name="recordMinSec">The minimum length, in seconds, the recording must be to be considered successful. Otherwise it is deleted.</param>
        /// <param name="recordOnAnswer">Recording should start on answer.</param>
        /// <param name="recordOnBridge">Recording should start on bridge.</param>
        /// <param name="recordSampleRate">What sampling rate to use on the recording.</param>
        /// <param name="timeLimit">Time limit, in seconds, for the recording.</param>
        /// <param name="url">The URL to use when sending the recording for storage.</param>
        public CallRecordingParameters(bool? enabled = default(bool?), FormatEnum? format = default(FormatEnum?), int? recordMinSec = default(int?), bool? recordOnAnswer = default(bool?), bool? recordOnBridge = default(bool?), int? recordSampleRate = default(int?), int? timeLimit = default(int?), string url = default(string))
        {
            this.Enabled = enabled;
            this.Format = format;
            this.RecordMinSec = recordMinSec;
            this.RecordOnAnswer = recordOnAnswer;
            this.RecordOnBridge = recordOnBridge;
            this.RecordSampleRate = recordSampleRate;
            this.TimeLimit = timeLimit;
            this.Url = url;
        }
        
        /// <summary>
        /// is recording enabled
        /// </summary>
        /// <value>is recording enabled</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }


        /// <summary>
        /// The minimum length, in seconds, the recording must be to be considered successful. Otherwise it is deleted
        /// </summary>
        /// <value>The minimum length, in seconds, the recording must be to be considered successful. Otherwise it is deleted</value>
        [DataMember(Name="record_min_sec", EmitDefaultValue=false)]
        public int? RecordMinSec { get; set; }

        /// <summary>
        /// Recording should start on answer
        /// </summary>
        /// <value>Recording should start on answer</value>
        [DataMember(Name="record_on_answer", EmitDefaultValue=false)]
        public bool? RecordOnAnswer { get; set; }

        /// <summary>
        /// Recording should start on bridge
        /// </summary>
        /// <value>Recording should start on bridge</value>
        [DataMember(Name="record_on_bridge", EmitDefaultValue=false)]
        public bool? RecordOnBridge { get; set; }

        /// <summary>
        /// What sampling rate to use on the recording
        /// </summary>
        /// <value>What sampling rate to use on the recording</value>
        [DataMember(Name="record_sample_rate", EmitDefaultValue=false)]
        public int? RecordSampleRate { get; set; }

        /// <summary>
        /// Time limit, in seconds, for the recording
        /// </summary>
        /// <value>Time limit, in seconds, for the recording</value>
        [DataMember(Name="time_limit", EmitDefaultValue=false)]
        public int? TimeLimit { get; set; }

        /// <summary>
        /// The URL to use when sending the recording for storage
        /// </summary>
        /// <value>The URL to use when sending the recording for storage</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallRecordingParameters {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  RecordMinSec: ").Append(RecordMinSec).Append("\n");
            sb.Append("  RecordOnAnswer: ").Append(RecordOnAnswer).Append("\n");
            sb.Append("  RecordOnBridge: ").Append(RecordOnBridge).Append("\n");
            sb.Append("  RecordSampleRate: ").Append(RecordSampleRate).Append("\n");
            sb.Append("  TimeLimit: ").Append(TimeLimit).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallRecordingParameters);
        }

        /// <summary>
        /// Returns true if CallRecordingParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of CallRecordingParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallRecordingParameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.RecordMinSec == input.RecordMinSec ||
                    (this.RecordMinSec != null &&
                    this.RecordMinSec.Equals(input.RecordMinSec))
                ) && 
                (
                    this.RecordOnAnswer == input.RecordOnAnswer ||
                    (this.RecordOnAnswer != null &&
                    this.RecordOnAnswer.Equals(input.RecordOnAnswer))
                ) && 
                (
                    this.RecordOnBridge == input.RecordOnBridge ||
                    (this.RecordOnBridge != null &&
                    this.RecordOnBridge.Equals(input.RecordOnBridge))
                ) && 
                (
                    this.RecordSampleRate == input.RecordSampleRate ||
                    (this.RecordSampleRate != null &&
                    this.RecordSampleRate.Equals(input.RecordSampleRate))
                ) && 
                (
                    this.TimeLimit == input.TimeLimit ||
                    (this.TimeLimit != null &&
                    this.TimeLimit.Equals(input.TimeLimit))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.RecordMinSec != null)
                    hashCode = hashCode * 59 + this.RecordMinSec.GetHashCode();
                if (this.RecordOnAnswer != null)
                    hashCode = hashCode * 59 + this.RecordOnAnswer.GetHashCode();
                if (this.RecordOnBridge != null)
                    hashCode = hashCode * 59 + this.RecordOnBridge.GetHashCode();
                if (this.RecordSampleRate != null)
                    hashCode = hashCode * 59 + this.RecordSampleRate.GetHashCode();
                if (this.TimeLimit != null)
                    hashCode = hashCode * 59 + this.TimeLimit.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TimeLimit (int?) maximum
            if(this.TimeLimit > (int?)10800)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TimeLimit, must be a value less than or equal to 10800.", new [] { "TimeLimit" });
            }

            // TimeLimit (int?) minimum
            if(this.TimeLimit < (int?)5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TimeLimit, must be a value greater than or equal to 5.", new [] { "TimeLimit" });
            }

            yield break;
        }
    }

}
