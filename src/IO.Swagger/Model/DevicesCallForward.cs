/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The device call forward parameters
    /// </summary>
    [DataContract]
    public partial class DevicesCallForward :  IEquatable<DevicesCallForward>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesCallForward" /> class.
        /// </summary>
        /// <param name="directCallsOnly">Determines if the calls that are not directly sent to the device should be forwarded (default to false).</param>
        /// <param name="enabled">Determines if the call forwarding should be used (default to false).</param>
        /// <param name="failover">Enable the call-forwarding parameters if the device is offline (default to false).</param>
        /// <param name="ignoreEarlyMedia">The option to determine if early media from the call forwarded number should ignored (default to true).</param>
        /// <param name="keepCallerId">Determines if the caller id is kept when the call is forwarded, if not the devices caller id is used (default to true).</param>
        /// <param name="number">The number to forward calls to.</param>
        /// <param name="requireKeypress">Determines if the callee is prompted to press 1 to accept the call (default to true).</param>
        /// <param name="substitute">Determines if the call forwarding replaces the device (default to true).</param>
        public DevicesCallForward(bool? directCallsOnly = false, bool? enabled = false, bool? failover = false, bool? ignoreEarlyMedia = true, bool? keepCallerId = true, string number = default(string), bool? requireKeypress = true, bool? substitute = true)
        {
            // use default value if no "directCallsOnly" provided
            if (directCallsOnly == null)
            {
                this.DirectCallsOnly = false;
            }
            else
            {
                this.DirectCallsOnly = directCallsOnly;
            }
            // use default value if no "enabled" provided
            if (enabled == null)
            {
                this.Enabled = false;
            }
            else
            {
                this.Enabled = enabled;
            }
            // use default value if no "failover" provided
            if (failover == null)
            {
                this.Failover = false;
            }
            else
            {
                this.Failover = failover;
            }
            // use default value if no "ignoreEarlyMedia" provided
            if (ignoreEarlyMedia == null)
            {
                this.IgnoreEarlyMedia = true;
            }
            else
            {
                this.IgnoreEarlyMedia = ignoreEarlyMedia;
            }
            // use default value if no "keepCallerId" provided
            if (keepCallerId == null)
            {
                this.KeepCallerId = true;
            }
            else
            {
                this.KeepCallerId = keepCallerId;
            }
            this.Number = number;
            // use default value if no "requireKeypress" provided
            if (requireKeypress == null)
            {
                this.RequireKeypress = true;
            }
            else
            {
                this.RequireKeypress = requireKeypress;
            }
            // use default value if no "substitute" provided
            if (substitute == null)
            {
                this.Substitute = true;
            }
            else
            {
                this.Substitute = substitute;
            }
        }
        
        /// <summary>
        /// Determines if the calls that are not directly sent to the device should be forwarded
        /// </summary>
        /// <value>Determines if the calls that are not directly sent to the device should be forwarded</value>
        [DataMember(Name="direct_calls_only", EmitDefaultValue=false)]
        public bool? DirectCallsOnly { get; set; }

        /// <summary>
        /// Determines if the call forwarding should be used
        /// </summary>
        /// <value>Determines if the call forwarding should be used</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Enable the call-forwarding parameters if the device is offline
        /// </summary>
        /// <value>Enable the call-forwarding parameters if the device is offline</value>
        [DataMember(Name="failover", EmitDefaultValue=false)]
        public bool? Failover { get; set; }

        /// <summary>
        /// The option to determine if early media from the call forwarded number should ignored
        /// </summary>
        /// <value>The option to determine if early media from the call forwarded number should ignored</value>
        [DataMember(Name="ignore_early_media", EmitDefaultValue=false)]
        public bool? IgnoreEarlyMedia { get; set; }

        /// <summary>
        /// Determines if the caller id is kept when the call is forwarded, if not the devices caller id is used
        /// </summary>
        /// <value>Determines if the caller id is kept when the call is forwarded, if not the devices caller id is used</value>
        [DataMember(Name="keep_caller_id", EmitDefaultValue=false)]
        public bool? KeepCallerId { get; set; }

        /// <summary>
        /// The number to forward calls to
        /// </summary>
        /// <value>The number to forward calls to</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// Determines if the callee is prompted to press 1 to accept the call
        /// </summary>
        /// <value>Determines if the callee is prompted to press 1 to accept the call</value>
        [DataMember(Name="require_keypress", EmitDefaultValue=false)]
        public bool? RequireKeypress { get; set; }

        /// <summary>
        /// Determines if the call forwarding replaces the device
        /// </summary>
        /// <value>Determines if the call forwarding replaces the device</value>
        [DataMember(Name="substitute", EmitDefaultValue=false)]
        public bool? Substitute { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DevicesCallForward {\n");
            sb.Append("  DirectCallsOnly: ").Append(DirectCallsOnly).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Failover: ").Append(Failover).Append("\n");
            sb.Append("  IgnoreEarlyMedia: ").Append(IgnoreEarlyMedia).Append("\n");
            sb.Append("  KeepCallerId: ").Append(KeepCallerId).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  RequireKeypress: ").Append(RequireKeypress).Append("\n");
            sb.Append("  Substitute: ").Append(Substitute).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DevicesCallForward);
        }

        /// <summary>
        /// Returns true if DevicesCallForward instances are equal
        /// </summary>
        /// <param name="input">Instance of DevicesCallForward to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DevicesCallForward input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DirectCallsOnly == input.DirectCallsOnly ||
                    (this.DirectCallsOnly != null &&
                    this.DirectCallsOnly.Equals(input.DirectCallsOnly))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.Failover == input.Failover ||
                    (this.Failover != null &&
                    this.Failover.Equals(input.Failover))
                ) && 
                (
                    this.IgnoreEarlyMedia == input.IgnoreEarlyMedia ||
                    (this.IgnoreEarlyMedia != null &&
                    this.IgnoreEarlyMedia.Equals(input.IgnoreEarlyMedia))
                ) && 
                (
                    this.KeepCallerId == input.KeepCallerId ||
                    (this.KeepCallerId != null &&
                    this.KeepCallerId.Equals(input.KeepCallerId))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.RequireKeypress == input.RequireKeypress ||
                    (this.RequireKeypress != null &&
                    this.RequireKeypress.Equals(input.RequireKeypress))
                ) && 
                (
                    this.Substitute == input.Substitute ||
                    (this.Substitute != null &&
                    this.Substitute.Equals(input.Substitute))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DirectCallsOnly != null)
                    hashCode = hashCode * 59 + this.DirectCallsOnly.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.Failover != null)
                    hashCode = hashCode * 59 + this.Failover.GetHashCode();
                if (this.IgnoreEarlyMedia != null)
                    hashCode = hashCode * 59 + this.IgnoreEarlyMedia.GetHashCode();
                if (this.KeepCallerId != null)
                    hashCode = hashCode * 59 + this.KeepCallerId.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.RequireKeypress != null)
                    hashCode = hashCode * 59 + this.RequireKeypress.GetHashCode();
                if (this.Substitute != null)
                    hashCode = hashCode * 59 + this.Substitute.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Number (string) maxLength
            if(this.Number != null && this.Number.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Number, length must be less than 15.", new [] { "Number" });
            }

            yield break;
        }
    }

}
