/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for route.resp_route
    /// </summary>
    [DataContract]
    public partial class KapiRouteRespRoute :  IEquatable<KapiRouteRespRoute>, IValidatableObject
    {
        /// <summary>
        /// Defines CallerIDType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CallerIDTypeEnum
        {
            
            /// <summary>
            /// Enum From for value: from
            /// </summary>
            [EnumMember(Value = "from")]
            From = 1,
            
            /// <summary>
            /// Enum Rpid for value: rpid
            /// </summary>
            [EnumMember(Value = "rpid")]
            Rpid = 2,
            
            /// <summary>
            /// Enum Pid for value: pid
            /// </summary>
            [EnumMember(Value = "pid")]
            Pid = 3
        }

        /// <summary>
        /// Gets or Sets CallerIDType
        /// </summary>
        [DataMember(Name="Caller-ID-Type", EmitDefaultValue=false)]
        public CallerIDTypeEnum? CallerIDType { get; set; }
        /// <summary>
        /// Defines InviteFormat
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InviteFormatEnum
        {
            
            /// <summary>
            /// Enum Username for value: username
            /// </summary>
            [EnumMember(Value = "username")]
            Username = 1,
            
            /// <summary>
            /// Enum E164 for value: e164
            /// </summary>
            [EnumMember(Value = "e164")]
            E164 = 2,
            
            /// <summary>
            /// Enum Npan for value: npan
            /// </summary>
            [EnumMember(Value = "npan")]
            Npan = 3,
            
            /// <summary>
            /// Enum _1npan for value: 1npan
            /// </summary>
            [EnumMember(Value = "1npan")]
            _1npan = 4,
            
            /// <summary>
            /// Enum Route for value: route
            /// </summary>
            [EnumMember(Value = "route")]
            Route = 5,
            
            /// <summary>
            /// Enum Loopback for value: loopback
            /// </summary>
            [EnumMember(Value = "loopback")]
            Loopback = 6,
            
            /// <summary>
            /// Enum Contact for value: contact
            /// </summary>
            [EnumMember(Value = "contact")]
            Contact = 7
        }

        /// <summary>
        /// Gets or Sets InviteFormat
        /// </summary>
        [DataMember(Name="Invite-Format", EmitDefaultValue=false)]
        public InviteFormatEnum InviteFormat { get; set; }
        /// <summary>
        /// Defines Media
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MediaEnum
        {
            
            /// <summary>
            /// Enum Process for value: process
            /// </summary>
            [EnumMember(Value = "process")]
            Process = 1,
            
            /// <summary>
            /// Enum Bypass for value: bypass
            /// </summary>
            [EnumMember(Value = "bypass")]
            Bypass = 2,
            
            /// <summary>
            /// Enum Auto for value: auto
            /// </summary>
            [EnumMember(Value = "auto")]
            Auto = 3
        }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name="Media", EmitDefaultValue=false)]
        public MediaEnum? Media { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiRouteRespRoute" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiRouteRespRoute() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiRouteRespRoute" /> class.
        /// </summary>
        /// <param name="authPassword">authPassword.</param>
        /// <param name="authUser">authUser.</param>
        /// <param name="callerIDName">callerIDName.</param>
        /// <param name="callerIDNumber">callerIDNumber.</param>
        /// <param name="callerIDType">callerIDType.</param>
        /// <param name="codecs">codecs.</param>
        /// <param name="context">context.</param>
        /// <param name="customApplicationVars">customApplicationVars.</param>
        /// <param name="customChannelVars">customChannelVars.</param>
        /// <param name="customSIPHeaders">customSIPHeaders.</param>
        /// <param name="inviteFormat">inviteFormat (required).</param>
        /// <param name="media">media.</param>
        /// <param name="progressTimeout">progressTimeout.</param>
        /// <param name="proxyVia">proxyVia.</param>
        /// <param name="rate">rate.</param>
        /// <param name="rateIncrement">rateIncrement.</param>
        /// <param name="rateMinimum">rateMinimum.</param>
        /// <param name="rateNoChargeTime">rateNoChargeTime.</param>
        /// <param name="route">route.</param>
        /// <param name="surcharge">surcharge.</param>
        /// <param name="toDID">toDID.</param>
        /// <param name="toRealm">toRealm.</param>
        /// <param name="toUser">toUser.</param>
        /// <param name="weightCost">weightCost.</param>
        /// <param name="weightLocation">weightLocation.</param>
        public KapiRouteRespRoute(string authPassword = default(string), string authUser = default(string), string callerIDName = default(string), string callerIDNumber = default(string), CallerIDTypeEnum? callerIDType = default(CallerIDTypeEnum?), List<string> codecs = default(List<string>), string context = default(string), Object customApplicationVars = default(Object), Object customChannelVars = default(Object), Object customSIPHeaders = default(Object), InviteFormatEnum inviteFormat = default(InviteFormatEnum), MediaEnum? media = default(MediaEnum?), int? progressTimeout = default(int?), string proxyVia = default(string), string rate = default(string), string rateIncrement = default(string), string rateMinimum = default(string), int? rateNoChargeTime = default(int?), string route = default(string), string surcharge = default(string), string toDID = default(string), string toRealm = default(string), string toUser = default(string), string weightCost = default(string), string weightLocation = default(string))
        {
            // to ensure "inviteFormat" is required (not null)
            if (inviteFormat == null)
            {
                throw new InvalidDataException("inviteFormat is a required property for KapiRouteRespRoute and cannot be null");
            }
            else
            {
                this.InviteFormat = inviteFormat;
            }
            this.AuthPassword = authPassword;
            this.AuthUser = authUser;
            this.CallerIDName = callerIDName;
            this.CallerIDNumber = callerIDNumber;
            this.CallerIDType = callerIDType;
            this.Codecs = codecs;
            this.Context = context;
            this.CustomApplicationVars = customApplicationVars;
            this.CustomChannelVars = customChannelVars;
            this.CustomSIPHeaders = customSIPHeaders;
            this.Media = media;
            this.ProgressTimeout = progressTimeout;
            this.ProxyVia = proxyVia;
            this.Rate = rate;
            this.RateIncrement = rateIncrement;
            this.RateMinimum = rateMinimum;
            this.RateNoChargeTime = rateNoChargeTime;
            this.Route = route;
            this.Surcharge = surcharge;
            this.ToDID = toDID;
            this.ToRealm = toRealm;
            this.ToUser = toUser;
            this.WeightCost = weightCost;
            this.WeightLocation = weightLocation;
        }
        
        /// <summary>
        /// Gets or Sets AuthPassword
        /// </summary>
        [DataMember(Name="Auth-Password", EmitDefaultValue=false)]
        public string AuthPassword { get; set; }

        /// <summary>
        /// Gets or Sets AuthUser
        /// </summary>
        [DataMember(Name="Auth-User", EmitDefaultValue=false)]
        public string AuthUser { get; set; }

        /// <summary>
        /// Gets or Sets CallerIDName
        /// </summary>
        [DataMember(Name="Caller-ID-Name", EmitDefaultValue=false)]
        public string CallerIDName { get; set; }

        /// <summary>
        /// Gets or Sets CallerIDNumber
        /// </summary>
        [DataMember(Name="Caller-ID-Number", EmitDefaultValue=false)]
        public string CallerIDNumber { get; set; }


        /// <summary>
        /// Gets or Sets Codecs
        /// </summary>
        [DataMember(Name="Codecs", EmitDefaultValue=false)]
        public List<string> Codecs { get; set; }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name="Context", EmitDefaultValue=false)]
        public string Context { get; set; }

        /// <summary>
        /// Gets or Sets CustomApplicationVars
        /// </summary>
        [DataMember(Name="Custom-Application-Vars", EmitDefaultValue=false)]
        public Object CustomApplicationVars { get; set; }

        /// <summary>
        /// Gets or Sets CustomChannelVars
        /// </summary>
        [DataMember(Name="Custom-Channel-Vars", EmitDefaultValue=false)]
        public Object CustomChannelVars { get; set; }

        /// <summary>
        /// Gets or Sets CustomSIPHeaders
        /// </summary>
        [DataMember(Name="Custom-SIP-Headers", EmitDefaultValue=false)]
        public Object CustomSIPHeaders { get; set; }



        /// <summary>
        /// Gets or Sets ProgressTimeout
        /// </summary>
        [DataMember(Name="Progress-Timeout", EmitDefaultValue=false)]
        public int? ProgressTimeout { get; set; }

        /// <summary>
        /// Gets or Sets ProxyVia
        /// </summary>
        [DataMember(Name="Proxy-Via", EmitDefaultValue=false)]
        public string ProxyVia { get; set; }

        /// <summary>
        /// Gets or Sets Rate
        /// </summary>
        [DataMember(Name="Rate", EmitDefaultValue=false)]
        public string Rate { get; set; }

        /// <summary>
        /// Gets or Sets RateIncrement
        /// </summary>
        [DataMember(Name="Rate-Increment", EmitDefaultValue=false)]
        public string RateIncrement { get; set; }

        /// <summary>
        /// Gets or Sets RateMinimum
        /// </summary>
        [DataMember(Name="Rate-Minimum", EmitDefaultValue=false)]
        public string RateMinimum { get; set; }

        /// <summary>
        /// Gets or Sets RateNoChargeTime
        /// </summary>
        [DataMember(Name="Rate-NoCharge-Time", EmitDefaultValue=false)]
        public int? RateNoChargeTime { get; set; }

        /// <summary>
        /// Gets or Sets Route
        /// </summary>
        [DataMember(Name="Route", EmitDefaultValue=false)]
        public string Route { get; set; }

        /// <summary>
        /// Gets or Sets Surcharge
        /// </summary>
        [DataMember(Name="Surcharge", EmitDefaultValue=false)]
        public string Surcharge { get; set; }

        /// <summary>
        /// Gets or Sets ToDID
        /// </summary>
        [DataMember(Name="To-DID", EmitDefaultValue=false)]
        public string ToDID { get; set; }

        /// <summary>
        /// Gets or Sets ToRealm
        /// </summary>
        [DataMember(Name="To-Realm", EmitDefaultValue=false)]
        public string ToRealm { get; set; }

        /// <summary>
        /// Gets or Sets ToUser
        /// </summary>
        [DataMember(Name="To-User", EmitDefaultValue=false)]
        public string ToUser { get; set; }

        /// <summary>
        /// Gets or Sets WeightCost
        /// </summary>
        [DataMember(Name="Weight-Cost", EmitDefaultValue=false)]
        public string WeightCost { get; set; }

        /// <summary>
        /// Gets or Sets WeightLocation
        /// </summary>
        [DataMember(Name="Weight-Location", EmitDefaultValue=false)]
        public string WeightLocation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiRouteRespRoute {\n");
            sb.Append("  AuthPassword: ").Append(AuthPassword).Append("\n");
            sb.Append("  AuthUser: ").Append(AuthUser).Append("\n");
            sb.Append("  CallerIDName: ").Append(CallerIDName).Append("\n");
            sb.Append("  CallerIDNumber: ").Append(CallerIDNumber).Append("\n");
            sb.Append("  CallerIDType: ").Append(CallerIDType).Append("\n");
            sb.Append("  Codecs: ").Append(Codecs).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  CustomApplicationVars: ").Append(CustomApplicationVars).Append("\n");
            sb.Append("  CustomChannelVars: ").Append(CustomChannelVars).Append("\n");
            sb.Append("  CustomSIPHeaders: ").Append(CustomSIPHeaders).Append("\n");
            sb.Append("  InviteFormat: ").Append(InviteFormat).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  ProgressTimeout: ").Append(ProgressTimeout).Append("\n");
            sb.Append("  ProxyVia: ").Append(ProxyVia).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  RateIncrement: ").Append(RateIncrement).Append("\n");
            sb.Append("  RateMinimum: ").Append(RateMinimum).Append("\n");
            sb.Append("  RateNoChargeTime: ").Append(RateNoChargeTime).Append("\n");
            sb.Append("  Route: ").Append(Route).Append("\n");
            sb.Append("  Surcharge: ").Append(Surcharge).Append("\n");
            sb.Append("  ToDID: ").Append(ToDID).Append("\n");
            sb.Append("  ToRealm: ").Append(ToRealm).Append("\n");
            sb.Append("  ToUser: ").Append(ToUser).Append("\n");
            sb.Append("  WeightCost: ").Append(WeightCost).Append("\n");
            sb.Append("  WeightLocation: ").Append(WeightLocation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiRouteRespRoute);
        }

        /// <summary>
        /// Returns true if KapiRouteRespRoute instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiRouteRespRoute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiRouteRespRoute input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthPassword == input.AuthPassword ||
                    (this.AuthPassword != null &&
                    this.AuthPassword.Equals(input.AuthPassword))
                ) && 
                (
                    this.AuthUser == input.AuthUser ||
                    (this.AuthUser != null &&
                    this.AuthUser.Equals(input.AuthUser))
                ) && 
                (
                    this.CallerIDName == input.CallerIDName ||
                    (this.CallerIDName != null &&
                    this.CallerIDName.Equals(input.CallerIDName))
                ) && 
                (
                    this.CallerIDNumber == input.CallerIDNumber ||
                    (this.CallerIDNumber != null &&
                    this.CallerIDNumber.Equals(input.CallerIDNumber))
                ) && 
                (
                    this.CallerIDType == input.CallerIDType ||
                    (this.CallerIDType != null &&
                    this.CallerIDType.Equals(input.CallerIDType))
                ) && 
                (
                    this.Codecs == input.Codecs ||
                    this.Codecs != null &&
                    this.Codecs.SequenceEqual(input.Codecs)
                ) && 
                (
                    this.Context == input.Context ||
                    (this.Context != null &&
                    this.Context.Equals(input.Context))
                ) && 
                (
                    this.CustomApplicationVars == input.CustomApplicationVars ||
                    (this.CustomApplicationVars != null &&
                    this.CustomApplicationVars.Equals(input.CustomApplicationVars))
                ) && 
                (
                    this.CustomChannelVars == input.CustomChannelVars ||
                    (this.CustomChannelVars != null &&
                    this.CustomChannelVars.Equals(input.CustomChannelVars))
                ) && 
                (
                    this.CustomSIPHeaders == input.CustomSIPHeaders ||
                    (this.CustomSIPHeaders != null &&
                    this.CustomSIPHeaders.Equals(input.CustomSIPHeaders))
                ) && 
                (
                    this.InviteFormat == input.InviteFormat ||
                    (this.InviteFormat != null &&
                    this.InviteFormat.Equals(input.InviteFormat))
                ) && 
                (
                    this.Media == input.Media ||
                    (this.Media != null &&
                    this.Media.Equals(input.Media))
                ) && 
                (
                    this.ProgressTimeout == input.ProgressTimeout ||
                    (this.ProgressTimeout != null &&
                    this.ProgressTimeout.Equals(input.ProgressTimeout))
                ) && 
                (
                    this.ProxyVia == input.ProxyVia ||
                    (this.ProxyVia != null &&
                    this.ProxyVia.Equals(input.ProxyVia))
                ) && 
                (
                    this.Rate == input.Rate ||
                    (this.Rate != null &&
                    this.Rate.Equals(input.Rate))
                ) && 
                (
                    this.RateIncrement == input.RateIncrement ||
                    (this.RateIncrement != null &&
                    this.RateIncrement.Equals(input.RateIncrement))
                ) && 
                (
                    this.RateMinimum == input.RateMinimum ||
                    (this.RateMinimum != null &&
                    this.RateMinimum.Equals(input.RateMinimum))
                ) && 
                (
                    this.RateNoChargeTime == input.RateNoChargeTime ||
                    (this.RateNoChargeTime != null &&
                    this.RateNoChargeTime.Equals(input.RateNoChargeTime))
                ) && 
                (
                    this.Route == input.Route ||
                    (this.Route != null &&
                    this.Route.Equals(input.Route))
                ) && 
                (
                    this.Surcharge == input.Surcharge ||
                    (this.Surcharge != null &&
                    this.Surcharge.Equals(input.Surcharge))
                ) && 
                (
                    this.ToDID == input.ToDID ||
                    (this.ToDID != null &&
                    this.ToDID.Equals(input.ToDID))
                ) && 
                (
                    this.ToRealm == input.ToRealm ||
                    (this.ToRealm != null &&
                    this.ToRealm.Equals(input.ToRealm))
                ) && 
                (
                    this.ToUser == input.ToUser ||
                    (this.ToUser != null &&
                    this.ToUser.Equals(input.ToUser))
                ) && 
                (
                    this.WeightCost == input.WeightCost ||
                    (this.WeightCost != null &&
                    this.WeightCost.Equals(input.WeightCost))
                ) && 
                (
                    this.WeightLocation == input.WeightLocation ||
                    (this.WeightLocation != null &&
                    this.WeightLocation.Equals(input.WeightLocation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthPassword != null)
                    hashCode = hashCode * 59 + this.AuthPassword.GetHashCode();
                if (this.AuthUser != null)
                    hashCode = hashCode * 59 + this.AuthUser.GetHashCode();
                if (this.CallerIDName != null)
                    hashCode = hashCode * 59 + this.CallerIDName.GetHashCode();
                if (this.CallerIDNumber != null)
                    hashCode = hashCode * 59 + this.CallerIDNumber.GetHashCode();
                if (this.CallerIDType != null)
                    hashCode = hashCode * 59 + this.CallerIDType.GetHashCode();
                if (this.Codecs != null)
                    hashCode = hashCode * 59 + this.Codecs.GetHashCode();
                if (this.Context != null)
                    hashCode = hashCode * 59 + this.Context.GetHashCode();
                if (this.CustomApplicationVars != null)
                    hashCode = hashCode * 59 + this.CustomApplicationVars.GetHashCode();
                if (this.CustomChannelVars != null)
                    hashCode = hashCode * 59 + this.CustomChannelVars.GetHashCode();
                if (this.CustomSIPHeaders != null)
                    hashCode = hashCode * 59 + this.CustomSIPHeaders.GetHashCode();
                if (this.InviteFormat != null)
                    hashCode = hashCode * 59 + this.InviteFormat.GetHashCode();
                if (this.Media != null)
                    hashCode = hashCode * 59 + this.Media.GetHashCode();
                if (this.ProgressTimeout != null)
                    hashCode = hashCode * 59 + this.ProgressTimeout.GetHashCode();
                if (this.ProxyVia != null)
                    hashCode = hashCode * 59 + this.ProxyVia.GetHashCode();
                if (this.Rate != null)
                    hashCode = hashCode * 59 + this.Rate.GetHashCode();
                if (this.RateIncrement != null)
                    hashCode = hashCode * 59 + this.RateIncrement.GetHashCode();
                if (this.RateMinimum != null)
                    hashCode = hashCode * 59 + this.RateMinimum.GetHashCode();
                if (this.RateNoChargeTime != null)
                    hashCode = hashCode * 59 + this.RateNoChargeTime.GetHashCode();
                if (this.Route != null)
                    hashCode = hashCode * 59 + this.Route.GetHashCode();
                if (this.Surcharge != null)
                    hashCode = hashCode * 59 + this.Surcharge.GetHashCode();
                if (this.ToDID != null)
                    hashCode = hashCode * 59 + this.ToDID.GetHashCode();
                if (this.ToRealm != null)
                    hashCode = hashCode * 59 + this.ToRealm.GetHashCode();
                if (this.ToUser != null)
                    hashCode = hashCode * 59 + this.ToUser.GetHashCode();
                if (this.WeightCost != null)
                    hashCode = hashCode * 59 + this.WeightCost.GetHashCode();
                if (this.WeightLocation != null)
                    hashCode = hashCode * 59 + this.WeightLocation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
