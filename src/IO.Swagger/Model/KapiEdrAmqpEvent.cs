/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for edr_amqp.event
    /// </summary>
    [DataContract]
    public partial class KapiEdrAmqpEvent :  IEquatable<KapiEdrAmqpEvent>, IValidatableObject
    {
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Edr for value: edr
            /// </summary>
            [EnumMember(Value = "edr")]
            Edr = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Event for value: event
            /// </summary>
            [EnumMember(Value = "event")]
            Event = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiEdrAmqpEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiEdrAmqpEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiEdrAmqpEvent" /> class.
        /// </summary>
        /// <param name="accountID">accountID.</param>
        /// <param name="accountTree">accountTree.</param>
        /// <param name="body">body (required).</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="gregorianTime">gregorianTime (required).</param>
        /// <param name="iD">iD (required).</param>
        /// <param name="node">node (required).</param>
        /// <param name="severity">severity (required).</param>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="verbosity">verbosity (required).</param>
        public KapiEdrAmqpEvent(string accountID = default(string), string accountTree = default(string), Object body = default(Object), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), int? gregorianTime = default(int?), string iD = default(string), string node = default(string), string severity = default(string), string timestamp = default(string), string verbosity = default(string))
        {
            // to ensure "body" is required (not null)
            if (body == null)
            {
                throw new InvalidDataException("body is a required property for KapiEdrAmqpEvent and cannot be null");
            }
            else
            {
                this.Body = body;
            }
            // to ensure "gregorianTime" is required (not null)
            if (gregorianTime == null)
            {
                throw new InvalidDataException("gregorianTime is a required property for KapiEdrAmqpEvent and cannot be null");
            }
            else
            {
                this.GregorianTime = gregorianTime;
            }
            // to ensure "iD" is required (not null)
            if (iD == null)
            {
                throw new InvalidDataException("iD is a required property for KapiEdrAmqpEvent and cannot be null");
            }
            else
            {
                this.ID = iD;
            }
            // to ensure "node" is required (not null)
            if (node == null)
            {
                throw new InvalidDataException("node is a required property for KapiEdrAmqpEvent and cannot be null");
            }
            else
            {
                this.Node = node;
            }
            // to ensure "severity" is required (not null)
            if (severity == null)
            {
                throw new InvalidDataException("severity is a required property for KapiEdrAmqpEvent and cannot be null");
            }
            else
            {
                this.Severity = severity;
            }
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for KapiEdrAmqpEvent and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "verbosity" is required (not null)
            if (verbosity == null)
            {
                throw new InvalidDataException("verbosity is a required property for KapiEdrAmqpEvent and cannot be null");
            }
            else
            {
                this.Verbosity = verbosity;
            }
            this.AccountID = accountID;
            this.AccountTree = accountTree;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
        }
        
        /// <summary>
        /// Gets or Sets AccountID
        /// </summary>
        [DataMember(Name="Account-ID", EmitDefaultValue=false)]
        public string AccountID { get; set; }

        /// <summary>
        /// Gets or Sets AccountTree
        /// </summary>
        [DataMember(Name="Account-Tree", EmitDefaultValue=false)]
        public string AccountTree { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name="Body", EmitDefaultValue=false)]
        public Object Body { get; set; }



        /// <summary>
        /// Gets or Sets GregorianTime
        /// </summary>
        [DataMember(Name="Gregorian-Time", EmitDefaultValue=false)]
        public int? GregorianTime { get; set; }

        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public string ID { get; set; }

        /// <summary>
        /// Gets or Sets Node
        /// </summary>
        [DataMember(Name="Node", EmitDefaultValue=false)]
        public string Node { get; set; }

        /// <summary>
        /// Gets or Sets Severity
        /// </summary>
        [DataMember(Name="Severity", EmitDefaultValue=false)]
        public string Severity { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="Timestamp", EmitDefaultValue=false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Verbosity
        /// </summary>
        [DataMember(Name="Verbosity", EmitDefaultValue=false)]
        public string Verbosity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiEdrAmqpEvent {\n");
            sb.Append("  AccountID: ").Append(AccountID).Append("\n");
            sb.Append("  AccountTree: ").Append(AccountTree).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  GregorianTime: ").Append(GregorianTime).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  Node: ").Append(Node).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Verbosity: ").Append(Verbosity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiEdrAmqpEvent);
        }

        /// <summary>
        /// Returns true if KapiEdrAmqpEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiEdrAmqpEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiEdrAmqpEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountID == input.AccountID ||
                    (this.AccountID != null &&
                    this.AccountID.Equals(input.AccountID))
                ) && 
                (
                    this.AccountTree == input.AccountTree ||
                    (this.AccountTree != null &&
                    this.AccountTree.Equals(input.AccountTree))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.GregorianTime == input.GregorianTime ||
                    (this.GregorianTime != null &&
                    this.GregorianTime.Equals(input.GregorianTime))
                ) && 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.Node == input.Node ||
                    (this.Node != null &&
                    this.Node.Equals(input.Node))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Verbosity == input.Verbosity ||
                    (this.Verbosity != null &&
                    this.Verbosity.Equals(input.Verbosity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountID != null)
                    hashCode = hashCode * 59 + this.AccountID.GetHashCode();
                if (this.AccountTree != null)
                    hashCode = hashCode * 59 + this.AccountTree.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.GregorianTime != null)
                    hashCode = hashCode * 59 + this.GregorianTime.GetHashCode();
                if (this.ID != null)
                    hashCode = hashCode * 59 + this.ID.GetHashCode();
                if (this.Node != null)
                    hashCode = hashCode * 59 + this.Node.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Verbosity != null)
                    hashCode = hashCode * 59 + this.Verbosity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
