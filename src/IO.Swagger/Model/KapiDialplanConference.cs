/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for dialplan.conference
    /// </summary>
    [DataContract]
    public partial class KapiDialplanConference :  IEquatable<KapiDialplanConference>, IValidatableObject
    {
        /// <summary>
        /// Defines ApplicationName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApplicationNameEnum
        {
            
            /// <summary>
            /// Enum Conference for value: conference
            /// </summary>
            [EnumMember(Value = "conference")]
            Conference = 1
        }

        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name="Application-Name", EmitDefaultValue=false)]
        public ApplicationNameEnum ApplicationName { get; set; }
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Call for value: call
            /// </summary>
            [EnumMember(Value = "call")]
            Call = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Command for value: command
            /// </summary>
            [EnumMember(Value = "command")]
            Command = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Defines InsertAt
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InsertAtEnum
        {
            
            /// <summary>
            /// Enum Head for value: head
            /// </summary>
            [EnumMember(Value = "head")]
            Head = 1,
            
            /// <summary>
            /// Enum Tail for value: tail
            /// </summary>
            [EnumMember(Value = "tail")]
            Tail = 2,
            
            /// <summary>
            /// Enum Flush for value: flush
            /// </summary>
            [EnumMember(Value = "flush")]
            Flush = 3,
            
            /// <summary>
            /// Enum Now for value: now
            /// </summary>
            [EnumMember(Value = "now")]
            Now = 4
        }

        /// <summary>
        /// Gets or Sets InsertAt
        /// </summary>
        [DataMember(Name="Insert-At", EmitDefaultValue=false)]
        public InsertAtEnum? InsertAt { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanConference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiDialplanConference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanConference" /> class.
        /// </summary>
        /// <param name="applicationName">applicationName (required).</param>
        /// <param name="callID">callID (required).</param>
        /// <param name="conferenceID">conferenceID (required).</param>
        /// <param name="deaf">deaf.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="insertAt">insertAt.</param>
        /// <param name="memberNospeak">memberNospeak.</param>
        /// <param name="moderator">moderator.</param>
        /// <param name="mute">mute.</param>
        /// <param name="nospeakCheck">nospeakCheck.</param>
        /// <param name="profile">profile.</param>
        /// <param name="reinvite">reinvite.</param>
        public KapiDialplanConference(ApplicationNameEnum applicationName = default(ApplicationNameEnum), string callID = default(string), string conferenceID = default(string), bool? deaf = default(bool?), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), InsertAtEnum? insertAt = default(InsertAtEnum?), string memberNospeak = default(string), bool? moderator = default(bool?), bool? mute = default(bool?), string nospeakCheck = default(string), string profile = default(string), bool? reinvite = default(bool?))
        {
            // to ensure "applicationName" is required (not null)
            if (applicationName == null)
            {
                throw new InvalidDataException("applicationName is a required property for KapiDialplanConference and cannot be null");
            }
            else
            {
                this.ApplicationName = applicationName;
            }
            // to ensure "callID" is required (not null)
            if (callID == null)
            {
                throw new InvalidDataException("callID is a required property for KapiDialplanConference and cannot be null");
            }
            else
            {
                this.CallID = callID;
            }
            // to ensure "conferenceID" is required (not null)
            if (conferenceID == null)
            {
                throw new InvalidDataException("conferenceID is a required property for KapiDialplanConference and cannot be null");
            }
            else
            {
                this.ConferenceID = conferenceID;
            }
            this.Deaf = deaf;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.InsertAt = insertAt;
            this.MemberNospeak = memberNospeak;
            this.Moderator = moderator;
            this.Mute = mute;
            this.NospeakCheck = nospeakCheck;
            this.Profile = profile;
            this.Reinvite = reinvite;
        }
        

        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }

        /// <summary>
        /// Gets or Sets ConferenceID
        /// </summary>
        [DataMember(Name="Conference-ID", EmitDefaultValue=false)]
        public string ConferenceID { get; set; }

        /// <summary>
        /// Gets or Sets Deaf
        /// </summary>
        [DataMember(Name="Deaf", EmitDefaultValue=false)]
        public bool? Deaf { get; set; }




        /// <summary>
        /// Gets or Sets MemberNospeak
        /// </summary>
        [DataMember(Name="Member-Nospeak", EmitDefaultValue=false)]
        public string MemberNospeak { get; set; }

        /// <summary>
        /// Gets or Sets Moderator
        /// </summary>
        [DataMember(Name="Moderator", EmitDefaultValue=false)]
        public bool? Moderator { get; set; }

        /// <summary>
        /// Gets or Sets Mute
        /// </summary>
        [DataMember(Name="Mute", EmitDefaultValue=false)]
        public bool? Mute { get; set; }

        /// <summary>
        /// Gets or Sets NospeakCheck
        /// </summary>
        [DataMember(Name="Nospeak-Check", EmitDefaultValue=false)]
        public string NospeakCheck { get; set; }

        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [DataMember(Name="Profile", EmitDefaultValue=false)]
        public string Profile { get; set; }

        /// <summary>
        /// Gets or Sets Reinvite
        /// </summary>
        [DataMember(Name="Reinvite", EmitDefaultValue=false)]
        public bool? Reinvite { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiDialplanConference {\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  ConferenceID: ").Append(ConferenceID).Append("\n");
            sb.Append("  Deaf: ").Append(Deaf).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  InsertAt: ").Append(InsertAt).Append("\n");
            sb.Append("  MemberNospeak: ").Append(MemberNospeak).Append("\n");
            sb.Append("  Moderator: ").Append(Moderator).Append("\n");
            sb.Append("  Mute: ").Append(Mute).Append("\n");
            sb.Append("  NospeakCheck: ").Append(NospeakCheck).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  Reinvite: ").Append(Reinvite).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiDialplanConference);
        }

        /// <summary>
        /// Returns true if KapiDialplanConference instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiDialplanConference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiDialplanConference input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.ConferenceID == input.ConferenceID ||
                    (this.ConferenceID != null &&
                    this.ConferenceID.Equals(input.ConferenceID))
                ) && 
                (
                    this.Deaf == input.Deaf ||
                    (this.Deaf != null &&
                    this.Deaf.Equals(input.Deaf))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.InsertAt == input.InsertAt ||
                    (this.InsertAt != null &&
                    this.InsertAt.Equals(input.InsertAt))
                ) && 
                (
                    this.MemberNospeak == input.MemberNospeak ||
                    (this.MemberNospeak != null &&
                    this.MemberNospeak.Equals(input.MemberNospeak))
                ) && 
                (
                    this.Moderator == input.Moderator ||
                    (this.Moderator != null &&
                    this.Moderator.Equals(input.Moderator))
                ) && 
                (
                    this.Mute == input.Mute ||
                    (this.Mute != null &&
                    this.Mute.Equals(input.Mute))
                ) && 
                (
                    this.NospeakCheck == input.NospeakCheck ||
                    (this.NospeakCheck != null &&
                    this.NospeakCheck.Equals(input.NospeakCheck))
                ) && 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                ) && 
                (
                    this.Reinvite == input.Reinvite ||
                    (this.Reinvite != null &&
                    this.Reinvite.Equals(input.Reinvite))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationName != null)
                    hashCode = hashCode * 59 + this.ApplicationName.GetHashCode();
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.ConferenceID != null)
                    hashCode = hashCode * 59 + this.ConferenceID.GetHashCode();
                if (this.Deaf != null)
                    hashCode = hashCode * 59 + this.Deaf.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.InsertAt != null)
                    hashCode = hashCode * 59 + this.InsertAt.GetHashCode();
                if (this.MemberNospeak != null)
                    hashCode = hashCode * 59 + this.MemberNospeak.GetHashCode();
                if (this.Moderator != null)
                    hashCode = hashCode * 59 + this.Moderator.GetHashCode();
                if (this.Mute != null)
                    hashCode = hashCode * 59 + this.Mute.GetHashCode();
                if (this.NospeakCheck != null)
                    hashCode = hashCode * 59 + this.NospeakCheck.GetHashCode();
                if (this.Profile != null)
                    hashCode = hashCode * 59 + this.Profile.GetHashCode();
                if (this.Reinvite != null)
                    hashCode = hashCode * 59 + this.Reinvite.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
