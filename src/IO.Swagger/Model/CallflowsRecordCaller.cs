/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Record the caller&#39;s audio stream
    /// </summary>
    [DataContract]
    public partial class CallflowsRecordCaller :  IEquatable<CallflowsRecordCaller>, IValidatableObject
    {
        /// <summary>
        /// What format to store the recording on disk
        /// </summary>
        /// <value>What format to store the recording on disk</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormatEnum
        {
            
            /// <summary>
            /// Enum Mp3 for value: mp3
            /// </summary>
            [EnumMember(Value = "mp3")]
            Mp3 = 1,
            
            /// <summary>
            /// Enum Wav for value: wav
            /// </summary>
            [EnumMember(Value = "wav")]
            Wav = 2
        }

        /// <summary>
        /// What format to store the recording on disk
        /// </summary>
        /// <value>What format to store the recording on disk</value>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public FormatEnum? Format { get; set; }
        /// <summary>
        /// What HTTP method to use when sending the recording
        /// </summary>
        /// <value>What HTTP method to use when sending the recording</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodEnum
        {
            
            /// <summary>
            /// Enum Put for value: put
            /// </summary>
            [EnumMember(Value = "put")]
            Put = 1,
            
            /// <summary>
            /// Enum Post for value: post
            /// </summary>
            [EnumMember(Value = "post")]
            Post = 2
        }

        /// <summary>
        /// What HTTP method to use when sending the recording
        /// </summary>
        /// <value>What HTTP method to use when sending the recording</value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public MethodEnum? Method { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsRecordCaller" /> class.
        /// </summary>
        /// <param name="format">What format to store the recording on disk.</param>
        /// <param name="method">What HTTP method to use when sending the recording (default to MethodEnum.Put).</param>
        /// <param name="skipModule">When set to true this callflow action is skipped, advancing to the wildcard branch (if any).</param>
        /// <param name="timeLimit">Time limit, in seconds, for the recording.</param>
        /// <param name="url">The URL to use when sending the recording for storage.</param>
        public CallflowsRecordCaller(FormatEnum? format = default(FormatEnum?), MethodEnum? method = MethodEnum.Put, bool? skipModule = default(bool?), int? timeLimit = default(int?), string url = default(string))
        {
            this.Format = format;
            // use default value if no "method" provided
            if (method == null)
            {
                this.Method = MethodEnum.Put;
            }
            else
            {
                this.Method = method;
            }
            this.SkipModule = skipModule;
            this.TimeLimit = timeLimit;
            this.Url = url;
        }
        


        /// <summary>
        /// When set to true this callflow action is skipped, advancing to the wildcard branch (if any)
        /// </summary>
        /// <value>When set to true this callflow action is skipped, advancing to the wildcard branch (if any)</value>
        [DataMember(Name="skip_module", EmitDefaultValue=false)]
        public bool? SkipModule { get; set; }

        /// <summary>
        /// Time limit, in seconds, for the recording
        /// </summary>
        /// <value>Time limit, in seconds, for the recording</value>
        [DataMember(Name="time_limit", EmitDefaultValue=false)]
        public int? TimeLimit { get; set; }

        /// <summary>
        /// The URL to use when sending the recording for storage
        /// </summary>
        /// <value>The URL to use when sending the recording for storage</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallflowsRecordCaller {\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  SkipModule: ").Append(SkipModule).Append("\n");
            sb.Append("  TimeLimit: ").Append(TimeLimit).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallflowsRecordCaller);
        }

        /// <summary>
        /// Returns true if CallflowsRecordCaller instances are equal
        /// </summary>
        /// <param name="input">Instance of CallflowsRecordCaller to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallflowsRecordCaller input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.SkipModule == input.SkipModule ||
                    (this.SkipModule != null &&
                    this.SkipModule.Equals(input.SkipModule))
                ) && 
                (
                    this.TimeLimit == input.TimeLimit ||
                    (this.TimeLimit != null &&
                    this.TimeLimit.Equals(input.TimeLimit))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.SkipModule != null)
                    hashCode = hashCode * 59 + this.SkipModule.GetHashCode();
                if (this.TimeLimit != null)
                    hashCode = hashCode * 59 + this.TimeLimit.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TimeLimit (int?) maximum
            if(this.TimeLimit > (int?)10800)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TimeLimit, must be a value less than or equal to 10800.", new [] { "TimeLimit" });
            }

            // TimeLimit (int?) minimum
            if(this.TimeLimit < (int?)5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TimeLimit, must be a value greater than or equal to 5.", new [] { "TimeLimit" });
            }

            yield break;
        }
    }

}
