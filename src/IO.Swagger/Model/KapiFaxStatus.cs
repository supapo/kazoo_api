/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for fax.status
    /// </summary>
    [DataContract]
    public partial class KapiFaxStatus :  IEquatable<KapiFaxStatus>, IValidatableObject
    {
        /// <summary>
        /// Defines Direction
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DirectionEnum
        {
            
            /// <summary>
            /// Enum Incoming for value: incoming
            /// </summary>
            [EnumMember(Value = "incoming")]
            Incoming = 1,
            
            /// <summary>
            /// Enum Outgoing for value: outgoing
            /// </summary>
            [EnumMember(Value = "outgoing")]
            Outgoing = 2
        }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name="Direction", EmitDefaultValue=false)]
        public DirectionEnum? Direction { get; set; }
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Fax for value: fax
            /// </summary>
            [EnumMember(Value = "fax")]
            Fax = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Status for value: status
            /// </summary>
            [EnumMember(Value = "status")]
            Status = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Defines FaxState
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FaxStateEnum
        {
            
            /// <summary>
            /// Enum Start for value: start
            /// </summary>
            [EnumMember(Value = "start")]
            Start = 1,
            
            /// <summary>
            /// Enum Prepare for value: prepare
            /// </summary>
            [EnumMember(Value = "prepare")]
            Prepare = 2,
            
            /// <summary>
            /// Enum Send for value: send
            /// </summary>
            [EnumMember(Value = "send")]
            Send = 3,
            
            /// <summary>
            /// Enum Receive for value: receive
            /// </summary>
            [EnumMember(Value = "receive")]
            Receive = 4,
            
            /// <summary>
            /// Enum End for value: end
            /// </summary>
            [EnumMember(Value = "end")]
            End = 5,
            
            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 6
        }

        /// <summary>
        /// Gets or Sets FaxState
        /// </summary>
        [DataMember(Name="Fax-State", EmitDefaultValue=false)]
        public FaxStateEnum? FaxState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiFaxStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiFaxStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiFaxStatus" /> class.
        /// </summary>
        /// <param name="accountID">accountID.</param>
        /// <param name="calleeIDName">calleeIDName.</param>
        /// <param name="calleeIDNumber">calleeIDNumber.</param>
        /// <param name="callerIDName">callerIDName.</param>
        /// <param name="callerIDNumber">callerIDNumber.</param>
        /// <param name="cloudJobID">cloudJobID.</param>
        /// <param name="cloudPrinterID">cloudPrinterID.</param>
        /// <param name="direction">direction.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="faxInfo">faxInfo.</param>
        /// <param name="faxState">faxState.</param>
        /// <param name="faxBoxID">faxBoxID.</param>
        /// <param name="jobID">jobID (required).</param>
        /// <param name="page">page.</param>
        /// <param name="stage">stage.</param>
        /// <param name="status">status.</param>
        public KapiFaxStatus(string accountID = default(string), string calleeIDName = default(string), string calleeIDNumber = default(string), string callerIDName = default(string), string callerIDNumber = default(string), string cloudJobID = default(string), string cloudPrinterID = default(string), DirectionEnum? direction = default(DirectionEnum?), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string faxInfo = default(string), FaxStateEnum? faxState = default(FaxStateEnum?), string faxBoxID = default(string), string jobID = default(string), string page = default(string), string stage = default(string), string status = default(string))
        {
            // to ensure "jobID" is required (not null)
            if (jobID == null)
            {
                throw new InvalidDataException("jobID is a required property for KapiFaxStatus and cannot be null");
            }
            else
            {
                this.JobID = jobID;
            }
            this.AccountID = accountID;
            this.CalleeIDName = calleeIDName;
            this.CalleeIDNumber = calleeIDNumber;
            this.CallerIDName = callerIDName;
            this.CallerIDNumber = callerIDNumber;
            this.CloudJobID = cloudJobID;
            this.CloudPrinterID = cloudPrinterID;
            this.Direction = direction;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.FaxInfo = faxInfo;
            this.FaxState = faxState;
            this.FaxBoxID = faxBoxID;
            this.Page = page;
            this.Stage = stage;
            this.Status = status;
        }
        
        /// <summary>
        /// Gets or Sets AccountID
        /// </summary>
        [DataMember(Name="Account-ID", EmitDefaultValue=false)]
        public string AccountID { get; set; }

        /// <summary>
        /// Gets or Sets CalleeIDName
        /// </summary>
        [DataMember(Name="Callee-ID-Name", EmitDefaultValue=false)]
        public string CalleeIDName { get; set; }

        /// <summary>
        /// Gets or Sets CalleeIDNumber
        /// </summary>
        [DataMember(Name="Callee-ID-Number", EmitDefaultValue=false)]
        public string CalleeIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets CallerIDName
        /// </summary>
        [DataMember(Name="Caller-ID-Name", EmitDefaultValue=false)]
        public string CallerIDName { get; set; }

        /// <summary>
        /// Gets or Sets CallerIDNumber
        /// </summary>
        [DataMember(Name="Caller-ID-Number", EmitDefaultValue=false)]
        public string CallerIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets CloudJobID
        /// </summary>
        [DataMember(Name="Cloud-Job-ID", EmitDefaultValue=false)]
        public string CloudJobID { get; set; }

        /// <summary>
        /// Gets or Sets CloudPrinterID
        /// </summary>
        [DataMember(Name="Cloud-Printer-ID", EmitDefaultValue=false)]
        public string CloudPrinterID { get; set; }




        /// <summary>
        /// Gets or Sets FaxInfo
        /// </summary>
        [DataMember(Name="Fax-Info", EmitDefaultValue=false)]
        public string FaxInfo { get; set; }


        /// <summary>
        /// Gets or Sets FaxBoxID
        /// </summary>
        [DataMember(Name="FaxBox-ID", EmitDefaultValue=false)]
        public string FaxBoxID { get; set; }

        /// <summary>
        /// Gets or Sets JobID
        /// </summary>
        [DataMember(Name="Job-ID", EmitDefaultValue=false)]
        public string JobID { get; set; }

        /// <summary>
        /// Gets or Sets Page
        /// </summary>
        [DataMember(Name="Page", EmitDefaultValue=false)]
        public string Page { get; set; }

        /// <summary>
        /// Gets or Sets Stage
        /// </summary>
        [DataMember(Name="Stage", EmitDefaultValue=false)]
        public string Stage { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiFaxStatus {\n");
            sb.Append("  AccountID: ").Append(AccountID).Append("\n");
            sb.Append("  CalleeIDName: ").Append(CalleeIDName).Append("\n");
            sb.Append("  CalleeIDNumber: ").Append(CalleeIDNumber).Append("\n");
            sb.Append("  CallerIDName: ").Append(CallerIDName).Append("\n");
            sb.Append("  CallerIDNumber: ").Append(CallerIDNumber).Append("\n");
            sb.Append("  CloudJobID: ").Append(CloudJobID).Append("\n");
            sb.Append("  CloudPrinterID: ").Append(CloudPrinterID).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  FaxInfo: ").Append(FaxInfo).Append("\n");
            sb.Append("  FaxState: ").Append(FaxState).Append("\n");
            sb.Append("  FaxBoxID: ").Append(FaxBoxID).Append("\n");
            sb.Append("  JobID: ").Append(JobID).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Stage: ").Append(Stage).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiFaxStatus);
        }

        /// <summary>
        /// Returns true if KapiFaxStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiFaxStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiFaxStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountID == input.AccountID ||
                    (this.AccountID != null &&
                    this.AccountID.Equals(input.AccountID))
                ) && 
                (
                    this.CalleeIDName == input.CalleeIDName ||
                    (this.CalleeIDName != null &&
                    this.CalleeIDName.Equals(input.CalleeIDName))
                ) && 
                (
                    this.CalleeIDNumber == input.CalleeIDNumber ||
                    (this.CalleeIDNumber != null &&
                    this.CalleeIDNumber.Equals(input.CalleeIDNumber))
                ) && 
                (
                    this.CallerIDName == input.CallerIDName ||
                    (this.CallerIDName != null &&
                    this.CallerIDName.Equals(input.CallerIDName))
                ) && 
                (
                    this.CallerIDNumber == input.CallerIDNumber ||
                    (this.CallerIDNumber != null &&
                    this.CallerIDNumber.Equals(input.CallerIDNumber))
                ) && 
                (
                    this.CloudJobID == input.CloudJobID ||
                    (this.CloudJobID != null &&
                    this.CloudJobID.Equals(input.CloudJobID))
                ) && 
                (
                    this.CloudPrinterID == input.CloudPrinterID ||
                    (this.CloudPrinterID != null &&
                    this.CloudPrinterID.Equals(input.CloudPrinterID))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.FaxInfo == input.FaxInfo ||
                    (this.FaxInfo != null &&
                    this.FaxInfo.Equals(input.FaxInfo))
                ) && 
                (
                    this.FaxState == input.FaxState ||
                    (this.FaxState != null &&
                    this.FaxState.Equals(input.FaxState))
                ) && 
                (
                    this.FaxBoxID == input.FaxBoxID ||
                    (this.FaxBoxID != null &&
                    this.FaxBoxID.Equals(input.FaxBoxID))
                ) && 
                (
                    this.JobID == input.JobID ||
                    (this.JobID != null &&
                    this.JobID.Equals(input.JobID))
                ) && 
                (
                    this.Page == input.Page ||
                    (this.Page != null &&
                    this.Page.Equals(input.Page))
                ) && 
                (
                    this.Stage == input.Stage ||
                    (this.Stage != null &&
                    this.Stage.Equals(input.Stage))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountID != null)
                    hashCode = hashCode * 59 + this.AccountID.GetHashCode();
                if (this.CalleeIDName != null)
                    hashCode = hashCode * 59 + this.CalleeIDName.GetHashCode();
                if (this.CalleeIDNumber != null)
                    hashCode = hashCode * 59 + this.CalleeIDNumber.GetHashCode();
                if (this.CallerIDName != null)
                    hashCode = hashCode * 59 + this.CallerIDName.GetHashCode();
                if (this.CallerIDNumber != null)
                    hashCode = hashCode * 59 + this.CallerIDNumber.GetHashCode();
                if (this.CloudJobID != null)
                    hashCode = hashCode * 59 + this.CloudJobID.GetHashCode();
                if (this.CloudPrinterID != null)
                    hashCode = hashCode * 59 + this.CloudPrinterID.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.FaxInfo != null)
                    hashCode = hashCode * 59 + this.FaxInfo.GetHashCode();
                if (this.FaxState != null)
                    hashCode = hashCode * 59 + this.FaxState.GetHashCode();
                if (this.FaxBoxID != null)
                    hashCode = hashCode * 59 + this.FaxBoxID.GetHashCode();
                if (this.JobID != null)
                    hashCode = hashCode * 59 + this.JobID.GetHashCode();
                if (this.Page != null)
                    hashCode = hashCode * 59 + this.Page.GetHashCode();
                if (this.Stage != null)
                    hashCode = hashCode * 59 + this.Stage.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
