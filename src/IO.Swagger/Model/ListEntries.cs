/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for a match list entries
    /// </summary>
    [DataContract]
    public partial class ListEntries :  IEquatable<ListEntries>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListEntries" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListEntries() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListEntries" /> class.
        /// </summary>
        /// <param name="displayname">Display name.</param>
        /// <param name="firstname">A friendly firstname.</param>
        /// <param name="lastname">A friendly lastname.</param>
        /// <param name="listId">List id (required).</param>
        /// <param name="number">Phone number.</param>
        /// <param name="pattern">Match pattern.</param>
        /// <param name="profile">Profile data.</param>
        /// <param name="type">type.</param>
        public ListEntries(string displayname = default(string), string firstname = default(string), string lastname = default(string), string listId = default(string), string number = default(string), string pattern = default(string), Profile profile = default(Profile), string type = default(string))
        {
            // to ensure "listId" is required (not null)
            if (listId == null)
            {
                throw new InvalidDataException("listId is a required property for ListEntries and cannot be null");
            }
            else
            {
                this.ListId = listId;
            }
            this.Displayname = displayname;
            this.Firstname = firstname;
            this.Lastname = lastname;
            this.Number = number;
            this.Pattern = pattern;
            this.Profile = profile;
            this.Type = type;
        }
        
        /// <summary>
        /// Display name
        /// </summary>
        /// <value>Display name</value>
        [DataMember(Name="displayname", EmitDefaultValue=false)]
        public string Displayname { get; set; }

        /// <summary>
        /// A friendly firstname
        /// </summary>
        /// <value>A friendly firstname</value>
        [DataMember(Name="firstname", EmitDefaultValue=false)]
        public string Firstname { get; set; }

        /// <summary>
        /// A friendly lastname
        /// </summary>
        /// <value>A friendly lastname</value>
        [DataMember(Name="lastname", EmitDefaultValue=false)]
        public string Lastname { get; set; }

        /// <summary>
        /// List id
        /// </summary>
        /// <value>List id</value>
        [DataMember(Name="list_id", EmitDefaultValue=false)]
        public string ListId { get; set; }

        /// <summary>
        /// Phone number
        /// </summary>
        /// <value>Phone number</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// Match pattern
        /// </summary>
        /// <value>Match pattern</value>
        [DataMember(Name="pattern", EmitDefaultValue=false)]
        public string Pattern { get; set; }

        /// <summary>
        /// Profile data
        /// </summary>
        /// <value>Profile data</value>
        [DataMember(Name="profile", EmitDefaultValue=false)]
        public Profile Profile { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListEntries {\n");
            sb.Append("  Displayname: ").Append(Displayname).Append("\n");
            sb.Append("  Firstname: ").Append(Firstname).Append("\n");
            sb.Append("  Lastname: ").Append(Lastname).Append("\n");
            sb.Append("  ListId: ").Append(ListId).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListEntries);
        }

        /// <summary>
        /// Returns true if ListEntries instances are equal
        /// </summary>
        /// <param name="input">Instance of ListEntries to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListEntries input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Displayname == input.Displayname ||
                    (this.Displayname != null &&
                    this.Displayname.Equals(input.Displayname))
                ) && 
                (
                    this.Firstname == input.Firstname ||
                    (this.Firstname != null &&
                    this.Firstname.Equals(input.Firstname))
                ) && 
                (
                    this.Lastname == input.Lastname ||
                    (this.Lastname != null &&
                    this.Lastname.Equals(input.Lastname))
                ) && 
                (
                    this.ListId == input.ListId ||
                    (this.ListId != null &&
                    this.ListId.Equals(input.ListId))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Pattern == input.Pattern ||
                    (this.Pattern != null &&
                    this.Pattern.Equals(input.Pattern))
                ) && 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Displayname != null)
                    hashCode = hashCode * 59 + this.Displayname.GetHashCode();
                if (this.Firstname != null)
                    hashCode = hashCode * 59 + this.Firstname.GetHashCode();
                if (this.Lastname != null)
                    hashCode = hashCode * 59 + this.Lastname.GetHashCode();
                if (this.ListId != null)
                    hashCode = hashCode * 59 + this.ListId.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Pattern != null)
                    hashCode = hashCode * 59 + this.Pattern.GetHashCode();
                if (this.Profile != null)
                    hashCode = hashCode * 59 + this.Profile.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Displayname (string) maxLength
            if(this.Displayname != null && this.Displayname.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Displayname, length must be less than 128.", new [] { "Displayname" });
            }

            // Displayname (string) minLength
            if(this.Displayname != null && this.Displayname.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Displayname, length must be greater than 1.", new [] { "Displayname" });
            }

            // Firstname (string) maxLength
            if(this.Firstname != null && this.Firstname.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Firstname, length must be less than 128.", new [] { "Firstname" });
            }

            // Firstname (string) minLength
            if(this.Firstname != null && this.Firstname.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Firstname, length must be greater than 1.", new [] { "Firstname" });
            }

            // Lastname (string) maxLength
            if(this.Lastname != null && this.Lastname.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Lastname, length must be less than 128.", new [] { "Lastname" });
            }

            // Lastname (string) minLength
            if(this.Lastname != null && this.Lastname.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Lastname, length must be greater than 1.", new [] { "Lastname" });
            }

            // Type (string) maxLength
            if(this.Type != null && this.Type.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be less than 128.", new [] { "Type" });
            }

            // Type (string) minLength
            if(this.Type != null && this.Type.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be greater than 1.", new [] { "Type" });
            }

            yield break;
        }
    }

}
