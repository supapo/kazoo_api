/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Describes how the caller is greeted on entering a conference
    /// </summary>
    [DataContract]
    public partial class CallflowsConferenceWelcomePrompt :  IEquatable<CallflowsConferenceWelcomePrompt>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsConferenceWelcomePrompt" /> class.
        /// </summary>
        /// <param name="mediaId">Media to play, either Kazoo media ID or URL.</param>
        /// <param name="play">Should the Welcome Prompt be played (default to true).</param>
        public CallflowsConferenceWelcomePrompt(string mediaId = default(string), bool? play = true)
        {
            this.MediaId = mediaId;
            // use default value if no "play" provided
            if (play == null)
            {
                this.Play = true;
            }
            else
            {
                this.Play = play;
            }
        }
        
        /// <summary>
        /// Media to play, either Kazoo media ID or URL
        /// </summary>
        /// <value>Media to play, either Kazoo media ID or URL</value>
        [DataMember(Name="media_id", EmitDefaultValue=false)]
        public string MediaId { get; set; }

        /// <summary>
        /// Should the Welcome Prompt be played
        /// </summary>
        /// <value>Should the Welcome Prompt be played</value>
        [DataMember(Name="play", EmitDefaultValue=false)]
        public bool? Play { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallflowsConferenceWelcomePrompt {\n");
            sb.Append("  MediaId: ").Append(MediaId).Append("\n");
            sb.Append("  Play: ").Append(Play).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallflowsConferenceWelcomePrompt);
        }

        /// <summary>
        /// Returns true if CallflowsConferenceWelcomePrompt instances are equal
        /// </summary>
        /// <param name="input">Instance of CallflowsConferenceWelcomePrompt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallflowsConferenceWelcomePrompt input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MediaId == input.MediaId ||
                    (this.MediaId != null &&
                    this.MediaId.Equals(input.MediaId))
                ) && 
                (
                    this.Play == input.Play ||
                    (this.Play != null &&
                    this.Play.Equals(input.Play))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MediaId != null)
                    hashCode = hashCode * 59 + this.MediaId.GetHashCode();
                if (this.Play != null)
                    hashCode = hashCode * 59 + this.Play.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
