/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for dialplan.bridge_endpoint_headers
    /// </summary>
    [DataContract]
    public partial class KapiDialplanBridgeEndpointHeaders :  IEquatable<KapiDialplanBridgeEndpointHeaders>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanBridgeEndpointHeaders" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiDialplanBridgeEndpointHeaders() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanBridgeEndpointHeaders" /> class.
        /// </summary>
        /// <param name="authPassword">authPassword.</param>
        /// <param name="authRealm">authRealm.</param>
        /// <param name="authUser">authUser.</param>
        /// <param name="bypassMedia">bypassMedia.</param>
        /// <param name="calleeIDName">calleeIDName.</param>
        /// <param name="calleeIDNumber">calleeIDNumber.</param>
        /// <param name="callerIDName">callerIDName.</param>
        /// <param name="callerIDNumber">callerIDNumber.</param>
        /// <param name="codecs">codecs.</param>
        /// <param name="customApplicationVars">customApplicationVars.</param>
        /// <param name="customChannelVars">customChannelVars.</param>
        /// <param name="customSIPHeaders">customSIPHeaders.</param>
        /// <param name="enableT38Fax">enableT38Fax.</param>
        /// <param name="enableT38FaxRequest">enableT38FaxRequest.</param>
        /// <param name="enableT38Gateway">enableT38Gateway.</param>
        /// <param name="enableT38Passthrough">enableT38Passthrough.</param>
        /// <param name="endpointActions">endpointActions.</param>
        /// <param name="endpointDelay">endpointDelay.</param>
        /// <param name="endpointOptions">endpointOptions.</param>
        /// <param name="endpointProgressTimeout">endpointProgressTimeout.</param>
        /// <param name="endpointTimeout">endpointTimeout.</param>
        /// <param name="endpointType">endpointType.</param>
        /// <param name="failover">failover.</param>
        /// <param name="forceFax">forceFax.</param>
        /// <param name="forwardIP">forwardIP.</param>
        /// <param name="holdMedia">holdMedia.</param>
        /// <param name="ignoreCompletedElsewhere">ignoreCompletedElsewhere.</param>
        /// <param name="ignoreEarlyMedia">ignoreEarlyMedia.</param>
        /// <param name="inviteFormat">inviteFormat (required).</param>
        /// <param name="loopbackBowout">loopbackBowout.</param>
        /// <param name="outboundCallID">outboundCallID.</param>
        /// <param name="outboundCalleeIDName">outboundCalleeIDName.</param>
        /// <param name="outboundCalleeIDNumber">outboundCalleeIDNumber.</param>
        /// <param name="outboundCallerIDName">outboundCallerIDName.</param>
        /// <param name="outboundCallerIDNumber">outboundCallerIDNumber.</param>
        /// <param name="presenceID">presenceID.</param>
        /// <param name="privacyHideName">privacyHideName.</param>
        /// <param name="privacyHideNumber">privacyHideNumber.</param>
        /// <param name="privacyMethod">privacyMethod.</param>
        /// <param name="proxyIP">proxyIP.</param>
        /// <param name="proxyZone">proxyZone.</param>
        /// <param name="route">route.</param>
        /// <param name="sIPInterface">sIPInterface.</param>
        /// <param name="sIPInviteParameters">sIPInviteParameters.</param>
        /// <param name="sIPTransport">sIPTransport.</param>
        /// <param name="simplifyLoopback">simplifyLoopback.</param>
        /// <param name="toDID">toDID.</param>
        /// <param name="toIP">toIP.</param>
        /// <param name="toRealm">toRealm.</param>
        /// <param name="toURI">toURI.</param>
        /// <param name="toUser">toUser.</param>
        /// <param name="toUsername">toUsername.</param>
        public KapiDialplanBridgeEndpointHeaders(string authPassword = default(string), string authRealm = default(string), string authUser = default(string), string bypassMedia = default(string), string calleeIDName = default(string), string calleeIDNumber = default(string), string callerIDName = default(string), string callerIDNumber = default(string), string codecs = default(string), Object customApplicationVars = default(Object), Object customChannelVars = default(Object), Object customSIPHeaders = default(Object), string enableT38Fax = default(string), string enableT38FaxRequest = default(string), string enableT38Gateway = default(string), string enableT38Passthrough = default(string), string endpointActions = default(string), string endpointDelay = default(string), string endpointOptions = default(string), int? endpointProgressTimeout = default(int?), int? endpointTimeout = default(int?), string endpointType = default(string), string failover = default(string), string forceFax = default(string), string forwardIP = default(string), string holdMedia = default(string), string ignoreCompletedElsewhere = default(string), string ignoreEarlyMedia = default(string), string inviteFormat = default(string), string loopbackBowout = default(string), string outboundCallID = default(string), string outboundCalleeIDName = default(string), string outboundCalleeIDNumber = default(string), string outboundCallerIDName = default(string), string outboundCallerIDNumber = default(string), string presenceID = default(string), string privacyHideName = default(string), string privacyHideNumber = default(string), string privacyMethod = default(string), string proxyIP = default(string), string proxyZone = default(string), string route = default(string), string sIPInterface = default(string), string sIPInviteParameters = default(string), string sIPTransport = default(string), string simplifyLoopback = default(string), string toDID = default(string), string toIP = default(string), string toRealm = default(string), string toURI = default(string), string toUser = default(string), string toUsername = default(string))
        {
            // to ensure "inviteFormat" is required (not null)
            if (inviteFormat == null)
            {
                throw new InvalidDataException("inviteFormat is a required property for KapiDialplanBridgeEndpointHeaders and cannot be null");
            }
            else
            {
                this.InviteFormat = inviteFormat;
            }
            this.AuthPassword = authPassword;
            this.AuthRealm = authRealm;
            this.AuthUser = authUser;
            this.BypassMedia = bypassMedia;
            this.CalleeIDName = calleeIDName;
            this.CalleeIDNumber = calleeIDNumber;
            this.CallerIDName = callerIDName;
            this.CallerIDNumber = callerIDNumber;
            this.Codecs = codecs;
            this.CustomApplicationVars = customApplicationVars;
            this.CustomChannelVars = customChannelVars;
            this.CustomSIPHeaders = customSIPHeaders;
            this.EnableT38Fax = enableT38Fax;
            this.EnableT38FaxRequest = enableT38FaxRequest;
            this.EnableT38Gateway = enableT38Gateway;
            this.EnableT38Passthrough = enableT38Passthrough;
            this.EndpointActions = endpointActions;
            this.EndpointDelay = endpointDelay;
            this.EndpointOptions = endpointOptions;
            this.EndpointProgressTimeout = endpointProgressTimeout;
            this.EndpointTimeout = endpointTimeout;
            this.EndpointType = endpointType;
            this.Failover = failover;
            this.ForceFax = forceFax;
            this.ForwardIP = forwardIP;
            this.HoldMedia = holdMedia;
            this.IgnoreCompletedElsewhere = ignoreCompletedElsewhere;
            this.IgnoreEarlyMedia = ignoreEarlyMedia;
            this.LoopbackBowout = loopbackBowout;
            this.OutboundCallID = outboundCallID;
            this.OutboundCalleeIDName = outboundCalleeIDName;
            this.OutboundCalleeIDNumber = outboundCalleeIDNumber;
            this.OutboundCallerIDName = outboundCallerIDName;
            this.OutboundCallerIDNumber = outboundCallerIDNumber;
            this.PresenceID = presenceID;
            this.PrivacyHideName = privacyHideName;
            this.PrivacyHideNumber = privacyHideNumber;
            this.PrivacyMethod = privacyMethod;
            this.ProxyIP = proxyIP;
            this.ProxyZone = proxyZone;
            this.Route = route;
            this.SIPInterface = sIPInterface;
            this.SIPInviteParameters = sIPInviteParameters;
            this.SIPTransport = sIPTransport;
            this.SimplifyLoopback = simplifyLoopback;
            this.ToDID = toDID;
            this.ToIP = toIP;
            this.ToRealm = toRealm;
            this.ToURI = toURI;
            this.ToUser = toUser;
            this.ToUsername = toUsername;
        }
        
        /// <summary>
        /// Gets or Sets AuthPassword
        /// </summary>
        [DataMember(Name="Auth-Password", EmitDefaultValue=false)]
        public string AuthPassword { get; set; }

        /// <summary>
        /// Gets or Sets AuthRealm
        /// </summary>
        [DataMember(Name="Auth-Realm", EmitDefaultValue=false)]
        public string AuthRealm { get; set; }

        /// <summary>
        /// Gets or Sets AuthUser
        /// </summary>
        [DataMember(Name="Auth-User", EmitDefaultValue=false)]
        public string AuthUser { get; set; }

        /// <summary>
        /// Gets or Sets BypassMedia
        /// </summary>
        [DataMember(Name="Bypass-Media", EmitDefaultValue=false)]
        public string BypassMedia { get; set; }

        /// <summary>
        /// Gets or Sets CalleeIDName
        /// </summary>
        [DataMember(Name="Callee-ID-Name", EmitDefaultValue=false)]
        public string CalleeIDName { get; set; }

        /// <summary>
        /// Gets or Sets CalleeIDNumber
        /// </summary>
        [DataMember(Name="Callee-ID-Number", EmitDefaultValue=false)]
        public string CalleeIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets CallerIDName
        /// </summary>
        [DataMember(Name="Caller-ID-Name", EmitDefaultValue=false)]
        public string CallerIDName { get; set; }

        /// <summary>
        /// Gets or Sets CallerIDNumber
        /// </summary>
        [DataMember(Name="Caller-ID-Number", EmitDefaultValue=false)]
        public string CallerIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets Codecs
        /// </summary>
        [DataMember(Name="Codecs", EmitDefaultValue=false)]
        public string Codecs { get; set; }

        /// <summary>
        /// Gets or Sets CustomApplicationVars
        /// </summary>
        [DataMember(Name="Custom-Application-Vars", EmitDefaultValue=false)]
        public Object CustomApplicationVars { get; set; }

        /// <summary>
        /// Gets or Sets CustomChannelVars
        /// </summary>
        [DataMember(Name="Custom-Channel-Vars", EmitDefaultValue=false)]
        public Object CustomChannelVars { get; set; }

        /// <summary>
        /// Gets or Sets CustomSIPHeaders
        /// </summary>
        [DataMember(Name="Custom-SIP-Headers", EmitDefaultValue=false)]
        public Object CustomSIPHeaders { get; set; }

        /// <summary>
        /// Gets or Sets EnableT38Fax
        /// </summary>
        [DataMember(Name="Enable-T38-Fax", EmitDefaultValue=false)]
        public string EnableT38Fax { get; set; }

        /// <summary>
        /// Gets or Sets EnableT38FaxRequest
        /// </summary>
        [DataMember(Name="Enable-T38-Fax-Request", EmitDefaultValue=false)]
        public string EnableT38FaxRequest { get; set; }

        /// <summary>
        /// Gets or Sets EnableT38Gateway
        /// </summary>
        [DataMember(Name="Enable-T38-Gateway", EmitDefaultValue=false)]
        public string EnableT38Gateway { get; set; }

        /// <summary>
        /// Gets or Sets EnableT38Passthrough
        /// </summary>
        [DataMember(Name="Enable-T38-Passthrough", EmitDefaultValue=false)]
        public string EnableT38Passthrough { get; set; }

        /// <summary>
        /// Gets or Sets EndpointActions
        /// </summary>
        [DataMember(Name="Endpoint-Actions", EmitDefaultValue=false)]
        public string EndpointActions { get; set; }

        /// <summary>
        /// Gets or Sets EndpointDelay
        /// </summary>
        [DataMember(Name="Endpoint-Delay", EmitDefaultValue=false)]
        public string EndpointDelay { get; set; }

        /// <summary>
        /// Gets or Sets EndpointOptions
        /// </summary>
        [DataMember(Name="Endpoint-Options", EmitDefaultValue=false)]
        public string EndpointOptions { get; set; }

        /// <summary>
        /// Gets or Sets EndpointProgressTimeout
        /// </summary>
        [DataMember(Name="Endpoint-Progress-Timeout", EmitDefaultValue=false)]
        public int? EndpointProgressTimeout { get; set; }

        /// <summary>
        /// Gets or Sets EndpointTimeout
        /// </summary>
        [DataMember(Name="Endpoint-Timeout", EmitDefaultValue=false)]
        public int? EndpointTimeout { get; set; }

        /// <summary>
        /// Gets or Sets EndpointType
        /// </summary>
        [DataMember(Name="Endpoint-Type", EmitDefaultValue=false)]
        public string EndpointType { get; set; }

        /// <summary>
        /// Gets or Sets Failover
        /// </summary>
        [DataMember(Name="Failover", EmitDefaultValue=false)]
        public string Failover { get; set; }

        /// <summary>
        /// Gets or Sets ForceFax
        /// </summary>
        [DataMember(Name="Force-Fax", EmitDefaultValue=false)]
        public string ForceFax { get; set; }

        /// <summary>
        /// Gets or Sets ForwardIP
        /// </summary>
        [DataMember(Name="Forward-IP", EmitDefaultValue=false)]
        public string ForwardIP { get; set; }

        /// <summary>
        /// Gets or Sets HoldMedia
        /// </summary>
        [DataMember(Name="Hold-Media", EmitDefaultValue=false)]
        public string HoldMedia { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreCompletedElsewhere
        /// </summary>
        [DataMember(Name="Ignore-Completed-Elsewhere", EmitDefaultValue=false)]
        public string IgnoreCompletedElsewhere { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreEarlyMedia
        /// </summary>
        [DataMember(Name="Ignore-Early-Media", EmitDefaultValue=false)]
        public string IgnoreEarlyMedia { get; set; }

        /// <summary>
        /// Gets or Sets InviteFormat
        /// </summary>
        [DataMember(Name="Invite-Format", EmitDefaultValue=false)]
        public string InviteFormat { get; set; }

        /// <summary>
        /// Gets or Sets LoopbackBowout
        /// </summary>
        [DataMember(Name="Loopback-Bowout", EmitDefaultValue=false)]
        public string LoopbackBowout { get; set; }

        /// <summary>
        /// Gets or Sets OutboundCallID
        /// </summary>
        [DataMember(Name="Outbound-Call-ID", EmitDefaultValue=false)]
        public string OutboundCallID { get; set; }

        /// <summary>
        /// Gets or Sets OutboundCalleeIDName
        /// </summary>
        [DataMember(Name="Outbound-Callee-ID-Name", EmitDefaultValue=false)]
        public string OutboundCalleeIDName { get; set; }

        /// <summary>
        /// Gets or Sets OutboundCalleeIDNumber
        /// </summary>
        [DataMember(Name="Outbound-Callee-ID-Number", EmitDefaultValue=false)]
        public string OutboundCalleeIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets OutboundCallerIDName
        /// </summary>
        [DataMember(Name="Outbound-Caller-ID-Name", EmitDefaultValue=false)]
        public string OutboundCallerIDName { get; set; }

        /// <summary>
        /// Gets or Sets OutboundCallerIDNumber
        /// </summary>
        [DataMember(Name="Outbound-Caller-ID-Number", EmitDefaultValue=false)]
        public string OutboundCallerIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets PresenceID
        /// </summary>
        [DataMember(Name="Presence-ID", EmitDefaultValue=false)]
        public string PresenceID { get; set; }

        /// <summary>
        /// Gets or Sets PrivacyHideName
        /// </summary>
        [DataMember(Name="Privacy-Hide-Name", EmitDefaultValue=false)]
        public string PrivacyHideName { get; set; }

        /// <summary>
        /// Gets or Sets PrivacyHideNumber
        /// </summary>
        [DataMember(Name="Privacy-Hide-Number", EmitDefaultValue=false)]
        public string PrivacyHideNumber { get; set; }

        /// <summary>
        /// Gets or Sets PrivacyMethod
        /// </summary>
        [DataMember(Name="Privacy-Method", EmitDefaultValue=false)]
        public string PrivacyMethod { get; set; }

        /// <summary>
        /// Gets or Sets ProxyIP
        /// </summary>
        [DataMember(Name="Proxy-IP", EmitDefaultValue=false)]
        public string ProxyIP { get; set; }

        /// <summary>
        /// Gets or Sets ProxyZone
        /// </summary>
        [DataMember(Name="Proxy-Zone", EmitDefaultValue=false)]
        public string ProxyZone { get; set; }

        /// <summary>
        /// Gets or Sets Route
        /// </summary>
        [DataMember(Name="Route", EmitDefaultValue=false)]
        public string Route { get; set; }

        /// <summary>
        /// Gets or Sets SIPInterface
        /// </summary>
        [DataMember(Name="SIP-Interface", EmitDefaultValue=false)]
        public string SIPInterface { get; set; }

        /// <summary>
        /// Gets or Sets SIPInviteParameters
        /// </summary>
        [DataMember(Name="SIP-Invite-Parameters", EmitDefaultValue=false)]
        public string SIPInviteParameters { get; set; }

        /// <summary>
        /// Gets or Sets SIPTransport
        /// </summary>
        [DataMember(Name="SIP-Transport", EmitDefaultValue=false)]
        public string SIPTransport { get; set; }

        /// <summary>
        /// Gets or Sets SimplifyLoopback
        /// </summary>
        [DataMember(Name="Simplify-Loopback", EmitDefaultValue=false)]
        public string SimplifyLoopback { get; set; }

        /// <summary>
        /// Gets or Sets ToDID
        /// </summary>
        [DataMember(Name="To-DID", EmitDefaultValue=false)]
        public string ToDID { get; set; }

        /// <summary>
        /// Gets or Sets ToIP
        /// </summary>
        [DataMember(Name="To-IP", EmitDefaultValue=false)]
        public string ToIP { get; set; }

        /// <summary>
        /// Gets or Sets ToRealm
        /// </summary>
        [DataMember(Name="To-Realm", EmitDefaultValue=false)]
        public string ToRealm { get; set; }

        /// <summary>
        /// Gets or Sets ToURI
        /// </summary>
        [DataMember(Name="To-URI", EmitDefaultValue=false)]
        public string ToURI { get; set; }

        /// <summary>
        /// Gets or Sets ToUser
        /// </summary>
        [DataMember(Name="To-User", EmitDefaultValue=false)]
        public string ToUser { get; set; }

        /// <summary>
        /// Gets or Sets ToUsername
        /// </summary>
        [DataMember(Name="To-Username", EmitDefaultValue=false)]
        public string ToUsername { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiDialplanBridgeEndpointHeaders {\n");
            sb.Append("  AuthPassword: ").Append(AuthPassword).Append("\n");
            sb.Append("  AuthRealm: ").Append(AuthRealm).Append("\n");
            sb.Append("  AuthUser: ").Append(AuthUser).Append("\n");
            sb.Append("  BypassMedia: ").Append(BypassMedia).Append("\n");
            sb.Append("  CalleeIDName: ").Append(CalleeIDName).Append("\n");
            sb.Append("  CalleeIDNumber: ").Append(CalleeIDNumber).Append("\n");
            sb.Append("  CallerIDName: ").Append(CallerIDName).Append("\n");
            sb.Append("  CallerIDNumber: ").Append(CallerIDNumber).Append("\n");
            sb.Append("  Codecs: ").Append(Codecs).Append("\n");
            sb.Append("  CustomApplicationVars: ").Append(CustomApplicationVars).Append("\n");
            sb.Append("  CustomChannelVars: ").Append(CustomChannelVars).Append("\n");
            sb.Append("  CustomSIPHeaders: ").Append(CustomSIPHeaders).Append("\n");
            sb.Append("  EnableT38Fax: ").Append(EnableT38Fax).Append("\n");
            sb.Append("  EnableT38FaxRequest: ").Append(EnableT38FaxRequest).Append("\n");
            sb.Append("  EnableT38Gateway: ").Append(EnableT38Gateway).Append("\n");
            sb.Append("  EnableT38Passthrough: ").Append(EnableT38Passthrough).Append("\n");
            sb.Append("  EndpointActions: ").Append(EndpointActions).Append("\n");
            sb.Append("  EndpointDelay: ").Append(EndpointDelay).Append("\n");
            sb.Append("  EndpointOptions: ").Append(EndpointOptions).Append("\n");
            sb.Append("  EndpointProgressTimeout: ").Append(EndpointProgressTimeout).Append("\n");
            sb.Append("  EndpointTimeout: ").Append(EndpointTimeout).Append("\n");
            sb.Append("  EndpointType: ").Append(EndpointType).Append("\n");
            sb.Append("  Failover: ").Append(Failover).Append("\n");
            sb.Append("  ForceFax: ").Append(ForceFax).Append("\n");
            sb.Append("  ForwardIP: ").Append(ForwardIP).Append("\n");
            sb.Append("  HoldMedia: ").Append(HoldMedia).Append("\n");
            sb.Append("  IgnoreCompletedElsewhere: ").Append(IgnoreCompletedElsewhere).Append("\n");
            sb.Append("  IgnoreEarlyMedia: ").Append(IgnoreEarlyMedia).Append("\n");
            sb.Append("  InviteFormat: ").Append(InviteFormat).Append("\n");
            sb.Append("  LoopbackBowout: ").Append(LoopbackBowout).Append("\n");
            sb.Append("  OutboundCallID: ").Append(OutboundCallID).Append("\n");
            sb.Append("  OutboundCalleeIDName: ").Append(OutboundCalleeIDName).Append("\n");
            sb.Append("  OutboundCalleeIDNumber: ").Append(OutboundCalleeIDNumber).Append("\n");
            sb.Append("  OutboundCallerIDName: ").Append(OutboundCallerIDName).Append("\n");
            sb.Append("  OutboundCallerIDNumber: ").Append(OutboundCallerIDNumber).Append("\n");
            sb.Append("  PresenceID: ").Append(PresenceID).Append("\n");
            sb.Append("  PrivacyHideName: ").Append(PrivacyHideName).Append("\n");
            sb.Append("  PrivacyHideNumber: ").Append(PrivacyHideNumber).Append("\n");
            sb.Append("  PrivacyMethod: ").Append(PrivacyMethod).Append("\n");
            sb.Append("  ProxyIP: ").Append(ProxyIP).Append("\n");
            sb.Append("  ProxyZone: ").Append(ProxyZone).Append("\n");
            sb.Append("  Route: ").Append(Route).Append("\n");
            sb.Append("  SIPInterface: ").Append(SIPInterface).Append("\n");
            sb.Append("  SIPInviteParameters: ").Append(SIPInviteParameters).Append("\n");
            sb.Append("  SIPTransport: ").Append(SIPTransport).Append("\n");
            sb.Append("  SimplifyLoopback: ").Append(SimplifyLoopback).Append("\n");
            sb.Append("  ToDID: ").Append(ToDID).Append("\n");
            sb.Append("  ToIP: ").Append(ToIP).Append("\n");
            sb.Append("  ToRealm: ").Append(ToRealm).Append("\n");
            sb.Append("  ToURI: ").Append(ToURI).Append("\n");
            sb.Append("  ToUser: ").Append(ToUser).Append("\n");
            sb.Append("  ToUsername: ").Append(ToUsername).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiDialplanBridgeEndpointHeaders);
        }

        /// <summary>
        /// Returns true if KapiDialplanBridgeEndpointHeaders instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiDialplanBridgeEndpointHeaders to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiDialplanBridgeEndpointHeaders input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthPassword == input.AuthPassword ||
                    (this.AuthPassword != null &&
                    this.AuthPassword.Equals(input.AuthPassword))
                ) && 
                (
                    this.AuthRealm == input.AuthRealm ||
                    (this.AuthRealm != null &&
                    this.AuthRealm.Equals(input.AuthRealm))
                ) && 
                (
                    this.AuthUser == input.AuthUser ||
                    (this.AuthUser != null &&
                    this.AuthUser.Equals(input.AuthUser))
                ) && 
                (
                    this.BypassMedia == input.BypassMedia ||
                    (this.BypassMedia != null &&
                    this.BypassMedia.Equals(input.BypassMedia))
                ) && 
                (
                    this.CalleeIDName == input.CalleeIDName ||
                    (this.CalleeIDName != null &&
                    this.CalleeIDName.Equals(input.CalleeIDName))
                ) && 
                (
                    this.CalleeIDNumber == input.CalleeIDNumber ||
                    (this.CalleeIDNumber != null &&
                    this.CalleeIDNumber.Equals(input.CalleeIDNumber))
                ) && 
                (
                    this.CallerIDName == input.CallerIDName ||
                    (this.CallerIDName != null &&
                    this.CallerIDName.Equals(input.CallerIDName))
                ) && 
                (
                    this.CallerIDNumber == input.CallerIDNumber ||
                    (this.CallerIDNumber != null &&
                    this.CallerIDNumber.Equals(input.CallerIDNumber))
                ) && 
                (
                    this.Codecs == input.Codecs ||
                    (this.Codecs != null &&
                    this.Codecs.Equals(input.Codecs))
                ) && 
                (
                    this.CustomApplicationVars == input.CustomApplicationVars ||
                    (this.CustomApplicationVars != null &&
                    this.CustomApplicationVars.Equals(input.CustomApplicationVars))
                ) && 
                (
                    this.CustomChannelVars == input.CustomChannelVars ||
                    (this.CustomChannelVars != null &&
                    this.CustomChannelVars.Equals(input.CustomChannelVars))
                ) && 
                (
                    this.CustomSIPHeaders == input.CustomSIPHeaders ||
                    (this.CustomSIPHeaders != null &&
                    this.CustomSIPHeaders.Equals(input.CustomSIPHeaders))
                ) && 
                (
                    this.EnableT38Fax == input.EnableT38Fax ||
                    (this.EnableT38Fax != null &&
                    this.EnableT38Fax.Equals(input.EnableT38Fax))
                ) && 
                (
                    this.EnableT38FaxRequest == input.EnableT38FaxRequest ||
                    (this.EnableT38FaxRequest != null &&
                    this.EnableT38FaxRequest.Equals(input.EnableT38FaxRequest))
                ) && 
                (
                    this.EnableT38Gateway == input.EnableT38Gateway ||
                    (this.EnableT38Gateway != null &&
                    this.EnableT38Gateway.Equals(input.EnableT38Gateway))
                ) && 
                (
                    this.EnableT38Passthrough == input.EnableT38Passthrough ||
                    (this.EnableT38Passthrough != null &&
                    this.EnableT38Passthrough.Equals(input.EnableT38Passthrough))
                ) && 
                (
                    this.EndpointActions == input.EndpointActions ||
                    (this.EndpointActions != null &&
                    this.EndpointActions.Equals(input.EndpointActions))
                ) && 
                (
                    this.EndpointDelay == input.EndpointDelay ||
                    (this.EndpointDelay != null &&
                    this.EndpointDelay.Equals(input.EndpointDelay))
                ) && 
                (
                    this.EndpointOptions == input.EndpointOptions ||
                    (this.EndpointOptions != null &&
                    this.EndpointOptions.Equals(input.EndpointOptions))
                ) && 
                (
                    this.EndpointProgressTimeout == input.EndpointProgressTimeout ||
                    (this.EndpointProgressTimeout != null &&
                    this.EndpointProgressTimeout.Equals(input.EndpointProgressTimeout))
                ) && 
                (
                    this.EndpointTimeout == input.EndpointTimeout ||
                    (this.EndpointTimeout != null &&
                    this.EndpointTimeout.Equals(input.EndpointTimeout))
                ) && 
                (
                    this.EndpointType == input.EndpointType ||
                    (this.EndpointType != null &&
                    this.EndpointType.Equals(input.EndpointType))
                ) && 
                (
                    this.Failover == input.Failover ||
                    (this.Failover != null &&
                    this.Failover.Equals(input.Failover))
                ) && 
                (
                    this.ForceFax == input.ForceFax ||
                    (this.ForceFax != null &&
                    this.ForceFax.Equals(input.ForceFax))
                ) && 
                (
                    this.ForwardIP == input.ForwardIP ||
                    (this.ForwardIP != null &&
                    this.ForwardIP.Equals(input.ForwardIP))
                ) && 
                (
                    this.HoldMedia == input.HoldMedia ||
                    (this.HoldMedia != null &&
                    this.HoldMedia.Equals(input.HoldMedia))
                ) && 
                (
                    this.IgnoreCompletedElsewhere == input.IgnoreCompletedElsewhere ||
                    (this.IgnoreCompletedElsewhere != null &&
                    this.IgnoreCompletedElsewhere.Equals(input.IgnoreCompletedElsewhere))
                ) && 
                (
                    this.IgnoreEarlyMedia == input.IgnoreEarlyMedia ||
                    (this.IgnoreEarlyMedia != null &&
                    this.IgnoreEarlyMedia.Equals(input.IgnoreEarlyMedia))
                ) && 
                (
                    this.InviteFormat == input.InviteFormat ||
                    (this.InviteFormat != null &&
                    this.InviteFormat.Equals(input.InviteFormat))
                ) && 
                (
                    this.LoopbackBowout == input.LoopbackBowout ||
                    (this.LoopbackBowout != null &&
                    this.LoopbackBowout.Equals(input.LoopbackBowout))
                ) && 
                (
                    this.OutboundCallID == input.OutboundCallID ||
                    (this.OutboundCallID != null &&
                    this.OutboundCallID.Equals(input.OutboundCallID))
                ) && 
                (
                    this.OutboundCalleeIDName == input.OutboundCalleeIDName ||
                    (this.OutboundCalleeIDName != null &&
                    this.OutboundCalleeIDName.Equals(input.OutboundCalleeIDName))
                ) && 
                (
                    this.OutboundCalleeIDNumber == input.OutboundCalleeIDNumber ||
                    (this.OutboundCalleeIDNumber != null &&
                    this.OutboundCalleeIDNumber.Equals(input.OutboundCalleeIDNumber))
                ) && 
                (
                    this.OutboundCallerIDName == input.OutboundCallerIDName ||
                    (this.OutboundCallerIDName != null &&
                    this.OutboundCallerIDName.Equals(input.OutboundCallerIDName))
                ) && 
                (
                    this.OutboundCallerIDNumber == input.OutboundCallerIDNumber ||
                    (this.OutboundCallerIDNumber != null &&
                    this.OutboundCallerIDNumber.Equals(input.OutboundCallerIDNumber))
                ) && 
                (
                    this.PresenceID == input.PresenceID ||
                    (this.PresenceID != null &&
                    this.PresenceID.Equals(input.PresenceID))
                ) && 
                (
                    this.PrivacyHideName == input.PrivacyHideName ||
                    (this.PrivacyHideName != null &&
                    this.PrivacyHideName.Equals(input.PrivacyHideName))
                ) && 
                (
                    this.PrivacyHideNumber == input.PrivacyHideNumber ||
                    (this.PrivacyHideNumber != null &&
                    this.PrivacyHideNumber.Equals(input.PrivacyHideNumber))
                ) && 
                (
                    this.PrivacyMethod == input.PrivacyMethod ||
                    (this.PrivacyMethod != null &&
                    this.PrivacyMethod.Equals(input.PrivacyMethod))
                ) && 
                (
                    this.ProxyIP == input.ProxyIP ||
                    (this.ProxyIP != null &&
                    this.ProxyIP.Equals(input.ProxyIP))
                ) && 
                (
                    this.ProxyZone == input.ProxyZone ||
                    (this.ProxyZone != null &&
                    this.ProxyZone.Equals(input.ProxyZone))
                ) && 
                (
                    this.Route == input.Route ||
                    (this.Route != null &&
                    this.Route.Equals(input.Route))
                ) && 
                (
                    this.SIPInterface == input.SIPInterface ||
                    (this.SIPInterface != null &&
                    this.SIPInterface.Equals(input.SIPInterface))
                ) && 
                (
                    this.SIPInviteParameters == input.SIPInviteParameters ||
                    (this.SIPInviteParameters != null &&
                    this.SIPInviteParameters.Equals(input.SIPInviteParameters))
                ) && 
                (
                    this.SIPTransport == input.SIPTransport ||
                    (this.SIPTransport != null &&
                    this.SIPTransport.Equals(input.SIPTransport))
                ) && 
                (
                    this.SimplifyLoopback == input.SimplifyLoopback ||
                    (this.SimplifyLoopback != null &&
                    this.SimplifyLoopback.Equals(input.SimplifyLoopback))
                ) && 
                (
                    this.ToDID == input.ToDID ||
                    (this.ToDID != null &&
                    this.ToDID.Equals(input.ToDID))
                ) && 
                (
                    this.ToIP == input.ToIP ||
                    (this.ToIP != null &&
                    this.ToIP.Equals(input.ToIP))
                ) && 
                (
                    this.ToRealm == input.ToRealm ||
                    (this.ToRealm != null &&
                    this.ToRealm.Equals(input.ToRealm))
                ) && 
                (
                    this.ToURI == input.ToURI ||
                    (this.ToURI != null &&
                    this.ToURI.Equals(input.ToURI))
                ) && 
                (
                    this.ToUser == input.ToUser ||
                    (this.ToUser != null &&
                    this.ToUser.Equals(input.ToUser))
                ) && 
                (
                    this.ToUsername == input.ToUsername ||
                    (this.ToUsername != null &&
                    this.ToUsername.Equals(input.ToUsername))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthPassword != null)
                    hashCode = hashCode * 59 + this.AuthPassword.GetHashCode();
                if (this.AuthRealm != null)
                    hashCode = hashCode * 59 + this.AuthRealm.GetHashCode();
                if (this.AuthUser != null)
                    hashCode = hashCode * 59 + this.AuthUser.GetHashCode();
                if (this.BypassMedia != null)
                    hashCode = hashCode * 59 + this.BypassMedia.GetHashCode();
                if (this.CalleeIDName != null)
                    hashCode = hashCode * 59 + this.CalleeIDName.GetHashCode();
                if (this.CalleeIDNumber != null)
                    hashCode = hashCode * 59 + this.CalleeIDNumber.GetHashCode();
                if (this.CallerIDName != null)
                    hashCode = hashCode * 59 + this.CallerIDName.GetHashCode();
                if (this.CallerIDNumber != null)
                    hashCode = hashCode * 59 + this.CallerIDNumber.GetHashCode();
                if (this.Codecs != null)
                    hashCode = hashCode * 59 + this.Codecs.GetHashCode();
                if (this.CustomApplicationVars != null)
                    hashCode = hashCode * 59 + this.CustomApplicationVars.GetHashCode();
                if (this.CustomChannelVars != null)
                    hashCode = hashCode * 59 + this.CustomChannelVars.GetHashCode();
                if (this.CustomSIPHeaders != null)
                    hashCode = hashCode * 59 + this.CustomSIPHeaders.GetHashCode();
                if (this.EnableT38Fax != null)
                    hashCode = hashCode * 59 + this.EnableT38Fax.GetHashCode();
                if (this.EnableT38FaxRequest != null)
                    hashCode = hashCode * 59 + this.EnableT38FaxRequest.GetHashCode();
                if (this.EnableT38Gateway != null)
                    hashCode = hashCode * 59 + this.EnableT38Gateway.GetHashCode();
                if (this.EnableT38Passthrough != null)
                    hashCode = hashCode * 59 + this.EnableT38Passthrough.GetHashCode();
                if (this.EndpointActions != null)
                    hashCode = hashCode * 59 + this.EndpointActions.GetHashCode();
                if (this.EndpointDelay != null)
                    hashCode = hashCode * 59 + this.EndpointDelay.GetHashCode();
                if (this.EndpointOptions != null)
                    hashCode = hashCode * 59 + this.EndpointOptions.GetHashCode();
                if (this.EndpointProgressTimeout != null)
                    hashCode = hashCode * 59 + this.EndpointProgressTimeout.GetHashCode();
                if (this.EndpointTimeout != null)
                    hashCode = hashCode * 59 + this.EndpointTimeout.GetHashCode();
                if (this.EndpointType != null)
                    hashCode = hashCode * 59 + this.EndpointType.GetHashCode();
                if (this.Failover != null)
                    hashCode = hashCode * 59 + this.Failover.GetHashCode();
                if (this.ForceFax != null)
                    hashCode = hashCode * 59 + this.ForceFax.GetHashCode();
                if (this.ForwardIP != null)
                    hashCode = hashCode * 59 + this.ForwardIP.GetHashCode();
                if (this.HoldMedia != null)
                    hashCode = hashCode * 59 + this.HoldMedia.GetHashCode();
                if (this.IgnoreCompletedElsewhere != null)
                    hashCode = hashCode * 59 + this.IgnoreCompletedElsewhere.GetHashCode();
                if (this.IgnoreEarlyMedia != null)
                    hashCode = hashCode * 59 + this.IgnoreEarlyMedia.GetHashCode();
                if (this.InviteFormat != null)
                    hashCode = hashCode * 59 + this.InviteFormat.GetHashCode();
                if (this.LoopbackBowout != null)
                    hashCode = hashCode * 59 + this.LoopbackBowout.GetHashCode();
                if (this.OutboundCallID != null)
                    hashCode = hashCode * 59 + this.OutboundCallID.GetHashCode();
                if (this.OutboundCalleeIDName != null)
                    hashCode = hashCode * 59 + this.OutboundCalleeIDName.GetHashCode();
                if (this.OutboundCalleeIDNumber != null)
                    hashCode = hashCode * 59 + this.OutboundCalleeIDNumber.GetHashCode();
                if (this.OutboundCallerIDName != null)
                    hashCode = hashCode * 59 + this.OutboundCallerIDName.GetHashCode();
                if (this.OutboundCallerIDNumber != null)
                    hashCode = hashCode * 59 + this.OutboundCallerIDNumber.GetHashCode();
                if (this.PresenceID != null)
                    hashCode = hashCode * 59 + this.PresenceID.GetHashCode();
                if (this.PrivacyHideName != null)
                    hashCode = hashCode * 59 + this.PrivacyHideName.GetHashCode();
                if (this.PrivacyHideNumber != null)
                    hashCode = hashCode * 59 + this.PrivacyHideNumber.GetHashCode();
                if (this.PrivacyMethod != null)
                    hashCode = hashCode * 59 + this.PrivacyMethod.GetHashCode();
                if (this.ProxyIP != null)
                    hashCode = hashCode * 59 + this.ProxyIP.GetHashCode();
                if (this.ProxyZone != null)
                    hashCode = hashCode * 59 + this.ProxyZone.GetHashCode();
                if (this.Route != null)
                    hashCode = hashCode * 59 + this.Route.GetHashCode();
                if (this.SIPInterface != null)
                    hashCode = hashCode * 59 + this.SIPInterface.GetHashCode();
                if (this.SIPInviteParameters != null)
                    hashCode = hashCode * 59 + this.SIPInviteParameters.GetHashCode();
                if (this.SIPTransport != null)
                    hashCode = hashCode * 59 + this.SIPTransport.GetHashCode();
                if (this.SimplifyLoopback != null)
                    hashCode = hashCode * 59 + this.SimplifyLoopback.GetHashCode();
                if (this.ToDID != null)
                    hashCode = hashCode * 59 + this.ToDID.GetHashCode();
                if (this.ToIP != null)
                    hashCode = hashCode * 59 + this.ToIP.GetHashCode();
                if (this.ToRealm != null)
                    hashCode = hashCode * 59 + this.ToRealm.GetHashCode();
                if (this.ToURI != null)
                    hashCode = hashCode * 59 + this.ToURI.GetHashCode();
                if (this.ToUser != null)
                    hashCode = hashCode * 59 + this.ToUser.GetHashCode();
                if (this.ToUsername != null)
                    hashCode = hashCode * 59 + this.ToUsername.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
