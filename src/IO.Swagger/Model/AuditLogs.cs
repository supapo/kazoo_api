/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Audit log of what caused a billing event to occur
    /// </summary>
    [DataContract]
    public partial class AuditLogs :  IEquatable<AuditLogs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogs" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuditLogs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogs" /> class.
        /// </summary>
        /// <param name="audit">Contains the accounts involved in the billable event (initial account and resellers) (required).</param>
        /// <param name="authenticatingUser">authenticatingUser.</param>
        /// <param name="tree">The account&#39;s tree (including the account), ordered from ancestor to account (required).</param>
        public AuditLogs(Object audit = default(Object), AuditLogsAuthenticatingUser authenticatingUser = default(AuditLogsAuthenticatingUser), List<string> tree = default(List<string>))
        {
            // to ensure "audit" is required (not null)
            if (audit == null)
            {
                throw new InvalidDataException("audit is a required property for AuditLogs and cannot be null");
            }
            else
            {
                this.Audit = audit;
            }
            // to ensure "tree" is required (not null)
            if (tree == null)
            {
                throw new InvalidDataException("tree is a required property for AuditLogs and cannot be null");
            }
            else
            {
                this.Tree = tree;
            }
            this.AuthenticatingUser = authenticatingUser;
        }
        
        /// <summary>
        /// Contains the accounts involved in the billable event (initial account and resellers)
        /// </summary>
        /// <value>Contains the accounts involved in the billable event (initial account and resellers)</value>
        [DataMember(Name="audit", EmitDefaultValue=false)]
        public Object Audit { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticatingUser
        /// </summary>
        [DataMember(Name="authenticating_user", EmitDefaultValue=false)]
        public AuditLogsAuthenticatingUser AuthenticatingUser { get; set; }

        /// <summary>
        /// The account&#39;s tree (including the account), ordered from ancestor to account
        /// </summary>
        /// <value>The account&#39;s tree (including the account), ordered from ancestor to account</value>
        [DataMember(Name="tree", EmitDefaultValue=false)]
        public List<string> Tree { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuditLogs {\n");
            sb.Append("  Audit: ").Append(Audit).Append("\n");
            sb.Append("  AuthenticatingUser: ").Append(AuthenticatingUser).Append("\n");
            sb.Append("  Tree: ").Append(Tree).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuditLogs);
        }

        /// <summary>
        /// Returns true if AuditLogs instances are equal
        /// </summary>
        /// <param name="input">Instance of AuditLogs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuditLogs input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Audit == input.Audit ||
                    (this.Audit != null &&
                    this.Audit.Equals(input.Audit))
                ) && 
                (
                    this.AuthenticatingUser == input.AuthenticatingUser ||
                    (this.AuthenticatingUser != null &&
                    this.AuthenticatingUser.Equals(input.AuthenticatingUser))
                ) && 
                (
                    this.Tree == input.Tree ||
                    this.Tree != null &&
                    this.Tree.SequenceEqual(input.Tree)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Audit != null)
                    hashCode = hashCode * 59 + this.Audit.GetHashCode();
                if (this.AuthenticatingUser != null)
                    hashCode = hashCode * 59 + this.AuthenticatingUser.GetHashCode();
                if (this.Tree != null)
                    hashCode = hashCode * 59 + this.Tree.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
