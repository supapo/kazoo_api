/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for conf.doc_update
    /// </summary>
    [DataContract]
    public partial class KapiConfDocUpdate :  IEquatable<KapiConfDocUpdate>, IValidatableObject
    {
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Configuration for value: configuration
            /// </summary>
            [EnumMember(Value = "configuration")]
            Configuration = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Docedited for value: doc_edited
            /// </summary>
            [EnumMember(Value = "doc_edited")]
            Docedited = 1,
            
            /// <summary>
            /// Enum Doccreated for value: doc_created
            /// </summary>
            [EnumMember(Value = "doc_created")]
            Doccreated = 2,
            
            /// <summary>
            /// Enum Docdeleted for value: doc_deleted
            /// </summary>
            [EnumMember(Value = "doc_deleted")]
            Docdeleted = 3,
            
            /// <summary>
            /// Enum Dbedited for value: db_edited
            /// </summary>
            [EnumMember(Value = "db_edited")]
            Dbedited = 4,
            
            /// <summary>
            /// Enum Dbcreated for value: db_created
            /// </summary>
            [EnumMember(Value = "db_created")]
            Dbcreated = 5,
            
            /// <summary>
            /// Enum Dbdeleted for value: db_deleted
            /// </summary>
            [EnumMember(Value = "db_deleted")]
            Dbdeleted = 6
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiConfDocUpdate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiConfDocUpdate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiConfDocUpdate" /> class.
        /// </summary>
        /// <param name="accountID">accountID.</param>
        /// <param name="database">database (required).</param>
        /// <param name="dateCreated">dateCreated.</param>
        /// <param name="dateModified">dateModified.</param>
        /// <param name="doc">doc.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="iD">iD (required).</param>
        /// <param name="isSoftDeleted">isSoftDeleted.</param>
        /// <param name="originCache">originCache.</param>
        /// <param name="rev">rev.</param>
        /// <param name="type">type.</param>
        /// <param name="version">version.</param>
        public KapiConfDocUpdate(string accountID = default(string), string database = default(string), string dateCreated = default(string), string dateModified = default(string), string doc = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string iD = default(string), bool? isSoftDeleted = default(bool?), string originCache = default(string), string rev = default(string), string type = default(string), string version = default(string))
        {
            // to ensure "database" is required (not null)
            if (database == null)
            {
                throw new InvalidDataException("database is a required property for KapiConfDocUpdate and cannot be null");
            }
            else
            {
                this.Database = database;
            }
            // to ensure "iD" is required (not null)
            if (iD == null)
            {
                throw new InvalidDataException("iD is a required property for KapiConfDocUpdate and cannot be null");
            }
            else
            {
                this.ID = iD;
            }
            this.AccountID = accountID;
            this.DateCreated = dateCreated;
            this.DateModified = dateModified;
            this.Doc = doc;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.IsSoftDeleted = isSoftDeleted;
            this.OriginCache = originCache;
            this.Rev = rev;
            this.Type = type;
            this.Version = version;
        }
        
        /// <summary>
        /// Gets or Sets AccountID
        /// </summary>
        [DataMember(Name="Account-ID", EmitDefaultValue=false)]
        public string AccountID { get; set; }

        /// <summary>
        /// Gets or Sets Database
        /// </summary>
        [DataMember(Name="Database", EmitDefaultValue=false)]
        public string Database { get; set; }

        /// <summary>
        /// Gets or Sets DateCreated
        /// </summary>
        [DataMember(Name="Date-Created", EmitDefaultValue=false)]
        public string DateCreated { get; set; }

        /// <summary>
        /// Gets or Sets DateModified
        /// </summary>
        [DataMember(Name="Date-Modified", EmitDefaultValue=false)]
        public string DateModified { get; set; }

        /// <summary>
        /// Gets or Sets Doc
        /// </summary>
        [DataMember(Name="Doc", EmitDefaultValue=false)]
        public string Doc { get; set; }



        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public string ID { get; set; }

        /// <summary>
        /// Gets or Sets IsSoftDeleted
        /// </summary>
        [DataMember(Name="Is-Soft-Deleted", EmitDefaultValue=false)]
        public bool? IsSoftDeleted { get; set; }

        /// <summary>
        /// Gets or Sets OriginCache
        /// </summary>
        [DataMember(Name="Origin-Cache", EmitDefaultValue=false)]
        public string OriginCache { get; set; }

        /// <summary>
        /// Gets or Sets Rev
        /// </summary>
        [DataMember(Name="Rev", EmitDefaultValue=false)]
        public string Rev { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="Version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiConfDocUpdate {\n");
            sb.Append("  AccountID: ").Append(AccountID).Append("\n");
            sb.Append("  Database: ").Append(Database).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateModified: ").Append(DateModified).Append("\n");
            sb.Append("  Doc: ").Append(Doc).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  IsSoftDeleted: ").Append(IsSoftDeleted).Append("\n");
            sb.Append("  OriginCache: ").Append(OriginCache).Append("\n");
            sb.Append("  Rev: ").Append(Rev).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiConfDocUpdate);
        }

        /// <summary>
        /// Returns true if KapiConfDocUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiConfDocUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiConfDocUpdate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountID == input.AccountID ||
                    (this.AccountID != null &&
                    this.AccountID.Equals(input.AccountID))
                ) && 
                (
                    this.Database == input.Database ||
                    (this.Database != null &&
                    this.Database.Equals(input.Database))
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.DateModified == input.DateModified ||
                    (this.DateModified != null &&
                    this.DateModified.Equals(input.DateModified))
                ) && 
                (
                    this.Doc == input.Doc ||
                    (this.Doc != null &&
                    this.Doc.Equals(input.Doc))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.ID == input.ID ||
                    (this.ID != null &&
                    this.ID.Equals(input.ID))
                ) && 
                (
                    this.IsSoftDeleted == input.IsSoftDeleted ||
                    (this.IsSoftDeleted != null &&
                    this.IsSoftDeleted.Equals(input.IsSoftDeleted))
                ) && 
                (
                    this.OriginCache == input.OriginCache ||
                    (this.OriginCache != null &&
                    this.OriginCache.Equals(input.OriginCache))
                ) && 
                (
                    this.Rev == input.Rev ||
                    (this.Rev != null &&
                    this.Rev.Equals(input.Rev))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountID != null)
                    hashCode = hashCode * 59 + this.AccountID.GetHashCode();
                if (this.Database != null)
                    hashCode = hashCode * 59 + this.Database.GetHashCode();
                if (this.DateCreated != null)
                    hashCode = hashCode * 59 + this.DateCreated.GetHashCode();
                if (this.DateModified != null)
                    hashCode = hashCode * 59 + this.DateModified.GetHashCode();
                if (this.Doc != null)
                    hashCode = hashCode * 59 + this.Doc.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.ID != null)
                    hashCode = hashCode * 59 + this.ID.GetHashCode();
                if (this.IsSoftDeleted != null)
                    hashCode = hashCode * 59 + this.IsSoftDeleted.GetHashCode();
                if (this.OriginCache != null)
                    hashCode = hashCode * 59 + this.OriginCache.GetHashCode();
                if (this.Rev != null)
                    hashCode = hashCode * 59 + this.Rev.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
