/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The video media parameters
    /// </summary>
    [DataContract]
    public partial class EndpointMediaVideo :  IEquatable<EndpointMediaVideo>, IValidatableObject
    {
        /// <summary>
        /// Defines Codecs
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CodecsEnum
        {
            
            /// <summary>
            /// Enum H261 for value: H261
            /// </summary>
            [EnumMember(Value = "H261")]
            H261 = 1,
            
            /// <summary>
            /// Enum H263 for value: H263
            /// </summary>
            [EnumMember(Value = "H263")]
            H263 = 2,
            
            /// <summary>
            /// Enum H264 for value: H264
            /// </summary>
            [EnumMember(Value = "H264")]
            H264 = 3,
            
            /// <summary>
            /// Enum VP8 for value: VP8
            /// </summary>
            [EnumMember(Value = "VP8")]
            VP8 = 4
        }


        /// <summary>
        /// A list of video codecs the endpoint supports
        /// </summary>
        /// <value>A list of video codecs the endpoint supports</value>
        [DataMember(Name="codecs", EmitDefaultValue=false)]
        public List<CodecsEnum> Codecs { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EndpointMediaVideo" /> class.
        /// </summary>
        /// <param name="codecs">A list of video codecs the endpoint supports.</param>
        public EndpointMediaVideo(List<CodecsEnum> codecs = default(List<CodecsEnum>))
        {
            this.Codecs = codecs;
        }
        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EndpointMediaVideo {\n");
            sb.Append("  Codecs: ").Append(Codecs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EndpointMediaVideo);
        }

        /// <summary>
        /// Returns true if EndpointMediaVideo instances are equal
        /// </summary>
        /// <param name="input">Instance of EndpointMediaVideo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EndpointMediaVideo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Codecs == input.Codecs ||
                    this.Codecs != null &&
                    this.Codecs.SequenceEqual(input.Codecs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Codecs != null)
                    hashCode = hashCode * 59 + this.Codecs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
