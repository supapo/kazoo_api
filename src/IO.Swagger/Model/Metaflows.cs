/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Actions applied to a call outside of the normal callflow, initiated by the caller(s)
    /// </summary>
    [DataContract]
    public partial class Metaflows :  IEquatable<Metaflows>, IValidatableObject
    {
        /// <summary>
        /// What DTMF will trigger the collection and analysis of the subsequent DTMF sequence
        /// </summary>
        /// <value>What DTMF will trigger the collection and analysis of the subsequent DTMF sequence</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BindingDigitEnum
        {
            
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 1,
            
            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 2,
            
            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 3,
            
            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 4,
            
            /// <summary>
            /// Enum _5 for value: 5
            /// </summary>
            [EnumMember(Value = "5")]
            _5 = 5,
            
            /// <summary>
            /// Enum _6 for value: 6
            /// </summary>
            [EnumMember(Value = "6")]
            _6 = 6,
            
            /// <summary>
            /// Enum _7 for value: 7
            /// </summary>
            [EnumMember(Value = "7")]
            _7 = 7,
            
            /// <summary>
            /// Enum _8 for value: 8
            /// </summary>
            [EnumMember(Value = "8")]
            _8 = 8,
            
            /// <summary>
            /// Enum _9 for value: 9
            /// </summary>
            [EnumMember(Value = "9")]
            _9 = 9,
            
            /// <summary>
            /// Enum _0 for value: 0
            /// </summary>
            [EnumMember(Value = "0")]
            _0 = 10,
            
            /// <summary>
            /// Enum Star for value: *
            /// </summary>
            [EnumMember(Value = "*")]
            Star = 11,
            
            /// <summary>
            /// Enum Hash for value: #
            /// </summary>
            [EnumMember(Value = "#")]
            Hash = 12
        }

        /// <summary>
        /// What DTMF will trigger the collection and analysis of the subsequent DTMF sequence
        /// </summary>
        /// <value>What DTMF will trigger the collection and analysis of the subsequent DTMF sequence</value>
        [DataMember(Name="binding_digit", EmitDefaultValue=false)]
        public BindingDigitEnum? BindingDigit { get; set; }
        /// <summary>
        /// Which leg(s) of the call to listen for DTMF
        /// </summary>
        /// <value>Which leg(s) of the call to listen for DTMF</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ListenOnEnum
        {
            
            /// <summary>
            /// Enum Both for value: both
            /// </summary>
            [EnumMember(Value = "both")]
            Both = 1,
            
            /// <summary>
            /// Enum Self for value: self
            /// </summary>
            [EnumMember(Value = "self")]
            Self = 2,
            
            /// <summary>
            /// Enum Peer for value: peer
            /// </summary>
            [EnumMember(Value = "peer")]
            Peer = 3
        }

        /// <summary>
        /// Which leg(s) of the call to listen for DTMF
        /// </summary>
        /// <value>Which leg(s) of the call to listen for DTMF</value>
        [DataMember(Name="listen_on", EmitDefaultValue=false)]
        public ListenOnEnum? ListenOn { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Metaflows" /> class.
        /// </summary>
        /// <param name="bindingDigit">What DTMF will trigger the collection and analysis of the subsequent DTMF sequence (default to BindingDigitEnum.Star).</param>
        /// <param name="digitTimeout">How long to wait between DTMF presses before processing the collected sequence (milliseconds).</param>
        /// <param name="listenOn">Which leg(s) of the call to listen for DTMF.</param>
        /// <param name="numbers">A list of static numbers with their flows.</param>
        /// <param name="patterns">A list of patterns with their flows.</param>
        public Metaflows(BindingDigitEnum? bindingDigit = BindingDigitEnum.Star, int? digitTimeout = default(int?), ListenOnEnum? listenOn = default(ListenOnEnum?), Object numbers = default(Object), Object patterns = default(Object))
        {
            // use default value if no "bindingDigit" provided
            if (bindingDigit == null)
            {
                this.BindingDigit = BindingDigitEnum.Star;
            }
            else
            {
                this.BindingDigit = bindingDigit;
            }
            this.DigitTimeout = digitTimeout;
            this.ListenOn = listenOn;
            this.Numbers = numbers;
            this.Patterns = patterns;
        }
        

        /// <summary>
        /// How long to wait between DTMF presses before processing the collected sequence (milliseconds)
        /// </summary>
        /// <value>How long to wait between DTMF presses before processing the collected sequence (milliseconds)</value>
        [DataMember(Name="digit_timeout", EmitDefaultValue=false)]
        public int? DigitTimeout { get; set; }


        /// <summary>
        /// A list of static numbers with their flows
        /// </summary>
        /// <value>A list of static numbers with their flows</value>
        [DataMember(Name="numbers", EmitDefaultValue=false)]
        public Object Numbers { get; set; }

        /// <summary>
        /// A list of patterns with their flows
        /// </summary>
        /// <value>A list of patterns with their flows</value>
        [DataMember(Name="patterns", EmitDefaultValue=false)]
        public Object Patterns { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Metaflows {\n");
            sb.Append("  BindingDigit: ").Append(BindingDigit).Append("\n");
            sb.Append("  DigitTimeout: ").Append(DigitTimeout).Append("\n");
            sb.Append("  ListenOn: ").Append(ListenOn).Append("\n");
            sb.Append("  Numbers: ").Append(Numbers).Append("\n");
            sb.Append("  Patterns: ").Append(Patterns).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Metaflows);
        }

        /// <summary>
        /// Returns true if Metaflows instances are equal
        /// </summary>
        /// <param name="input">Instance of Metaflows to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Metaflows input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BindingDigit == input.BindingDigit ||
                    (this.BindingDigit != null &&
                    this.BindingDigit.Equals(input.BindingDigit))
                ) && 
                (
                    this.DigitTimeout == input.DigitTimeout ||
                    (this.DigitTimeout != null &&
                    this.DigitTimeout.Equals(input.DigitTimeout))
                ) && 
                (
                    this.ListenOn == input.ListenOn ||
                    (this.ListenOn != null &&
                    this.ListenOn.Equals(input.ListenOn))
                ) && 
                (
                    this.Numbers == input.Numbers ||
                    (this.Numbers != null &&
                    this.Numbers.Equals(input.Numbers))
                ) && 
                (
                    this.Patterns == input.Patterns ||
                    (this.Patterns != null &&
                    this.Patterns.Equals(input.Patterns))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BindingDigit != null)
                    hashCode = hashCode * 59 + this.BindingDigit.GetHashCode();
                if (this.DigitTimeout != null)
                    hashCode = hashCode * 59 + this.DigitTimeout.GetHashCode();
                if (this.ListenOn != null)
                    hashCode = hashCode * 59 + this.ListenOn.GetHashCode();
                if (this.Numbers != null)
                    hashCode = hashCode * 59 + this.Numbers.GetHashCode();
                if (this.Patterns != null)
                    hashCode = hashCode * 59 + this.Patterns.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BindingDigit (string) maxLength
            if(this.BindingDigit != null && this.BindingDigit.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BindingDigit, length must be less than 1.", new [] { "BindingDigit" });
            }

            // BindingDigit (string) minLength
            if(this.BindingDigit != null && this.BindingDigit.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BindingDigit, length must be greater than 1.", new [] { "BindingDigit" });
            }

            // DigitTimeout (int?) minimum
            if(this.DigitTimeout < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DigitTimeout, must be a value greater than or equal to 0.", new [] { "DigitTimeout" });
            }

            yield break;
        }
    }

}
