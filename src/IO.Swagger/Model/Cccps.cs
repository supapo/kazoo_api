/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Calling cards callback platform user&#39;s info
    /// </summary>
    [DataContract]
    public partial class Cccps :  IEquatable<Cccps>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Cccps" /> class.
        /// </summary>
        /// <param name="active">Show&#39;s whether CID/PIN active (default to false).</param>
        /// <param name="cid">CID to authorize.</param>
        /// <param name="comment">Some notes regarding what this pin/cid for.</param>
        /// <param name="maxConcurentCallsPerUser">Calls per user limit. Counts all user&#39;s legs and compares to max_concurrent_calls_per_user multiplied by 2.</param>
        /// <param name="pin">PIN to authorize.</param>
        /// <param name="retainCid">Pass initial caller number to the callee.</param>
        /// <param name="userId">The ID of the user object that &#39;owns&#39; cid/pin.</param>
        public Cccps(bool? active = false, string cid = default(string), string comment = default(string), int? maxConcurentCallsPerUser = default(int?), string pin = default(string), bool? retainCid = default(bool?), string userId = default(string))
        {
            // use default value if no "active" provided
            if (active == null)
            {
                this.Active = false;
            }
            else
            {
                this.Active = active;
            }
            this.Cid = cid;
            this.Comment = comment;
            this.MaxConcurentCallsPerUser = maxConcurentCallsPerUser;
            this.Pin = pin;
            this.RetainCid = retainCid;
            this.UserId = userId;
        }
        
        /// <summary>
        /// Show&#39;s whether CID/PIN active
        /// </summary>
        /// <value>Show&#39;s whether CID/PIN active</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// CID to authorize
        /// </summary>
        /// <value>CID to authorize</value>
        [DataMember(Name="cid", EmitDefaultValue=false)]
        public string Cid { get; set; }

        /// <summary>
        /// Some notes regarding what this pin/cid for
        /// </summary>
        /// <value>Some notes regarding what this pin/cid for</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Calls per user limit. Counts all user&#39;s legs and compares to max_concurrent_calls_per_user multiplied by 2
        /// </summary>
        /// <value>Calls per user limit. Counts all user&#39;s legs and compares to max_concurrent_calls_per_user multiplied by 2</value>
        [DataMember(Name="max_concurent_calls_per_user", EmitDefaultValue=false)]
        public int? MaxConcurentCallsPerUser { get; set; }

        /// <summary>
        /// PIN to authorize
        /// </summary>
        /// <value>PIN to authorize</value>
        [DataMember(Name="pin", EmitDefaultValue=false)]
        public string Pin { get; set; }

        /// <summary>
        /// Pass initial caller number to the callee
        /// </summary>
        /// <value>Pass initial caller number to the callee</value>
        [DataMember(Name="retain_cid", EmitDefaultValue=false)]
        public bool? RetainCid { get; set; }

        /// <summary>
        /// The ID of the user object that &#39;owns&#39; cid/pin
        /// </summary>
        /// <value>The ID of the user object that &#39;owns&#39; cid/pin</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Cccps {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Cid: ").Append(Cid).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  MaxConcurentCallsPerUser: ").Append(MaxConcurentCallsPerUser).Append("\n");
            sb.Append("  Pin: ").Append(Pin).Append("\n");
            sb.Append("  RetainCid: ").Append(RetainCid).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Cccps);
        }

        /// <summary>
        /// Returns true if Cccps instances are equal
        /// </summary>
        /// <param name="input">Instance of Cccps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cccps input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.Cid == input.Cid ||
                    (this.Cid != null &&
                    this.Cid.Equals(input.Cid))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.MaxConcurentCallsPerUser == input.MaxConcurentCallsPerUser ||
                    (this.MaxConcurentCallsPerUser != null &&
                    this.MaxConcurentCallsPerUser.Equals(input.MaxConcurentCallsPerUser))
                ) && 
                (
                    this.Pin == input.Pin ||
                    (this.Pin != null &&
                    this.Pin.Equals(input.Pin))
                ) && 
                (
                    this.RetainCid == input.RetainCid ||
                    (this.RetainCid != null &&
                    this.RetainCid.Equals(input.RetainCid))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.Cid != null)
                    hashCode = hashCode * 59 + this.Cid.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.MaxConcurentCallsPerUser != null)
                    hashCode = hashCode * 59 + this.MaxConcurentCallsPerUser.GetHashCode();
                if (this.Pin != null)
                    hashCode = hashCode * 59 + this.Pin.GetHashCode();
                if (this.RetainCid != null)
                    hashCode = hashCode * 59 + this.RetainCid.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // UserId (string) maxLength
            if(this.UserId != null && this.UserId.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserId, length must be less than 32.", new [] { "UserId" });
            }

            // UserId (string) minLength
            if(this.UserId != null && this.UserId.Length < 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserId, length must be greater than 32.", new [] { "UserId" });
            }

            yield break;
        }
    }

}
