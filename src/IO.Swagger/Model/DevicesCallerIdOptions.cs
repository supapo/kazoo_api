/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// custom properties for configuring caller_id
    /// </summary>
    [DataContract]
    public partial class DevicesCallerIdOptions :  IEquatable<DevicesCallerIdOptions>, IValidatableObject
    {
        /// <summary>
        /// Determines what appears as caller id for offnet outbound calls. Values: full - hides name and number; name - hides only name; number - hides only number; none - hides nothing
        /// </summary>
        /// <value>Determines what appears as caller id for offnet outbound calls. Values: full - hides name and number; name - hides only name; number - hides only number; none - hides nothing</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OutboundPrivacyEnum
        {
            
            /// <summary>
            /// Enum Full for value: full
            /// </summary>
            [EnumMember(Value = "full")]
            Full = 1,
            
            /// <summary>
            /// Enum Name for value: name
            /// </summary>
            [EnumMember(Value = "name")]
            Name = 2,
            
            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 3,
            
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 4
        }

        /// <summary>
        /// Determines what appears as caller id for offnet outbound calls. Values: full - hides name and number; name - hides only name; number - hides only number; none - hides nothing
        /// </summary>
        /// <value>Determines what appears as caller id for offnet outbound calls. Values: full - hides name and number; name - hides only name; number - hides only number; none - hides nothing</value>
        [DataMember(Name="outbound_privacy", EmitDefaultValue=false)]
        public OutboundPrivacyEnum? OutboundPrivacy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesCallerIdOptions" /> class.
        /// </summary>
        /// <param name="outboundPrivacy">Determines what appears as caller id for offnet outbound calls. Values: full - hides name and number; name - hides only name; number - hides only number; none - hides nothing.</param>
        public DevicesCallerIdOptions(OutboundPrivacyEnum? outboundPrivacy = default(OutboundPrivacyEnum?))
        {
            this.OutboundPrivacy = outboundPrivacy;
        }
        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DevicesCallerIdOptions {\n");
            sb.Append("  OutboundPrivacy: ").Append(OutboundPrivacy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DevicesCallerIdOptions);
        }

        /// <summary>
        /// Returns true if DevicesCallerIdOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of DevicesCallerIdOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DevicesCallerIdOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OutboundPrivacy == input.OutboundPrivacy ||
                    (this.OutboundPrivacy != null &&
                    this.OutboundPrivacy.Equals(input.OutboundPrivacy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OutboundPrivacy != null)
                    hashCode = hashCode * 59 + this.OutboundPrivacy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
