/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for notify.voicemail_to_email system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigNotifyVoicemailToEmail :  IEquatable<SystemConfigNotifyVoicemailToEmail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigNotifyVoicemailToEmail" /> class.
        /// </summary>
        /// <param name="htmlContentTransferEncoding">notify.voicemail_to_email html content transfer encoding (default to &quot;7BIT&quot;).</param>
        /// <param name="textContentTransferEncoding">notify.voicemail_to_email text content transfer encoding (default to &quot;7BIT&quot;).</param>
        public SystemConfigNotifyVoicemailToEmail(string htmlContentTransferEncoding = "7BIT", string textContentTransferEncoding = "7BIT")
        {
            // use default value if no "htmlContentTransferEncoding" provided
            if (htmlContentTransferEncoding == null)
            {
                this.HtmlContentTransferEncoding = "7BIT";
            }
            else
            {
                this.HtmlContentTransferEncoding = htmlContentTransferEncoding;
            }
            // use default value if no "textContentTransferEncoding" provided
            if (textContentTransferEncoding == null)
            {
                this.TextContentTransferEncoding = "7BIT";
            }
            else
            {
                this.TextContentTransferEncoding = textContentTransferEncoding;
            }
        }
        
        /// <summary>
        /// notify.voicemail_to_email html content transfer encoding
        /// </summary>
        /// <value>notify.voicemail_to_email html content transfer encoding</value>
        [DataMember(Name="html_content_transfer_encoding", EmitDefaultValue=false)]
        public string HtmlContentTransferEncoding { get; set; }

        /// <summary>
        /// notify.voicemail_to_email text content transfer encoding
        /// </summary>
        /// <value>notify.voicemail_to_email text content transfer encoding</value>
        [DataMember(Name="text_content_transfer_encoding", EmitDefaultValue=false)]
        public string TextContentTransferEncoding { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigNotifyVoicemailToEmail {\n");
            sb.Append("  HtmlContentTransferEncoding: ").Append(HtmlContentTransferEncoding).Append("\n");
            sb.Append("  TextContentTransferEncoding: ").Append(TextContentTransferEncoding).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigNotifyVoicemailToEmail);
        }

        /// <summary>
        /// Returns true if SystemConfigNotifyVoicemailToEmail instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigNotifyVoicemailToEmail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigNotifyVoicemailToEmail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HtmlContentTransferEncoding == input.HtmlContentTransferEncoding ||
                    (this.HtmlContentTransferEncoding != null &&
                    this.HtmlContentTransferEncoding.Equals(input.HtmlContentTransferEncoding))
                ) && 
                (
                    this.TextContentTransferEncoding == input.TextContentTransferEncoding ||
                    (this.TextContentTransferEncoding != null &&
                    this.TextContentTransferEncoding.Equals(input.TextContentTransferEncoding))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HtmlContentTransferEncoding != null)
                    hashCode = hashCode * 59 + this.HtmlContentTransferEncoding.GetHashCode();
                if (this.TextContentTransferEncoding != null)
                    hashCode = hashCode * 59 + this.TextContentTransferEncoding.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
