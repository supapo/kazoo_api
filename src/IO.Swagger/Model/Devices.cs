/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A device be it a SIP phone or landline number
    /// </summary>
    [DataContract]
    public partial class Devices :  IEquatable<Devices>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Devices" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Devices() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Devices" /> class.
        /// </summary>
        /// <param name="callForward">callForward.</param>
        /// <param name="callRecording">callRecording.</param>
        /// <param name="callRestriction">Device level call restrictions for each available number classification.</param>
        /// <param name="callWaiting">callWaiting.</param>
        /// <param name="callerId">The device caller ID parameters.</param>
        /// <param name="callerIdOptions">callerIdOptions.</param>
        /// <param name="contactList">contactList.</param>
        /// <param name="deviceType">Arbitrary device type used by the UI and billing system.</param>
        /// <param name="dialPlan">A list of rules used to modify dialed numbers.</param>
        /// <param name="doNotDisturb">doNotDisturb.</param>
        /// <param name="enabled">Determines if the device is currently enabled (default to true).</param>
        /// <param name="excludeFromQueues">Do not ring this device when calling user/agent in queue (default to false).</param>
        /// <param name="flags">Flags set by external applications.</param>
        /// <param name="formatters">formatters.</param>
        /// <param name="hotdesk">hotdesk.</param>
        /// <param name="language">The language for the device.</param>
        /// <param name="macAddress">The MAC Address of the device (if applicable).</param>
        /// <param name="media">Configure audio/video/etc media options for this device.</param>
        /// <param name="metaflows">The device metaflow parameters.</param>
        /// <param name="musicOnHold">musicOnHold.</param>
        /// <param name="mwiUnsolicitedUpdates">When true enables unsolicited mwi notifications (default to true).</param>
        /// <param name="name">A friendly name for the device (required).</param>
        /// <param name="outboundFlags">List of flags (features) this device requires when making outbound calls.</param>
        /// <param name="ownerId">The ID of the user object that &#39;owns&#39; the device.</param>
        /// <param name="presenceId">Static presence ID (used instead of SIP username).</param>
        /// <param name="provision">provision.</param>
        /// <param name="registerOverwriteNotify">When true enables overwrite notifications (default to false).</param>
        /// <param name="ringtones">ringtones.</param>
        /// <param name="sip">sip.</param>
        /// <param name="suppressUnregisterNotifications">When true disables deregister notifications (default to false).</param>
        /// <param name="timezone">Device&#39;s timezone.</param>
        public Devices(DevicesCallForward callForward = default(DevicesCallForward), CallRecording callRecording = default(CallRecording), Dictionary<string, AccountsCallRestriction> callRestriction = default(Dictionary<string, AccountsCallRestriction>), CallWaiting callWaiting = default(CallWaiting), CallerId callerId = default(CallerId), DevicesCallerIdOptions callerIdOptions = default(DevicesCallerIdOptions), DevicesContactList contactList = default(DevicesContactList), string deviceType = default(string), Dialplans dialPlan = default(Dialplans), DevicesDoNotDisturb doNotDisturb = default(DevicesDoNotDisturb), bool? enabled = true, bool? excludeFromQueues = false, List<string> flags = default(List<string>), Formatters formatters = default(Formatters), DevicesHotdesk hotdesk = default(DevicesHotdesk), string language = default(string), string macAddress = default(string), EndpointMedia media = default(EndpointMedia), Metaflows metaflows = default(Metaflows), ClicktocallMusicOnHold musicOnHold = default(ClicktocallMusicOnHold), bool? mwiUnsolicitedUpdates = true, string name = default(string), Object outboundFlags = default(Object), string ownerId = default(string), string presenceId = default(string), DevicesProvision provision = default(DevicesProvision), bool? registerOverwriteNotify = false, AccountsRingtones ringtones = default(AccountsRingtones), DevicesSip sip = default(DevicesSip), bool? suppressUnregisterNotifications = false, string timezone = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Devices and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.CallForward = callForward;
            this.CallRecording = callRecording;
            this.CallRestriction = callRestriction;
            this.CallWaiting = callWaiting;
            this.CallerId = callerId;
            this.CallerIdOptions = callerIdOptions;
            this.ContactList = contactList;
            this.DeviceType = deviceType;
            this.DialPlan = dialPlan;
            this.DoNotDisturb = doNotDisturb;
            // use default value if no "enabled" provided
            if (enabled == null)
            {
                this.Enabled = true;
            }
            else
            {
                this.Enabled = enabled;
            }
            // use default value if no "excludeFromQueues" provided
            if (excludeFromQueues == null)
            {
                this.ExcludeFromQueues = false;
            }
            else
            {
                this.ExcludeFromQueues = excludeFromQueues;
            }
            this.Flags = flags;
            this.Formatters = formatters;
            this.Hotdesk = hotdesk;
            this.Language = language;
            this.MacAddress = macAddress;
            this.Media = media;
            this.Metaflows = metaflows;
            this.MusicOnHold = musicOnHold;
            // use default value if no "mwiUnsolicitedUpdates" provided
            if (mwiUnsolicitedUpdates == null)
            {
                this.MwiUnsolicitedUpdates = true;
            }
            else
            {
                this.MwiUnsolicitedUpdates = mwiUnsolicitedUpdates;
            }
            this.OutboundFlags = outboundFlags;
            this.OwnerId = ownerId;
            this.PresenceId = presenceId;
            this.Provision = provision;
            // use default value if no "registerOverwriteNotify" provided
            if (registerOverwriteNotify == null)
            {
                this.RegisterOverwriteNotify = false;
            }
            else
            {
                this.RegisterOverwriteNotify = registerOverwriteNotify;
            }
            this.Ringtones = ringtones;
            this.Sip = sip;
            // use default value if no "suppressUnregisterNotifications" provided
            if (suppressUnregisterNotifications == null)
            {
                this.SuppressUnregisterNotifications = false;
            }
            else
            {
                this.SuppressUnregisterNotifications = suppressUnregisterNotifications;
            }
            this.Timezone = timezone;
        }
        
        /// <summary>
        /// Gets or Sets CallForward
        /// </summary>
        [DataMember(Name="call_forward", EmitDefaultValue=false)]
        public DevicesCallForward CallForward { get; set; }

        /// <summary>
        /// Gets or Sets CallRecording
        /// </summary>
        [DataMember(Name="call_recording", EmitDefaultValue=false)]
        public CallRecording CallRecording { get; set; }

        /// <summary>
        /// Device level call restrictions for each available number classification
        /// </summary>
        /// <value>Device level call restrictions for each available number classification</value>
        [DataMember(Name="call_restriction", EmitDefaultValue=false)]
        public Dictionary<string, AccountsCallRestriction> CallRestriction { get; set; }

        /// <summary>
        /// Gets or Sets CallWaiting
        /// </summary>
        [DataMember(Name="call_waiting", EmitDefaultValue=false)]
        public CallWaiting CallWaiting { get; set; }

        /// <summary>
        /// The device caller ID parameters
        /// </summary>
        /// <value>The device caller ID parameters</value>
        [DataMember(Name="caller_id", EmitDefaultValue=false)]
        public CallerId CallerId { get; set; }

        /// <summary>
        /// Gets or Sets CallerIdOptions
        /// </summary>
        [DataMember(Name="caller_id_options", EmitDefaultValue=false)]
        public DevicesCallerIdOptions CallerIdOptions { get; set; }

        /// <summary>
        /// Gets or Sets ContactList
        /// </summary>
        [DataMember(Name="contact_list", EmitDefaultValue=false)]
        public DevicesContactList ContactList { get; set; }

        /// <summary>
        /// Arbitrary device type used by the UI and billing system
        /// </summary>
        /// <value>Arbitrary device type used by the UI and billing system</value>
        [DataMember(Name="device_type", EmitDefaultValue=false)]
        public string DeviceType { get; set; }

        /// <summary>
        /// A list of rules used to modify dialed numbers
        /// </summary>
        /// <value>A list of rules used to modify dialed numbers</value>
        [DataMember(Name="dial_plan", EmitDefaultValue=false)]
        public Dialplans DialPlan { get; set; }

        /// <summary>
        /// Gets or Sets DoNotDisturb
        /// </summary>
        [DataMember(Name="do_not_disturb", EmitDefaultValue=false)]
        public DevicesDoNotDisturb DoNotDisturb { get; set; }

        /// <summary>
        /// Determines if the device is currently enabled
        /// </summary>
        /// <value>Determines if the device is currently enabled</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Do not ring this device when calling user/agent in queue
        /// </summary>
        /// <value>Do not ring this device when calling user/agent in queue</value>
        [DataMember(Name="exclude_from_queues", EmitDefaultValue=false)]
        public bool? ExcludeFromQueues { get; set; }

        /// <summary>
        /// Flags set by external applications
        /// </summary>
        /// <value>Flags set by external applications</value>
        [DataMember(Name="flags", EmitDefaultValue=false)]
        public List<string> Flags { get; set; }

        /// <summary>
        /// Gets or Sets Formatters
        /// </summary>
        [DataMember(Name="formatters", EmitDefaultValue=false)]
        public Formatters Formatters { get; set; }

        /// <summary>
        /// Gets or Sets Hotdesk
        /// </summary>
        [DataMember(Name="hotdesk", EmitDefaultValue=false)]
        public DevicesHotdesk Hotdesk { get; set; }

        /// <summary>
        /// The language for the device
        /// </summary>
        /// <value>The language for the device</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// The MAC Address of the device (if applicable)
        /// </summary>
        /// <value>The MAC Address of the device (if applicable)</value>
        [DataMember(Name="mac_address", EmitDefaultValue=false)]
        public string MacAddress { get; set; }

        /// <summary>
        /// Configure audio/video/etc media options for this device
        /// </summary>
        /// <value>Configure audio/video/etc media options for this device</value>
        [DataMember(Name="media", EmitDefaultValue=false)]
        public EndpointMedia Media { get; set; }

        /// <summary>
        /// The device metaflow parameters
        /// </summary>
        /// <value>The device metaflow parameters</value>
        [DataMember(Name="metaflows", EmitDefaultValue=false)]
        public Metaflows Metaflows { get; set; }

        /// <summary>
        /// Gets or Sets MusicOnHold
        /// </summary>
        [DataMember(Name="music_on_hold", EmitDefaultValue=false)]
        public ClicktocallMusicOnHold MusicOnHold { get; set; }

        /// <summary>
        /// When true enables unsolicited mwi notifications
        /// </summary>
        /// <value>When true enables unsolicited mwi notifications</value>
        [DataMember(Name="mwi_unsolicited_updates", EmitDefaultValue=false)]
        public bool? MwiUnsolicitedUpdates { get; set; }

        /// <summary>
        /// A friendly name for the device
        /// </summary>
        /// <value>A friendly name for the device</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// List of flags (features) this device requires when making outbound calls
        /// </summary>
        /// <value>List of flags (features) this device requires when making outbound calls</value>
        [DataMember(Name="outbound_flags", EmitDefaultValue=false)]
        public Object OutboundFlags { get; set; }

        /// <summary>
        /// The ID of the user object that &#39;owns&#39; the device
        /// </summary>
        /// <value>The ID of the user object that &#39;owns&#39; the device</value>
        [DataMember(Name="owner_id", EmitDefaultValue=false)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Static presence ID (used instead of SIP username)
        /// </summary>
        /// <value>Static presence ID (used instead of SIP username)</value>
        [DataMember(Name="presence_id", EmitDefaultValue=false)]
        public string PresenceId { get; set; }

        /// <summary>
        /// Gets or Sets Provision
        /// </summary>
        [DataMember(Name="provision", EmitDefaultValue=false)]
        public DevicesProvision Provision { get; set; }

        /// <summary>
        /// When true enables overwrite notifications
        /// </summary>
        /// <value>When true enables overwrite notifications</value>
        [DataMember(Name="register_overwrite_notify", EmitDefaultValue=false)]
        public bool? RegisterOverwriteNotify { get; set; }

        /// <summary>
        /// Gets or Sets Ringtones
        /// </summary>
        [DataMember(Name="ringtones", EmitDefaultValue=false)]
        public AccountsRingtones Ringtones { get; set; }

        /// <summary>
        /// Gets or Sets Sip
        /// </summary>
        [DataMember(Name="sip", EmitDefaultValue=false)]
        public DevicesSip Sip { get; set; }

        /// <summary>
        /// When true disables deregister notifications
        /// </summary>
        /// <value>When true disables deregister notifications</value>
        [DataMember(Name="suppress_unregister_notifications", EmitDefaultValue=false)]
        public bool? SuppressUnregisterNotifications { get; set; }

        /// <summary>
        /// Device&#39;s timezone
        /// </summary>
        /// <value>Device&#39;s timezone</value>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Devices {\n");
            sb.Append("  CallForward: ").Append(CallForward).Append("\n");
            sb.Append("  CallRecording: ").Append(CallRecording).Append("\n");
            sb.Append("  CallRestriction: ").Append(CallRestriction).Append("\n");
            sb.Append("  CallWaiting: ").Append(CallWaiting).Append("\n");
            sb.Append("  CallerId: ").Append(CallerId).Append("\n");
            sb.Append("  CallerIdOptions: ").Append(CallerIdOptions).Append("\n");
            sb.Append("  ContactList: ").Append(ContactList).Append("\n");
            sb.Append("  DeviceType: ").Append(DeviceType).Append("\n");
            sb.Append("  DialPlan: ").Append(DialPlan).Append("\n");
            sb.Append("  DoNotDisturb: ").Append(DoNotDisturb).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  ExcludeFromQueues: ").Append(ExcludeFromQueues).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  Formatters: ").Append(Formatters).Append("\n");
            sb.Append("  Hotdesk: ").Append(Hotdesk).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  MacAddress: ").Append(MacAddress).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  Metaflows: ").Append(Metaflows).Append("\n");
            sb.Append("  MusicOnHold: ").Append(MusicOnHold).Append("\n");
            sb.Append("  MwiUnsolicitedUpdates: ").Append(MwiUnsolicitedUpdates).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OutboundFlags: ").Append(OutboundFlags).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  PresenceId: ").Append(PresenceId).Append("\n");
            sb.Append("  Provision: ").Append(Provision).Append("\n");
            sb.Append("  RegisterOverwriteNotify: ").Append(RegisterOverwriteNotify).Append("\n");
            sb.Append("  Ringtones: ").Append(Ringtones).Append("\n");
            sb.Append("  Sip: ").Append(Sip).Append("\n");
            sb.Append("  SuppressUnregisterNotifications: ").Append(SuppressUnregisterNotifications).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Devices);
        }

        /// <summary>
        /// Returns true if Devices instances are equal
        /// </summary>
        /// <param name="input">Instance of Devices to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Devices input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CallForward == input.CallForward ||
                    (this.CallForward != null &&
                    this.CallForward.Equals(input.CallForward))
                ) && 
                (
                    this.CallRecording == input.CallRecording ||
                    (this.CallRecording != null &&
                    this.CallRecording.Equals(input.CallRecording))
                ) && 
                (
                    this.CallRestriction == input.CallRestriction ||
                    this.CallRestriction != null &&
                    this.CallRestriction.SequenceEqual(input.CallRestriction)
                ) && 
                (
                    this.CallWaiting == input.CallWaiting ||
                    (this.CallWaiting != null &&
                    this.CallWaiting.Equals(input.CallWaiting))
                ) && 
                (
                    this.CallerId == input.CallerId ||
                    (this.CallerId != null &&
                    this.CallerId.Equals(input.CallerId))
                ) && 
                (
                    this.CallerIdOptions == input.CallerIdOptions ||
                    (this.CallerIdOptions != null &&
                    this.CallerIdOptions.Equals(input.CallerIdOptions))
                ) && 
                (
                    this.ContactList == input.ContactList ||
                    (this.ContactList != null &&
                    this.ContactList.Equals(input.ContactList))
                ) && 
                (
                    this.DeviceType == input.DeviceType ||
                    (this.DeviceType != null &&
                    this.DeviceType.Equals(input.DeviceType))
                ) && 
                (
                    this.DialPlan == input.DialPlan ||
                    (this.DialPlan != null &&
                    this.DialPlan.Equals(input.DialPlan))
                ) && 
                (
                    this.DoNotDisturb == input.DoNotDisturb ||
                    (this.DoNotDisturb != null &&
                    this.DoNotDisturb.Equals(input.DoNotDisturb))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.ExcludeFromQueues == input.ExcludeFromQueues ||
                    (this.ExcludeFromQueues != null &&
                    this.ExcludeFromQueues.Equals(input.ExcludeFromQueues))
                ) && 
                (
                    this.Flags == input.Flags ||
                    this.Flags != null &&
                    this.Flags.SequenceEqual(input.Flags)
                ) && 
                (
                    this.Formatters == input.Formatters ||
                    (this.Formatters != null &&
                    this.Formatters.Equals(input.Formatters))
                ) && 
                (
                    this.Hotdesk == input.Hotdesk ||
                    (this.Hotdesk != null &&
                    this.Hotdesk.Equals(input.Hotdesk))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.MacAddress == input.MacAddress ||
                    (this.MacAddress != null &&
                    this.MacAddress.Equals(input.MacAddress))
                ) && 
                (
                    this.Media == input.Media ||
                    (this.Media != null &&
                    this.Media.Equals(input.Media))
                ) && 
                (
                    this.Metaflows == input.Metaflows ||
                    (this.Metaflows != null &&
                    this.Metaflows.Equals(input.Metaflows))
                ) && 
                (
                    this.MusicOnHold == input.MusicOnHold ||
                    (this.MusicOnHold != null &&
                    this.MusicOnHold.Equals(input.MusicOnHold))
                ) && 
                (
                    this.MwiUnsolicitedUpdates == input.MwiUnsolicitedUpdates ||
                    (this.MwiUnsolicitedUpdates != null &&
                    this.MwiUnsolicitedUpdates.Equals(input.MwiUnsolicitedUpdates))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OutboundFlags == input.OutboundFlags ||
                    (this.OutboundFlags != null &&
                    this.OutboundFlags.Equals(input.OutboundFlags))
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                ) && 
                (
                    this.PresenceId == input.PresenceId ||
                    (this.PresenceId != null &&
                    this.PresenceId.Equals(input.PresenceId))
                ) && 
                (
                    this.Provision == input.Provision ||
                    (this.Provision != null &&
                    this.Provision.Equals(input.Provision))
                ) && 
                (
                    this.RegisterOverwriteNotify == input.RegisterOverwriteNotify ||
                    (this.RegisterOverwriteNotify != null &&
                    this.RegisterOverwriteNotify.Equals(input.RegisterOverwriteNotify))
                ) && 
                (
                    this.Ringtones == input.Ringtones ||
                    (this.Ringtones != null &&
                    this.Ringtones.Equals(input.Ringtones))
                ) && 
                (
                    this.Sip == input.Sip ||
                    (this.Sip != null &&
                    this.Sip.Equals(input.Sip))
                ) && 
                (
                    this.SuppressUnregisterNotifications == input.SuppressUnregisterNotifications ||
                    (this.SuppressUnregisterNotifications != null &&
                    this.SuppressUnregisterNotifications.Equals(input.SuppressUnregisterNotifications))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CallForward != null)
                    hashCode = hashCode * 59 + this.CallForward.GetHashCode();
                if (this.CallRecording != null)
                    hashCode = hashCode * 59 + this.CallRecording.GetHashCode();
                if (this.CallRestriction != null)
                    hashCode = hashCode * 59 + this.CallRestriction.GetHashCode();
                if (this.CallWaiting != null)
                    hashCode = hashCode * 59 + this.CallWaiting.GetHashCode();
                if (this.CallerId != null)
                    hashCode = hashCode * 59 + this.CallerId.GetHashCode();
                if (this.CallerIdOptions != null)
                    hashCode = hashCode * 59 + this.CallerIdOptions.GetHashCode();
                if (this.ContactList != null)
                    hashCode = hashCode * 59 + this.ContactList.GetHashCode();
                if (this.DeviceType != null)
                    hashCode = hashCode * 59 + this.DeviceType.GetHashCode();
                if (this.DialPlan != null)
                    hashCode = hashCode * 59 + this.DialPlan.GetHashCode();
                if (this.DoNotDisturb != null)
                    hashCode = hashCode * 59 + this.DoNotDisturb.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.ExcludeFromQueues != null)
                    hashCode = hashCode * 59 + this.ExcludeFromQueues.GetHashCode();
                if (this.Flags != null)
                    hashCode = hashCode * 59 + this.Flags.GetHashCode();
                if (this.Formatters != null)
                    hashCode = hashCode * 59 + this.Formatters.GetHashCode();
                if (this.Hotdesk != null)
                    hashCode = hashCode * 59 + this.Hotdesk.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.MacAddress != null)
                    hashCode = hashCode * 59 + this.MacAddress.GetHashCode();
                if (this.Media != null)
                    hashCode = hashCode * 59 + this.Media.GetHashCode();
                if (this.Metaflows != null)
                    hashCode = hashCode * 59 + this.Metaflows.GetHashCode();
                if (this.MusicOnHold != null)
                    hashCode = hashCode * 59 + this.MusicOnHold.GetHashCode();
                if (this.MwiUnsolicitedUpdates != null)
                    hashCode = hashCode * 59 + this.MwiUnsolicitedUpdates.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OutboundFlags != null)
                    hashCode = hashCode * 59 + this.OutboundFlags.GetHashCode();
                if (this.OwnerId != null)
                    hashCode = hashCode * 59 + this.OwnerId.GetHashCode();
                if (this.PresenceId != null)
                    hashCode = hashCode * 59 + this.PresenceId.GetHashCode();
                if (this.Provision != null)
                    hashCode = hashCode * 59 + this.Provision.GetHashCode();
                if (this.RegisterOverwriteNotify != null)
                    hashCode = hashCode * 59 + this.RegisterOverwriteNotify.GetHashCode();
                if (this.Ringtones != null)
                    hashCode = hashCode * 59 + this.Ringtones.GetHashCode();
                if (this.Sip != null)
                    hashCode = hashCode * 59 + this.Sip.GetHashCode();
                if (this.SuppressUnregisterNotifications != null)
                    hashCode = hashCode * 59 + this.SuppressUnregisterNotifications.GetHashCode();
                if (this.Timezone != null)
                    hashCode = hashCode * 59 + this.Timezone.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // OwnerId (string) maxLength
            if(this.OwnerId != null && this.OwnerId.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OwnerId, length must be less than 32.", new [] { "OwnerId" });
            }

            // OwnerId (string) minLength
            if(this.OwnerId != null && this.OwnerId.Length < 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OwnerId, length must be greater than 32.", new [] { "OwnerId" });
            }

            yield break;
        }
    }

}
