/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Validator for the call_waiting callflow data object
    /// </summary>
    [DataContract]
    public partial class CallflowsCallWaiting :  IEquatable<CallflowsCallWaiting>, IValidatableObject
    {
        /// <summary>
        /// What action to perform
        /// </summary>
        /// <value>What action to perform</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            
            /// <summary>
            /// Enum Activate for value: activate
            /// </summary>
            [EnumMember(Value = "activate")]
            Activate = 1,
            
            /// <summary>
            /// Enum Deactivate for value: deactivate
            /// </summary>
            [EnumMember(Value = "deactivate")]
            Deactivate = 2,
            
            /// <summary>
            /// Enum Toggle for value: toggle
            /// </summary>
            [EnumMember(Value = "toggle")]
            Toggle = 3
        }

        /// <summary>
        /// What action to perform
        /// </summary>
        /// <value>What action to perform</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Apply the action to the calling device or user
        /// </summary>
        /// <value>Apply the action to the calling device or user</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScopeEnum
        {
            
            /// <summary>
            /// Enum Device for value: device
            /// </summary>
            [EnumMember(Value = "device")]
            Device = 1,
            
            /// <summary>
            /// Enum User for value: user
            /// </summary>
            [EnumMember(Value = "user")]
            User = 2
        }

        /// <summary>
        /// Apply the action to the calling device or user
        /// </summary>
        /// <value>Apply the action to the calling device or user</value>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public ScopeEnum? Scope { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsCallWaiting" /> class.
        /// </summary>
        /// <param name="action">What action to perform (default to ActionEnum.Toggle).</param>
        /// <param name="scope">Apply the action to the calling device or user (default to ScopeEnum.Device).</param>
        /// <param name="skipModule">When set to true this callflow action is skipped, advancing to the wildcard branch (if any).</param>
        public CallflowsCallWaiting(ActionEnum? action = ActionEnum.Toggle, ScopeEnum? scope = ScopeEnum.Device, bool? skipModule = default(bool?))
        {
            // use default value if no "action" provided
            if (action == null)
            {
                this.Action = ActionEnum.Toggle;
            }
            else
            {
                this.Action = action;
            }
            // use default value if no "scope" provided
            if (scope == null)
            {
                this.Scope = ScopeEnum.Device;
            }
            else
            {
                this.Scope = scope;
            }
            this.SkipModule = skipModule;
        }
        


        /// <summary>
        /// When set to true this callflow action is skipped, advancing to the wildcard branch (if any)
        /// </summary>
        /// <value>When set to true this callflow action is skipped, advancing to the wildcard branch (if any)</value>
        [DataMember(Name="skip_module", EmitDefaultValue=false)]
        public bool? SkipModule { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallflowsCallWaiting {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  SkipModule: ").Append(SkipModule).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallflowsCallWaiting);
        }

        /// <summary>
        /// Returns true if CallflowsCallWaiting instances are equal
        /// </summary>
        /// <param name="input">Instance of CallflowsCallWaiting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallflowsCallWaiting input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.SkipModule == input.SkipModule ||
                    (this.SkipModule != null &&
                    this.SkipModule.Equals(input.SkipModule))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.SkipModule != null)
                    hashCode = hashCode * 59 + this.SkipModule.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
