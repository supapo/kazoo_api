/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SystemConfigEcallmgrCallControl
    /// </summary>
    [DataContract]
    public partial class SystemConfigEcallmgrCallControl :  IEquatable<SystemConfigEcallmgrCallControl>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigEcallmgrCallControl" /> class.
        /// </summary>
        /// <param name="poolOverflow">ecallmgr call_control pool_overflow.</param>
        /// <param name="poolServerConfirms">ecallmgr call_control pool_server_confirms (default to false).</param>
        /// <param name="poolSize">ecallmgr call_control pool_size.</param>
        /// <param name="poolThreshold">ecallmgr call_control pool_threshold.</param>
        /// <param name="usePool">ecallmgr call_control use_pool (default to false).</param>
        public SystemConfigEcallmgrCallControl(int? poolOverflow = default(int?), bool? poolServerConfirms = false, int? poolSize = default(int?), int? poolThreshold = default(int?), bool? usePool = false)
        {
            this.PoolOverflow = poolOverflow;
            // use default value if no "poolServerConfirms" provided
            if (poolServerConfirms == null)
            {
                this.PoolServerConfirms = false;
            }
            else
            {
                this.PoolServerConfirms = poolServerConfirms;
            }
            this.PoolSize = poolSize;
            this.PoolThreshold = poolThreshold;
            // use default value if no "usePool" provided
            if (usePool == null)
            {
                this.UsePool = false;
            }
            else
            {
                this.UsePool = usePool;
            }
        }
        
        /// <summary>
        /// ecallmgr call_control pool_overflow
        /// </summary>
        /// <value>ecallmgr call_control pool_overflow</value>
        [DataMember(Name="pool_overflow", EmitDefaultValue=false)]
        public int? PoolOverflow { get; set; }

        /// <summary>
        /// ecallmgr call_control pool_server_confirms
        /// </summary>
        /// <value>ecallmgr call_control pool_server_confirms</value>
        [DataMember(Name="pool_server_confirms", EmitDefaultValue=false)]
        public bool? PoolServerConfirms { get; set; }

        /// <summary>
        /// ecallmgr call_control pool_size
        /// </summary>
        /// <value>ecallmgr call_control pool_size</value>
        [DataMember(Name="pool_size", EmitDefaultValue=false)]
        public int? PoolSize { get; set; }

        /// <summary>
        /// ecallmgr call_control pool_threshold
        /// </summary>
        /// <value>ecallmgr call_control pool_threshold</value>
        [DataMember(Name="pool_threshold", EmitDefaultValue=false)]
        public int? PoolThreshold { get; set; }

        /// <summary>
        /// ecallmgr call_control use_pool
        /// </summary>
        /// <value>ecallmgr call_control use_pool</value>
        [DataMember(Name="use_pool", EmitDefaultValue=false)]
        public bool? UsePool { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigEcallmgrCallControl {\n");
            sb.Append("  PoolOverflow: ").Append(PoolOverflow).Append("\n");
            sb.Append("  PoolServerConfirms: ").Append(PoolServerConfirms).Append("\n");
            sb.Append("  PoolSize: ").Append(PoolSize).Append("\n");
            sb.Append("  PoolThreshold: ").Append(PoolThreshold).Append("\n");
            sb.Append("  UsePool: ").Append(UsePool).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigEcallmgrCallControl);
        }

        /// <summary>
        /// Returns true if SystemConfigEcallmgrCallControl instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigEcallmgrCallControl to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigEcallmgrCallControl input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PoolOverflow == input.PoolOverflow ||
                    (this.PoolOverflow != null &&
                    this.PoolOverflow.Equals(input.PoolOverflow))
                ) && 
                (
                    this.PoolServerConfirms == input.PoolServerConfirms ||
                    (this.PoolServerConfirms != null &&
                    this.PoolServerConfirms.Equals(input.PoolServerConfirms))
                ) && 
                (
                    this.PoolSize == input.PoolSize ||
                    (this.PoolSize != null &&
                    this.PoolSize.Equals(input.PoolSize))
                ) && 
                (
                    this.PoolThreshold == input.PoolThreshold ||
                    (this.PoolThreshold != null &&
                    this.PoolThreshold.Equals(input.PoolThreshold))
                ) && 
                (
                    this.UsePool == input.UsePool ||
                    (this.UsePool != null &&
                    this.UsePool.Equals(input.UsePool))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PoolOverflow != null)
                    hashCode = hashCode * 59 + this.PoolOverflow.GetHashCode();
                if (this.PoolServerConfirms != null)
                    hashCode = hashCode * 59 + this.PoolServerConfirms.GetHashCode();
                if (this.PoolSize != null)
                    hashCode = hashCode * 59 + this.PoolSize.GetHashCode();
                if (this.PoolThreshold != null)
                    hashCode = hashCode * 59 + this.PoolThreshold.GetHashCode();
                if (this.UsePool != null)
                    hashCode = hashCode * 59 + this.UsePool.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
