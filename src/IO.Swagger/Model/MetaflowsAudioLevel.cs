/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Allow changing the volume on a channel (including mute/unmute)
    /// </summary>
    [DataContract]
    public partial class MetaflowsAudioLevel :  IEquatable<MetaflowsAudioLevel>, IValidatableObject
    {
        /// <summary>
        /// Start or stop the audio adjustment
        /// </summary>
        /// <value>Start or stop the audio adjustment</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            
            /// <summary>
            /// Enum Start for value: start
            /// </summary>
            [EnumMember(Value = "start")]
            Start = 1,
            
            /// <summary>
            /// Enum Stop for value: stop
            /// </summary>
            [EnumMember(Value = "stop")]
            Stop = 2
        }

        /// <summary>
        /// Start or stop the audio adjustment
        /// </summary>
        /// <value>Start or stop the audio adjustment</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// What mode to use (depends on direction)
        /// </summary>
        /// <value>What mode to use (depends on direction)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            
            /// <summary>
            /// Enum Read for value: read
            /// </summary>
            [EnumMember(Value = "read")]
            Read = 1,
            
            /// <summary>
            /// Enum Write for value: write
            /// </summary>
            [EnumMember(Value = "write")]
            Write = 2
        }

        /// <summary>
        /// What mode to use (depends on direction)
        /// </summary>
        /// <value>What mode to use (depends on direction)</value>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public ModeEnum? Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetaflowsAudioLevel" /> class.
        /// </summary>
        /// <param name="action">Start or stop the audio adjustment.</param>
        /// <param name="level">Adjustment level for the audio.</param>
        /// <param name="mode">What mode to use (depends on direction).</param>
        public MetaflowsAudioLevel(ActionEnum? action = default(ActionEnum?), int? level = default(int?), ModeEnum? mode = default(ModeEnum?))
        {
            this.Action = action;
            this.Level = level;
            this.Mode = mode;
        }
        

        /// <summary>
        /// Adjustment level for the audio
        /// </summary>
        /// <value>Adjustment level for the audio</value>
        [DataMember(Name="level", EmitDefaultValue=false)]
        public int? Level { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MetaflowsAudioLevel {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MetaflowsAudioLevel);
        }

        /// <summary>
        /// Returns true if MetaflowsAudioLevel instances are equal
        /// </summary>
        /// <param name="input">Instance of MetaflowsAudioLevel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetaflowsAudioLevel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Level == input.Level ||
                    (this.Level != null &&
                    this.Level.Equals(input.Level))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Level != null)
                    hashCode = hashCode * 59 + this.Level.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Level (int?) maximum
            if(this.Level > (int?)4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Level, must be a value less than or equal to 4.", new [] { "Level" });
            }

            // Level (int?) minimum
            if(this.Level < (int?)-4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Level, must be a value greater than or equal to -4.", new [] { "Level" });
            }

            yield break;
        }
    }

}
