/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The media (prompt) parameters
    /// </summary>
    [DataContract]
    public partial class MenusMedia :  IEquatable<MenusMedia>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MenusMedia" /> class.
        /// </summary>
        /// <param name="exitMedia">When a call is transferred from the menu after all retries exhausted this media can be played (prior to transfer if enabled).</param>
        /// <param name="greeting">The ID of a media object that should be used as the menu greeting.</param>
        /// <param name="invalidMedia">When the collected digits don&#39;t result in a match or hunt this media can be played.</param>
        /// <param name="transferMedia">When a call is transferred from the menu, either after all retries exhausted or a successful hunt, this media can be played.</param>
        public MenusMedia(Object exitMedia = default(Object), string greeting = default(string), Object invalidMedia = default(Object), Object transferMedia = default(Object))
        {
            this.ExitMedia = exitMedia;
            this.Greeting = greeting;
            this.InvalidMedia = invalidMedia;
            this.TransferMedia = transferMedia;
        }
        
        /// <summary>
        /// When a call is transferred from the menu after all retries exhausted this media can be played (prior to transfer if enabled)
        /// </summary>
        /// <value>When a call is transferred from the menu after all retries exhausted this media can be played (prior to transfer if enabled)</value>
        [DataMember(Name="exit_media", EmitDefaultValue=false)]
        public Object ExitMedia { get; set; }

        /// <summary>
        /// The ID of a media object that should be used as the menu greeting
        /// </summary>
        /// <value>The ID of a media object that should be used as the menu greeting</value>
        [DataMember(Name="greeting", EmitDefaultValue=false)]
        public string Greeting { get; set; }

        /// <summary>
        /// When the collected digits don&#39;t result in a match or hunt this media can be played
        /// </summary>
        /// <value>When the collected digits don&#39;t result in a match or hunt this media can be played</value>
        [DataMember(Name="invalid_media", EmitDefaultValue=false)]
        public Object InvalidMedia { get; set; }

        /// <summary>
        /// When a call is transferred from the menu, either after all retries exhausted or a successful hunt, this media can be played
        /// </summary>
        /// <value>When a call is transferred from the menu, either after all retries exhausted or a successful hunt, this media can be played</value>
        [DataMember(Name="transfer_media", EmitDefaultValue=false)]
        public Object TransferMedia { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MenusMedia {\n");
            sb.Append("  ExitMedia: ").Append(ExitMedia).Append("\n");
            sb.Append("  Greeting: ").Append(Greeting).Append("\n");
            sb.Append("  InvalidMedia: ").Append(InvalidMedia).Append("\n");
            sb.Append("  TransferMedia: ").Append(TransferMedia).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MenusMedia);
        }

        /// <summary>
        /// Returns true if MenusMedia instances are equal
        /// </summary>
        /// <param name="input">Instance of MenusMedia to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MenusMedia input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExitMedia == input.ExitMedia ||
                    (this.ExitMedia != null &&
                    this.ExitMedia.Equals(input.ExitMedia))
                ) && 
                (
                    this.Greeting == input.Greeting ||
                    (this.Greeting != null &&
                    this.Greeting.Equals(input.Greeting))
                ) && 
                (
                    this.InvalidMedia == input.InvalidMedia ||
                    (this.InvalidMedia != null &&
                    this.InvalidMedia.Equals(input.InvalidMedia))
                ) && 
                (
                    this.TransferMedia == input.TransferMedia ||
                    (this.TransferMedia != null &&
                    this.TransferMedia.Equals(input.TransferMedia))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExitMedia != null)
                    hashCode = hashCode * 59 + this.ExitMedia.GetHashCode();
                if (this.Greeting != null)
                    hashCode = hashCode * 59 + this.Greeting.GetHashCode();
                if (this.InvalidMedia != null)
                    hashCode = hashCode * 59 + this.InvalidMedia.GetHashCode();
                if (this.TransferMedia != null)
                    hashCode = hashCode * 59 + this.TransferMedia.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Greeting (string) maxLength
            if(this.Greeting != null && this.Greeting.Length > 2048)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Greeting, length must be less than 2048.", new [] { "Greeting" });
            }

            // Greeting (string) minLength
            if(this.Greeting != null && this.Greeting.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Greeting, length must be greater than 3.", new [] { "Greeting" });
            }

            yield break;
        }
    }

}
