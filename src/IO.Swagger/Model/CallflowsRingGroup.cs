/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Validator for the Ring Group callflow element
    /// </summary>
    [DataContract]
    public partial class CallflowsRingGroup :  IEquatable<CallflowsRingGroup>, IValidatableObject
    {
        /// <summary>
        /// How to ring the members of the group
        /// </summary>
        /// <value>How to ring the members of the group</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StrategyEnum
        {
            
            /// <summary>
            /// Enum Simultaneous for value: simultaneous
            /// </summary>
            [EnumMember(Value = "simultaneous")]
            Simultaneous = 1,
            
            /// <summary>
            /// Enum Single for value: single
            /// </summary>
            [EnumMember(Value = "single")]
            Single = 2,
            
            /// <summary>
            /// Enum Weightedrandom for value: weighted_random
            /// </summary>
            [EnumMember(Value = "weighted_random")]
            Weightedrandom = 3
        }

        /// <summary>
        /// How to ring the members of the group
        /// </summary>
        /// <value>How to ring the members of the group</value>
        [DataMember(Name="strategy", EmitDefaultValue=false)]
        public StrategyEnum? Strategy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsRingGroup" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallflowsRingGroup() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsRingGroup" /> class.
        /// </summary>
        /// <param name="endpoints">Endpoint IDs (devices, users, etc) included in the ring group (required).</param>
        /// <param name="failOnSingleReject">If any leg rejects the call, cancel all other legs.</param>
        /// <param name="ignoreForward">If true, will ignore SIP redirect requests for call-forwarded devices (default to true).</param>
        /// <param name="repeats">How many times to retry the ring group.</param>
        /// <param name="ringback">Ringback to use.</param>
        /// <param name="ringtones">ringtones.</param>
        /// <param name="skipModule">When set to true this callflow action is skipped, advancing to the wildcard branch (if any).</param>
        /// <param name="strategy">How to ring the members of the group (default to StrategyEnum.Simultaneous).</param>
        /// <param name="timeout">How long to ring the ring group before continuing, in seconds.</param>
        public CallflowsRingGroup(List<CallflowsPageGroupEndpoints> endpoints = default(List<CallflowsPageGroupEndpoints>), bool? failOnSingleReject = default(bool?), bool? ignoreForward = true, int? repeats = default(int?), string ringback = default(string), CallflowsGroupRingtones ringtones = default(CallflowsGroupRingtones), bool? skipModule = default(bool?), StrategyEnum? strategy = StrategyEnum.Simultaneous, int? timeout = default(int?))
        {
            // to ensure "endpoints" is required (not null)
            if (endpoints == null)
            {
                throw new InvalidDataException("endpoints is a required property for CallflowsRingGroup and cannot be null");
            }
            else
            {
                this.Endpoints = endpoints;
            }
            this.FailOnSingleReject = failOnSingleReject;
            // use default value if no "ignoreForward" provided
            if (ignoreForward == null)
            {
                this.IgnoreForward = true;
            }
            else
            {
                this.IgnoreForward = ignoreForward;
            }
            this.Repeats = repeats;
            this.Ringback = ringback;
            this.Ringtones = ringtones;
            this.SkipModule = skipModule;
            // use default value if no "strategy" provided
            if (strategy == null)
            {
                this.Strategy = StrategyEnum.Simultaneous;
            }
            else
            {
                this.Strategy = strategy;
            }
            this.Timeout = timeout;
        }
        
        /// <summary>
        /// Endpoint IDs (devices, users, etc) included in the ring group
        /// </summary>
        /// <value>Endpoint IDs (devices, users, etc) included in the ring group</value>
        [DataMember(Name="endpoints", EmitDefaultValue=false)]
        public List<CallflowsPageGroupEndpoints> Endpoints { get; set; }

        /// <summary>
        /// If any leg rejects the call, cancel all other legs
        /// </summary>
        /// <value>If any leg rejects the call, cancel all other legs</value>
        [DataMember(Name="fail_on_single_reject", EmitDefaultValue=false)]
        public bool? FailOnSingleReject { get; set; }

        /// <summary>
        /// If true, will ignore SIP redirect requests for call-forwarded devices
        /// </summary>
        /// <value>If true, will ignore SIP redirect requests for call-forwarded devices</value>
        [DataMember(Name="ignore_forward", EmitDefaultValue=false)]
        public bool? IgnoreForward { get; set; }

        /// <summary>
        /// How many times to retry the ring group
        /// </summary>
        /// <value>How many times to retry the ring group</value>
        [DataMember(Name="repeats", EmitDefaultValue=false)]
        public int? Repeats { get; set; }

        /// <summary>
        /// Ringback to use
        /// </summary>
        /// <value>Ringback to use</value>
        [DataMember(Name="ringback", EmitDefaultValue=false)]
        public string Ringback { get; set; }

        /// <summary>
        /// Gets or Sets Ringtones
        /// </summary>
        [DataMember(Name="ringtones", EmitDefaultValue=false)]
        public CallflowsGroupRingtones Ringtones { get; set; }

        /// <summary>
        /// When set to true this callflow action is skipped, advancing to the wildcard branch (if any)
        /// </summary>
        /// <value>When set to true this callflow action is skipped, advancing to the wildcard branch (if any)</value>
        [DataMember(Name="skip_module", EmitDefaultValue=false)]
        public bool? SkipModule { get; set; }


        /// <summary>
        /// How long to ring the ring group before continuing, in seconds
        /// </summary>
        /// <value>How long to ring the ring group before continuing, in seconds</value>
        [DataMember(Name="timeout", EmitDefaultValue=false)]
        public int? Timeout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallflowsRingGroup {\n");
            sb.Append("  Endpoints: ").Append(Endpoints).Append("\n");
            sb.Append("  FailOnSingleReject: ").Append(FailOnSingleReject).Append("\n");
            sb.Append("  IgnoreForward: ").Append(IgnoreForward).Append("\n");
            sb.Append("  Repeats: ").Append(Repeats).Append("\n");
            sb.Append("  Ringback: ").Append(Ringback).Append("\n");
            sb.Append("  Ringtones: ").Append(Ringtones).Append("\n");
            sb.Append("  SkipModule: ").Append(SkipModule).Append("\n");
            sb.Append("  Strategy: ").Append(Strategy).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallflowsRingGroup);
        }

        /// <summary>
        /// Returns true if CallflowsRingGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of CallflowsRingGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallflowsRingGroup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Endpoints == input.Endpoints ||
                    this.Endpoints != null &&
                    this.Endpoints.SequenceEqual(input.Endpoints)
                ) && 
                (
                    this.FailOnSingleReject == input.FailOnSingleReject ||
                    (this.FailOnSingleReject != null &&
                    this.FailOnSingleReject.Equals(input.FailOnSingleReject))
                ) && 
                (
                    this.IgnoreForward == input.IgnoreForward ||
                    (this.IgnoreForward != null &&
                    this.IgnoreForward.Equals(input.IgnoreForward))
                ) && 
                (
                    this.Repeats == input.Repeats ||
                    (this.Repeats != null &&
                    this.Repeats.Equals(input.Repeats))
                ) && 
                (
                    this.Ringback == input.Ringback ||
                    (this.Ringback != null &&
                    this.Ringback.Equals(input.Ringback))
                ) && 
                (
                    this.Ringtones == input.Ringtones ||
                    (this.Ringtones != null &&
                    this.Ringtones.Equals(input.Ringtones))
                ) && 
                (
                    this.SkipModule == input.SkipModule ||
                    (this.SkipModule != null &&
                    this.SkipModule.Equals(input.SkipModule))
                ) && 
                (
                    this.Strategy == input.Strategy ||
                    (this.Strategy != null &&
                    this.Strategy.Equals(input.Strategy))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    (this.Timeout != null &&
                    this.Timeout.Equals(input.Timeout))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Endpoints != null)
                    hashCode = hashCode * 59 + this.Endpoints.GetHashCode();
                if (this.FailOnSingleReject != null)
                    hashCode = hashCode * 59 + this.FailOnSingleReject.GetHashCode();
                if (this.IgnoreForward != null)
                    hashCode = hashCode * 59 + this.IgnoreForward.GetHashCode();
                if (this.Repeats != null)
                    hashCode = hashCode * 59 + this.Repeats.GetHashCode();
                if (this.Ringback != null)
                    hashCode = hashCode * 59 + this.Ringback.GetHashCode();
                if (this.Ringtones != null)
                    hashCode = hashCode * 59 + this.Ringtones.GetHashCode();
                if (this.SkipModule != null)
                    hashCode = hashCode * 59 + this.SkipModule.GetHashCode();
                if (this.Strategy != null)
                    hashCode = hashCode * 59 + this.Strategy.GetHashCode();
                if (this.Timeout != null)
                    hashCode = hashCode * 59 + this.Timeout.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Repeats (int?) minimum
            if(this.Repeats < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Repeats, must be a value greater than or equal to 1.", new [] { "Repeats" });
            }

            yield break;
        }
    }

}
