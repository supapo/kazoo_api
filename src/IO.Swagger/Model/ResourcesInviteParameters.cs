/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ResourcesInviteParameters
    /// </summary>
    [DataContract]
    public partial class ResourcesInviteParameters :  IEquatable<ResourcesInviteParameters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourcesInviteParameters" /> class.
        /// </summary>
        /// <param name="dynamic">A list of properties that, if found on the inbound call, should be added as an INVITE parameter.</param>
        /// <param name="_static">A list of static values that should be added as INVITE parameters.</param>
        public ResourcesInviteParameters(List<Object> dynamic = default(List<Object>), List<string> _static = default(List<string>))
        {
            this.Dynamic = dynamic;
            this.Static = _static;
        }
        
        /// <summary>
        /// A list of properties that, if found on the inbound call, should be added as an INVITE parameter
        /// </summary>
        /// <value>A list of properties that, if found on the inbound call, should be added as an INVITE parameter</value>
        [DataMember(Name="dynamic", EmitDefaultValue=false)]
        public List<Object> Dynamic { get; set; }

        /// <summary>
        /// A list of static values that should be added as INVITE parameters
        /// </summary>
        /// <value>A list of static values that should be added as INVITE parameters</value>
        [DataMember(Name="static", EmitDefaultValue=false)]
        public List<string> Static { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResourcesInviteParameters {\n");
            sb.Append("  Dynamic: ").Append(Dynamic).Append("\n");
            sb.Append("  Static: ").Append(Static).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResourcesInviteParameters);
        }

        /// <summary>
        /// Returns true if ResourcesInviteParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of ResourcesInviteParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResourcesInviteParameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Dynamic == input.Dynamic ||
                    this.Dynamic != null &&
                    this.Dynamic.SequenceEqual(input.Dynamic)
                ) && 
                (
                    this.Static == input.Static ||
                    this.Static != null &&
                    this.Static.SequenceEqual(input.Static)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dynamic != null)
                    hashCode = hashCode * 59 + this.Dynamic.GetHashCode();
                if (this.Static != null)
                    hashCode = hashCode * 59 + this.Static.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
