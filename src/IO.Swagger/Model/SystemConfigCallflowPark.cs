/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for callflow.park system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigCallflowPark :  IEquatable<SystemConfigCallflowPark>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigCallflowPark" /> class.
        /// </summary>
        /// <param name="dbDocName">callflow.park db doc name (default to &quot;parked_calls&quot;).</param>
        /// <param name="defaultCallbackTimeout">callflow.park default callback timeout.</param>
        /// <param name="defaultRingbackTimeout">callflow.park default ringback timeout.</param>
        /// <param name="parkedPresenceType">callflow.park parked presence type (default to &quot;early&quot;).</param>
        /// <param name="valetReservationCleanupTimeMs">callflow park valet_reservation_cleanup_time_ms.</param>
        public SystemConfigCallflowPark(string dbDocName = "parked_calls", int? defaultCallbackTimeout = default(int?), int? defaultRingbackTimeout = default(int?), string parkedPresenceType = "early", int? valetReservationCleanupTimeMs = default(int?))
        {
            // use default value if no "dbDocName" provided
            if (dbDocName == null)
            {
                this.DbDocName = "parked_calls";
            }
            else
            {
                this.DbDocName = dbDocName;
            }
            this.DefaultCallbackTimeout = defaultCallbackTimeout;
            this.DefaultRingbackTimeout = defaultRingbackTimeout;
            // use default value if no "parkedPresenceType" provided
            if (parkedPresenceType == null)
            {
                this.ParkedPresenceType = "early";
            }
            else
            {
                this.ParkedPresenceType = parkedPresenceType;
            }
            this.ValetReservationCleanupTimeMs = valetReservationCleanupTimeMs;
        }
        
        /// <summary>
        /// callflow.park db doc name
        /// </summary>
        /// <value>callflow.park db doc name</value>
        [DataMember(Name="db_doc_name", EmitDefaultValue=false)]
        public string DbDocName { get; set; }

        /// <summary>
        /// callflow.park default callback timeout
        /// </summary>
        /// <value>callflow.park default callback timeout</value>
        [DataMember(Name="default_callback_timeout", EmitDefaultValue=false)]
        public int? DefaultCallbackTimeout { get; set; }

        /// <summary>
        /// callflow.park default ringback timeout
        /// </summary>
        /// <value>callflow.park default ringback timeout</value>
        [DataMember(Name="default_ringback_timeout", EmitDefaultValue=false)]
        public int? DefaultRingbackTimeout { get; set; }

        /// <summary>
        /// callflow.park parked presence type
        /// </summary>
        /// <value>callflow.park parked presence type</value>
        [DataMember(Name="parked_presence_type", EmitDefaultValue=false)]
        public string ParkedPresenceType { get; set; }

        /// <summary>
        /// callflow park valet_reservation_cleanup_time_ms
        /// </summary>
        /// <value>callflow park valet_reservation_cleanup_time_ms</value>
        [DataMember(Name="valet_reservation_cleanup_time_ms", EmitDefaultValue=false)]
        public int? ValetReservationCleanupTimeMs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigCallflowPark {\n");
            sb.Append("  DbDocName: ").Append(DbDocName).Append("\n");
            sb.Append("  DefaultCallbackTimeout: ").Append(DefaultCallbackTimeout).Append("\n");
            sb.Append("  DefaultRingbackTimeout: ").Append(DefaultRingbackTimeout).Append("\n");
            sb.Append("  ParkedPresenceType: ").Append(ParkedPresenceType).Append("\n");
            sb.Append("  ValetReservationCleanupTimeMs: ").Append(ValetReservationCleanupTimeMs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigCallflowPark);
        }

        /// <summary>
        /// Returns true if SystemConfigCallflowPark instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigCallflowPark to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigCallflowPark input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DbDocName == input.DbDocName ||
                    (this.DbDocName != null &&
                    this.DbDocName.Equals(input.DbDocName))
                ) && 
                (
                    this.DefaultCallbackTimeout == input.DefaultCallbackTimeout ||
                    (this.DefaultCallbackTimeout != null &&
                    this.DefaultCallbackTimeout.Equals(input.DefaultCallbackTimeout))
                ) && 
                (
                    this.DefaultRingbackTimeout == input.DefaultRingbackTimeout ||
                    (this.DefaultRingbackTimeout != null &&
                    this.DefaultRingbackTimeout.Equals(input.DefaultRingbackTimeout))
                ) && 
                (
                    this.ParkedPresenceType == input.ParkedPresenceType ||
                    (this.ParkedPresenceType != null &&
                    this.ParkedPresenceType.Equals(input.ParkedPresenceType))
                ) && 
                (
                    this.ValetReservationCleanupTimeMs == input.ValetReservationCleanupTimeMs ||
                    (this.ValetReservationCleanupTimeMs != null &&
                    this.ValetReservationCleanupTimeMs.Equals(input.ValetReservationCleanupTimeMs))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DbDocName != null)
                    hashCode = hashCode * 59 + this.DbDocName.GetHashCode();
                if (this.DefaultCallbackTimeout != null)
                    hashCode = hashCode * 59 + this.DefaultCallbackTimeout.GetHashCode();
                if (this.DefaultRingbackTimeout != null)
                    hashCode = hashCode * 59 + this.DefaultRingbackTimeout.GetHashCode();
                if (this.ParkedPresenceType != null)
                    hashCode = hashCode * 59 + this.ParkedPresenceType.GetHashCode();
                if (this.ValetReservationCleanupTimeMs != null)
                    hashCode = hashCode * 59 + this.ValetReservationCleanupTimeMs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
