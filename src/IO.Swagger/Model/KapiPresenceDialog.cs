/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for presence.dialog
    /// </summary>
    [DataContract]
    public partial class KapiPresenceDialog :  IEquatable<KapiPresenceDialog>, IValidatableObject
    {
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Presence for value: presence
            /// </summary>
            [EnumMember(Value = "presence")]
            Presence = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Dialogupdate for value: dialog_update
            /// </summary>
            [EnumMember(Value = "dialog_update")]
            Dialogupdate = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum Early for value: early
            /// </summary>
            [EnumMember(Value = "early")]
            Early = 1,
            
            /// <summary>
            /// Enum Confirmed for value: confirmed
            /// </summary>
            [EnumMember(Value = "confirmed")]
            Confirmed = 2,
            
            /// <summary>
            /// Enum Terminated for value: terminated
            /// </summary>
            [EnumMember(Value = "terminated")]
            Terminated = 3
        }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiPresenceDialog" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiPresenceDialog() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiPresenceDialog" /> class.
        /// </summary>
        /// <param name="callCookie">callCookie.</param>
        /// <param name="callID">callID.</param>
        /// <param name="direction">direction.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="eventPackage">eventPackage.</param>
        /// <param name="expires">expires.</param>
        /// <param name="flushLevel">flushLevel.</param>
        /// <param name="from">from (required).</param>
        /// <param name="fromRealm">fromRealm.</param>
        /// <param name="fromTag">fromTag.</param>
        /// <param name="fromURI">fromURI.</param>
        /// <param name="fromUser">fromUser.</param>
        /// <param name="presenceID">presenceID.</param>
        /// <param name="presentity">presentity.</param>
        /// <param name="presentityRealm">presentityRealm.</param>
        /// <param name="presentityUser">presentityUser.</param>
        /// <param name="state">state.</param>
        /// <param name="switchURI">switchURI.</param>
        /// <param name="targetCallID">targetCallID.</param>
        /// <param name="to">to (required).</param>
        /// <param name="toRealm">toRealm.</param>
        /// <param name="toTag">toTag.</param>
        /// <param name="toURI">toURI.</param>
        /// <param name="toUser">toUser.</param>
        public KapiPresenceDialog(string callCookie = default(string), string callID = default(string), string direction = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string eventPackage = default(string), string expires = default(string), string flushLevel = default(string), string from = default(string), string fromRealm = default(string), string fromTag = default(string), string fromURI = default(string), string fromUser = default(string), string presenceID = default(string), string presentity = default(string), string presentityRealm = default(string), string presentityUser = default(string), StateEnum? state = default(StateEnum?), string switchURI = default(string), string targetCallID = default(string), string to = default(string), string toRealm = default(string), string toTag = default(string), string toURI = default(string), string toUser = default(string))
        {
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new InvalidDataException("from is a required property for KapiPresenceDialog and cannot be null");
            }
            else
            {
                this.From = from;
            }
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new InvalidDataException("to is a required property for KapiPresenceDialog and cannot be null");
            }
            else
            {
                this.To = to;
            }
            this.CallCookie = callCookie;
            this.CallID = callID;
            this.Direction = direction;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.EventPackage = eventPackage;
            this.Expires = expires;
            this.FlushLevel = flushLevel;
            this.FromRealm = fromRealm;
            this.FromTag = fromTag;
            this.FromURI = fromURI;
            this.FromUser = fromUser;
            this.PresenceID = presenceID;
            this.Presentity = presentity;
            this.PresentityRealm = presentityRealm;
            this.PresentityUser = presentityUser;
            this.State = state;
            this.SwitchURI = switchURI;
            this.TargetCallID = targetCallID;
            this.ToRealm = toRealm;
            this.ToTag = toTag;
            this.ToURI = toURI;
            this.ToUser = toUser;
        }
        
        /// <summary>
        /// Gets or Sets CallCookie
        /// </summary>
        [DataMember(Name="Call-Cookie", EmitDefaultValue=false)]
        public string CallCookie { get; set; }

        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name="Direction", EmitDefaultValue=false)]
        public string Direction { get; set; }



        /// <summary>
        /// Gets or Sets EventPackage
        /// </summary>
        [DataMember(Name="Event-Package", EmitDefaultValue=false)]
        public string EventPackage { get; set; }

        /// <summary>
        /// Gets or Sets Expires
        /// </summary>
        [DataMember(Name="Expires", EmitDefaultValue=false)]
        public string Expires { get; set; }

        /// <summary>
        /// Gets or Sets FlushLevel
        /// </summary>
        [DataMember(Name="Flush-Level", EmitDefaultValue=false)]
        public string FlushLevel { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="From", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// Gets or Sets FromRealm
        /// </summary>
        [DataMember(Name="From-Realm", EmitDefaultValue=false)]
        public string FromRealm { get; set; }

        /// <summary>
        /// Gets or Sets FromTag
        /// </summary>
        [DataMember(Name="From-Tag", EmitDefaultValue=false)]
        public string FromTag { get; set; }

        /// <summary>
        /// Gets or Sets FromURI
        /// </summary>
        [DataMember(Name="From-URI", EmitDefaultValue=false)]
        public string FromURI { get; set; }

        /// <summary>
        /// Gets or Sets FromUser
        /// </summary>
        [DataMember(Name="From-User", EmitDefaultValue=false)]
        public string FromUser { get; set; }

        /// <summary>
        /// Gets or Sets PresenceID
        /// </summary>
        [DataMember(Name="Presence-ID", EmitDefaultValue=false)]
        public string PresenceID { get; set; }

        /// <summary>
        /// Gets or Sets Presentity
        /// </summary>
        [DataMember(Name="Presentity", EmitDefaultValue=false)]
        public string Presentity { get; set; }

        /// <summary>
        /// Gets or Sets PresentityRealm
        /// </summary>
        [DataMember(Name="Presentity-Realm", EmitDefaultValue=false)]
        public string PresentityRealm { get; set; }

        /// <summary>
        /// Gets or Sets PresentityUser
        /// </summary>
        [DataMember(Name="Presentity-User", EmitDefaultValue=false)]
        public string PresentityUser { get; set; }


        /// <summary>
        /// Gets or Sets SwitchURI
        /// </summary>
        [DataMember(Name="Switch-URI", EmitDefaultValue=false)]
        public string SwitchURI { get; set; }

        /// <summary>
        /// Gets or Sets TargetCallID
        /// </summary>
        [DataMember(Name="Target-Call-ID", EmitDefaultValue=false)]
        public string TargetCallID { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="To", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// Gets or Sets ToRealm
        /// </summary>
        [DataMember(Name="To-Realm", EmitDefaultValue=false)]
        public string ToRealm { get; set; }

        /// <summary>
        /// Gets or Sets ToTag
        /// </summary>
        [DataMember(Name="To-Tag", EmitDefaultValue=false)]
        public string ToTag { get; set; }

        /// <summary>
        /// Gets or Sets ToURI
        /// </summary>
        [DataMember(Name="To-URI", EmitDefaultValue=false)]
        public string ToURI { get; set; }

        /// <summary>
        /// Gets or Sets ToUser
        /// </summary>
        [DataMember(Name="To-User", EmitDefaultValue=false)]
        public string ToUser { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiPresenceDialog {\n");
            sb.Append("  CallCookie: ").Append(CallCookie).Append("\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  EventPackage: ").Append(EventPackage).Append("\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("  FlushLevel: ").Append(FlushLevel).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  FromRealm: ").Append(FromRealm).Append("\n");
            sb.Append("  FromTag: ").Append(FromTag).Append("\n");
            sb.Append("  FromURI: ").Append(FromURI).Append("\n");
            sb.Append("  FromUser: ").Append(FromUser).Append("\n");
            sb.Append("  PresenceID: ").Append(PresenceID).Append("\n");
            sb.Append("  Presentity: ").Append(Presentity).Append("\n");
            sb.Append("  PresentityRealm: ").Append(PresentityRealm).Append("\n");
            sb.Append("  PresentityUser: ").Append(PresentityUser).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  SwitchURI: ").Append(SwitchURI).Append("\n");
            sb.Append("  TargetCallID: ").Append(TargetCallID).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  ToRealm: ").Append(ToRealm).Append("\n");
            sb.Append("  ToTag: ").Append(ToTag).Append("\n");
            sb.Append("  ToURI: ").Append(ToURI).Append("\n");
            sb.Append("  ToUser: ").Append(ToUser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiPresenceDialog);
        }

        /// <summary>
        /// Returns true if KapiPresenceDialog instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiPresenceDialog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiPresenceDialog input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CallCookie == input.CallCookie ||
                    (this.CallCookie != null &&
                    this.CallCookie.Equals(input.CallCookie))
                ) && 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.EventPackage == input.EventPackage ||
                    (this.EventPackage != null &&
                    this.EventPackage.Equals(input.EventPackage))
                ) && 
                (
                    this.Expires == input.Expires ||
                    (this.Expires != null &&
                    this.Expires.Equals(input.Expires))
                ) && 
                (
                    this.FlushLevel == input.FlushLevel ||
                    (this.FlushLevel != null &&
                    this.FlushLevel.Equals(input.FlushLevel))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.FromRealm == input.FromRealm ||
                    (this.FromRealm != null &&
                    this.FromRealm.Equals(input.FromRealm))
                ) && 
                (
                    this.FromTag == input.FromTag ||
                    (this.FromTag != null &&
                    this.FromTag.Equals(input.FromTag))
                ) && 
                (
                    this.FromURI == input.FromURI ||
                    (this.FromURI != null &&
                    this.FromURI.Equals(input.FromURI))
                ) && 
                (
                    this.FromUser == input.FromUser ||
                    (this.FromUser != null &&
                    this.FromUser.Equals(input.FromUser))
                ) && 
                (
                    this.PresenceID == input.PresenceID ||
                    (this.PresenceID != null &&
                    this.PresenceID.Equals(input.PresenceID))
                ) && 
                (
                    this.Presentity == input.Presentity ||
                    (this.Presentity != null &&
                    this.Presentity.Equals(input.Presentity))
                ) && 
                (
                    this.PresentityRealm == input.PresentityRealm ||
                    (this.PresentityRealm != null &&
                    this.PresentityRealm.Equals(input.PresentityRealm))
                ) && 
                (
                    this.PresentityUser == input.PresentityUser ||
                    (this.PresentityUser != null &&
                    this.PresentityUser.Equals(input.PresentityUser))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.SwitchURI == input.SwitchURI ||
                    (this.SwitchURI != null &&
                    this.SwitchURI.Equals(input.SwitchURI))
                ) && 
                (
                    this.TargetCallID == input.TargetCallID ||
                    (this.TargetCallID != null &&
                    this.TargetCallID.Equals(input.TargetCallID))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.ToRealm == input.ToRealm ||
                    (this.ToRealm != null &&
                    this.ToRealm.Equals(input.ToRealm))
                ) && 
                (
                    this.ToTag == input.ToTag ||
                    (this.ToTag != null &&
                    this.ToTag.Equals(input.ToTag))
                ) && 
                (
                    this.ToURI == input.ToURI ||
                    (this.ToURI != null &&
                    this.ToURI.Equals(input.ToURI))
                ) && 
                (
                    this.ToUser == input.ToUser ||
                    (this.ToUser != null &&
                    this.ToUser.Equals(input.ToUser))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CallCookie != null)
                    hashCode = hashCode * 59 + this.CallCookie.GetHashCode();
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.EventPackage != null)
                    hashCode = hashCode * 59 + this.EventPackage.GetHashCode();
                if (this.Expires != null)
                    hashCode = hashCode * 59 + this.Expires.GetHashCode();
                if (this.FlushLevel != null)
                    hashCode = hashCode * 59 + this.FlushLevel.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.FromRealm != null)
                    hashCode = hashCode * 59 + this.FromRealm.GetHashCode();
                if (this.FromTag != null)
                    hashCode = hashCode * 59 + this.FromTag.GetHashCode();
                if (this.FromURI != null)
                    hashCode = hashCode * 59 + this.FromURI.GetHashCode();
                if (this.FromUser != null)
                    hashCode = hashCode * 59 + this.FromUser.GetHashCode();
                if (this.PresenceID != null)
                    hashCode = hashCode * 59 + this.PresenceID.GetHashCode();
                if (this.Presentity != null)
                    hashCode = hashCode * 59 + this.Presentity.GetHashCode();
                if (this.PresentityRealm != null)
                    hashCode = hashCode * 59 + this.PresentityRealm.GetHashCode();
                if (this.PresentityUser != null)
                    hashCode = hashCode * 59 + this.PresentityUser.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.SwitchURI != null)
                    hashCode = hashCode * 59 + this.SwitchURI.GetHashCode();
                if (this.TargetCallID != null)
                    hashCode = hashCode * 59 + this.TargetCallID.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.ToRealm != null)
                    hashCode = hashCode * 59 + this.ToRealm.GetHashCode();
                if (this.ToTag != null)
                    hashCode = hashCode * 59 + this.ToTag.GetHashCode();
                if (this.ToURI != null)
                    hashCode = hashCode * 59 + this.ToURI.GetHashCode();
                if (this.ToUser != null)
                    hashCode = hashCode * 59 + this.ToUser.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
