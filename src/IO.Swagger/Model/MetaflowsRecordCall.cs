/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Start a call recording
    /// </summary>
    [DataContract]
    public partial class MetaflowsRecordCall :  IEquatable<MetaflowsRecordCall>, IValidatableObject
    {
        /// <summary>
        /// Whether to start/stop the recording
        /// </summary>
        /// <value>Whether to start/stop the recording</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            
            /// <summary>
            /// Enum Mask for value: mask
            /// </summary>
            [EnumMember(Value = "mask")]
            Mask = 1,
            
            /// <summary>
            /// Enum Unmask for value: unmask
            /// </summary>
            [EnumMember(Value = "unmask")]
            Unmask = 2,
            
            /// <summary>
            /// Enum Start for value: start
            /// </summary>
            [EnumMember(Value = "start")]
            Start = 3,
            
            /// <summary>
            /// Enum Stop for value: stop
            /// </summary>
            [EnumMember(Value = "stop")]
            Stop = 4,
            
            /// <summary>
            /// Enum Toggle for value: toggle
            /// </summary>
            [EnumMember(Value = "toggle")]
            Toggle = 5
        }

        /// <summary>
        /// Whether to start/stop the recording
        /// </summary>
        /// <value>Whether to start/stop the recording</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// What format to store the recording
        /// </summary>
        /// <value>What format to store the recording</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormatEnum
        {
            
            /// <summary>
            /// Enum Mp3 for value: mp3
            /// </summary>
            [EnumMember(Value = "mp3")]
            Mp3 = 1,
            
            /// <summary>
            /// Enum Wav for value: wav
            /// </summary>
            [EnumMember(Value = "wav")]
            Wav = 2
        }

        /// <summary>
        /// What format to store the recording
        /// </summary>
        /// <value>What format to store the recording</value>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public FormatEnum? Format { get; set; }
        /// <summary>
        /// HTTP method if using an HTTP destination
        /// </summary>
        /// <value>HTTP method if using an HTTP destination</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodEnum
        {
            
            /// <summary>
            /// Enum Put for value: put
            /// </summary>
            [EnumMember(Value = "put")]
            Put = 1,
            
            /// <summary>
            /// Enum Post for value: post
            /// </summary>
            [EnumMember(Value = "post")]
            Post = 2
        }

        /// <summary>
        /// HTTP method if using an HTTP destination
        /// </summary>
        /// <value>HTTP method if using an HTTP destination</value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public MethodEnum? Method { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetaflowsRecordCall" /> class.
        /// </summary>
        /// <param name="action">Whether to start/stop the recording (default to ActionEnum.Toggle).</param>
        /// <param name="format">What format to store the recording.</param>
        /// <param name="label">Add a custom label to the recording.</param>
        /// <param name="mediaName">Name of the recording file.</param>
        /// <param name="method">HTTP method if using an HTTP destination.</param>
        /// <param name="origin">Track how the recording was started.</param>
        /// <param name="recordMinSec">Minimum number of seconds recorded to consider it a valid recording.</param>
        /// <param name="recordOnAnswer">Whether to start recording when the leg is answered (default to false).</param>
        /// <param name="recordOnBridge">Whether to start recording when the leg is bridged (default to false).</param>
        /// <param name="recordSampleRate">Sampling rate for the recording.</param>
        /// <param name="timeLimit">How long to allow the recording, in seconds.</param>
        /// <param name="url">HTTP URL to send the finished recording.</param>
        public MetaflowsRecordCall(ActionEnum? action = ActionEnum.Toggle, FormatEnum? format = default(FormatEnum?), string label = default(string), string mediaName = default(string), MethodEnum? method = default(MethodEnum?), string origin = default(string), int? recordMinSec = default(int?), bool? recordOnAnswer = false, bool? recordOnBridge = false, int? recordSampleRate = default(int?), int? timeLimit = default(int?), string url = default(string))
        {
            // use default value if no "action" provided
            if (action == null)
            {
                this.Action = ActionEnum.Toggle;
            }
            else
            {
                this.Action = action;
            }
            this.Format = format;
            this.Label = label;
            this.MediaName = mediaName;
            this.Method = method;
            this.Origin = origin;
            this.RecordMinSec = recordMinSec;
            // use default value if no "recordOnAnswer" provided
            if (recordOnAnswer == null)
            {
                this.RecordOnAnswer = false;
            }
            else
            {
                this.RecordOnAnswer = recordOnAnswer;
            }
            // use default value if no "recordOnBridge" provided
            if (recordOnBridge == null)
            {
                this.RecordOnBridge = false;
            }
            else
            {
                this.RecordOnBridge = recordOnBridge;
            }
            this.RecordSampleRate = recordSampleRate;
            this.TimeLimit = timeLimit;
            this.Url = url;
        }
        


        /// <summary>
        /// Add a custom label to the recording
        /// </summary>
        /// <value>Add a custom label to the recording</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Name of the recording file
        /// </summary>
        /// <value>Name of the recording file</value>
        [DataMember(Name="media_name", EmitDefaultValue=false)]
        public string MediaName { get; set; }


        /// <summary>
        /// Track how the recording was started
        /// </summary>
        /// <value>Track how the recording was started</value>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public string Origin { get; set; }

        /// <summary>
        /// Minimum number of seconds recorded to consider it a valid recording
        /// </summary>
        /// <value>Minimum number of seconds recorded to consider it a valid recording</value>
        [DataMember(Name="record_min_sec", EmitDefaultValue=false)]
        public int? RecordMinSec { get; set; }

        /// <summary>
        /// Whether to start recording when the leg is answered
        /// </summary>
        /// <value>Whether to start recording when the leg is answered</value>
        [DataMember(Name="record_on_answer", EmitDefaultValue=false)]
        public bool? RecordOnAnswer { get; set; }

        /// <summary>
        /// Whether to start recording when the leg is bridged
        /// </summary>
        /// <value>Whether to start recording when the leg is bridged</value>
        [DataMember(Name="record_on_bridge", EmitDefaultValue=false)]
        public bool? RecordOnBridge { get; set; }

        /// <summary>
        /// Sampling rate for the recording
        /// </summary>
        /// <value>Sampling rate for the recording</value>
        [DataMember(Name="record_sample_rate", EmitDefaultValue=false)]
        public int? RecordSampleRate { get; set; }

        /// <summary>
        /// How long to allow the recording, in seconds
        /// </summary>
        /// <value>How long to allow the recording, in seconds</value>
        [DataMember(Name="time_limit", EmitDefaultValue=false)]
        public int? TimeLimit { get; set; }

        /// <summary>
        /// HTTP URL to send the finished recording
        /// </summary>
        /// <value>HTTP URL to send the finished recording</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MetaflowsRecordCall {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  MediaName: ").Append(MediaName).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  RecordMinSec: ").Append(RecordMinSec).Append("\n");
            sb.Append("  RecordOnAnswer: ").Append(RecordOnAnswer).Append("\n");
            sb.Append("  RecordOnBridge: ").Append(RecordOnBridge).Append("\n");
            sb.Append("  RecordSampleRate: ").Append(RecordSampleRate).Append("\n");
            sb.Append("  TimeLimit: ").Append(TimeLimit).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MetaflowsRecordCall);
        }

        /// <summary>
        /// Returns true if MetaflowsRecordCall instances are equal
        /// </summary>
        /// <param name="input">Instance of MetaflowsRecordCall to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetaflowsRecordCall input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.MediaName == input.MediaName ||
                    (this.MediaName != null &&
                    this.MediaName.Equals(input.MediaName))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.RecordMinSec == input.RecordMinSec ||
                    (this.RecordMinSec != null &&
                    this.RecordMinSec.Equals(input.RecordMinSec))
                ) && 
                (
                    this.RecordOnAnswer == input.RecordOnAnswer ||
                    (this.RecordOnAnswer != null &&
                    this.RecordOnAnswer.Equals(input.RecordOnAnswer))
                ) && 
                (
                    this.RecordOnBridge == input.RecordOnBridge ||
                    (this.RecordOnBridge != null &&
                    this.RecordOnBridge.Equals(input.RecordOnBridge))
                ) && 
                (
                    this.RecordSampleRate == input.RecordSampleRate ||
                    (this.RecordSampleRate != null &&
                    this.RecordSampleRate.Equals(input.RecordSampleRate))
                ) && 
                (
                    this.TimeLimit == input.TimeLimit ||
                    (this.TimeLimit != null &&
                    this.TimeLimit.Equals(input.TimeLimit))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.MediaName != null)
                    hashCode = hashCode * 59 + this.MediaName.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.Origin != null)
                    hashCode = hashCode * 59 + this.Origin.GetHashCode();
                if (this.RecordMinSec != null)
                    hashCode = hashCode * 59 + this.RecordMinSec.GetHashCode();
                if (this.RecordOnAnswer != null)
                    hashCode = hashCode * 59 + this.RecordOnAnswer.GetHashCode();
                if (this.RecordOnBridge != null)
                    hashCode = hashCode * 59 + this.RecordOnBridge.GetHashCode();
                if (this.RecordSampleRate != null)
                    hashCode = hashCode * 59 + this.RecordSampleRate.GetHashCode();
                if (this.TimeLimit != null)
                    hashCode = hashCode * 59 + this.TimeLimit.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
