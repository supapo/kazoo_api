/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Parameters related to white-labeling port requests
    /// </summary>
    [DataContract]
    public partial class WhitelabelPort :  IEquatable<WhitelabelPort>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WhitelabelPort" /> class.
        /// </summary>
        /// <param name="authority">The account ID(s) to be used for administrating port requests.</param>
        /// <param name="features">The URL to use when the features link is clicked.</param>
        /// <param name="loa">The URL to use when the LOA link is clicked.</param>
        /// <param name="resporg">The URL to use when the resporg link is clicked.</param>
        /// <param name="supportEmail">The support email address to display to the user.</param>
        /// <param name="terms">The URL to use when the terms and conditions link is clicked.</param>
        public WhitelabelPort(Object authority = default(Object), string features = default(string), string loa = default(string), string resporg = default(string), string supportEmail = default(string), string terms = default(string))
        {
            this.Authority = authority;
            this.Features = features;
            this.Loa = loa;
            this.Resporg = resporg;
            this.SupportEmail = supportEmail;
            this.Terms = terms;
        }
        
        /// <summary>
        /// The account ID(s) to be used for administrating port requests
        /// </summary>
        /// <value>The account ID(s) to be used for administrating port requests</value>
        [DataMember(Name="authority", EmitDefaultValue=false)]
        public Object Authority { get; set; }

        /// <summary>
        /// The URL to use when the features link is clicked
        /// </summary>
        /// <value>The URL to use when the features link is clicked</value>
        [DataMember(Name="features", EmitDefaultValue=false)]
        public string Features { get; set; }

        /// <summary>
        /// The URL to use when the LOA link is clicked
        /// </summary>
        /// <value>The URL to use when the LOA link is clicked</value>
        [DataMember(Name="loa", EmitDefaultValue=false)]
        public string Loa { get; set; }

        /// <summary>
        /// The URL to use when the resporg link is clicked
        /// </summary>
        /// <value>The URL to use when the resporg link is clicked</value>
        [DataMember(Name="resporg", EmitDefaultValue=false)]
        public string Resporg { get; set; }

        /// <summary>
        /// The support email address to display to the user
        /// </summary>
        /// <value>The support email address to display to the user</value>
        [DataMember(Name="support_email", EmitDefaultValue=false)]
        public string SupportEmail { get; set; }

        /// <summary>
        /// The URL to use when the terms and conditions link is clicked
        /// </summary>
        /// <value>The URL to use when the terms and conditions link is clicked</value>
        [DataMember(Name="terms", EmitDefaultValue=false)]
        public string Terms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WhitelabelPort {\n");
            sb.Append("  Authority: ").Append(Authority).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  Loa: ").Append(Loa).Append("\n");
            sb.Append("  Resporg: ").Append(Resporg).Append("\n");
            sb.Append("  SupportEmail: ").Append(SupportEmail).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WhitelabelPort);
        }

        /// <summary>
        /// Returns true if WhitelabelPort instances are equal
        /// </summary>
        /// <param name="input">Instance of WhitelabelPort to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WhitelabelPort input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Authority == input.Authority ||
                    (this.Authority != null &&
                    this.Authority.Equals(input.Authority))
                ) && 
                (
                    this.Features == input.Features ||
                    (this.Features != null &&
                    this.Features.Equals(input.Features))
                ) && 
                (
                    this.Loa == input.Loa ||
                    (this.Loa != null &&
                    this.Loa.Equals(input.Loa))
                ) && 
                (
                    this.Resporg == input.Resporg ||
                    (this.Resporg != null &&
                    this.Resporg.Equals(input.Resporg))
                ) && 
                (
                    this.SupportEmail == input.SupportEmail ||
                    (this.SupportEmail != null &&
                    this.SupportEmail.Equals(input.SupportEmail))
                ) && 
                (
                    this.Terms == input.Terms ||
                    (this.Terms != null &&
                    this.Terms.Equals(input.Terms))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Authority != null)
                    hashCode = hashCode * 59 + this.Authority.GetHashCode();
                if (this.Features != null)
                    hashCode = hashCode * 59 + this.Features.GetHashCode();
                if (this.Loa != null)
                    hashCode = hashCode * 59 + this.Loa.GetHashCode();
                if (this.Resporg != null)
                    hashCode = hashCode * 59 + this.Resporg.GetHashCode();
                if (this.SupportEmail != null)
                    hashCode = hashCode * 59 + this.SupportEmail.GetHashCode();
                if (this.Terms != null)
                    hashCode = hashCode * 59 + this.Terms.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
