/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Validator for the &#39;notification&#39; callflow&#39;s data object
    /// </summary>
    [DataContract]
    public partial class CallflowsNotification :  IEquatable<CallflowsNotification>, IValidatableObject
    {
        /// <summary>
        /// Defines NotificationMedia
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NotificationMediaEnum
        {
            
            /// <summary>
            /// Enum Email for value: email
            /// </summary>
            [EnumMember(Value = "email")]
            Email = 1,
            
            /// <summary>
            /// Enum Sms for value: sms
            /// </summary>
            [EnumMember(Value = "sms")]
            Sms = 2
        }


        /// <summary>
        /// What is media need to use for notification
        /// </summary>
        /// <value>What is media need to use for notification</value>
        [DataMember(Name="notification_media", EmitDefaultValue=false)]
        public List<NotificationMediaEnum> NotificationMedia { get; set; }
        /// <summary>
        /// Defines when send customer defined notification. For &#x60;callflow_exec&#x60; value notifications is send during callflow execution. For &#x60;channel_destroy&#x60; value notification is send after channel(bridge) is destroyed
        /// </summary>
        /// <value>Defines when send customer defined notification. For &#x60;callflow_exec&#x60; value notifications is send during callflow execution. For &#x60;channel_destroy&#x60; value notification is send after channel(bridge) is destroyed</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SendAtEnum
        {
            
            /// <summary>
            /// Enum Callflowexec for value: callflow_exec
            /// </summary>
            [EnumMember(Value = "callflow_exec")]
            Callflowexec = 1,
            
            /// <summary>
            /// Enum Channeldestroy for value: channel_destroy
            /// </summary>
            [EnumMember(Value = "channel_destroy")]
            Channeldestroy = 2
        }

        /// <summary>
        /// Defines when send customer defined notification. For &#x60;callflow_exec&#x60; value notifications is send during callflow execution. For &#x60;channel_destroy&#x60; value notification is send after channel(bridge) is destroyed
        /// </summary>
        /// <value>Defines when send customer defined notification. For &#x60;callflow_exec&#x60; value notifications is send during callflow execution. For &#x60;channel_destroy&#x60; value notification is send after channel(bridge) is destroyed</value>
        [DataMember(Name="send_at", EmitDefaultValue=false)]
        public SendAtEnum? SendAt { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsNotification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallflowsNotification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsNotification" /> class.
        /// </summary>
        /// <param name="comments">Text message that need to include into notification.</param>
        /// <param name="notificationMedia">What is media need to use for notification.</param>
        /// <param name="recipients">One or more specific email addresses, Kazoo user ids or a combination of both (required).</param>
        /// <param name="sendAt">Defines when send customer defined notification. For &#x60;callflow_exec&#x60; value notifications is send during callflow execution. For &#x60;channel_destroy&#x60; value notification is send after channel(bridge) is destroyed (default to SendAtEnum.Channeldestroy).</param>
        /// <param name="templateId">Template ID of account defined notification.</param>
        public CallflowsNotification(string comments = default(string), List<NotificationMediaEnum> notificationMedia = default(List<NotificationMediaEnum>), List<CallflowsMissedCallAlertRecipients> recipients = default(List<CallflowsMissedCallAlertRecipients>), SendAtEnum? sendAt = SendAtEnum.Channeldestroy, string templateId = default(string))
        {
            // to ensure "recipients" is required (not null)
            if (recipients == null)
            {
                throw new InvalidDataException("recipients is a required property for CallflowsNotification and cannot be null");
            }
            else
            {
                this.Recipients = recipients;
            }
            this.Comments = comments;
            this.NotificationMedia = notificationMedia;
            // use default value if no "sendAt" provided
            if (sendAt == null)
            {
                this.SendAt = SendAtEnum.Channeldestroy;
            }
            else
            {
                this.SendAt = sendAt;
            }
            this.TemplateId = templateId;
        }
        
        /// <summary>
        /// Text message that need to include into notification
        /// </summary>
        /// <value>Text message that need to include into notification</value>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }


        /// <summary>
        /// One or more specific email addresses, Kazoo user ids or a combination of both
        /// </summary>
        /// <value>One or more specific email addresses, Kazoo user ids or a combination of both</value>
        [DataMember(Name="recipients", EmitDefaultValue=false)]
        public List<CallflowsMissedCallAlertRecipients> Recipients { get; set; }


        /// <summary>
        /// Template ID of account defined notification
        /// </summary>
        /// <value>Template ID of account defined notification</value>
        [DataMember(Name="template_id", EmitDefaultValue=false)]
        public string TemplateId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallflowsNotification {\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  NotificationMedia: ").Append(NotificationMedia).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  SendAt: ").Append(SendAt).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallflowsNotification);
        }

        /// <summary>
        /// Returns true if CallflowsNotification instances are equal
        /// </summary>
        /// <param name="input">Instance of CallflowsNotification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallflowsNotification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.NotificationMedia == input.NotificationMedia ||
                    this.NotificationMedia != null &&
                    this.NotificationMedia.SequenceEqual(input.NotificationMedia)
                ) && 
                (
                    this.Recipients == input.Recipients ||
                    this.Recipients != null &&
                    this.Recipients.SequenceEqual(input.Recipients)
                ) && 
                (
                    this.SendAt == input.SendAt ||
                    (this.SendAt != null &&
                    this.SendAt.Equals(input.SendAt))
                ) && 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.NotificationMedia != null)
                    hashCode = hashCode * 59 + this.NotificationMedia.GetHashCode();
                if (this.Recipients != null)
                    hashCode = hashCode * 59 + this.Recipients.GetHashCode();
                if (this.SendAt != null)
                    hashCode = hashCode * 59 + this.SendAt.GetHashCode();
                if (this.TemplateId != null)
                    hashCode = hashCode * 59 + this.TemplateId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
