/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The user hotdesk parameters
    /// </summary>
    [DataContract]
    public partial class UsersHotdesk :  IEquatable<UsersHotdesk>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UsersHotdesk" /> class.
        /// </summary>
        /// <param name="enabled">Determines if the user has hotdesking enabled (default to false).</param>
        /// <param name="id">The users hotdesk id.</param>
        /// <param name="keepLoggedInElsewhere">Determines if user should be able to login to multiple phones simultaneously (default to false).</param>
        /// <param name="pin">The users hotdesk pin number.</param>
        /// <param name="requirePin">Determines if user requires a pin to change the hotdesk state (default to false).</param>
        public UsersHotdesk(bool? enabled = false, string id = default(string), bool? keepLoggedInElsewhere = false, string pin = default(string), bool? requirePin = false)
        {
            // use default value if no "enabled" provided
            if (enabled == null)
            {
                this.Enabled = false;
            }
            else
            {
                this.Enabled = enabled;
            }
            this.Id = id;
            // use default value if no "keepLoggedInElsewhere" provided
            if (keepLoggedInElsewhere == null)
            {
                this.KeepLoggedInElsewhere = false;
            }
            else
            {
                this.KeepLoggedInElsewhere = keepLoggedInElsewhere;
            }
            this.Pin = pin;
            // use default value if no "requirePin" provided
            if (requirePin == null)
            {
                this.RequirePin = false;
            }
            else
            {
                this.RequirePin = requirePin;
            }
        }
        
        /// <summary>
        /// Determines if the user has hotdesking enabled
        /// </summary>
        /// <value>Determines if the user has hotdesking enabled</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// The users hotdesk id
        /// </summary>
        /// <value>The users hotdesk id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Determines if user should be able to login to multiple phones simultaneously
        /// </summary>
        /// <value>Determines if user should be able to login to multiple phones simultaneously</value>
        [DataMember(Name="keep_logged_in_elsewhere", EmitDefaultValue=false)]
        public bool? KeepLoggedInElsewhere { get; set; }

        /// <summary>
        /// The users hotdesk pin number
        /// </summary>
        /// <value>The users hotdesk pin number</value>
        [DataMember(Name="pin", EmitDefaultValue=false)]
        public string Pin { get; set; }

        /// <summary>
        /// Determines if user requires a pin to change the hotdesk state
        /// </summary>
        /// <value>Determines if user requires a pin to change the hotdesk state</value>
        [DataMember(Name="require_pin", EmitDefaultValue=false)]
        public bool? RequirePin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UsersHotdesk {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  KeepLoggedInElsewhere: ").Append(KeepLoggedInElsewhere).Append("\n");
            sb.Append("  Pin: ").Append(Pin).Append("\n");
            sb.Append("  RequirePin: ").Append(RequirePin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UsersHotdesk);
        }

        /// <summary>
        /// Returns true if UsersHotdesk instances are equal
        /// </summary>
        /// <param name="input">Instance of UsersHotdesk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsersHotdesk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.KeepLoggedInElsewhere == input.KeepLoggedInElsewhere ||
                    (this.KeepLoggedInElsewhere != null &&
                    this.KeepLoggedInElsewhere.Equals(input.KeepLoggedInElsewhere))
                ) && 
                (
                    this.Pin == input.Pin ||
                    (this.Pin != null &&
                    this.Pin.Equals(input.Pin))
                ) && 
                (
                    this.RequirePin == input.RequirePin ||
                    (this.RequirePin != null &&
                    this.RequirePin.Equals(input.RequirePin))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.KeepLoggedInElsewhere != null)
                    hashCode = hashCode * 59 + this.KeepLoggedInElsewhere.GetHashCode();
                if (this.Pin != null)
                    hashCode = hashCode * 59 + this.Pin.GetHashCode();
                if (this.RequirePin != null)
                    hashCode = hashCode * 59 + this.RequirePin.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (string) maxLength
            if(this.Id != null && this.Id.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be less than 15.", new [] { "Id" });
            }

            // Pin (string) maxLength
            if(this.Pin != null && this.Pin.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Pin, length must be less than 15.", new [] { "Pin" });
            }

            // Pin (string) minLength
            if(this.Pin != null && this.Pin.Length < 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Pin, length must be greater than 4.", new [] { "Pin" });
            }

            yield break;
        }
    }

}
