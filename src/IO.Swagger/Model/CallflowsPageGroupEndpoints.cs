/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ID of the endpoint (device, user, etc)
    /// </summary>
    [DataContract]
    public partial class CallflowsPageGroupEndpoints :  IEquatable<CallflowsPageGroupEndpoints>, IValidatableObject
    {
        /// <summary>
        /// The type (device, user, etc) of endpoint
        /// </summary>
        /// <value>The type (device, user, etc) of endpoint</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EndpointTypeEnum
        {
            
            /// <summary>
            /// Enum Device for value: device
            /// </summary>
            [EnumMember(Value = "device")]
            Device = 1,
            
            /// <summary>
            /// Enum User for value: user
            /// </summary>
            [EnumMember(Value = "user")]
            User = 2,
            
            /// <summary>
            /// Enum Group for value: group
            /// </summary>
            [EnumMember(Value = "group")]
            Group = 3
        }

        /// <summary>
        /// The type (device, user, etc) of endpoint
        /// </summary>
        /// <value>The type (device, user, etc) of endpoint</value>
        [DataMember(Name="endpoint_type", EmitDefaultValue=false)]
        public EndpointTypeEnum EndpointType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsPageGroupEndpoints" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallflowsPageGroupEndpoints() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsPageGroupEndpoints" /> class.
        /// </summary>
        /// <param name="delay">How long to delay ringing the endpoint, in seconds.</param>
        /// <param name="endpointType">The type (device, user, etc) of endpoint (required).</param>
        /// <param name="id">The ID of the endpoint (required).</param>
        /// <param name="timeout">How long to ring the endpoint, in seconds.</param>
        /// <param name="weight">Weight of endpoint, different usage in various strategies.</param>
        public CallflowsPageGroupEndpoints(int? delay = default(int?), EndpointTypeEnum endpointType = default(EndpointTypeEnum), string id = default(string), int? timeout = default(int?), int? weight = default(int?))
        {
            // to ensure "endpointType" is required (not null)
            if (endpointType == null)
            {
                throw new InvalidDataException("endpointType is a required property for CallflowsPageGroupEndpoints and cannot be null");
            }
            else
            {
                this.EndpointType = endpointType;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for CallflowsPageGroupEndpoints and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            this.Delay = delay;
            this.Timeout = timeout;
            this.Weight = weight;
        }
        
        /// <summary>
        /// How long to delay ringing the endpoint, in seconds
        /// </summary>
        /// <value>How long to delay ringing the endpoint, in seconds</value>
        [DataMember(Name="delay", EmitDefaultValue=false)]
        public int? Delay { get; set; }


        /// <summary>
        /// The ID of the endpoint
        /// </summary>
        /// <value>The ID of the endpoint</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// How long to ring the endpoint, in seconds
        /// </summary>
        /// <value>How long to ring the endpoint, in seconds</value>
        [DataMember(Name="timeout", EmitDefaultValue=false)]
        public int? Timeout { get; set; }

        /// <summary>
        /// Weight of endpoint, different usage in various strategies
        /// </summary>
        /// <value>Weight of endpoint, different usage in various strategies</value>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public int? Weight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallflowsPageGroupEndpoints {\n");
            sb.Append("  Delay: ").Append(Delay).Append("\n");
            sb.Append("  EndpointType: ").Append(EndpointType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallflowsPageGroupEndpoints);
        }

        /// <summary>
        /// Returns true if CallflowsPageGroupEndpoints instances are equal
        /// </summary>
        /// <param name="input">Instance of CallflowsPageGroupEndpoints to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallflowsPageGroupEndpoints input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Delay == input.Delay ||
                    (this.Delay != null &&
                    this.Delay.Equals(input.Delay))
                ) && 
                (
                    this.EndpointType == input.EndpointType ||
                    (this.EndpointType != null &&
                    this.EndpointType.Equals(input.EndpointType))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    (this.Timeout != null &&
                    this.Timeout.Equals(input.Timeout))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Delay != null)
                    hashCode = hashCode * 59 + this.Delay.GetHashCode();
                if (this.EndpointType != null)
                    hashCode = hashCode * 59 + this.EndpointType.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Timeout != null)
                    hashCode = hashCode * 59 + this.Timeout.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (string) maxLength
            if(this.Id != null && this.Id.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be less than 128.", new [] { "Id" });
            }

            // Id (string) minLength
            if(this.Id != null && this.Id.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be greater than 1.", new [] { "Id" });
            }

            // Weight (int?) maximum
            if(this.Weight > (int?)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Weight, must be a value less than or equal to 100.", new [] { "Weight" });
            }

            // Weight (int?) minimum
            if(this.Weight < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Weight, must be a value greater than or equal to 1.", new [] { "Weight" });
            }

            yield break;
        }
    }

}
