/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for a menus
    /// </summary>
    [DataContract]
    public partial class Menus :  IEquatable<Menus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Menus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Menus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Menus" /> class.
        /// </summary>
        /// <param name="allowRecordFromOffnet">Determines if the record pin can be used by external calls (default to false).</param>
        /// <param name="flags">Flags set by external applications.</param>
        /// <param name="hunt">Determines if the callers can dial internal extensions directly (default to true).</param>
        /// <param name="huntAllow">A regular expression that an extension the caller dialed must match to be allowed to continue.</param>
        /// <param name="huntDeny">A regular expression that if matched does not allow the caller to dial directly.</param>
        /// <param name="interdigitTimeout">The amount of time (in milliseconds) to wait for the caller to press the next digit after pressing a digit.</param>
        /// <param name="maxExtensionLength">The maximum number of digits that can be collected.</param>
        /// <param name="media">media.</param>
        /// <param name="name">A friendly name for the menu (required).</param>
        /// <param name="recordPin">The pin number used to record the menu prompt.</param>
        /// <param name="retries">The number of times a menu should be played until a valid entry is collected.</param>
        /// <param name="suppressMedia">Determines if the playing of &#39;Invalid Entry&#39; is suppressed. (default to false).</param>
        /// <param name="timeout">The amount of time (in milliseconds) to wait for the caller to begin entering digits.</param>
        public Menus(bool? allowRecordFromOffnet = false, List<string> flags = default(List<string>), bool? hunt = true, string huntAllow = default(string), string huntDeny = default(string), int? interdigitTimeout = default(int?), int? maxExtensionLength = default(int?), MenusMedia media = default(MenusMedia), string name = default(string), string recordPin = default(string), int? retries = default(int?), bool? suppressMedia = false, int? timeout = default(int?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Menus and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // use default value if no "allowRecordFromOffnet" provided
            if (allowRecordFromOffnet == null)
            {
                this.AllowRecordFromOffnet = false;
            }
            else
            {
                this.AllowRecordFromOffnet = allowRecordFromOffnet;
            }
            this.Flags = flags;
            // use default value if no "hunt" provided
            if (hunt == null)
            {
                this.Hunt = true;
            }
            else
            {
                this.Hunt = hunt;
            }
            this.HuntAllow = huntAllow;
            this.HuntDeny = huntDeny;
            this.InterdigitTimeout = interdigitTimeout;
            this.MaxExtensionLength = maxExtensionLength;
            this.Media = media;
            this.RecordPin = recordPin;
            this.Retries = retries;
            // use default value if no "suppressMedia" provided
            if (suppressMedia == null)
            {
                this.SuppressMedia = false;
            }
            else
            {
                this.SuppressMedia = suppressMedia;
            }
            this.Timeout = timeout;
        }
        
        /// <summary>
        /// Determines if the record pin can be used by external calls
        /// </summary>
        /// <value>Determines if the record pin can be used by external calls</value>
        [DataMember(Name="allow_record_from_offnet", EmitDefaultValue=false)]
        public bool? AllowRecordFromOffnet { get; set; }

        /// <summary>
        /// Flags set by external applications
        /// </summary>
        /// <value>Flags set by external applications</value>
        [DataMember(Name="flags", EmitDefaultValue=false)]
        public List<string> Flags { get; set; }

        /// <summary>
        /// Determines if the callers can dial internal extensions directly
        /// </summary>
        /// <value>Determines if the callers can dial internal extensions directly</value>
        [DataMember(Name="hunt", EmitDefaultValue=false)]
        public bool? Hunt { get; set; }

        /// <summary>
        /// A regular expression that an extension the caller dialed must match to be allowed to continue
        /// </summary>
        /// <value>A regular expression that an extension the caller dialed must match to be allowed to continue</value>
        [DataMember(Name="hunt_allow", EmitDefaultValue=false)]
        public string HuntAllow { get; set; }

        /// <summary>
        /// A regular expression that if matched does not allow the caller to dial directly
        /// </summary>
        /// <value>A regular expression that if matched does not allow the caller to dial directly</value>
        [DataMember(Name="hunt_deny", EmitDefaultValue=false)]
        public string HuntDeny { get; set; }

        /// <summary>
        /// The amount of time (in milliseconds) to wait for the caller to press the next digit after pressing a digit
        /// </summary>
        /// <value>The amount of time (in milliseconds) to wait for the caller to press the next digit after pressing a digit</value>
        [DataMember(Name="interdigit_timeout", EmitDefaultValue=false)]
        public int? InterdigitTimeout { get; set; }

        /// <summary>
        /// The maximum number of digits that can be collected
        /// </summary>
        /// <value>The maximum number of digits that can be collected</value>
        [DataMember(Name="max_extension_length", EmitDefaultValue=false)]
        public int? MaxExtensionLength { get; set; }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name="media", EmitDefaultValue=false)]
        public MenusMedia Media { get; set; }

        /// <summary>
        /// A friendly name for the menu
        /// </summary>
        /// <value>A friendly name for the menu</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The pin number used to record the menu prompt
        /// </summary>
        /// <value>The pin number used to record the menu prompt</value>
        [DataMember(Name="record_pin", EmitDefaultValue=false)]
        public string RecordPin { get; set; }

        /// <summary>
        /// The number of times a menu should be played until a valid entry is collected
        /// </summary>
        /// <value>The number of times a menu should be played until a valid entry is collected</value>
        [DataMember(Name="retries", EmitDefaultValue=false)]
        public int? Retries { get; set; }

        /// <summary>
        /// Determines if the playing of &#39;Invalid Entry&#39; is suppressed.
        /// </summary>
        /// <value>Determines if the playing of &#39;Invalid Entry&#39; is suppressed.</value>
        [DataMember(Name="suppress_media", EmitDefaultValue=false)]
        public bool? SuppressMedia { get; set; }

        /// <summary>
        /// The amount of time (in milliseconds) to wait for the caller to begin entering digits
        /// </summary>
        /// <value>The amount of time (in milliseconds) to wait for the caller to begin entering digits</value>
        [DataMember(Name="timeout", EmitDefaultValue=false)]
        public int? Timeout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Menus {\n");
            sb.Append("  AllowRecordFromOffnet: ").Append(AllowRecordFromOffnet).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  Hunt: ").Append(Hunt).Append("\n");
            sb.Append("  HuntAllow: ").Append(HuntAllow).Append("\n");
            sb.Append("  HuntDeny: ").Append(HuntDeny).Append("\n");
            sb.Append("  InterdigitTimeout: ").Append(InterdigitTimeout).Append("\n");
            sb.Append("  MaxExtensionLength: ").Append(MaxExtensionLength).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RecordPin: ").Append(RecordPin).Append("\n");
            sb.Append("  Retries: ").Append(Retries).Append("\n");
            sb.Append("  SuppressMedia: ").Append(SuppressMedia).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Menus);
        }

        /// <summary>
        /// Returns true if Menus instances are equal
        /// </summary>
        /// <param name="input">Instance of Menus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Menus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowRecordFromOffnet == input.AllowRecordFromOffnet ||
                    (this.AllowRecordFromOffnet != null &&
                    this.AllowRecordFromOffnet.Equals(input.AllowRecordFromOffnet))
                ) && 
                (
                    this.Flags == input.Flags ||
                    this.Flags != null &&
                    this.Flags.SequenceEqual(input.Flags)
                ) && 
                (
                    this.Hunt == input.Hunt ||
                    (this.Hunt != null &&
                    this.Hunt.Equals(input.Hunt))
                ) && 
                (
                    this.HuntAllow == input.HuntAllow ||
                    (this.HuntAllow != null &&
                    this.HuntAllow.Equals(input.HuntAllow))
                ) && 
                (
                    this.HuntDeny == input.HuntDeny ||
                    (this.HuntDeny != null &&
                    this.HuntDeny.Equals(input.HuntDeny))
                ) && 
                (
                    this.InterdigitTimeout == input.InterdigitTimeout ||
                    (this.InterdigitTimeout != null &&
                    this.InterdigitTimeout.Equals(input.InterdigitTimeout))
                ) && 
                (
                    this.MaxExtensionLength == input.MaxExtensionLength ||
                    (this.MaxExtensionLength != null &&
                    this.MaxExtensionLength.Equals(input.MaxExtensionLength))
                ) && 
                (
                    this.Media == input.Media ||
                    (this.Media != null &&
                    this.Media.Equals(input.Media))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RecordPin == input.RecordPin ||
                    (this.RecordPin != null &&
                    this.RecordPin.Equals(input.RecordPin))
                ) && 
                (
                    this.Retries == input.Retries ||
                    (this.Retries != null &&
                    this.Retries.Equals(input.Retries))
                ) && 
                (
                    this.SuppressMedia == input.SuppressMedia ||
                    (this.SuppressMedia != null &&
                    this.SuppressMedia.Equals(input.SuppressMedia))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    (this.Timeout != null &&
                    this.Timeout.Equals(input.Timeout))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowRecordFromOffnet != null)
                    hashCode = hashCode * 59 + this.AllowRecordFromOffnet.GetHashCode();
                if (this.Flags != null)
                    hashCode = hashCode * 59 + this.Flags.GetHashCode();
                if (this.Hunt != null)
                    hashCode = hashCode * 59 + this.Hunt.GetHashCode();
                if (this.HuntAllow != null)
                    hashCode = hashCode * 59 + this.HuntAllow.GetHashCode();
                if (this.HuntDeny != null)
                    hashCode = hashCode * 59 + this.HuntDeny.GetHashCode();
                if (this.InterdigitTimeout != null)
                    hashCode = hashCode * 59 + this.InterdigitTimeout.GetHashCode();
                if (this.MaxExtensionLength != null)
                    hashCode = hashCode * 59 + this.MaxExtensionLength.GetHashCode();
                if (this.Media != null)
                    hashCode = hashCode * 59 + this.Media.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.RecordPin != null)
                    hashCode = hashCode * 59 + this.RecordPin.GetHashCode();
                if (this.Retries != null)
                    hashCode = hashCode * 59 + this.Retries.GetHashCode();
                if (this.SuppressMedia != null)
                    hashCode = hashCode * 59 + this.SuppressMedia.GetHashCode();
                if (this.Timeout != null)
                    hashCode = hashCode * 59 + this.Timeout.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // HuntAllow (string) maxLength
            if(this.HuntAllow != null && this.HuntAllow.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HuntAllow, length must be less than 256.", new [] { "HuntAllow" });
            }

            // HuntAllow (string) minLength
            if(this.HuntAllow != null && this.HuntAllow.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HuntAllow, length must be greater than 1.", new [] { "HuntAllow" });
            }

            // HuntDeny (string) maxLength
            if(this.HuntDeny != null && this.HuntDeny.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HuntDeny, length must be less than 256.", new [] { "HuntDeny" });
            }

            // HuntDeny (string) minLength
            if(this.HuntDeny != null && this.HuntDeny.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HuntDeny, length must be greater than 1.", new [] { "HuntDeny" });
            }

            // InterdigitTimeout (int?) maximum
            if(this.InterdigitTimeout > (int?)10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InterdigitTimeout, must be a value less than or equal to 10000.", new [] { "InterdigitTimeout" });
            }

            // InterdigitTimeout (int?) minimum
            if(this.InterdigitTimeout < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InterdigitTimeout, must be a value greater than or equal to 1.", new [] { "InterdigitTimeout" });
            }

            // MaxExtensionLength (int?) maximum
            if(this.MaxExtensionLength > (int?)6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxExtensionLength, must be a value less than or equal to 6.", new [] { "MaxExtensionLength" });
            }

            // MaxExtensionLength (int?) minimum
            if(this.MaxExtensionLength < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxExtensionLength, must be a value greater than or equal to 1.", new [] { "MaxExtensionLength" });
            }

            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // RecordPin (string) maxLength
            if(this.RecordPin != null && this.RecordPin.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RecordPin, length must be less than 6.", new [] { "RecordPin" });
            }

            // RecordPin (string) minLength
            if(this.RecordPin != null && this.RecordPin.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RecordPin, length must be greater than 3.", new [] { "RecordPin" });
            }

            // Retries (int?) maximum
            if(this.Retries > (int?)10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Retries, must be a value less than or equal to 10.", new [] { "Retries" });
            }

            // Retries (int?) minimum
            if(this.Retries < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Retries, must be a value greater than or equal to 1.", new [] { "Retries" });
            }

            // Timeout (int?) maximum
            if(this.Timeout > (int?)60000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Timeout, must be a value less than or equal to 60000.", new [] { "Timeout" });
            }

            // Timeout (int?) minimum
            if(this.Timeout < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Timeout, must be a value greater than or equal to 1.", new [] { "Timeout" });
            }

            yield break;
        }
    }

}
