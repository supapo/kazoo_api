/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for dialplan.noop
    /// </summary>
    [DataContract]
    public partial class KapiDialplanNoop :  IEquatable<KapiDialplanNoop>, IValidatableObject
    {
        /// <summary>
        /// Defines ApplicationName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApplicationNameEnum
        {
            
            /// <summary>
            /// Enum Noop for value: noop
            /// </summary>
            [EnumMember(Value = "noop")]
            Noop = 1
        }

        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name="Application-Name", EmitDefaultValue=false)]
        public ApplicationNameEnum ApplicationName { get; set; }
        /// <summary>
        /// Defines BLegEvents
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BLegEventsEnum
        {
            
            /// <summary>
            /// Enum CALLSECURE for value: CALL_SECURE
            /// </summary>
            [EnumMember(Value = "CALL_SECURE")]
            CALLSECURE = 1,
            
            /// <summary>
            /// Enum CALLUPDATE for value: CALL_UPDATE
            /// </summary>
            [EnumMember(Value = "CALL_UPDATE")]
            CALLUPDATE = 2,
            
            /// <summary>
            /// Enum CHANNELANSWER for value: CHANNEL_ANSWER
            /// </summary>
            [EnumMember(Value = "CHANNEL_ANSWER")]
            CHANNELANSWER = 3,
            
            /// <summary>
            /// Enum CHANNELCREATE for value: CHANNEL_CREATE
            /// </summary>
            [EnumMember(Value = "CHANNEL_CREATE")]
            CHANNELCREATE = 4,
            
            /// <summary>
            /// Enum CHANNELDESTROY for value: CHANNEL_DESTROY
            /// </summary>
            [EnumMember(Value = "CHANNEL_DESTROY")]
            CHANNELDESTROY = 5,
            
            /// <summary>
            /// Enum CHANNELEXECUTE for value: CHANNEL_EXECUTE
            /// </summary>
            [EnumMember(Value = "CHANNEL_EXECUTE")]
            CHANNELEXECUTE = 6,
            
            /// <summary>
            /// Enum CHANNELEXECUTECOMPLETE for value: CHANNEL_EXECUTE_COMPLETE
            /// </summary>
            [EnumMember(Value = "CHANNEL_EXECUTE_COMPLETE")]
            CHANNELEXECUTECOMPLETE = 7,
            
            /// <summary>
            /// Enum CHANNELEXECUTEERROR for value: CHANNEL_EXECUTE_ERROR
            /// </summary>
            [EnumMember(Value = "CHANNEL_EXECUTE_ERROR")]
            CHANNELEXECUTEERROR = 8,
            
            /// <summary>
            /// Enum CHANNELFAXSTATUS for value: CHANNEL_FAX_STATUS
            /// </summary>
            [EnumMember(Value = "CHANNEL_FAX_STATUS")]
            CHANNELFAXSTATUS = 9,
            
            /// <summary>
            /// Enum CHANNELINTERCEPTED for value: CHANNEL_INTERCEPTED
            /// </summary>
            [EnumMember(Value = "CHANNEL_INTERCEPTED")]
            CHANNELINTERCEPTED = 10,
            
            /// <summary>
            /// Enum CHANNELPROGRESSMEDIA for value: CHANNEL_PROGRESS_MEDIA
            /// </summary>
            [EnumMember(Value = "CHANNEL_PROGRESS_MEDIA")]
            CHANNELPROGRESSMEDIA = 11,
            
            /// <summary>
            /// Enum CHANNELREPLACED for value: CHANNEL_REPLACED
            /// </summary>
            [EnumMember(Value = "CHANNEL_REPLACED")]
            CHANNELREPLACED = 12,
            
            /// <summary>
            /// Enum CHANNELTRANSFEREE for value: CHANNEL_TRANSFEREE
            /// </summary>
            [EnumMember(Value = "CHANNEL_TRANSFEREE")]
            CHANNELTRANSFEREE = 13,
            
            /// <summary>
            /// Enum CHANNELTRANSFEROR for value: CHANNEL_TRANSFEROR
            /// </summary>
            [EnumMember(Value = "CHANNEL_TRANSFEROR")]
            CHANNELTRANSFEROR = 14,
            
            /// <summary>
            /// Enum CHANNELBRIDGE for value: CHANNEL_BRIDGE
            /// </summary>
            [EnumMember(Value = "CHANNEL_BRIDGE")]
            CHANNELBRIDGE = 15,
            
            /// <summary>
            /// Enum CHANNELUNBRIDGE for value: CHANNEL_UNBRIDGE
            /// </summary>
            [EnumMember(Value = "CHANNEL_UNBRIDGE")]
            CHANNELUNBRIDGE = 16,
            
            /// <summary>
            /// Enum CHANNELHOLD for value: CHANNEL_HOLD
            /// </summary>
            [EnumMember(Value = "CHANNEL_HOLD")]
            CHANNELHOLD = 17,
            
            /// <summary>
            /// Enum CHANNELUNHOLD for value: CHANNEL_UNHOLD
            /// </summary>
            [EnumMember(Value = "CHANNEL_UNHOLD")]
            CHANNELUNHOLD = 18,
            
            /// <summary>
            /// Enum DETECTEDTONE for value: DETECTED_TONE
            /// </summary>
            [EnumMember(Value = "DETECTED_TONE")]
            DETECTEDTONE = 19,
            
            /// <summary>
            /// Enum DTMF for value: DTMF
            /// </summary>
            [EnumMember(Value = "DTMF")]
            DTMF = 20,
            
            /// <summary>
            /// Enum LEGCREATED for value: LEG_CREATED
            /// </summary>
            [EnumMember(Value = "LEG_CREATED")]
            LEGCREATED = 21,
            
            /// <summary>
            /// Enum LEGDESTROYED for value: LEG_DESTROYED
            /// </summary>
            [EnumMember(Value = "LEG_DESTROYED")]
            LEGDESTROYED = 22,
            
            /// <summary>
            /// Enum RECORDSTART for value: RECORD_START
            /// </summary>
            [EnumMember(Value = "RECORD_START")]
            RECORDSTART = 23,
            
            /// <summary>
            /// Enum RECORDSTOP for value: RECORD_STOP
            /// </summary>
            [EnumMember(Value = "RECORD_STOP")]
            RECORDSTOP = 24,
            
            /// <summary>
            /// Enum Dialplan for value: dialplan
            /// </summary>
            [EnumMember(Value = "dialplan")]
            Dialplan = 25
        }


        /// <summary>
        /// Gets or Sets BLegEvents
        /// </summary>
        [DataMember(Name="B-Leg-Events", EmitDefaultValue=false)]
        public List<BLegEventsEnum> BLegEvents { get; set; }
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Call for value: call
            /// </summary>
            [EnumMember(Value = "call")]
            Call = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Command for value: command
            /// </summary>
            [EnumMember(Value = "command")]
            Command = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Defines InsertAt
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InsertAtEnum
        {
            
            /// <summary>
            /// Enum Head for value: head
            /// </summary>
            [EnumMember(Value = "head")]
            Head = 1,
            
            /// <summary>
            /// Enum Tail for value: tail
            /// </summary>
            [EnumMember(Value = "tail")]
            Tail = 2,
            
            /// <summary>
            /// Enum Flush for value: flush
            /// </summary>
            [EnumMember(Value = "flush")]
            Flush = 3,
            
            /// <summary>
            /// Enum Now for value: now
            /// </summary>
            [EnumMember(Value = "now")]
            Now = 4
        }

        /// <summary>
        /// Gets or Sets InsertAt
        /// </summary>
        [DataMember(Name="Insert-At", EmitDefaultValue=false)]
        public InsertAtEnum? InsertAt { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanNoop" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiDialplanNoop() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanNoop" /> class.
        /// </summary>
        /// <param name="applicationName">applicationName (required).</param>
        /// <param name="bLegEvents">bLegEvents.</param>
        /// <param name="callID">callID (required).</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="filterApplications">filterApplications.</param>
        /// <param name="insertAt">insertAt.</param>
        public KapiDialplanNoop(ApplicationNameEnum applicationName = default(ApplicationNameEnum), List<BLegEventsEnum> bLegEvents = default(List<BLegEventsEnum>), string callID = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string filterApplications = default(string), InsertAtEnum? insertAt = default(InsertAtEnum?))
        {
            // to ensure "applicationName" is required (not null)
            if (applicationName == null)
            {
                throw new InvalidDataException("applicationName is a required property for KapiDialplanNoop and cannot be null");
            }
            else
            {
                this.ApplicationName = applicationName;
            }
            // to ensure "callID" is required (not null)
            if (callID == null)
            {
                throw new InvalidDataException("callID is a required property for KapiDialplanNoop and cannot be null");
            }
            else
            {
                this.CallID = callID;
            }
            this.BLegEvents = bLegEvents;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.FilterApplications = filterApplications;
            this.InsertAt = insertAt;
        }
        


        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }



        /// <summary>
        /// Gets or Sets FilterApplications
        /// </summary>
        [DataMember(Name="Filter-Applications", EmitDefaultValue=false)]
        public string FilterApplications { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiDialplanNoop {\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  BLegEvents: ").Append(BLegEvents).Append("\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  FilterApplications: ").Append(FilterApplications).Append("\n");
            sb.Append("  InsertAt: ").Append(InsertAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiDialplanNoop);
        }

        /// <summary>
        /// Returns true if KapiDialplanNoop instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiDialplanNoop to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiDialplanNoop input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.BLegEvents == input.BLegEvents ||
                    this.BLegEvents != null &&
                    this.BLegEvents.SequenceEqual(input.BLegEvents)
                ) && 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.FilterApplications == input.FilterApplications ||
                    (this.FilterApplications != null &&
                    this.FilterApplications.Equals(input.FilterApplications))
                ) && 
                (
                    this.InsertAt == input.InsertAt ||
                    (this.InsertAt != null &&
                    this.InsertAt.Equals(input.InsertAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationName != null)
                    hashCode = hashCode * 59 + this.ApplicationName.GetHashCode();
                if (this.BLegEvents != null)
                    hashCode = hashCode * 59 + this.BLegEvents.GetHashCode();
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.FilterApplications != null)
                    hashCode = hashCode * 59 + this.FilterApplications.GetHashCode();
                if (this.InsertAt != null)
                    hashCode = hashCode * 59 + this.InsertAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
