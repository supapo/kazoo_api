/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Validator for the play callflow data object
    /// </summary>
    [DataContract]
    public partial class CallflowsPlay :  IEquatable<CallflowsPlay>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsPlay" /> class.
        /// </summary>
        /// <param name="answer">Whether to answer an unanswered call.</param>
        /// <param name="endlessPlayback">Loop the media continuously (default to false).</param>
        /// <param name="id">Media ID or URL of the media to play.</param>
        /// <param name="loopCount">How many times to loop the media.</param>
        /// <param name="skipModule">When set to true this callflow action is skipped, advancing to the wildcard branch (if any).</param>
        /// <param name="terminators">What DTMF can terminate playback of the audio.</param>
        public CallflowsPlay(bool? answer = default(bool?), bool? endlessPlayback = false, string id = default(string), int? loopCount = default(int?), bool? skipModule = default(bool?), List<string> terminators = default(List<string>))
        {
            this.Answer = answer;
            // use default value if no "endlessPlayback" provided
            if (endlessPlayback == null)
            {
                this.EndlessPlayback = false;
            }
            else
            {
                this.EndlessPlayback = endlessPlayback;
            }
            this.Id = id;
            this.LoopCount = loopCount;
            this.SkipModule = skipModule;
            this.Terminators = terminators;
        }
        
        /// <summary>
        /// Whether to answer an unanswered call
        /// </summary>
        /// <value>Whether to answer an unanswered call</value>
        [DataMember(Name="answer", EmitDefaultValue=false)]
        public bool? Answer { get; set; }

        /// <summary>
        /// Loop the media continuously
        /// </summary>
        /// <value>Loop the media continuously</value>
        [DataMember(Name="endless_playback", EmitDefaultValue=false)]
        public bool? EndlessPlayback { get; set; }

        /// <summary>
        /// Media ID or URL of the media to play
        /// </summary>
        /// <value>Media ID or URL of the media to play</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// How many times to loop the media
        /// </summary>
        /// <value>How many times to loop the media</value>
        [DataMember(Name="loop_count", EmitDefaultValue=false)]
        public int? LoopCount { get; set; }

        /// <summary>
        /// When set to true this callflow action is skipped, advancing to the wildcard branch (if any)
        /// </summary>
        /// <value>When set to true this callflow action is skipped, advancing to the wildcard branch (if any)</value>
        [DataMember(Name="skip_module", EmitDefaultValue=false)]
        public bool? SkipModule { get; set; }

        /// <summary>
        /// What DTMF can terminate playback of the audio
        /// </summary>
        /// <value>What DTMF can terminate playback of the audio</value>
        [DataMember(Name="terminators", EmitDefaultValue=false)]
        public List<string> Terminators { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallflowsPlay {\n");
            sb.Append("  Answer: ").Append(Answer).Append("\n");
            sb.Append("  EndlessPlayback: ").Append(EndlessPlayback).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LoopCount: ").Append(LoopCount).Append("\n");
            sb.Append("  SkipModule: ").Append(SkipModule).Append("\n");
            sb.Append("  Terminators: ").Append(Terminators).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallflowsPlay);
        }

        /// <summary>
        /// Returns true if CallflowsPlay instances are equal
        /// </summary>
        /// <param name="input">Instance of CallflowsPlay to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallflowsPlay input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Answer == input.Answer ||
                    (this.Answer != null &&
                    this.Answer.Equals(input.Answer))
                ) && 
                (
                    this.EndlessPlayback == input.EndlessPlayback ||
                    (this.EndlessPlayback != null &&
                    this.EndlessPlayback.Equals(input.EndlessPlayback))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LoopCount == input.LoopCount ||
                    (this.LoopCount != null &&
                    this.LoopCount.Equals(input.LoopCount))
                ) && 
                (
                    this.SkipModule == input.SkipModule ||
                    (this.SkipModule != null &&
                    this.SkipModule.Equals(input.SkipModule))
                ) && 
                (
                    this.Terminators == input.Terminators ||
                    this.Terminators != null &&
                    this.Terminators.SequenceEqual(input.Terminators)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Answer != null)
                    hashCode = hashCode * 59 + this.Answer.GetHashCode();
                if (this.EndlessPlayback != null)
                    hashCode = hashCode * 59 + this.EndlessPlayback.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LoopCount != null)
                    hashCode = hashCode * 59 + this.LoopCount.GetHashCode();
                if (this.SkipModule != null)
                    hashCode = hashCode * 59 + this.SkipModule.GetHashCode();
                if (this.Terminators != null)
                    hashCode = hashCode * 59 + this.Terminators.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LoopCount (int?) minimum
            if(this.LoopCount < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LoopCount, must be a value greater than or equal to 1.", new [] { "LoopCount" });
            }

            yield break;
        }
    }

}
