/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for webhooks system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigWebhooks :  IEquatable<SystemConfigWebhooks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigWebhooks" /> class.
        /// </summary>
        /// <param name="attemptFailureCount">webhooks attempt failure count.</param>
        /// <param name="attemptFailureExpiryMs">webhooks attempt failure expiry in milliseconds.</param>
        /// <param name="connectTimeoutMs">webhooks connect timeout in milliseconds.</param>
        /// <param name="disableDisabler">if true webhooks will not be automatically disabled (default to false).</param>
        /// <param name="logSuccessfulAttempts">webhooks log successful attempts (default to false).</param>
        /// <param name="objectTypes">webhooks object types.</param>
        public SystemConfigWebhooks(int? attemptFailureCount = default(int?), int? attemptFailureExpiryMs = default(int?), int? connectTimeoutMs = default(int?), bool? disableDisabler = false, bool? logSuccessfulAttempts = false, List<string> objectTypes = default(List<string>))
        {
            this.AttemptFailureCount = attemptFailureCount;
            this.AttemptFailureExpiryMs = attemptFailureExpiryMs;
            this.ConnectTimeoutMs = connectTimeoutMs;
            // use default value if no "disableDisabler" provided
            if (disableDisabler == null)
            {
                this.DisableDisabler = false;
            }
            else
            {
                this.DisableDisabler = disableDisabler;
            }
            // use default value if no "logSuccessfulAttempts" provided
            if (logSuccessfulAttempts == null)
            {
                this.LogSuccessfulAttempts = false;
            }
            else
            {
                this.LogSuccessfulAttempts = logSuccessfulAttempts;
            }
            this.ObjectTypes = objectTypes;
        }
        
        /// <summary>
        /// webhooks attempt failure count
        /// </summary>
        /// <value>webhooks attempt failure count</value>
        [DataMember(Name="attempt_failure_count", EmitDefaultValue=false)]
        public int? AttemptFailureCount { get; set; }

        /// <summary>
        /// webhooks attempt failure expiry in milliseconds
        /// </summary>
        /// <value>webhooks attempt failure expiry in milliseconds</value>
        [DataMember(Name="attempt_failure_expiry_ms", EmitDefaultValue=false)]
        public int? AttemptFailureExpiryMs { get; set; }

        /// <summary>
        /// webhooks connect timeout in milliseconds
        /// </summary>
        /// <value>webhooks connect timeout in milliseconds</value>
        [DataMember(Name="connect_timeout_ms", EmitDefaultValue=false)]
        public int? ConnectTimeoutMs { get; set; }

        /// <summary>
        /// if true webhooks will not be automatically disabled
        /// </summary>
        /// <value>if true webhooks will not be automatically disabled</value>
        [DataMember(Name="disable_disabler", EmitDefaultValue=false)]
        public bool? DisableDisabler { get; set; }

        /// <summary>
        /// webhooks log successful attempts
        /// </summary>
        /// <value>webhooks log successful attempts</value>
        [DataMember(Name="log_successful_attempts", EmitDefaultValue=false)]
        public bool? LogSuccessfulAttempts { get; set; }

        /// <summary>
        /// webhooks object types
        /// </summary>
        /// <value>webhooks object types</value>
        [DataMember(Name="object_types", EmitDefaultValue=false)]
        public List<string> ObjectTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigWebhooks {\n");
            sb.Append("  AttemptFailureCount: ").Append(AttemptFailureCount).Append("\n");
            sb.Append("  AttemptFailureExpiryMs: ").Append(AttemptFailureExpiryMs).Append("\n");
            sb.Append("  ConnectTimeoutMs: ").Append(ConnectTimeoutMs).Append("\n");
            sb.Append("  DisableDisabler: ").Append(DisableDisabler).Append("\n");
            sb.Append("  LogSuccessfulAttempts: ").Append(LogSuccessfulAttempts).Append("\n");
            sb.Append("  ObjectTypes: ").Append(ObjectTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigWebhooks);
        }

        /// <summary>
        /// Returns true if SystemConfigWebhooks instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigWebhooks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigWebhooks input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AttemptFailureCount == input.AttemptFailureCount ||
                    (this.AttemptFailureCount != null &&
                    this.AttemptFailureCount.Equals(input.AttemptFailureCount))
                ) && 
                (
                    this.AttemptFailureExpiryMs == input.AttemptFailureExpiryMs ||
                    (this.AttemptFailureExpiryMs != null &&
                    this.AttemptFailureExpiryMs.Equals(input.AttemptFailureExpiryMs))
                ) && 
                (
                    this.ConnectTimeoutMs == input.ConnectTimeoutMs ||
                    (this.ConnectTimeoutMs != null &&
                    this.ConnectTimeoutMs.Equals(input.ConnectTimeoutMs))
                ) && 
                (
                    this.DisableDisabler == input.DisableDisabler ||
                    (this.DisableDisabler != null &&
                    this.DisableDisabler.Equals(input.DisableDisabler))
                ) && 
                (
                    this.LogSuccessfulAttempts == input.LogSuccessfulAttempts ||
                    (this.LogSuccessfulAttempts != null &&
                    this.LogSuccessfulAttempts.Equals(input.LogSuccessfulAttempts))
                ) && 
                (
                    this.ObjectTypes == input.ObjectTypes ||
                    this.ObjectTypes != null &&
                    this.ObjectTypes.SequenceEqual(input.ObjectTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AttemptFailureCount != null)
                    hashCode = hashCode * 59 + this.AttemptFailureCount.GetHashCode();
                if (this.AttemptFailureExpiryMs != null)
                    hashCode = hashCode * 59 + this.AttemptFailureExpiryMs.GetHashCode();
                if (this.ConnectTimeoutMs != null)
                    hashCode = hashCode * 59 + this.ConnectTimeoutMs.GetHashCode();
                if (this.DisableDisabler != null)
                    hashCode = hashCode * 59 + this.DisableDisabler.GetHashCode();
                if (this.LogSuccessfulAttempts != null)
                    hashCode = hashCode * 59 + this.LogSuccessfulAttempts.GetHashCode();
                if (this.ObjectTypes != null)
                    hashCode = hashCode * 59 + this.ObjectTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
