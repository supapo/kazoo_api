/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for jonny5 system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigJonny5 :  IEquatable<SystemConfigJonny5>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigJonny5" /> class.
        /// </summary>
        /// <param name="checkServiceStanding">jonny5 check_service_standing (default to true).</param>
        /// <param name="defaultAllowPostpay">jonny5 default_allow_postpay.</param>
        /// <param name="defaultInboundTrunks">jonny5 default inbound trunks.</param>
        /// <param name="defaultMaxPostpayAmount">jonny5 default_max_postpay_amount.</param>
        /// <param name="defaultTwowayTrunks">jonny5 default twoway trunks.</param>
        /// <param name="flatRateBlacklist">jonny5 flat rate blacklist (default to &quot;^\+1(684|264|268|242|246|441|284|345|767|809|829|849|473|671|876|664|670|787|939|869|758|784|721|868|649|340|900|800|888|877|866|855|844)\d{7}$&quot;).</param>
        /// <param name="flatRateWhitelist">jonny5 flat rate whitelist (default to &quot;^\+1\d{10}$&quot;).</param>
        /// <param name="resourceFlatRateLookup">lookup flat rate regexps per resource (default to false).</param>
        /// <param name="serviceStandingCacheAcceptable">jonny5 service_standing_cache_acceptable (default to true).</param>
        /// <param name="serviceStandingCacheExpirationS">jonny5 service_standing_cache_expiration_s.</param>
        public SystemConfigJonny5(bool? checkServiceStanding = true, bool? defaultAllowPostpay = default(bool?), int? defaultInboundTrunks = default(int?), decimal? defaultMaxPostpayAmount = default(decimal?), int? defaultTwowayTrunks = default(int?), string flatRateBlacklist = "^\+1(684|264|268|242|246|441|284|345|767|809|829|849|473|671|876|664|670|787|939|869|758|784|721|868|649|340|900|800|888|877|866|855|844)\d{7}$", string flatRateWhitelist = "^\+1\d{10}$", bool? resourceFlatRateLookup = false, bool? serviceStandingCacheAcceptable = true, int? serviceStandingCacheExpirationS = default(int?))
        {
            // use default value if no "checkServiceStanding" provided
            if (checkServiceStanding == null)
            {
                this.CheckServiceStanding = true;
            }
            else
            {
                this.CheckServiceStanding = checkServiceStanding;
            }
            this.DefaultAllowPostpay = defaultAllowPostpay;
            this.DefaultInboundTrunks = defaultInboundTrunks;
            this.DefaultMaxPostpayAmount = defaultMaxPostpayAmount;
            this.DefaultTwowayTrunks = defaultTwowayTrunks;
            // use default value if no "flatRateBlacklist" provided
            if (flatRateBlacklist == null)
            {
                this.FlatRateBlacklist = "^\+1(684|264|268|242|246|441|284|345|767|809|829|849|473|671|876|664|670|787|939|869|758|784|721|868|649|340|900|800|888|877|866|855|844)\d{7}$";
            }
            else
            {
                this.FlatRateBlacklist = flatRateBlacklist;
            }
            // use default value if no "flatRateWhitelist" provided
            if (flatRateWhitelist == null)
            {
                this.FlatRateWhitelist = "^\+1\d{10}$";
            }
            else
            {
                this.FlatRateWhitelist = flatRateWhitelist;
            }
            // use default value if no "resourceFlatRateLookup" provided
            if (resourceFlatRateLookup == null)
            {
                this.ResourceFlatRateLookup = false;
            }
            else
            {
                this.ResourceFlatRateLookup = resourceFlatRateLookup;
            }
            // use default value if no "serviceStandingCacheAcceptable" provided
            if (serviceStandingCacheAcceptable == null)
            {
                this.ServiceStandingCacheAcceptable = true;
            }
            else
            {
                this.ServiceStandingCacheAcceptable = serviceStandingCacheAcceptable;
            }
            this.ServiceStandingCacheExpirationS = serviceStandingCacheExpirationS;
        }
        
        /// <summary>
        /// jonny5 check_service_standing
        /// </summary>
        /// <value>jonny5 check_service_standing</value>
        [DataMember(Name="check_service_standing", EmitDefaultValue=false)]
        public bool? CheckServiceStanding { get; set; }

        /// <summary>
        /// jonny5 default_allow_postpay
        /// </summary>
        /// <value>jonny5 default_allow_postpay</value>
        [DataMember(Name="default_allow_postpay", EmitDefaultValue=false)]
        public bool? DefaultAllowPostpay { get; set; }

        /// <summary>
        /// jonny5 default inbound trunks
        /// </summary>
        /// <value>jonny5 default inbound trunks</value>
        [DataMember(Name="default_inbound_trunks", EmitDefaultValue=false)]
        public int? DefaultInboundTrunks { get; set; }

        /// <summary>
        /// jonny5 default_max_postpay_amount
        /// </summary>
        /// <value>jonny5 default_max_postpay_amount</value>
        [DataMember(Name="default_max_postpay_amount", EmitDefaultValue=false)]
        public decimal? DefaultMaxPostpayAmount { get; set; }

        /// <summary>
        /// jonny5 default twoway trunks
        /// </summary>
        /// <value>jonny5 default twoway trunks</value>
        [DataMember(Name="default_twoway_trunks", EmitDefaultValue=false)]
        public int? DefaultTwowayTrunks { get; set; }

        /// <summary>
        /// jonny5 flat rate blacklist
        /// </summary>
        /// <value>jonny5 flat rate blacklist</value>
        [DataMember(Name="flat_rate_blacklist", EmitDefaultValue=false)]
        public string FlatRateBlacklist { get; set; }

        /// <summary>
        /// jonny5 flat rate whitelist
        /// </summary>
        /// <value>jonny5 flat rate whitelist</value>
        [DataMember(Name="flat_rate_whitelist", EmitDefaultValue=false)]
        public string FlatRateWhitelist { get; set; }

        /// <summary>
        /// lookup flat rate regexps per resource
        /// </summary>
        /// <value>lookup flat rate regexps per resource</value>
        [DataMember(Name="resource_flat_rate_lookup", EmitDefaultValue=false)]
        public bool? ResourceFlatRateLookup { get; set; }

        /// <summary>
        /// jonny5 service_standing_cache_acceptable
        /// </summary>
        /// <value>jonny5 service_standing_cache_acceptable</value>
        [DataMember(Name="service_standing_cache_acceptable", EmitDefaultValue=false)]
        public bool? ServiceStandingCacheAcceptable { get; set; }

        /// <summary>
        /// jonny5 service_standing_cache_expiration_s
        /// </summary>
        /// <value>jonny5 service_standing_cache_expiration_s</value>
        [DataMember(Name="service_standing_cache_expiration_s", EmitDefaultValue=false)]
        public int? ServiceStandingCacheExpirationS { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigJonny5 {\n");
            sb.Append("  CheckServiceStanding: ").Append(CheckServiceStanding).Append("\n");
            sb.Append("  DefaultAllowPostpay: ").Append(DefaultAllowPostpay).Append("\n");
            sb.Append("  DefaultInboundTrunks: ").Append(DefaultInboundTrunks).Append("\n");
            sb.Append("  DefaultMaxPostpayAmount: ").Append(DefaultMaxPostpayAmount).Append("\n");
            sb.Append("  DefaultTwowayTrunks: ").Append(DefaultTwowayTrunks).Append("\n");
            sb.Append("  FlatRateBlacklist: ").Append(FlatRateBlacklist).Append("\n");
            sb.Append("  FlatRateWhitelist: ").Append(FlatRateWhitelist).Append("\n");
            sb.Append("  ResourceFlatRateLookup: ").Append(ResourceFlatRateLookup).Append("\n");
            sb.Append("  ServiceStandingCacheAcceptable: ").Append(ServiceStandingCacheAcceptable).Append("\n");
            sb.Append("  ServiceStandingCacheExpirationS: ").Append(ServiceStandingCacheExpirationS).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigJonny5);
        }

        /// <summary>
        /// Returns true if SystemConfigJonny5 instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigJonny5 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigJonny5 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CheckServiceStanding == input.CheckServiceStanding ||
                    (this.CheckServiceStanding != null &&
                    this.CheckServiceStanding.Equals(input.CheckServiceStanding))
                ) && 
                (
                    this.DefaultAllowPostpay == input.DefaultAllowPostpay ||
                    (this.DefaultAllowPostpay != null &&
                    this.DefaultAllowPostpay.Equals(input.DefaultAllowPostpay))
                ) && 
                (
                    this.DefaultInboundTrunks == input.DefaultInboundTrunks ||
                    (this.DefaultInboundTrunks != null &&
                    this.DefaultInboundTrunks.Equals(input.DefaultInboundTrunks))
                ) && 
                (
                    this.DefaultMaxPostpayAmount == input.DefaultMaxPostpayAmount ||
                    (this.DefaultMaxPostpayAmount != null &&
                    this.DefaultMaxPostpayAmount.Equals(input.DefaultMaxPostpayAmount))
                ) && 
                (
                    this.DefaultTwowayTrunks == input.DefaultTwowayTrunks ||
                    (this.DefaultTwowayTrunks != null &&
                    this.DefaultTwowayTrunks.Equals(input.DefaultTwowayTrunks))
                ) && 
                (
                    this.FlatRateBlacklist == input.FlatRateBlacklist ||
                    (this.FlatRateBlacklist != null &&
                    this.FlatRateBlacklist.Equals(input.FlatRateBlacklist))
                ) && 
                (
                    this.FlatRateWhitelist == input.FlatRateWhitelist ||
                    (this.FlatRateWhitelist != null &&
                    this.FlatRateWhitelist.Equals(input.FlatRateWhitelist))
                ) && 
                (
                    this.ResourceFlatRateLookup == input.ResourceFlatRateLookup ||
                    (this.ResourceFlatRateLookup != null &&
                    this.ResourceFlatRateLookup.Equals(input.ResourceFlatRateLookup))
                ) && 
                (
                    this.ServiceStandingCacheAcceptable == input.ServiceStandingCacheAcceptable ||
                    (this.ServiceStandingCacheAcceptable != null &&
                    this.ServiceStandingCacheAcceptable.Equals(input.ServiceStandingCacheAcceptable))
                ) && 
                (
                    this.ServiceStandingCacheExpirationS == input.ServiceStandingCacheExpirationS ||
                    (this.ServiceStandingCacheExpirationS != null &&
                    this.ServiceStandingCacheExpirationS.Equals(input.ServiceStandingCacheExpirationS))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CheckServiceStanding != null)
                    hashCode = hashCode * 59 + this.CheckServiceStanding.GetHashCode();
                if (this.DefaultAllowPostpay != null)
                    hashCode = hashCode * 59 + this.DefaultAllowPostpay.GetHashCode();
                if (this.DefaultInboundTrunks != null)
                    hashCode = hashCode * 59 + this.DefaultInboundTrunks.GetHashCode();
                if (this.DefaultMaxPostpayAmount != null)
                    hashCode = hashCode * 59 + this.DefaultMaxPostpayAmount.GetHashCode();
                if (this.DefaultTwowayTrunks != null)
                    hashCode = hashCode * 59 + this.DefaultTwowayTrunks.GetHashCode();
                if (this.FlatRateBlacklist != null)
                    hashCode = hashCode * 59 + this.FlatRateBlacklist.GetHashCode();
                if (this.FlatRateWhitelist != null)
                    hashCode = hashCode * 59 + this.FlatRateWhitelist.GetHashCode();
                if (this.ResourceFlatRateLookup != null)
                    hashCode = hashCode * 59 + this.ResourceFlatRateLookup.GetHashCode();
                if (this.ServiceStandingCacheAcceptable != null)
                    hashCode = hashCode * 59 + this.ServiceStandingCacheAcceptable.GetHashCode();
                if (this.ServiceStandingCacheExpirationS != null)
                    hashCode = hashCode * 59 + this.ServiceStandingCacheExpirationS.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
