/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Domain settings for white-labelling
    /// </summary>
    [DataContract]
    public partial class Domains :  IEquatable<Domains>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Domains" /> class.
        /// </summary>
        /// <param name="a">A records.</param>
        /// <param name="cNAME">CNAME records.</param>
        /// <param name="mX">MX records, typically for email servers.</param>
        /// <param name="nAPTR">NAPTR records.</param>
        /// <param name="sRV">SRV records.</param>
        /// <param name="tXT">TXT records.</param>
        public Domains(Object a = default(Object), DomainHosts cNAME = default(DomainHosts), Object mX = default(Object), Object nAPTR = default(Object), Object sRV = default(Object), Object tXT = default(Object))
        {
            this.A = a;
            this.CNAME = cNAME;
            this.MX = mX;
            this.NAPTR = nAPTR;
            this.SRV = sRV;
            this.TXT = tXT;
        }
        
        /// <summary>
        /// A records
        /// </summary>
        /// <value>A records</value>
        [DataMember(Name="A", EmitDefaultValue=false)]
        public Object A { get; set; }

        /// <summary>
        /// CNAME records
        /// </summary>
        /// <value>CNAME records</value>
        [DataMember(Name="CNAME", EmitDefaultValue=false)]
        public DomainHosts CNAME { get; set; }

        /// <summary>
        /// MX records, typically for email servers
        /// </summary>
        /// <value>MX records, typically for email servers</value>
        [DataMember(Name="MX", EmitDefaultValue=false)]
        public Object MX { get; set; }

        /// <summary>
        /// NAPTR records
        /// </summary>
        /// <value>NAPTR records</value>
        [DataMember(Name="NAPTR", EmitDefaultValue=false)]
        public Object NAPTR { get; set; }

        /// <summary>
        /// SRV records
        /// </summary>
        /// <value>SRV records</value>
        [DataMember(Name="SRV", EmitDefaultValue=false)]
        public Object SRV { get; set; }

        /// <summary>
        /// TXT records
        /// </summary>
        /// <value>TXT records</value>
        [DataMember(Name="TXT", EmitDefaultValue=false)]
        public Object TXT { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Domains {\n");
            sb.Append("  A: ").Append(A).Append("\n");
            sb.Append("  CNAME: ").Append(CNAME).Append("\n");
            sb.Append("  MX: ").Append(MX).Append("\n");
            sb.Append("  NAPTR: ").Append(NAPTR).Append("\n");
            sb.Append("  SRV: ").Append(SRV).Append("\n");
            sb.Append("  TXT: ").Append(TXT).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Domains);
        }

        /// <summary>
        /// Returns true if Domains instances are equal
        /// </summary>
        /// <param name="input">Instance of Domains to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Domains input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.A == input.A ||
                    (this.A != null &&
                    this.A.Equals(input.A))
                ) && 
                (
                    this.CNAME == input.CNAME ||
                    (this.CNAME != null &&
                    this.CNAME.Equals(input.CNAME))
                ) && 
                (
                    this.MX == input.MX ||
                    (this.MX != null &&
                    this.MX.Equals(input.MX))
                ) && 
                (
                    this.NAPTR == input.NAPTR ||
                    (this.NAPTR != null &&
                    this.NAPTR.Equals(input.NAPTR))
                ) && 
                (
                    this.SRV == input.SRV ||
                    (this.SRV != null &&
                    this.SRV.Equals(input.SRV))
                ) && 
                (
                    this.TXT == input.TXT ||
                    (this.TXT != null &&
                    this.TXT.Equals(input.TXT))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.A != null)
                    hashCode = hashCode * 59 + this.A.GetHashCode();
                if (this.CNAME != null)
                    hashCode = hashCode * 59 + this.CNAME.GetHashCode();
                if (this.MX != null)
                    hashCode = hashCode * 59 + this.MX.GetHashCode();
                if (this.NAPTR != null)
                    hashCode = hashCode * 59 + this.NAPTR.GetHashCode();
                if (this.SRV != null)
                    hashCode = hashCode * 59 + this.SRV.GetHashCode();
                if (this.TXT != null)
                    hashCode = hashCode * 59 + this.TXT.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
