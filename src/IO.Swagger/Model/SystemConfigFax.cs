/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for fax system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigFax :  IEquatable<SystemConfigFax>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigFax" /> class.
        /// </summary>
        /// <param name="allowAllAddressesWhenEmpty">fax allow all addresses when empty (default to false).</param>
        /// <param name="allowedContentTypes">fax allowed content types.</param>
        /// <param name="cloudRegistrationPoolInterval">fax cloud registration pool interval.</param>
        /// <param name="defaultCompareField">fax default compare field (default to &quot;result_cause&quot;).</param>
        /// <param name="defaultRetryCount">fax default retry count.</param>
        /// <param name="defaultRetryPeriod">fax default retry period.</param>
        /// <param name="defaultSmtpDomain">fax default SMTP domain (default to &quot;fax.kazoo.io&quot;).</param>
        /// <param name="deleteEmptyFaxes">fax delete empty faxes (default to false).</param>
        /// <param name="deniedContentTypes">fax denied content types.</param>
        /// <param name="endpointTimeout">fax endpoint timeout.</param>
        /// <param name="ensureValidCallerId">fax ensure valid caller id (default to true).</param>
        /// <param name="faxFilePath">fax fax file path (default to &quot;/tmp/&quot;).</param>
        /// <param name="faxSettings">fax fax settings.</param>
        /// <param name="fileCachePath">fax file cache path (default to &quot;/tmp/&quot;).</param>
        /// <param name="ignoreEarlyMedia">fax ignore early media (default to false).</param>
        /// <param name="imageMinSize">fax image minimum size (default to &quot;700x10&quot;).</param>
        /// <param name="imageSizeCmdFormat">fax image size cmd format (default to &quot;echo -n &#x60;identify -format &quot;%[fx:w]x%[fx:h]&quot; ~s&#x60;&quot;).</param>
        /// <param name="inboundT38Default">fax inbound t38 default (default to &quot;true&quot;).</param>
        /// <param name="logFaxboxErrors">fax log faxbox errors (default to true).</param>
        /// <param name="maxOutbound">fax max outbound.</param>
        /// <param name="maxStorageRetry">fax maximum storage retry.</param>
        /// <param name="port">fax port.</param>
        /// <param name="reportAnonymousSystemErrors">fax report anonymous system errors (default to false).</param>
        /// <param name="reportFaxboxSystemErrors">fax report faxbox system errors (default to true).</param>
        /// <param name="reportSmtpErrors">Report SMTP-related errors via notifications (default to true).</param>
        /// <param name="reschedule">fax reschedule.</param>
        /// <param name="serializeOutboundNumbers">Serialize fax transmissions by outbound number globally (default to true).</param>
        /// <param name="smtpMaxMsgSize">fax smtp maximum msg size.</param>
        /// <param name="smtpPort">fax smtp port.</param>
        /// <param name="smtpSessions">fax smtp sessions.</param>
        /// <param name="storeFaxPdf">store the post processed fax document (default to true).</param>
        /// <param name="storeFaxTiff">store a pdf copy of the post processed fax document (default to true).</param>
        /// <param name="storeUrlDocument">store the document url result in the database (default to true).</param>
        /// <param name="waitForFaxTimeoutMs">fax wait for fax timeout in milliseconds.</param>
        /// <param name="workers">fax workers.</param>
        /// <param name="xmppInterval">fax xmpp interval.</param>
        public SystemConfigFax(bool? allowAllAddressesWhenEmpty = false, List<Object> allowedContentTypes = default(List<Object>), int? cloudRegistrationPoolInterval = default(int?), string defaultCompareField = "result_cause", int? defaultRetryCount = default(int?), int? defaultRetryPeriod = default(int?), string defaultSmtpDomain = "fax.kazoo.io", bool? deleteEmptyFaxes = false, List<Object> deniedContentTypes = default(List<Object>), int? endpointTimeout = default(int?), bool? ensureValidCallerId = true, string faxFilePath = "/tmp/", Object faxSettings = default(Object), string fileCachePath = "/tmp/", bool? ignoreEarlyMedia = false, string imageMinSize = "700x10", string imageSizeCmdFormat = "echo -n `identify -format "%[fx:w]x%[fx:h]" ~s`", string inboundT38Default = "true", bool? logFaxboxErrors = true, int? maxOutbound = default(int?), int? maxStorageRetry = default(int?), int? port = default(int?), bool? reportAnonymousSystemErrors = false, bool? reportFaxboxSystemErrors = true, bool? reportSmtpErrors = true, Object reschedule = default(Object), bool? serializeOutboundNumbers = true, int? smtpMaxMsgSize = default(int?), int? smtpPort = default(int?), int? smtpSessions = default(int?), bool? storeFaxPdf = true, bool? storeFaxTiff = true, bool? storeUrlDocument = true, int? waitForFaxTimeoutMs = default(int?), int? workers = default(int?), int? xmppInterval = default(int?))
        {
            // use default value if no "allowAllAddressesWhenEmpty" provided
            if (allowAllAddressesWhenEmpty == null)
            {
                this.AllowAllAddressesWhenEmpty = false;
            }
            else
            {
                this.AllowAllAddressesWhenEmpty = allowAllAddressesWhenEmpty;
            }
            this.AllowedContentTypes = allowedContentTypes;
            this.CloudRegistrationPoolInterval = cloudRegistrationPoolInterval;
            // use default value if no "defaultCompareField" provided
            if (defaultCompareField == null)
            {
                this.DefaultCompareField = "result_cause";
            }
            else
            {
                this.DefaultCompareField = defaultCompareField;
            }
            this.DefaultRetryCount = defaultRetryCount;
            this.DefaultRetryPeriod = defaultRetryPeriod;
            // use default value if no "defaultSmtpDomain" provided
            if (defaultSmtpDomain == null)
            {
                this.DefaultSmtpDomain = "fax.kazoo.io";
            }
            else
            {
                this.DefaultSmtpDomain = defaultSmtpDomain;
            }
            // use default value if no "deleteEmptyFaxes" provided
            if (deleteEmptyFaxes == null)
            {
                this.DeleteEmptyFaxes = false;
            }
            else
            {
                this.DeleteEmptyFaxes = deleteEmptyFaxes;
            }
            this.DeniedContentTypes = deniedContentTypes;
            this.EndpointTimeout = endpointTimeout;
            // use default value if no "ensureValidCallerId" provided
            if (ensureValidCallerId == null)
            {
                this.EnsureValidCallerId = true;
            }
            else
            {
                this.EnsureValidCallerId = ensureValidCallerId;
            }
            // use default value if no "faxFilePath" provided
            if (faxFilePath == null)
            {
                this.FaxFilePath = "/tmp/";
            }
            else
            {
                this.FaxFilePath = faxFilePath;
            }
            this.FaxSettings = faxSettings;
            // use default value if no "fileCachePath" provided
            if (fileCachePath == null)
            {
                this.FileCachePath = "/tmp/";
            }
            else
            {
                this.FileCachePath = fileCachePath;
            }
            // use default value if no "ignoreEarlyMedia" provided
            if (ignoreEarlyMedia == null)
            {
                this.IgnoreEarlyMedia = false;
            }
            else
            {
                this.IgnoreEarlyMedia = ignoreEarlyMedia;
            }
            // use default value if no "imageMinSize" provided
            if (imageMinSize == null)
            {
                this.ImageMinSize = "700x10";
            }
            else
            {
                this.ImageMinSize = imageMinSize;
            }
            // use default value if no "imageSizeCmdFormat" provided
            if (imageSizeCmdFormat == null)
            {
                this.ImageSizeCmdFormat = "echo -n `identify -format "%[fx:w]x%[fx:h]" ~s`";
            }
            else
            {
                this.ImageSizeCmdFormat = imageSizeCmdFormat;
            }
            // use default value if no "inboundT38Default" provided
            if (inboundT38Default == null)
            {
                this.InboundT38Default = "true";
            }
            else
            {
                this.InboundT38Default = inboundT38Default;
            }
            // use default value if no "logFaxboxErrors" provided
            if (logFaxboxErrors == null)
            {
                this.LogFaxboxErrors = true;
            }
            else
            {
                this.LogFaxboxErrors = logFaxboxErrors;
            }
            this.MaxOutbound = maxOutbound;
            this.MaxStorageRetry = maxStorageRetry;
            this.Port = port;
            // use default value if no "reportAnonymousSystemErrors" provided
            if (reportAnonymousSystemErrors == null)
            {
                this.ReportAnonymousSystemErrors = false;
            }
            else
            {
                this.ReportAnonymousSystemErrors = reportAnonymousSystemErrors;
            }
            // use default value if no "reportFaxboxSystemErrors" provided
            if (reportFaxboxSystemErrors == null)
            {
                this.ReportFaxboxSystemErrors = true;
            }
            else
            {
                this.ReportFaxboxSystemErrors = reportFaxboxSystemErrors;
            }
            // use default value if no "reportSmtpErrors" provided
            if (reportSmtpErrors == null)
            {
                this.ReportSmtpErrors = true;
            }
            else
            {
                this.ReportSmtpErrors = reportSmtpErrors;
            }
            this.Reschedule = reschedule;
            // use default value if no "serializeOutboundNumbers" provided
            if (serializeOutboundNumbers == null)
            {
                this.SerializeOutboundNumbers = true;
            }
            else
            {
                this.SerializeOutboundNumbers = serializeOutboundNumbers;
            }
            this.SmtpMaxMsgSize = smtpMaxMsgSize;
            this.SmtpPort = smtpPort;
            this.SmtpSessions = smtpSessions;
            // use default value if no "storeFaxPdf" provided
            if (storeFaxPdf == null)
            {
                this.StoreFaxPdf = true;
            }
            else
            {
                this.StoreFaxPdf = storeFaxPdf;
            }
            // use default value if no "storeFaxTiff" provided
            if (storeFaxTiff == null)
            {
                this.StoreFaxTiff = true;
            }
            else
            {
                this.StoreFaxTiff = storeFaxTiff;
            }
            // use default value if no "storeUrlDocument" provided
            if (storeUrlDocument == null)
            {
                this.StoreUrlDocument = true;
            }
            else
            {
                this.StoreUrlDocument = storeUrlDocument;
            }
            this.WaitForFaxTimeoutMs = waitForFaxTimeoutMs;
            this.Workers = workers;
            this.XmppInterval = xmppInterval;
        }
        
        /// <summary>
        /// fax allow all addresses when empty
        /// </summary>
        /// <value>fax allow all addresses when empty</value>
        [DataMember(Name="allow_all_addresses_when_empty", EmitDefaultValue=false)]
        public bool? AllowAllAddressesWhenEmpty { get; set; }

        /// <summary>
        /// fax allowed content types
        /// </summary>
        /// <value>fax allowed content types</value>
        [DataMember(Name="allowed_content_types", EmitDefaultValue=false)]
        public List<Object> AllowedContentTypes { get; set; }

        /// <summary>
        /// fax cloud registration pool interval
        /// </summary>
        /// <value>fax cloud registration pool interval</value>
        [DataMember(Name="cloud_registration_pool_interval", EmitDefaultValue=false)]
        public int? CloudRegistrationPoolInterval { get; set; }

        /// <summary>
        /// fax default compare field
        /// </summary>
        /// <value>fax default compare field</value>
        [DataMember(Name="default_compare_field", EmitDefaultValue=false)]
        public string DefaultCompareField { get; set; }

        /// <summary>
        /// fax default retry count
        /// </summary>
        /// <value>fax default retry count</value>
        [DataMember(Name="default_retry_count", EmitDefaultValue=false)]
        public int? DefaultRetryCount { get; set; }

        /// <summary>
        /// fax default retry period
        /// </summary>
        /// <value>fax default retry period</value>
        [DataMember(Name="default_retry_period", EmitDefaultValue=false)]
        public int? DefaultRetryPeriod { get; set; }

        /// <summary>
        /// fax default SMTP domain
        /// </summary>
        /// <value>fax default SMTP domain</value>
        [DataMember(Name="default_smtp_domain", EmitDefaultValue=false)]
        public string DefaultSmtpDomain { get; set; }

        /// <summary>
        /// fax delete empty faxes
        /// </summary>
        /// <value>fax delete empty faxes</value>
        [DataMember(Name="delete_empty_faxes", EmitDefaultValue=false)]
        public bool? DeleteEmptyFaxes { get; set; }

        /// <summary>
        /// fax denied content types
        /// </summary>
        /// <value>fax denied content types</value>
        [DataMember(Name="denied_content_types", EmitDefaultValue=false)]
        public List<Object> DeniedContentTypes { get; set; }

        /// <summary>
        /// fax endpoint timeout
        /// </summary>
        /// <value>fax endpoint timeout</value>
        [DataMember(Name="endpoint_timeout", EmitDefaultValue=false)]
        public int? EndpointTimeout { get; set; }

        /// <summary>
        /// fax ensure valid caller id
        /// </summary>
        /// <value>fax ensure valid caller id</value>
        [DataMember(Name="ensure_valid_caller_id", EmitDefaultValue=false)]
        public bool? EnsureValidCallerId { get; set; }

        /// <summary>
        /// fax fax file path
        /// </summary>
        /// <value>fax fax file path</value>
        [DataMember(Name="fax_file_path", EmitDefaultValue=false)]
        public string FaxFilePath { get; set; }

        /// <summary>
        /// fax fax settings
        /// </summary>
        /// <value>fax fax settings</value>
        [DataMember(Name="fax_settings", EmitDefaultValue=false)]
        public Object FaxSettings { get; set; }

        /// <summary>
        /// fax file cache path
        /// </summary>
        /// <value>fax file cache path</value>
        [DataMember(Name="file_cache_path", EmitDefaultValue=false)]
        public string FileCachePath { get; set; }

        /// <summary>
        /// fax ignore early media
        /// </summary>
        /// <value>fax ignore early media</value>
        [DataMember(Name="ignore_early_media", EmitDefaultValue=false)]
        public bool? IgnoreEarlyMedia { get; set; }

        /// <summary>
        /// fax image minimum size
        /// </summary>
        /// <value>fax image minimum size</value>
        [DataMember(Name="image_min_size", EmitDefaultValue=false)]
        public string ImageMinSize { get; set; }

        /// <summary>
        /// fax image size cmd format
        /// </summary>
        /// <value>fax image size cmd format</value>
        [DataMember(Name="image_size_cmd_format", EmitDefaultValue=false)]
        public string ImageSizeCmdFormat { get; set; }

        /// <summary>
        /// fax inbound t38 default
        /// </summary>
        /// <value>fax inbound t38 default</value>
        [DataMember(Name="inbound_t38_default", EmitDefaultValue=false)]
        public string InboundT38Default { get; set; }

        /// <summary>
        /// fax log faxbox errors
        /// </summary>
        /// <value>fax log faxbox errors</value>
        [DataMember(Name="log_faxbox_errors", EmitDefaultValue=false)]
        public bool? LogFaxboxErrors { get; set; }

        /// <summary>
        /// fax max outbound
        /// </summary>
        /// <value>fax max outbound</value>
        [DataMember(Name="max_outbound", EmitDefaultValue=false)]
        public int? MaxOutbound { get; set; }

        /// <summary>
        /// fax maximum storage retry
        /// </summary>
        /// <value>fax maximum storage retry</value>
        [DataMember(Name="max_storage_retry", EmitDefaultValue=false)]
        public int? MaxStorageRetry { get; set; }

        /// <summary>
        /// fax port
        /// </summary>
        /// <value>fax port</value>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public int? Port { get; set; }

        /// <summary>
        /// fax report anonymous system errors
        /// </summary>
        /// <value>fax report anonymous system errors</value>
        [DataMember(Name="report_anonymous_system_errors", EmitDefaultValue=false)]
        public bool? ReportAnonymousSystemErrors { get; set; }

        /// <summary>
        /// fax report faxbox system errors
        /// </summary>
        /// <value>fax report faxbox system errors</value>
        [DataMember(Name="report_faxbox_system_errors", EmitDefaultValue=false)]
        public bool? ReportFaxboxSystemErrors { get; set; }

        /// <summary>
        /// Report SMTP-related errors via notifications
        /// </summary>
        /// <value>Report SMTP-related errors via notifications</value>
        [DataMember(Name="report_smtp_errors", EmitDefaultValue=false)]
        public bool? ReportSmtpErrors { get; set; }

        /// <summary>
        /// fax reschedule
        /// </summary>
        /// <value>fax reschedule</value>
        [DataMember(Name="reschedule", EmitDefaultValue=false)]
        public Object Reschedule { get; set; }

        /// <summary>
        /// Serialize fax transmissions by outbound number globally
        /// </summary>
        /// <value>Serialize fax transmissions by outbound number globally</value>
        [DataMember(Name="serialize_outbound_numbers", EmitDefaultValue=false)]
        public bool? SerializeOutboundNumbers { get; set; }

        /// <summary>
        /// fax smtp maximum msg size
        /// </summary>
        /// <value>fax smtp maximum msg size</value>
        [DataMember(Name="smtp_max_msg_size", EmitDefaultValue=false)]
        public int? SmtpMaxMsgSize { get; set; }

        /// <summary>
        /// fax smtp port
        /// </summary>
        /// <value>fax smtp port</value>
        [DataMember(Name="smtp_port", EmitDefaultValue=false)]
        public int? SmtpPort { get; set; }

        /// <summary>
        /// fax smtp sessions
        /// </summary>
        /// <value>fax smtp sessions</value>
        [DataMember(Name="smtp_sessions", EmitDefaultValue=false)]
        public int? SmtpSessions { get; set; }

        /// <summary>
        /// store the post processed fax document
        /// </summary>
        /// <value>store the post processed fax document</value>
        [DataMember(Name="store_fax_pdf", EmitDefaultValue=false)]
        public bool? StoreFaxPdf { get; set; }

        /// <summary>
        /// store a pdf copy of the post processed fax document
        /// </summary>
        /// <value>store a pdf copy of the post processed fax document</value>
        [DataMember(Name="store_fax_tiff", EmitDefaultValue=false)]
        public bool? StoreFaxTiff { get; set; }

        /// <summary>
        /// store the document url result in the database
        /// </summary>
        /// <value>store the document url result in the database</value>
        [DataMember(Name="store_url_document", EmitDefaultValue=false)]
        public bool? StoreUrlDocument { get; set; }

        /// <summary>
        /// fax wait for fax timeout in milliseconds
        /// </summary>
        /// <value>fax wait for fax timeout in milliseconds</value>
        [DataMember(Name="wait_for_fax_timeout_ms", EmitDefaultValue=false)]
        public int? WaitForFaxTimeoutMs { get; set; }

        /// <summary>
        /// fax workers
        /// </summary>
        /// <value>fax workers</value>
        [DataMember(Name="workers", EmitDefaultValue=false)]
        public int? Workers { get; set; }

        /// <summary>
        /// fax xmpp interval
        /// </summary>
        /// <value>fax xmpp interval</value>
        [DataMember(Name="xmpp_interval", EmitDefaultValue=false)]
        public int? XmppInterval { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigFax {\n");
            sb.Append("  AllowAllAddressesWhenEmpty: ").Append(AllowAllAddressesWhenEmpty).Append("\n");
            sb.Append("  AllowedContentTypes: ").Append(AllowedContentTypes).Append("\n");
            sb.Append("  CloudRegistrationPoolInterval: ").Append(CloudRegistrationPoolInterval).Append("\n");
            sb.Append("  DefaultCompareField: ").Append(DefaultCompareField).Append("\n");
            sb.Append("  DefaultRetryCount: ").Append(DefaultRetryCount).Append("\n");
            sb.Append("  DefaultRetryPeriod: ").Append(DefaultRetryPeriod).Append("\n");
            sb.Append("  DefaultSmtpDomain: ").Append(DefaultSmtpDomain).Append("\n");
            sb.Append("  DeleteEmptyFaxes: ").Append(DeleteEmptyFaxes).Append("\n");
            sb.Append("  DeniedContentTypes: ").Append(DeniedContentTypes).Append("\n");
            sb.Append("  EndpointTimeout: ").Append(EndpointTimeout).Append("\n");
            sb.Append("  EnsureValidCallerId: ").Append(EnsureValidCallerId).Append("\n");
            sb.Append("  FaxFilePath: ").Append(FaxFilePath).Append("\n");
            sb.Append("  FaxSettings: ").Append(FaxSettings).Append("\n");
            sb.Append("  FileCachePath: ").Append(FileCachePath).Append("\n");
            sb.Append("  IgnoreEarlyMedia: ").Append(IgnoreEarlyMedia).Append("\n");
            sb.Append("  ImageMinSize: ").Append(ImageMinSize).Append("\n");
            sb.Append("  ImageSizeCmdFormat: ").Append(ImageSizeCmdFormat).Append("\n");
            sb.Append("  InboundT38Default: ").Append(InboundT38Default).Append("\n");
            sb.Append("  LogFaxboxErrors: ").Append(LogFaxboxErrors).Append("\n");
            sb.Append("  MaxOutbound: ").Append(MaxOutbound).Append("\n");
            sb.Append("  MaxStorageRetry: ").Append(MaxStorageRetry).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  ReportAnonymousSystemErrors: ").Append(ReportAnonymousSystemErrors).Append("\n");
            sb.Append("  ReportFaxboxSystemErrors: ").Append(ReportFaxboxSystemErrors).Append("\n");
            sb.Append("  ReportSmtpErrors: ").Append(ReportSmtpErrors).Append("\n");
            sb.Append("  Reschedule: ").Append(Reschedule).Append("\n");
            sb.Append("  SerializeOutboundNumbers: ").Append(SerializeOutboundNumbers).Append("\n");
            sb.Append("  SmtpMaxMsgSize: ").Append(SmtpMaxMsgSize).Append("\n");
            sb.Append("  SmtpPort: ").Append(SmtpPort).Append("\n");
            sb.Append("  SmtpSessions: ").Append(SmtpSessions).Append("\n");
            sb.Append("  StoreFaxPdf: ").Append(StoreFaxPdf).Append("\n");
            sb.Append("  StoreFaxTiff: ").Append(StoreFaxTiff).Append("\n");
            sb.Append("  StoreUrlDocument: ").Append(StoreUrlDocument).Append("\n");
            sb.Append("  WaitForFaxTimeoutMs: ").Append(WaitForFaxTimeoutMs).Append("\n");
            sb.Append("  Workers: ").Append(Workers).Append("\n");
            sb.Append("  XmppInterval: ").Append(XmppInterval).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigFax);
        }

        /// <summary>
        /// Returns true if SystemConfigFax instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigFax to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigFax input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowAllAddressesWhenEmpty == input.AllowAllAddressesWhenEmpty ||
                    (this.AllowAllAddressesWhenEmpty != null &&
                    this.AllowAllAddressesWhenEmpty.Equals(input.AllowAllAddressesWhenEmpty))
                ) && 
                (
                    this.AllowedContentTypes == input.AllowedContentTypes ||
                    this.AllowedContentTypes != null &&
                    this.AllowedContentTypes.SequenceEqual(input.AllowedContentTypes)
                ) && 
                (
                    this.CloudRegistrationPoolInterval == input.CloudRegistrationPoolInterval ||
                    (this.CloudRegistrationPoolInterval != null &&
                    this.CloudRegistrationPoolInterval.Equals(input.CloudRegistrationPoolInterval))
                ) && 
                (
                    this.DefaultCompareField == input.DefaultCompareField ||
                    (this.DefaultCompareField != null &&
                    this.DefaultCompareField.Equals(input.DefaultCompareField))
                ) && 
                (
                    this.DefaultRetryCount == input.DefaultRetryCount ||
                    (this.DefaultRetryCount != null &&
                    this.DefaultRetryCount.Equals(input.DefaultRetryCount))
                ) && 
                (
                    this.DefaultRetryPeriod == input.DefaultRetryPeriod ||
                    (this.DefaultRetryPeriod != null &&
                    this.DefaultRetryPeriod.Equals(input.DefaultRetryPeriod))
                ) && 
                (
                    this.DefaultSmtpDomain == input.DefaultSmtpDomain ||
                    (this.DefaultSmtpDomain != null &&
                    this.DefaultSmtpDomain.Equals(input.DefaultSmtpDomain))
                ) && 
                (
                    this.DeleteEmptyFaxes == input.DeleteEmptyFaxes ||
                    (this.DeleteEmptyFaxes != null &&
                    this.DeleteEmptyFaxes.Equals(input.DeleteEmptyFaxes))
                ) && 
                (
                    this.DeniedContentTypes == input.DeniedContentTypes ||
                    this.DeniedContentTypes != null &&
                    this.DeniedContentTypes.SequenceEqual(input.DeniedContentTypes)
                ) && 
                (
                    this.EndpointTimeout == input.EndpointTimeout ||
                    (this.EndpointTimeout != null &&
                    this.EndpointTimeout.Equals(input.EndpointTimeout))
                ) && 
                (
                    this.EnsureValidCallerId == input.EnsureValidCallerId ||
                    (this.EnsureValidCallerId != null &&
                    this.EnsureValidCallerId.Equals(input.EnsureValidCallerId))
                ) && 
                (
                    this.FaxFilePath == input.FaxFilePath ||
                    (this.FaxFilePath != null &&
                    this.FaxFilePath.Equals(input.FaxFilePath))
                ) && 
                (
                    this.FaxSettings == input.FaxSettings ||
                    (this.FaxSettings != null &&
                    this.FaxSettings.Equals(input.FaxSettings))
                ) && 
                (
                    this.FileCachePath == input.FileCachePath ||
                    (this.FileCachePath != null &&
                    this.FileCachePath.Equals(input.FileCachePath))
                ) && 
                (
                    this.IgnoreEarlyMedia == input.IgnoreEarlyMedia ||
                    (this.IgnoreEarlyMedia != null &&
                    this.IgnoreEarlyMedia.Equals(input.IgnoreEarlyMedia))
                ) && 
                (
                    this.ImageMinSize == input.ImageMinSize ||
                    (this.ImageMinSize != null &&
                    this.ImageMinSize.Equals(input.ImageMinSize))
                ) && 
                (
                    this.ImageSizeCmdFormat == input.ImageSizeCmdFormat ||
                    (this.ImageSizeCmdFormat != null &&
                    this.ImageSizeCmdFormat.Equals(input.ImageSizeCmdFormat))
                ) && 
                (
                    this.InboundT38Default == input.InboundT38Default ||
                    (this.InboundT38Default != null &&
                    this.InboundT38Default.Equals(input.InboundT38Default))
                ) && 
                (
                    this.LogFaxboxErrors == input.LogFaxboxErrors ||
                    (this.LogFaxboxErrors != null &&
                    this.LogFaxboxErrors.Equals(input.LogFaxboxErrors))
                ) && 
                (
                    this.MaxOutbound == input.MaxOutbound ||
                    (this.MaxOutbound != null &&
                    this.MaxOutbound.Equals(input.MaxOutbound))
                ) && 
                (
                    this.MaxStorageRetry == input.MaxStorageRetry ||
                    (this.MaxStorageRetry != null &&
                    this.MaxStorageRetry.Equals(input.MaxStorageRetry))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.ReportAnonymousSystemErrors == input.ReportAnonymousSystemErrors ||
                    (this.ReportAnonymousSystemErrors != null &&
                    this.ReportAnonymousSystemErrors.Equals(input.ReportAnonymousSystemErrors))
                ) && 
                (
                    this.ReportFaxboxSystemErrors == input.ReportFaxboxSystemErrors ||
                    (this.ReportFaxboxSystemErrors != null &&
                    this.ReportFaxboxSystemErrors.Equals(input.ReportFaxboxSystemErrors))
                ) && 
                (
                    this.ReportSmtpErrors == input.ReportSmtpErrors ||
                    (this.ReportSmtpErrors != null &&
                    this.ReportSmtpErrors.Equals(input.ReportSmtpErrors))
                ) && 
                (
                    this.Reschedule == input.Reschedule ||
                    (this.Reschedule != null &&
                    this.Reschedule.Equals(input.Reschedule))
                ) && 
                (
                    this.SerializeOutboundNumbers == input.SerializeOutboundNumbers ||
                    (this.SerializeOutboundNumbers != null &&
                    this.SerializeOutboundNumbers.Equals(input.SerializeOutboundNumbers))
                ) && 
                (
                    this.SmtpMaxMsgSize == input.SmtpMaxMsgSize ||
                    (this.SmtpMaxMsgSize != null &&
                    this.SmtpMaxMsgSize.Equals(input.SmtpMaxMsgSize))
                ) && 
                (
                    this.SmtpPort == input.SmtpPort ||
                    (this.SmtpPort != null &&
                    this.SmtpPort.Equals(input.SmtpPort))
                ) && 
                (
                    this.SmtpSessions == input.SmtpSessions ||
                    (this.SmtpSessions != null &&
                    this.SmtpSessions.Equals(input.SmtpSessions))
                ) && 
                (
                    this.StoreFaxPdf == input.StoreFaxPdf ||
                    (this.StoreFaxPdf != null &&
                    this.StoreFaxPdf.Equals(input.StoreFaxPdf))
                ) && 
                (
                    this.StoreFaxTiff == input.StoreFaxTiff ||
                    (this.StoreFaxTiff != null &&
                    this.StoreFaxTiff.Equals(input.StoreFaxTiff))
                ) && 
                (
                    this.StoreUrlDocument == input.StoreUrlDocument ||
                    (this.StoreUrlDocument != null &&
                    this.StoreUrlDocument.Equals(input.StoreUrlDocument))
                ) && 
                (
                    this.WaitForFaxTimeoutMs == input.WaitForFaxTimeoutMs ||
                    (this.WaitForFaxTimeoutMs != null &&
                    this.WaitForFaxTimeoutMs.Equals(input.WaitForFaxTimeoutMs))
                ) && 
                (
                    this.Workers == input.Workers ||
                    (this.Workers != null &&
                    this.Workers.Equals(input.Workers))
                ) && 
                (
                    this.XmppInterval == input.XmppInterval ||
                    (this.XmppInterval != null &&
                    this.XmppInterval.Equals(input.XmppInterval))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowAllAddressesWhenEmpty != null)
                    hashCode = hashCode * 59 + this.AllowAllAddressesWhenEmpty.GetHashCode();
                if (this.AllowedContentTypes != null)
                    hashCode = hashCode * 59 + this.AllowedContentTypes.GetHashCode();
                if (this.CloudRegistrationPoolInterval != null)
                    hashCode = hashCode * 59 + this.CloudRegistrationPoolInterval.GetHashCode();
                if (this.DefaultCompareField != null)
                    hashCode = hashCode * 59 + this.DefaultCompareField.GetHashCode();
                if (this.DefaultRetryCount != null)
                    hashCode = hashCode * 59 + this.DefaultRetryCount.GetHashCode();
                if (this.DefaultRetryPeriod != null)
                    hashCode = hashCode * 59 + this.DefaultRetryPeriod.GetHashCode();
                if (this.DefaultSmtpDomain != null)
                    hashCode = hashCode * 59 + this.DefaultSmtpDomain.GetHashCode();
                if (this.DeleteEmptyFaxes != null)
                    hashCode = hashCode * 59 + this.DeleteEmptyFaxes.GetHashCode();
                if (this.DeniedContentTypes != null)
                    hashCode = hashCode * 59 + this.DeniedContentTypes.GetHashCode();
                if (this.EndpointTimeout != null)
                    hashCode = hashCode * 59 + this.EndpointTimeout.GetHashCode();
                if (this.EnsureValidCallerId != null)
                    hashCode = hashCode * 59 + this.EnsureValidCallerId.GetHashCode();
                if (this.FaxFilePath != null)
                    hashCode = hashCode * 59 + this.FaxFilePath.GetHashCode();
                if (this.FaxSettings != null)
                    hashCode = hashCode * 59 + this.FaxSettings.GetHashCode();
                if (this.FileCachePath != null)
                    hashCode = hashCode * 59 + this.FileCachePath.GetHashCode();
                if (this.IgnoreEarlyMedia != null)
                    hashCode = hashCode * 59 + this.IgnoreEarlyMedia.GetHashCode();
                if (this.ImageMinSize != null)
                    hashCode = hashCode * 59 + this.ImageMinSize.GetHashCode();
                if (this.ImageSizeCmdFormat != null)
                    hashCode = hashCode * 59 + this.ImageSizeCmdFormat.GetHashCode();
                if (this.InboundT38Default != null)
                    hashCode = hashCode * 59 + this.InboundT38Default.GetHashCode();
                if (this.LogFaxboxErrors != null)
                    hashCode = hashCode * 59 + this.LogFaxboxErrors.GetHashCode();
                if (this.MaxOutbound != null)
                    hashCode = hashCode * 59 + this.MaxOutbound.GetHashCode();
                if (this.MaxStorageRetry != null)
                    hashCode = hashCode * 59 + this.MaxStorageRetry.GetHashCode();
                if (this.Port != null)
                    hashCode = hashCode * 59 + this.Port.GetHashCode();
                if (this.ReportAnonymousSystemErrors != null)
                    hashCode = hashCode * 59 + this.ReportAnonymousSystemErrors.GetHashCode();
                if (this.ReportFaxboxSystemErrors != null)
                    hashCode = hashCode * 59 + this.ReportFaxboxSystemErrors.GetHashCode();
                if (this.ReportSmtpErrors != null)
                    hashCode = hashCode * 59 + this.ReportSmtpErrors.GetHashCode();
                if (this.Reschedule != null)
                    hashCode = hashCode * 59 + this.Reschedule.GetHashCode();
                if (this.SerializeOutboundNumbers != null)
                    hashCode = hashCode * 59 + this.SerializeOutboundNumbers.GetHashCode();
                if (this.SmtpMaxMsgSize != null)
                    hashCode = hashCode * 59 + this.SmtpMaxMsgSize.GetHashCode();
                if (this.SmtpPort != null)
                    hashCode = hashCode * 59 + this.SmtpPort.GetHashCode();
                if (this.SmtpSessions != null)
                    hashCode = hashCode * 59 + this.SmtpSessions.GetHashCode();
                if (this.StoreFaxPdf != null)
                    hashCode = hashCode * 59 + this.StoreFaxPdf.GetHashCode();
                if (this.StoreFaxTiff != null)
                    hashCode = hashCode * 59 + this.StoreFaxTiff.GetHashCode();
                if (this.StoreUrlDocument != null)
                    hashCode = hashCode * 59 + this.StoreUrlDocument.GetHashCode();
                if (this.WaitForFaxTimeoutMs != null)
                    hashCode = hashCode * 59 + this.WaitForFaxTimeoutMs.GetHashCode();
                if (this.Workers != null)
                    hashCode = hashCode * 59 + this.Workers.GetHashCode();
                if (this.XmppInterval != null)
                    hashCode = hashCode * 59 + this.XmppInterval.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
