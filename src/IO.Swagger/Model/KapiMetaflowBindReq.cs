/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for metaflow.bind_req
    /// </summary>
    [DataContract]
    public partial class KapiMetaflowBindReq :  IEquatable<KapiMetaflowBindReq>, IValidatableObject
    {
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Metaflow for value: metaflow
            /// </summary>
            [EnumMember(Value = "metaflow")]
            Metaflow = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Bindreq for value: bind_req
            /// </summary>
            [EnumMember(Value = "bind_req")]
            Bindreq = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiMetaflowBindReq" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiMetaflowBindReq() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiMetaflowBindReq" /> class.
        /// </summary>
        /// <param name="accountID">accountID (required).</param>
        /// <param name="authorizingID">authorizingID.</param>
        /// <param name="authorizingType">authorizingType.</param>
        /// <param name="bindingLeg">bindingLeg (required).</param>
        /// <param name="callID">callID.</param>
        /// <param name="callFlowID">callFlowID.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="resourceID">resourceID.</param>
        public KapiMetaflowBindReq(string accountID = default(string), string authorizingID = default(string), string authorizingType = default(string), string bindingLeg = default(string), string callID = default(string), string callFlowID = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string resourceID = default(string))
        {
            // to ensure "accountID" is required (not null)
            if (accountID == null)
            {
                throw new InvalidDataException("accountID is a required property for KapiMetaflowBindReq and cannot be null");
            }
            else
            {
                this.AccountID = accountID;
            }
            // to ensure "bindingLeg" is required (not null)
            if (bindingLeg == null)
            {
                throw new InvalidDataException("bindingLeg is a required property for KapiMetaflowBindReq and cannot be null");
            }
            else
            {
                this.BindingLeg = bindingLeg;
            }
            this.AuthorizingID = authorizingID;
            this.AuthorizingType = authorizingType;
            this.CallID = callID;
            this.CallFlowID = callFlowID;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.ResourceID = resourceID;
        }
        
        /// <summary>
        /// Gets or Sets AccountID
        /// </summary>
        [DataMember(Name="Account-ID", EmitDefaultValue=false)]
        public string AccountID { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizingID
        /// </summary>
        [DataMember(Name="Authorizing-ID", EmitDefaultValue=false)]
        public string AuthorizingID { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizingType
        /// </summary>
        [DataMember(Name="Authorizing-Type", EmitDefaultValue=false)]
        public string AuthorizingType { get; set; }

        /// <summary>
        /// Gets or Sets BindingLeg
        /// </summary>
        [DataMember(Name="Binding-Leg", EmitDefaultValue=false)]
        public string BindingLeg { get; set; }

        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }

        /// <summary>
        /// Gets or Sets CallFlowID
        /// </summary>
        [DataMember(Name="CallFlow-ID", EmitDefaultValue=false)]
        public string CallFlowID { get; set; }



        /// <summary>
        /// Gets or Sets ResourceID
        /// </summary>
        [DataMember(Name="Resource-ID", EmitDefaultValue=false)]
        public string ResourceID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiMetaflowBindReq {\n");
            sb.Append("  AccountID: ").Append(AccountID).Append("\n");
            sb.Append("  AuthorizingID: ").Append(AuthorizingID).Append("\n");
            sb.Append("  AuthorizingType: ").Append(AuthorizingType).Append("\n");
            sb.Append("  BindingLeg: ").Append(BindingLeg).Append("\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  CallFlowID: ").Append(CallFlowID).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  ResourceID: ").Append(ResourceID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiMetaflowBindReq);
        }

        /// <summary>
        /// Returns true if KapiMetaflowBindReq instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiMetaflowBindReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiMetaflowBindReq input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountID == input.AccountID ||
                    (this.AccountID != null &&
                    this.AccountID.Equals(input.AccountID))
                ) && 
                (
                    this.AuthorizingID == input.AuthorizingID ||
                    (this.AuthorizingID != null &&
                    this.AuthorizingID.Equals(input.AuthorizingID))
                ) && 
                (
                    this.AuthorizingType == input.AuthorizingType ||
                    (this.AuthorizingType != null &&
                    this.AuthorizingType.Equals(input.AuthorizingType))
                ) && 
                (
                    this.BindingLeg == input.BindingLeg ||
                    (this.BindingLeg != null &&
                    this.BindingLeg.Equals(input.BindingLeg))
                ) && 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.CallFlowID == input.CallFlowID ||
                    (this.CallFlowID != null &&
                    this.CallFlowID.Equals(input.CallFlowID))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.ResourceID == input.ResourceID ||
                    (this.ResourceID != null &&
                    this.ResourceID.Equals(input.ResourceID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountID != null)
                    hashCode = hashCode * 59 + this.AccountID.GetHashCode();
                if (this.AuthorizingID != null)
                    hashCode = hashCode * 59 + this.AuthorizingID.GetHashCode();
                if (this.AuthorizingType != null)
                    hashCode = hashCode * 59 + this.AuthorizingType.GetHashCode();
                if (this.BindingLeg != null)
                    hashCode = hashCode * 59 + this.BindingLeg.GetHashCode();
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.CallFlowID != null)
                    hashCode = hashCode * 59 + this.CallFlowID.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.ResourceID != null)
                    hashCode = hashCode * 59 + this.ResourceID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
