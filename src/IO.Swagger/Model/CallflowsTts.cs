/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Validator for the TTS (Text-to-speech) callflow action
    /// </summary>
    [DataContract]
    public partial class CallflowsTts :  IEquatable<CallflowsTts>, IValidatableObject
    {
        /// <summary>
        /// What TTS engine to use
        /// </summary>
        /// <value>What TTS engine to use</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EngineEnum
        {
            
            /// <summary>
            /// Enum Flite for value: flite
            /// </summary>
            [EnumMember(Value = "flite")]
            Flite = 1,
            
            /// <summary>
            /// Enum Google for value: google
            /// </summary>
            [EnumMember(Value = "google")]
            Google = 2,
            
            /// <summary>
            /// Enum Ispeech for value: ispeech
            /// </summary>
            [EnumMember(Value = "ispeech")]
            Ispeech = 3,
            
            /// <summary>
            /// Enum Voicefabric for value: voicefabric
            /// </summary>
            [EnumMember(Value = "voicefabric")]
            Voicefabric = 4
        }

        /// <summary>
        /// What TTS engine to use
        /// </summary>
        /// <value>What TTS engine to use</value>
        [DataMember(Name="engine", EmitDefaultValue=false)]
        public EngineEnum? Engine { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsTts" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallflowsTts() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsTts" /> class.
        /// </summary>
        /// <param name="endlessPlayback">Loop the media until canceled.</param>
        /// <param name="engine">What TTS engine to use.</param>
        /// <param name="language">The language of the speaker.</param>
        /// <param name="skipModule">When set to true this callflow action is skipped, advancing to the wildcard branch (if any).</param>
        /// <param name="terminators">What DTMF can terminate playback of the audio.</param>
        /// <param name="text">The text to speak (required).</param>
        /// <param name="voice">What voice to use when speaking the text (default to &quot;female&quot;).</param>
        public CallflowsTts(bool? endlessPlayback = default(bool?), EngineEnum? engine = default(EngineEnum?), string language = default(string), bool? skipModule = default(bool?), List<string> terminators = default(List<string>), string text = default(string), string voice = "female")
        {
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new InvalidDataException("text is a required property for CallflowsTts and cannot be null");
            }
            else
            {
                this.Text = text;
            }
            this.EndlessPlayback = endlessPlayback;
            this.Engine = engine;
            this.Language = language;
            this.SkipModule = skipModule;
            this.Terminators = terminators;
            // use default value if no "voice" provided
            if (voice == null)
            {
                this.Voice = "female";
            }
            else
            {
                this.Voice = voice;
            }
        }
        
        /// <summary>
        /// Loop the media until canceled
        /// </summary>
        /// <value>Loop the media until canceled</value>
        [DataMember(Name="endless_playback", EmitDefaultValue=false)]
        public bool? EndlessPlayback { get; set; }


        /// <summary>
        /// The language of the speaker
        /// </summary>
        /// <value>The language of the speaker</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// When set to true this callflow action is skipped, advancing to the wildcard branch (if any)
        /// </summary>
        /// <value>When set to true this callflow action is skipped, advancing to the wildcard branch (if any)</value>
        [DataMember(Name="skip_module", EmitDefaultValue=false)]
        public bool? SkipModule { get; set; }

        /// <summary>
        /// What DTMF can terminate playback of the audio
        /// </summary>
        /// <value>What DTMF can terminate playback of the audio</value>
        [DataMember(Name="terminators", EmitDefaultValue=false)]
        public List<string> Terminators { get; set; }

        /// <summary>
        /// The text to speak
        /// </summary>
        /// <value>The text to speak</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// What voice to use when speaking the text
        /// </summary>
        /// <value>What voice to use when speaking the text</value>
        [DataMember(Name="voice", EmitDefaultValue=false)]
        public string Voice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallflowsTts {\n");
            sb.Append("  EndlessPlayback: ").Append(EndlessPlayback).Append("\n");
            sb.Append("  Engine: ").Append(Engine).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  SkipModule: ").Append(SkipModule).Append("\n");
            sb.Append("  Terminators: ").Append(Terminators).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Voice: ").Append(Voice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallflowsTts);
        }

        /// <summary>
        /// Returns true if CallflowsTts instances are equal
        /// </summary>
        /// <param name="input">Instance of CallflowsTts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallflowsTts input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EndlessPlayback == input.EndlessPlayback ||
                    (this.EndlessPlayback != null &&
                    this.EndlessPlayback.Equals(input.EndlessPlayback))
                ) && 
                (
                    this.Engine == input.Engine ||
                    (this.Engine != null &&
                    this.Engine.Equals(input.Engine))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.SkipModule == input.SkipModule ||
                    (this.SkipModule != null &&
                    this.SkipModule.Equals(input.SkipModule))
                ) && 
                (
                    this.Terminators == input.Terminators ||
                    this.Terminators != null &&
                    this.Terminators.SequenceEqual(input.Terminators)
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Voice == input.Voice ||
                    (this.Voice != null &&
                    this.Voice.Equals(input.Voice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndlessPlayback != null)
                    hashCode = hashCode * 59 + this.EndlessPlayback.GetHashCode();
                if (this.Engine != null)
                    hashCode = hashCode * 59 + this.Engine.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.SkipModule != null)
                    hashCode = hashCode * 59 + this.SkipModule.GetHashCode();
                if (this.Terminators != null)
                    hashCode = hashCode * 59 + this.Terminators.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Voice != null)
                    hashCode = hashCode * 59 + this.Voice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Text (string) maxLength
            if(this.Text != null && this.Text.Length > 1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Text, length must be less than 1000.", new [] { "Text" });
            }

            // Text (string) minLength
            if(this.Text != null && this.Text.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Text, length must be greater than 1.", new [] { "Text" });
            }

            yield break;
        }
    }

}
