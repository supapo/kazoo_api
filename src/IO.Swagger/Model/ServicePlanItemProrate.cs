/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Should this item be prorated
    /// </summary>
    [DataContract]
    public partial class ServicePlanItemProrate :  IEquatable<ServicePlanItemProrate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServicePlanItemProrate" /> class.
        /// </summary>
        /// <param name="additions">Should this item be prorated during additions (default to true).</param>
        /// <param name="removals">Should this item be prorated during removals (default to false).</param>
        public ServicePlanItemProrate(bool? additions = true, bool? removals = false)
        {
            // use default value if no "additions" provided
            if (additions == null)
            {
                this.Additions = true;
            }
            else
            {
                this.Additions = additions;
            }
            // use default value if no "removals" provided
            if (removals == null)
            {
                this.Removals = false;
            }
            else
            {
                this.Removals = removals;
            }
        }
        
        /// <summary>
        /// Should this item be prorated during additions
        /// </summary>
        /// <value>Should this item be prorated during additions</value>
        [DataMember(Name="additions", EmitDefaultValue=false)]
        public bool? Additions { get; set; }

        /// <summary>
        /// Should this item be prorated during removals
        /// </summary>
        /// <value>Should this item be prorated during removals</value>
        [DataMember(Name="removals", EmitDefaultValue=false)]
        public bool? Removals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServicePlanItemProrate {\n");
            sb.Append("  Additions: ").Append(Additions).Append("\n");
            sb.Append("  Removals: ").Append(Removals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServicePlanItemProrate);
        }

        /// <summary>
        /// Returns true if ServicePlanItemProrate instances are equal
        /// </summary>
        /// <param name="input">Instance of ServicePlanItemProrate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServicePlanItemProrate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Additions == input.Additions ||
                    (this.Additions != null &&
                    this.Additions.Equals(input.Additions))
                ) && 
                (
                    this.Removals == input.Removals ||
                    (this.Removals != null &&
                    this.Removals.Equals(input.Removals))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Additions != null)
                    hashCode = hashCode * 59 + this.Additions.GetHashCode();
                if (this.Removals != null)
                    hashCode = hashCode * 59 + this.Removals.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
