/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for resource selector document
    /// </summary>
    [DataContract]
    public partial class ResourceSelectors :  IEquatable<ResourceSelectors>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceSelectors" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResourceSelectors() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceSelectors" /> class.
        /// </summary>
        /// <param name="name">Selector name (required).</param>
        /// <param name="resource">Resource ID (required).</param>
        /// <param name="selector">Selector data (required).</param>
        /// <param name="startTime">Start time (Gregorian seconds).</param>
        /// <param name="stopTime">Stop time (Gregorian seconds).</param>
        /// <param name="value">Extra selector data.</param>
        public ResourceSelectors(string name = default(string), string resource = default(string), string selector = default(string), int? startTime = default(int?), int? stopTime = default(int?), string value = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ResourceSelectors and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "resource" is required (not null)
            if (resource == null)
            {
                throw new InvalidDataException("resource is a required property for ResourceSelectors and cannot be null");
            }
            else
            {
                this.Resource = resource;
            }
            // to ensure "selector" is required (not null)
            if (selector == null)
            {
                throw new InvalidDataException("selector is a required property for ResourceSelectors and cannot be null");
            }
            else
            {
                this.Selector = selector;
            }
            this.StartTime = startTime;
            this.StopTime = stopTime;
            this.Value = value;
        }
        
        /// <summary>
        /// Selector name
        /// </summary>
        /// <value>Selector name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Resource ID
        /// </summary>
        /// <value>Resource ID</value>
        [DataMember(Name="resource", EmitDefaultValue=false)]
        public string Resource { get; set; }

        /// <summary>
        /// Selector data
        /// </summary>
        /// <value>Selector data</value>
        [DataMember(Name="selector", EmitDefaultValue=false)]
        public string Selector { get; set; }

        /// <summary>
        /// Start time (Gregorian seconds)
        /// </summary>
        /// <value>Start time (Gregorian seconds)</value>
        [DataMember(Name="start_time", EmitDefaultValue=false)]
        public int? StartTime { get; set; }

        /// <summary>
        /// Stop time (Gregorian seconds)
        /// </summary>
        /// <value>Stop time (Gregorian seconds)</value>
        [DataMember(Name="stop_time", EmitDefaultValue=false)]
        public int? StopTime { get; set; }

        /// <summary>
        /// Extra selector data
        /// </summary>
        /// <value>Extra selector data</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResourceSelectors {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  Selector: ").Append(Selector).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  StopTime: ").Append(StopTime).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResourceSelectors);
        }

        /// <summary>
        /// Returns true if ResourceSelectors instances are equal
        /// </summary>
        /// <param name="input">Instance of ResourceSelectors to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResourceSelectors input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Resource == input.Resource ||
                    (this.Resource != null &&
                    this.Resource.Equals(input.Resource))
                ) && 
                (
                    this.Selector == input.Selector ||
                    (this.Selector != null &&
                    this.Selector.Equals(input.Selector))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.StopTime == input.StopTime ||
                    (this.StopTime != null &&
                    this.StopTime.Equals(input.StopTime))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Resource != null)
                    hashCode = hashCode * 59 + this.Resource.GetHashCode();
                if (this.Selector != null)
                    hashCode = hashCode * 59 + this.Selector.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.StopTime != null)
                    hashCode = hashCode * 59 + this.StopTime.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
