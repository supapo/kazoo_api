/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for authz.authz_resp
    /// </summary>
    [DataContract]
    public partial class KapiAuthzAuthzResp :  IEquatable<KapiAuthzAuthzResp>, IValidatableObject
    {
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Authz for value: authz
            /// </summary>
            [EnumMember(Value = "authz")]
            Authz = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Authzresp for value: authz_resp
            /// </summary>
            [EnumMember(Value = "authz_resp")]
            Authzresp = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Defines GlobalResource
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GlobalResourceEnum
        {
            
            /// <summary>
            /// Enum True for value: true
            /// </summary>
            [EnumMember(Value = "true")]
            True = 1,
            
            /// <summary>
            /// Enum False for value: false
            /// </summary>
            [EnumMember(Value = "false")]
            False = 2
        }

        /// <summary>
        /// Gets or Sets GlobalResource
        /// </summary>
        [DataMember(Name="Global-Resource", EmitDefaultValue=false)]
        public GlobalResourceEnum? GlobalResource { get; set; }
        /// <summary>
        /// Defines IsAuthorized
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IsAuthorizedEnum
        {
            
            /// <summary>
            /// Enum True for value: true
            /// </summary>
            [EnumMember(Value = "true")]
            True = 1,
            
            /// <summary>
            /// Enum False for value: false
            /// </summary>
            [EnumMember(Value = "false")]
            False = 2
        }

        /// <summary>
        /// Gets or Sets IsAuthorized
        /// </summary>
        [DataMember(Name="Is-Authorized", EmitDefaultValue=false)]
        public IsAuthorizedEnum IsAuthorized { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiAuthzAuthzResp" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiAuthzAuthzResp() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiAuthzAuthzResp" /> class.
        /// </summary>
        /// <param name="accountBilling">accountBilling.</param>
        /// <param name="accountID">accountID.</param>
        /// <param name="callDirection">callDirection.</param>
        /// <param name="callID">callID (required).</param>
        /// <param name="customChannelVars">customChannelVars.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="globalResource">globalResource.</param>
        /// <param name="isAuthorized">isAuthorized (required).</param>
        /// <param name="otherLegCallID">otherLegCallID.</param>
        /// <param name="resellerBilling">resellerBilling.</param>
        /// <param name="resellerID">resellerID.</param>
        /// <param name="softLimit">softLimit.</param>
        public KapiAuthzAuthzResp(string accountBilling = default(string), string accountID = default(string), string callDirection = default(string), string callID = default(string), Object customChannelVars = default(Object), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), GlobalResourceEnum? globalResource = default(GlobalResourceEnum?), IsAuthorizedEnum isAuthorized = default(IsAuthorizedEnum), string otherLegCallID = default(string), string resellerBilling = default(string), string resellerID = default(string), int? softLimit = default(int?))
        {
            // to ensure "callID" is required (not null)
            if (callID == null)
            {
                throw new InvalidDataException("callID is a required property for KapiAuthzAuthzResp and cannot be null");
            }
            else
            {
                this.CallID = callID;
            }
            // to ensure "isAuthorized" is required (not null)
            if (isAuthorized == null)
            {
                throw new InvalidDataException("isAuthorized is a required property for KapiAuthzAuthzResp and cannot be null");
            }
            else
            {
                this.IsAuthorized = isAuthorized;
            }
            this.AccountBilling = accountBilling;
            this.AccountID = accountID;
            this.CallDirection = callDirection;
            this.CustomChannelVars = customChannelVars;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.GlobalResource = globalResource;
            this.OtherLegCallID = otherLegCallID;
            this.ResellerBilling = resellerBilling;
            this.ResellerID = resellerID;
            this.SoftLimit = softLimit;
        }
        
        /// <summary>
        /// Gets or Sets AccountBilling
        /// </summary>
        [DataMember(Name="Account-Billing", EmitDefaultValue=false)]
        public string AccountBilling { get; set; }

        /// <summary>
        /// Gets or Sets AccountID
        /// </summary>
        [DataMember(Name="Account-ID", EmitDefaultValue=false)]
        public string AccountID { get; set; }

        /// <summary>
        /// Gets or Sets CallDirection
        /// </summary>
        [DataMember(Name="Call-Direction", EmitDefaultValue=false)]
        public string CallDirection { get; set; }

        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }

        /// <summary>
        /// Gets or Sets CustomChannelVars
        /// </summary>
        [DataMember(Name="Custom-Channel-Vars", EmitDefaultValue=false)]
        public Object CustomChannelVars { get; set; }





        /// <summary>
        /// Gets or Sets OtherLegCallID
        /// </summary>
        [DataMember(Name="Other-Leg-Call-ID", EmitDefaultValue=false)]
        public string OtherLegCallID { get; set; }

        /// <summary>
        /// Gets or Sets ResellerBilling
        /// </summary>
        [DataMember(Name="Reseller-Billing", EmitDefaultValue=false)]
        public string ResellerBilling { get; set; }

        /// <summary>
        /// Gets or Sets ResellerID
        /// </summary>
        [DataMember(Name="Reseller-ID", EmitDefaultValue=false)]
        public string ResellerID { get; set; }

        /// <summary>
        /// Gets or Sets SoftLimit
        /// </summary>
        [DataMember(Name="Soft-Limit", EmitDefaultValue=false)]
        public int? SoftLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiAuthzAuthzResp {\n");
            sb.Append("  AccountBilling: ").Append(AccountBilling).Append("\n");
            sb.Append("  AccountID: ").Append(AccountID).Append("\n");
            sb.Append("  CallDirection: ").Append(CallDirection).Append("\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  CustomChannelVars: ").Append(CustomChannelVars).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  GlobalResource: ").Append(GlobalResource).Append("\n");
            sb.Append("  IsAuthorized: ").Append(IsAuthorized).Append("\n");
            sb.Append("  OtherLegCallID: ").Append(OtherLegCallID).Append("\n");
            sb.Append("  ResellerBilling: ").Append(ResellerBilling).Append("\n");
            sb.Append("  ResellerID: ").Append(ResellerID).Append("\n");
            sb.Append("  SoftLimit: ").Append(SoftLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiAuthzAuthzResp);
        }

        /// <summary>
        /// Returns true if KapiAuthzAuthzResp instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiAuthzAuthzResp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiAuthzAuthzResp input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountBilling == input.AccountBilling ||
                    (this.AccountBilling != null &&
                    this.AccountBilling.Equals(input.AccountBilling))
                ) && 
                (
                    this.AccountID == input.AccountID ||
                    (this.AccountID != null &&
                    this.AccountID.Equals(input.AccountID))
                ) && 
                (
                    this.CallDirection == input.CallDirection ||
                    (this.CallDirection != null &&
                    this.CallDirection.Equals(input.CallDirection))
                ) && 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.CustomChannelVars == input.CustomChannelVars ||
                    (this.CustomChannelVars != null &&
                    this.CustomChannelVars.Equals(input.CustomChannelVars))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.GlobalResource == input.GlobalResource ||
                    (this.GlobalResource != null &&
                    this.GlobalResource.Equals(input.GlobalResource))
                ) && 
                (
                    this.IsAuthorized == input.IsAuthorized ||
                    (this.IsAuthorized != null &&
                    this.IsAuthorized.Equals(input.IsAuthorized))
                ) && 
                (
                    this.OtherLegCallID == input.OtherLegCallID ||
                    (this.OtherLegCallID != null &&
                    this.OtherLegCallID.Equals(input.OtherLegCallID))
                ) && 
                (
                    this.ResellerBilling == input.ResellerBilling ||
                    (this.ResellerBilling != null &&
                    this.ResellerBilling.Equals(input.ResellerBilling))
                ) && 
                (
                    this.ResellerID == input.ResellerID ||
                    (this.ResellerID != null &&
                    this.ResellerID.Equals(input.ResellerID))
                ) && 
                (
                    this.SoftLimit == input.SoftLimit ||
                    (this.SoftLimit != null &&
                    this.SoftLimit.Equals(input.SoftLimit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountBilling != null)
                    hashCode = hashCode * 59 + this.AccountBilling.GetHashCode();
                if (this.AccountID != null)
                    hashCode = hashCode * 59 + this.AccountID.GetHashCode();
                if (this.CallDirection != null)
                    hashCode = hashCode * 59 + this.CallDirection.GetHashCode();
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.CustomChannelVars != null)
                    hashCode = hashCode * 59 + this.CustomChannelVars.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.GlobalResource != null)
                    hashCode = hashCode * 59 + this.GlobalResource.GetHashCode();
                if (this.IsAuthorized != null)
                    hashCode = hashCode * 59 + this.IsAuthorized.GetHashCode();
                if (this.OtherLegCallID != null)
                    hashCode = hashCode * 59 + this.OtherLegCallID.GetHashCode();
                if (this.ResellerBilling != null)
                    hashCode = hashCode * 59 + this.ResellerBilling.GetHashCode();
                if (this.ResellerID != null)
                    hashCode = hashCode * 59 + this.ResellerID.GetHashCode();
                if (this.SoftLimit != null)
                    hashCode = hashCode * 59 + this.SoftLimit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
