/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Text-to-speech options used to create audio files from text
    /// </summary>
    [DataContract]
    public partial class MediaTts :  IEquatable<MediaTts>, IValidatableObject
    {
        /// <summary>
        /// The voice to be used during the conversion
        /// </summary>
        /// <value>The voice to be used during the conversion</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VoiceEnum
        {
            
            /// <summary>
            /// Enum FemaleEnUS for value: female/en-US
            /// </summary>
            [EnumMember(Value = "female/en-US")]
            FemaleEnUS = 1,
            
            /// <summary>
            /// Enum MaleEnUS for value: male/en-US
            /// </summary>
            [EnumMember(Value = "male/en-US")]
            MaleEnUS = 2,
            
            /// <summary>
            /// Enum FemaleEnCA for value: female/en-CA
            /// </summary>
            [EnumMember(Value = "female/en-CA")]
            FemaleEnCA = 3,
            
            /// <summary>
            /// Enum FemaleEnAU for value: female/en-AU
            /// </summary>
            [EnumMember(Value = "female/en-AU")]
            FemaleEnAU = 4,
            
            /// <summary>
            /// Enum FemaleEnGB for value: female/en-GB
            /// </summary>
            [EnumMember(Value = "female/en-GB")]
            FemaleEnGB = 5,
            
            /// <summary>
            /// Enum MaleEnGB for value: male/en-GB
            /// </summary>
            [EnumMember(Value = "male/en-GB")]
            MaleEnGB = 6,
            
            /// <summary>
            /// Enum FemaleEsUS for value: female/es-US
            /// </summary>
            [EnumMember(Value = "female/es-US")]
            FemaleEsUS = 7,
            
            /// <summary>
            /// Enum MaleEsUS for value: male/es-US
            /// </summary>
            [EnumMember(Value = "male/es-US")]
            MaleEsUS = 8,
            
            /// <summary>
            /// Enum FemaleUsUS for value: female/us-US
            /// </summary>
            [EnumMember(Value = "female/us-US")]
            FemaleUsUS = 9,
            
            /// <summary>
            /// Enum FemaleZhCN for value: female/zh-CN
            /// </summary>
            [EnumMember(Value = "female/zh-CN")]
            FemaleZhCN = 10,
            
            /// <summary>
            /// Enum MaleZhCN for value: male/zh-CN
            /// </summary>
            [EnumMember(Value = "male/zh-CN")]
            MaleZhCN = 11,
            
            /// <summary>
            /// Enum FemaleZhHK for value: female/zh-HK
            /// </summary>
            [EnumMember(Value = "female/zh-HK")]
            FemaleZhHK = 12,
            
            /// <summary>
            /// Enum FemaleZhTW for value: female/zh-TW
            /// </summary>
            [EnumMember(Value = "female/zh-TW")]
            FemaleZhTW = 13,
            
            /// <summary>
            /// Enum FemaleJaJP for value: female/ja-JP
            /// </summary>
            [EnumMember(Value = "female/ja-JP")]
            FemaleJaJP = 14,
            
            /// <summary>
            /// Enum MaleJaJP for value: male/ja-JP
            /// </summary>
            [EnumMember(Value = "male/ja-JP")]
            MaleJaJP = 15,
            
            /// <summary>
            /// Enum FemaleKoKR for value: female/ko-KR
            /// </summary>
            [EnumMember(Value = "female/ko-KR")]
            FemaleKoKR = 16,
            
            /// <summary>
            /// Enum MaleKoKR for value: male/ko-KR
            /// </summary>
            [EnumMember(Value = "male/ko-KR")]
            MaleKoKR = 17,
            
            /// <summary>
            /// Enum FemaleDaDK for value: female/da-DK
            /// </summary>
            [EnumMember(Value = "female/da-DK")]
            FemaleDaDK = 18,
            
            /// <summary>
            /// Enum FemaleDeDE for value: female/de-DE
            /// </summary>
            [EnumMember(Value = "female/de-DE")]
            FemaleDeDE = 19,
            
            /// <summary>
            /// Enum MaleDeDE for value: male/de-DE
            /// </summary>
            [EnumMember(Value = "male/de-DE")]
            MaleDeDE = 20,
            
            /// <summary>
            /// Enum FemaleCaES for value: female/ca-ES
            /// </summary>
            [EnumMember(Value = "female/ca-ES")]
            FemaleCaES = 21,
            
            /// <summary>
            /// Enum FemaleEsES for value: female/es-ES
            /// </summary>
            [EnumMember(Value = "female/es-ES")]
            FemaleEsES = 22,
            
            /// <summary>
            /// Enum MaleEsES for value: male/es-ES
            /// </summary>
            [EnumMember(Value = "male/es-ES")]
            MaleEsES = 23,
            
            /// <summary>
            /// Enum FemaleFiFI for value: female/fi-FI
            /// </summary>
            [EnumMember(Value = "female/fi-FI")]
            FemaleFiFI = 24,
            
            /// <summary>
            /// Enum FemaleFrCA for value: female/fr-CA
            /// </summary>
            [EnumMember(Value = "female/fr-CA")]
            FemaleFrCA = 25,
            
            /// <summary>
            /// Enum MaleFrCA for value: male/fr-CA
            /// </summary>
            [EnumMember(Value = "male/fr-CA")]
            MaleFrCA = 26,
            
            /// <summary>
            /// Enum FemaleFrFR for value: female/fr-FR
            /// </summary>
            [EnumMember(Value = "female/fr-FR")]
            FemaleFrFR = 27,
            
            /// <summary>
            /// Enum MaleFrFR for value: male/fr-FR
            /// </summary>
            [EnumMember(Value = "male/fr-FR")]
            MaleFrFR = 28,
            
            /// <summary>
            /// Enum FemaleItIT for value: female/it-IT
            /// </summary>
            [EnumMember(Value = "female/it-IT")]
            FemaleItIT = 29,
            
            /// <summary>
            /// Enum MaleItIT for value: male/it-IT
            /// </summary>
            [EnumMember(Value = "male/it-IT")]
            MaleItIT = 30,
            
            /// <summary>
            /// Enum FemaleNbNO for value: female/nb-NO
            /// </summary>
            [EnumMember(Value = "female/nb-NO")]
            FemaleNbNO = 31,
            
            /// <summary>
            /// Enum FemaleNlNL for value: female/nl-NL
            /// </summary>
            [EnumMember(Value = "female/nl-NL")]
            FemaleNlNL = 32,
            
            /// <summary>
            /// Enum FemalePlPL for value: female/pl-PL
            /// </summary>
            [EnumMember(Value = "female/pl-PL")]
            FemalePlPL = 33,
            
            /// <summary>
            /// Enum FemalePtBR for value: female/pt-BR
            /// </summary>
            [EnumMember(Value = "female/pt-BR")]
            FemalePtBR = 34,
            
            /// <summary>
            /// Enum FemalePtPT for value: female/pt-PT
            /// </summary>
            [EnumMember(Value = "female/pt-PT")]
            FemalePtPT = 35,
            
            /// <summary>
            /// Enum MalePtPT for value: male/pt-PT
            /// </summary>
            [EnumMember(Value = "male/pt-PT")]
            MalePtPT = 36,
            
            /// <summary>
            /// Enum FemaleRuRU for value: female/ru-RU
            /// </summary>
            [EnumMember(Value = "female/ru-RU")]
            FemaleRuRU = 37,
            
            /// <summary>
            /// Enum MaleRuRU for value: male/ru-RU
            /// </summary>
            [EnumMember(Value = "male/ru-RU")]
            MaleRuRU = 38,
            
            /// <summary>
            /// Enum FemaleSvSE for value: female/sv-SE
            /// </summary>
            [EnumMember(Value = "female/sv-SE")]
            FemaleSvSE = 39,
            
            /// <summary>
            /// Enum FemaleHuHU for value: female/hu-HU
            /// </summary>
            [EnumMember(Value = "female/hu-HU")]
            FemaleHuHU = 40,
            
            /// <summary>
            /// Enum FemaleCsCZ for value: female/cs-CZ
            /// </summary>
            [EnumMember(Value = "female/cs-CZ")]
            FemaleCsCZ = 41,
            
            /// <summary>
            /// Enum FemaleTrTR for value: female/tr-TR
            /// </summary>
            [EnumMember(Value = "female/tr-TR")]
            FemaleTrTR = 42,
            
            /// <summary>
            /// Enum MaleTrTR for value: male/tr-TR
            /// </summary>
            [EnumMember(Value = "male/tr-TR")]
            MaleTrTR = 43,
            
            /// <summary>
            /// Enum MaleRuRUVladimir for value: male/ru-RU/Vladimir
            /// </summary>
            [EnumMember(Value = "male/ru-RU/Vladimir")]
            MaleRuRUVladimir = 44,
            
            /// <summary>
            /// Enum FemaleRuRUJulia for value: female/ru-RU/Julia
            /// </summary>
            [EnumMember(Value = "female/ru-RU/Julia")]
            FemaleRuRUJulia = 45,
            
            /// <summary>
            /// Enum FemaleRuRUAnna for value: female/ru-RU/Anna
            /// </summary>
            [EnumMember(Value = "female/ru-RU/Anna")]
            FemaleRuRUAnna = 46,
            
            /// <summary>
            /// Enum FemaleRuRUViktoria for value: female/ru-RU/Viktoria
            /// </summary>
            [EnumMember(Value = "female/ru-RU/Viktoria")]
            FemaleRuRUViktoria = 47,
            
            /// <summary>
            /// Enum MaleRuRUAlexander for value: male/ru-RU/Alexander
            /// </summary>
            [EnumMember(Value = "male/ru-RU/Alexander")]
            MaleRuRUAlexander = 48,
            
            /// <summary>
            /// Enum FemaleRuRUMaria for value: female/ru-RU/Maria
            /// </summary>
            [EnumMember(Value = "female/ru-RU/Maria")]
            FemaleRuRUMaria = 49,
            
            /// <summary>
            /// Enum FemaleRuRULidia for value: female/ru-RU/Lidia
            /// </summary>
            [EnumMember(Value = "female/ru-RU/Lidia")]
            FemaleRuRULidia = 50,
            
            /// <summary>
            /// Enum EsESStandardA for value: es-ES-Standard-A
            /// </summary>
            [EnumMember(Value = "es-ES-Standard-A")]
            EsESStandardA = 51,
            
            /// <summary>
            /// Enum ItITStandardA for value: it-IT-Standard-A
            /// </summary>
            [EnumMember(Value = "it-IT-Standard-A")]
            ItITStandardA = 52,
            
            /// <summary>
            /// Enum JaJPStandardA for value: ja-JP-Standard-A
            /// </summary>
            [EnumMember(Value = "ja-JP-Standard-A")]
            JaJPStandardA = 53,
            
            /// <summary>
            /// Enum KoKRStandardA for value: ko-KR-Standard-A
            /// </summary>
            [EnumMember(Value = "ko-KR-Standard-A")]
            KoKRStandardA = 54,
            
            /// <summary>
            /// Enum PtBRStandardA for value: pt-BR-Standard-A
            /// </summary>
            [EnumMember(Value = "pt-BR-Standard-A")]
            PtBRStandardA = 55,
            
            /// <summary>
            /// Enum TrTRStandardA for value: tr-TR-Standard-A
            /// </summary>
            [EnumMember(Value = "tr-TR-Standard-A")]
            TrTRStandardA = 56,
            
            /// <summary>
            /// Enum SvSEStandardA for value: sv-SE-Standard-A
            /// </summary>
            [EnumMember(Value = "sv-SE-Standard-A")]
            SvSEStandardA = 57,
            
            /// <summary>
            /// Enum NlNLStandardA for value: nl-NL-Standard-A
            /// </summary>
            [EnumMember(Value = "nl-NL-Standard-A")]
            NlNLStandardA = 58,
            
            /// <summary>
            /// Enum EnUSWavenetD for value: en-US-Wavenet-D
            /// </summary>
            [EnumMember(Value = "en-US-Wavenet-D")]
            EnUSWavenetD = 59,
            
            /// <summary>
            /// Enum DeDEWavenetA for value: de-DE-Wavenet-A
            /// </summary>
            [EnumMember(Value = "de-DE-Wavenet-A")]
            DeDEWavenetA = 60,
            
            /// <summary>
            /// Enum DeDEWavenetB for value: de-DE-Wavenet-B
            /// </summary>
            [EnumMember(Value = "de-DE-Wavenet-B")]
            DeDEWavenetB = 61,
            
            /// <summary>
            /// Enum DeDEWavenetC for value: de-DE-Wavenet-C
            /// </summary>
            [EnumMember(Value = "de-DE-Wavenet-C")]
            DeDEWavenetC = 62,
            
            /// <summary>
            /// Enum DeDEWavenetD for value: de-DE-Wavenet-D
            /// </summary>
            [EnumMember(Value = "de-DE-Wavenet-D")]
            DeDEWavenetD = 63,
            
            /// <summary>
            /// Enum EnAUWavenetA for value: en-AU-Wavenet-A
            /// </summary>
            [EnumMember(Value = "en-AU-Wavenet-A")]
            EnAUWavenetA = 64,
            
            /// <summary>
            /// Enum EnAUWavenetB for value: en-AU-Wavenet-B
            /// </summary>
            [EnumMember(Value = "en-AU-Wavenet-B")]
            EnAUWavenetB = 65,
            
            /// <summary>
            /// Enum EnAUWavenetC for value: en-AU-Wavenet-C
            /// </summary>
            [EnumMember(Value = "en-AU-Wavenet-C")]
            EnAUWavenetC = 66,
            
            /// <summary>
            /// Enum EnAUWavenetD for value: en-AU-Wavenet-D
            /// </summary>
            [EnumMember(Value = "en-AU-Wavenet-D")]
            EnAUWavenetD = 67,
            
            /// <summary>
            /// Enum EnGBWavenetA for value: en-GB-Wavenet-A
            /// </summary>
            [EnumMember(Value = "en-GB-Wavenet-A")]
            EnGBWavenetA = 68,
            
            /// <summary>
            /// Enum EnGBWavenetB for value: en-GB-Wavenet-B
            /// </summary>
            [EnumMember(Value = "en-GB-Wavenet-B")]
            EnGBWavenetB = 69,
            
            /// <summary>
            /// Enum EnGBWavenetC for value: en-GB-Wavenet-C
            /// </summary>
            [EnumMember(Value = "en-GB-Wavenet-C")]
            EnGBWavenetC = 70,
            
            /// <summary>
            /// Enum EnGBWavenetD for value: en-GB-Wavenet-D
            /// </summary>
            [EnumMember(Value = "en-GB-Wavenet-D")]
            EnGBWavenetD = 71,
            
            /// <summary>
            /// Enum EnUSWavenetA for value: en-US-Wavenet-A
            /// </summary>
            [EnumMember(Value = "en-US-Wavenet-A")]
            EnUSWavenetA = 72,
            
            /// <summary>
            /// Enum EnUSWavenetB for value: en-US-Wavenet-B
            /// </summary>
            [EnumMember(Value = "en-US-Wavenet-B")]
            EnUSWavenetB = 73,
            
            /// <summary>
            /// Enum EnUSWavenetC for value: en-US-Wavenet-C
            /// </summary>
            [EnumMember(Value = "en-US-Wavenet-C")]
            EnUSWavenetC = 74,
            
            /// <summary>
            /// Enum EnUSWavenetE for value: en-US-Wavenet-E
            /// </summary>
            [EnumMember(Value = "en-US-Wavenet-E")]
            EnUSWavenetE = 75,
            
            /// <summary>
            /// Enum EnUSWavenetF for value: en-US-Wavenet-F
            /// </summary>
            [EnumMember(Value = "en-US-Wavenet-F")]
            EnUSWavenetF = 76,
            
            /// <summary>
            /// Enum FrFRWavenetA for value: fr-FR-Wavenet-A
            /// </summary>
            [EnumMember(Value = "fr-FR-Wavenet-A")]
            FrFRWavenetA = 77,
            
            /// <summary>
            /// Enum FrFRWavenetB for value: fr-FR-Wavenet-B
            /// </summary>
            [EnumMember(Value = "fr-FR-Wavenet-B")]
            FrFRWavenetB = 78,
            
            /// <summary>
            /// Enum FrFRWavenetC for value: fr-FR-Wavenet-C
            /// </summary>
            [EnumMember(Value = "fr-FR-Wavenet-C")]
            FrFRWavenetC = 79,
            
            /// <summary>
            /// Enum FrFRWavenetD for value: fr-FR-Wavenet-D
            /// </summary>
            [EnumMember(Value = "fr-FR-Wavenet-D")]
            FrFRWavenetD = 80,
            
            /// <summary>
            /// Enum ItITWavenetA for value: it-IT-Wavenet-A
            /// </summary>
            [EnumMember(Value = "it-IT-Wavenet-A")]
            ItITWavenetA = 81,
            
            /// <summary>
            /// Enum JaJPWavenetA for value: ja-JP-Wavenet-A
            /// </summary>
            [EnumMember(Value = "ja-JP-Wavenet-A")]
            JaJPWavenetA = 82,
            
            /// <summary>
            /// Enum NlNLWavenetA for value: nl-NL-Wavenet-A
            /// </summary>
            [EnumMember(Value = "nl-NL-Wavenet-A")]
            NlNLWavenetA = 83,
            
            /// <summary>
            /// Enum EnGBStandardA for value: en-GB-Standard-A
            /// </summary>
            [EnumMember(Value = "en-GB-Standard-A")]
            EnGBStandardA = 84,
            
            /// <summary>
            /// Enum EnGBStandardB for value: en-GB-Standard-B
            /// </summary>
            [EnumMember(Value = "en-GB-Standard-B")]
            EnGBStandardB = 85,
            
            /// <summary>
            /// Enum EnGBStandardC for value: en-GB-Standard-C
            /// </summary>
            [EnumMember(Value = "en-GB-Standard-C")]
            EnGBStandardC = 86,
            
            /// <summary>
            /// Enum EnGBStandardD for value: en-GB-Standard-D
            /// </summary>
            [EnumMember(Value = "en-GB-Standard-D")]
            EnGBStandardD = 87,
            
            /// <summary>
            /// Enum EnUSStandardB for value: en-US-Standard-B
            /// </summary>
            [EnumMember(Value = "en-US-Standard-B")]
            EnUSStandardB = 88,
            
            /// <summary>
            /// Enum EnUSStandardC for value: en-US-Standard-C
            /// </summary>
            [EnumMember(Value = "en-US-Standard-C")]
            EnUSStandardC = 89,
            
            /// <summary>
            /// Enum EnUSStandardD for value: en-US-Standard-D
            /// </summary>
            [EnumMember(Value = "en-US-Standard-D")]
            EnUSStandardD = 90,
            
            /// <summary>
            /// Enum EnUSStandardE for value: en-US-Standard-E
            /// </summary>
            [EnumMember(Value = "en-US-Standard-E")]
            EnUSStandardE = 91,
            
            /// <summary>
            /// Enum DeDEStandardA for value: de-DE-Standard-A
            /// </summary>
            [EnumMember(Value = "de-DE-Standard-A")]
            DeDEStandardA = 92,
            
            /// <summary>
            /// Enum DeDEStandardB for value: de-DE-Standard-B
            /// </summary>
            [EnumMember(Value = "de-DE-Standard-B")]
            DeDEStandardB = 93,
            
            /// <summary>
            /// Enum EnAUStandardA for value: en-AU-Standard-A
            /// </summary>
            [EnumMember(Value = "en-AU-Standard-A")]
            EnAUStandardA = 94,
            
            /// <summary>
            /// Enum EnAUStandardB for value: en-AU-Standard-B
            /// </summary>
            [EnumMember(Value = "en-AU-Standard-B")]
            EnAUStandardB = 95,
            
            /// <summary>
            /// Enum EnAUStandardC for value: en-AU-Standard-C
            /// </summary>
            [EnumMember(Value = "en-AU-Standard-C")]
            EnAUStandardC = 96,
            
            /// <summary>
            /// Enum EnAUStandardD for value: en-AU-Standard-D
            /// </summary>
            [EnumMember(Value = "en-AU-Standard-D")]
            EnAUStandardD = 97,
            
            /// <summary>
            /// Enum FrCAStandardA for value: fr-CA-Standard-A
            /// </summary>
            [EnumMember(Value = "fr-CA-Standard-A")]
            FrCAStandardA = 98,
            
            /// <summary>
            /// Enum FrCAStandardB for value: fr-CA-Standard-B
            /// </summary>
            [EnumMember(Value = "fr-CA-Standard-B")]
            FrCAStandardB = 99,
            
            /// <summary>
            /// Enum FrCAStandardC for value: fr-CA-Standard-C
            /// </summary>
            [EnumMember(Value = "fr-CA-Standard-C")]
            FrCAStandardC = 100,
            
            /// <summary>
            /// Enum FrCAStandardD for value: fr-CA-Standard-D
            /// </summary>
            [EnumMember(Value = "fr-CA-Standard-D")]
            FrCAStandardD = 101,
            
            /// <summary>
            /// Enum FrFRStandardA for value: fr-FR-Standard-A
            /// </summary>
            [EnumMember(Value = "fr-FR-Standard-A")]
            FrFRStandardA = 102,
            
            /// <summary>
            /// Enum FrFRStandardB for value: fr-FR-Standard-B
            /// </summary>
            [EnumMember(Value = "fr-FR-Standard-B")]
            FrFRStandardB = 103,
            
            /// <summary>
            /// Enum FrFRStandardC for value: fr-FR-Standard-C
            /// </summary>
            [EnumMember(Value = "fr-FR-Standard-C")]
            FrFRStandardC = 104,
            
            /// <summary>
            /// Enum FrFRStandardD for value: fr-FR-Standard-D
            /// </summary>
            [EnumMember(Value = "fr-FR-Standard-D")]
            FrFRStandardD = 105
        }

        /// <summary>
        /// The voice to be used during the conversion
        /// </summary>
        /// <value>The voice to be used during the conversion</value>
        [DataMember(Name="voice", EmitDefaultValue=false)]
        public VoiceEnum? Voice { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaTts" /> class.
        /// </summary>
        /// <param name="text">The text to be converted into audio.</param>
        /// <param name="voice">The voice to be used during the conversion (default to VoiceEnum.FemaleEnUS).</param>
        public MediaTts(string text = default(string), VoiceEnum? voice = VoiceEnum.FemaleEnUS)
        {
            this.Text = text;
            // use default value if no "voice" provided
            if (voice == null)
            {
                this.Voice = VoiceEnum.FemaleEnUS;
            }
            else
            {
                this.Voice = voice;
            }
        }
        
        /// <summary>
        /// The text to be converted into audio
        /// </summary>
        /// <value>The text to be converted into audio</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaTts {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Voice: ").Append(Voice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediaTts);
        }

        /// <summary>
        /// Returns true if MediaTts instances are equal
        /// </summary>
        /// <param name="input">Instance of MediaTts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaTts input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Voice == input.Voice ||
                    (this.Voice != null &&
                    this.Voice.Equals(input.Voice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Voice != null)
                    hashCode = hashCode * 59 + this.Voice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Text (string) minLength
            if(this.Text != null && this.Text.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Text, length must be greater than 1.", new [] { "Text" });
            }

            yield break;
        }
    }

}
