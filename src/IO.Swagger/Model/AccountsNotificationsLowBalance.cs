/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Low balance settings
    /// </summary>
    [DataContract]
    public partial class AccountsNotificationsLowBalance :  IEquatable<AccountsNotificationsLowBalance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsNotificationsLowBalance" /> class.
        /// </summary>
        /// <param name="enabled">should the account be checked for this alert.</param>
        /// <param name="lastNotification">Timestamp, in Gregorian seconds, of when the last low_balance alert was sent.</param>
        /// <param name="sentLowBalance">has the alert been sent (avoids duplication/spamming).</param>
        /// <param name="threshold">account balance to send alert on.</param>
        public AccountsNotificationsLowBalance(bool? enabled = default(bool?), int? lastNotification = default(int?), bool? sentLowBalance = default(bool?), decimal? threshold = default(decimal?))
        {
            this.Enabled = enabled;
            this.LastNotification = lastNotification;
            this.SentLowBalance = sentLowBalance;
            this.Threshold = threshold;
        }
        
        /// <summary>
        /// should the account be checked for this alert
        /// </summary>
        /// <value>should the account be checked for this alert</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Timestamp, in Gregorian seconds, of when the last low_balance alert was sent
        /// </summary>
        /// <value>Timestamp, in Gregorian seconds, of when the last low_balance alert was sent</value>
        [DataMember(Name="last_notification", EmitDefaultValue=false)]
        public int? LastNotification { get; set; }

        /// <summary>
        /// has the alert been sent (avoids duplication/spamming)
        /// </summary>
        /// <value>has the alert been sent (avoids duplication/spamming)</value>
        [DataMember(Name="sent_low_balance", EmitDefaultValue=false)]
        public bool? SentLowBalance { get; set; }

        /// <summary>
        /// account balance to send alert on
        /// </summary>
        /// <value>account balance to send alert on</value>
        [DataMember(Name="threshold", EmitDefaultValue=false)]
        public decimal? Threshold { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountsNotificationsLowBalance {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  LastNotification: ").Append(LastNotification).Append("\n");
            sb.Append("  SentLowBalance: ").Append(SentLowBalance).Append("\n");
            sb.Append("  Threshold: ").Append(Threshold).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountsNotificationsLowBalance);
        }

        /// <summary>
        /// Returns true if AccountsNotificationsLowBalance instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountsNotificationsLowBalance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountsNotificationsLowBalance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.LastNotification == input.LastNotification ||
                    (this.LastNotification != null &&
                    this.LastNotification.Equals(input.LastNotification))
                ) && 
                (
                    this.SentLowBalance == input.SentLowBalance ||
                    (this.SentLowBalance != null &&
                    this.SentLowBalance.Equals(input.SentLowBalance))
                ) && 
                (
                    this.Threshold == input.Threshold ||
                    (this.Threshold != null &&
                    this.Threshold.Equals(input.Threshold))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.LastNotification != null)
                    hashCode = hashCode * 59 + this.LastNotification.GetHashCode();
                if (this.SentLowBalance != null)
                    hashCode = hashCode * 59 + this.SentLowBalance.GetHashCode();
                if (this.Threshold != null)
                    hashCode = hashCode * 59 + this.Threshold.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
