/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Validator for the hotdesk callflow data object
    /// </summary>
    [DataContract]
    public partial class CallflowsHotdesk :  IEquatable<CallflowsHotdesk>, IValidatableObject
    {
        /// <summary>
        /// The action to take for hotdesking
        /// </summary>
        /// <value>The action to take for hotdesking</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            
            /// <summary>
            /// Enum Logout for value: logout
            /// </summary>
            [EnumMember(Value = "logout")]
            Logout = 1,
            
            /// <summary>
            /// Enum Login for value: login
            /// </summary>
            [EnumMember(Value = "login")]
            Login = 2,
            
            /// <summary>
            /// Enum Toggle for value: toggle
            /// </summary>
            [EnumMember(Value = "toggle")]
            Toggle = 3,
            
            /// <summary>
            /// Enum Bridge for value: bridge
            /// </summary>
            [EnumMember(Value = "bridge")]
            Bridge = 4
        }

        /// <summary>
        /// The action to take for hotdesking
        /// </summary>
        /// <value>The action to take for hotdesking</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsHotdesk" /> class.
        /// </summary>
        /// <param name="action">The action to take for hotdesking.</param>
        /// <param name="id">Hotdesk ID.</param>
        /// <param name="interdigitTimeout">How long, in seconds, to wait between keypresses.</param>
        /// <param name="skipModule">When set to true this callflow action is skipped, advancing to the wildcard branch (if any).</param>
        public CallflowsHotdesk(ActionEnum? action = default(ActionEnum?), string id = default(string), int? interdigitTimeout = default(int?), bool? skipModule = default(bool?))
        {
            this.Action = action;
            this.Id = id;
            this.InterdigitTimeout = interdigitTimeout;
            this.SkipModule = skipModule;
        }
        

        /// <summary>
        /// Hotdesk ID
        /// </summary>
        /// <value>Hotdesk ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// How long, in seconds, to wait between keypresses
        /// </summary>
        /// <value>How long, in seconds, to wait between keypresses</value>
        [DataMember(Name="interdigit_timeout", EmitDefaultValue=false)]
        public int? InterdigitTimeout { get; set; }

        /// <summary>
        /// When set to true this callflow action is skipped, advancing to the wildcard branch (if any)
        /// </summary>
        /// <value>When set to true this callflow action is skipped, advancing to the wildcard branch (if any)</value>
        [DataMember(Name="skip_module", EmitDefaultValue=false)]
        public bool? SkipModule { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallflowsHotdesk {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InterdigitTimeout: ").Append(InterdigitTimeout).Append("\n");
            sb.Append("  SkipModule: ").Append(SkipModule).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallflowsHotdesk);
        }

        /// <summary>
        /// Returns true if CallflowsHotdesk instances are equal
        /// </summary>
        /// <param name="input">Instance of CallflowsHotdesk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallflowsHotdesk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InterdigitTimeout == input.InterdigitTimeout ||
                    (this.InterdigitTimeout != null &&
                    this.InterdigitTimeout.Equals(input.InterdigitTimeout))
                ) && 
                (
                    this.SkipModule == input.SkipModule ||
                    (this.SkipModule != null &&
                    this.SkipModule.Equals(input.SkipModule))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InterdigitTimeout != null)
                    hashCode = hashCode * 59 + this.InterdigitTimeout.GetHashCode();
                if (this.SkipModule != null)
                    hashCode = hashCode * 59 + this.SkipModule.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
