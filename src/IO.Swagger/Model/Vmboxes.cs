/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for a voicemail box
    /// </summary>
    [DataContract]
    public partial class Vmboxes :  IEquatable<Vmboxes>, IValidatableObject
    {
        /// <summary>
        /// Voicemail audio format
        /// </summary>
        /// <value>Voicemail audio format</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MediaExtensionEnum
        {
            
            /// <summary>
            /// Enum Mp3 for value: mp3
            /// </summary>
            [EnumMember(Value = "mp3")]
            Mp3 = 1,
            
            /// <summary>
            /// Enum Mp4 for value: mp4
            /// </summary>
            [EnumMember(Value = "mp4")]
            Mp4 = 2,
            
            /// <summary>
            /// Enum Wav for value: wav
            /// </summary>
            [EnumMember(Value = "wav")]
            Wav = 3
        }

        /// <summary>
        /// Voicemail audio format
        /// </summary>
        /// <value>Voicemail audio format</value>
        [DataMember(Name="media_extension", EmitDefaultValue=false)]
        public MediaExtensionEnum? MediaExtension { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Vmboxes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Vmboxes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Vmboxes" /> class.
        /// </summary>
        /// <param name="checkIfOwner">Determines if when the user calls their own voicemail they should be prompted to sign in (default to true).</param>
        /// <param name="deleteAfterNotify">Move the voicemail to delete folder after the notification has been sent (default to false).</param>
        /// <param name="flags">Flags set by external applications.</param>
        /// <param name="isSetup">Determines if the user has completed the initial configuration (default to false).</param>
        /// <param name="isVoicemailFfRwEnabled">callflow allow fastforward and rewind during voicemail message playback (default to false).</param>
        /// <param name="mailbox">The voicemail box number (required).</param>
        /// <param name="media">media.</param>
        /// <param name="mediaExtension">Voicemail audio format (default to MediaExtensionEnum.Mp3).</param>
        /// <param name="name">A friendly name for the voicemail box (required).</param>
        /// <param name="notConfigurable">Determines if the user can configure this voicemail. (default to false).</param>
        /// <param name="notify">notify.</param>
        /// <param name="notifyEmailAddresses">List of email addresses to send notifications to (in addition to owner&#39;s email, if any).</param>
        /// <param name="oldestMessageFirst">Play older voicemail messages before new ones (default to false).</param>
        /// <param name="ownerId">The ID of the user object that &#39;owns&#39; the voicemail box.</param>
        /// <param name="pin">The pin number for the voicemail box.</param>
        /// <param name="requirePin">Determines if a pin is required to check the voicemail from the users devices (default to false).</param>
        /// <param name="saveAfterNotify">Move the voicemail to save folder after the notification has been sent (This setting will override delete_after_notify) (default to false).</param>
        /// <param name="seekDurationMs">callflow fastforward and rewind seek duration.</param>
        /// <param name="skipEnvelope">Determines if the envelope should be skipped (default to false).</param>
        /// <param name="skipGreeting">Determines if the greeting should be skipped (default to false).</param>
        /// <param name="skipInstructions">Determines if the instructions after the greeting and prior to composing a message should be played (default to false).</param>
        /// <param name="timezone">The default timezone.</param>
        public Vmboxes(bool? checkIfOwner = true, bool? deleteAfterNotify = false, List<string> flags = default(List<string>), bool? isSetup = false, bool? isVoicemailFfRwEnabled = false, string mailbox = default(string), VmboxesMedia media = default(VmboxesMedia), MediaExtensionEnum? mediaExtension = MediaExtensionEnum.Mp3, string name = default(string), bool? notConfigurable = false, AccountsVoicemailNotify notify = default(AccountsVoicemailNotify), List<string> notifyEmailAddresses = default(List<string>), bool? oldestMessageFirst = false, string ownerId = default(string), string pin = default(string), bool? requirePin = false, bool? saveAfterNotify = false, int? seekDurationMs = default(int?), bool? skipEnvelope = false, bool? skipGreeting = false, bool? skipInstructions = false, string timezone = default(string))
        {
            // to ensure "mailbox" is required (not null)
            if (mailbox == null)
            {
                throw new InvalidDataException("mailbox is a required property for Vmboxes and cannot be null");
            }
            else
            {
                this.Mailbox = mailbox;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Vmboxes and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // use default value if no "checkIfOwner" provided
            if (checkIfOwner == null)
            {
                this.CheckIfOwner = true;
            }
            else
            {
                this.CheckIfOwner = checkIfOwner;
            }
            // use default value if no "deleteAfterNotify" provided
            if (deleteAfterNotify == null)
            {
                this.DeleteAfterNotify = false;
            }
            else
            {
                this.DeleteAfterNotify = deleteAfterNotify;
            }
            this.Flags = flags;
            // use default value if no "isSetup" provided
            if (isSetup == null)
            {
                this.IsSetup = false;
            }
            else
            {
                this.IsSetup = isSetup;
            }
            // use default value if no "isVoicemailFfRwEnabled" provided
            if (isVoicemailFfRwEnabled == null)
            {
                this.IsVoicemailFfRwEnabled = false;
            }
            else
            {
                this.IsVoicemailFfRwEnabled = isVoicemailFfRwEnabled;
            }
            this.Media = media;
            // use default value if no "mediaExtension" provided
            if (mediaExtension == null)
            {
                this.MediaExtension = MediaExtensionEnum.Mp3;
            }
            else
            {
                this.MediaExtension = mediaExtension;
            }
            // use default value if no "notConfigurable" provided
            if (notConfigurable == null)
            {
                this.NotConfigurable = false;
            }
            else
            {
                this.NotConfigurable = notConfigurable;
            }
            this.Notify = notify;
            this.NotifyEmailAddresses = notifyEmailAddresses;
            // use default value if no "oldestMessageFirst" provided
            if (oldestMessageFirst == null)
            {
                this.OldestMessageFirst = false;
            }
            else
            {
                this.OldestMessageFirst = oldestMessageFirst;
            }
            this.OwnerId = ownerId;
            this.Pin = pin;
            // use default value if no "requirePin" provided
            if (requirePin == null)
            {
                this.RequirePin = false;
            }
            else
            {
                this.RequirePin = requirePin;
            }
            // use default value if no "saveAfterNotify" provided
            if (saveAfterNotify == null)
            {
                this.SaveAfterNotify = false;
            }
            else
            {
                this.SaveAfterNotify = saveAfterNotify;
            }
            this.SeekDurationMs = seekDurationMs;
            // use default value if no "skipEnvelope" provided
            if (skipEnvelope == null)
            {
                this.SkipEnvelope = false;
            }
            else
            {
                this.SkipEnvelope = skipEnvelope;
            }
            // use default value if no "skipGreeting" provided
            if (skipGreeting == null)
            {
                this.SkipGreeting = false;
            }
            else
            {
                this.SkipGreeting = skipGreeting;
            }
            // use default value if no "skipInstructions" provided
            if (skipInstructions == null)
            {
                this.SkipInstructions = false;
            }
            else
            {
                this.SkipInstructions = skipInstructions;
            }
            this.Timezone = timezone;
        }
        
        /// <summary>
        /// Determines if when the user calls their own voicemail they should be prompted to sign in
        /// </summary>
        /// <value>Determines if when the user calls their own voicemail they should be prompted to sign in</value>
        [DataMember(Name="check_if_owner", EmitDefaultValue=false)]
        public bool? CheckIfOwner { get; set; }

        /// <summary>
        /// Move the voicemail to delete folder after the notification has been sent
        /// </summary>
        /// <value>Move the voicemail to delete folder after the notification has been sent</value>
        [DataMember(Name="delete_after_notify", EmitDefaultValue=false)]
        public bool? DeleteAfterNotify { get; set; }

        /// <summary>
        /// Flags set by external applications
        /// </summary>
        /// <value>Flags set by external applications</value>
        [DataMember(Name="flags", EmitDefaultValue=false)]
        public List<string> Flags { get; set; }

        /// <summary>
        /// Determines if the user has completed the initial configuration
        /// </summary>
        /// <value>Determines if the user has completed the initial configuration</value>
        [DataMember(Name="is_setup", EmitDefaultValue=false)]
        public bool? IsSetup { get; set; }

        /// <summary>
        /// callflow allow fastforward and rewind during voicemail message playback
        /// </summary>
        /// <value>callflow allow fastforward and rewind during voicemail message playback</value>
        [DataMember(Name="is_voicemail_ff_rw_enabled", EmitDefaultValue=false)]
        public bool? IsVoicemailFfRwEnabled { get; set; }

        /// <summary>
        /// The voicemail box number
        /// </summary>
        /// <value>The voicemail box number</value>
        [DataMember(Name="mailbox", EmitDefaultValue=false)]
        public string Mailbox { get; set; }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name="media", EmitDefaultValue=false)]
        public VmboxesMedia Media { get; set; }


        /// <summary>
        /// A friendly name for the voicemail box
        /// </summary>
        /// <value>A friendly name for the voicemail box</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Determines if the user can configure this voicemail.
        /// </summary>
        /// <value>Determines if the user can configure this voicemail.</value>
        [DataMember(Name="not_configurable", EmitDefaultValue=false)]
        public bool? NotConfigurable { get; set; }

        /// <summary>
        /// Gets or Sets Notify
        /// </summary>
        [DataMember(Name="notify", EmitDefaultValue=false)]
        public AccountsVoicemailNotify Notify { get; set; }

        /// <summary>
        /// List of email addresses to send notifications to (in addition to owner&#39;s email, if any)
        /// </summary>
        /// <value>List of email addresses to send notifications to (in addition to owner&#39;s email, if any)</value>
        [DataMember(Name="notify_email_addresses", EmitDefaultValue=false)]
        public List<string> NotifyEmailAddresses { get; set; }

        /// <summary>
        /// Play older voicemail messages before new ones
        /// </summary>
        /// <value>Play older voicemail messages before new ones</value>
        [DataMember(Name="oldest_message_first", EmitDefaultValue=false)]
        public bool? OldestMessageFirst { get; set; }

        /// <summary>
        /// The ID of the user object that &#39;owns&#39; the voicemail box
        /// </summary>
        /// <value>The ID of the user object that &#39;owns&#39; the voicemail box</value>
        [DataMember(Name="owner_id", EmitDefaultValue=false)]
        public string OwnerId { get; set; }

        /// <summary>
        /// The pin number for the voicemail box
        /// </summary>
        /// <value>The pin number for the voicemail box</value>
        [DataMember(Name="pin", EmitDefaultValue=false)]
        public string Pin { get; set; }

        /// <summary>
        /// Determines if a pin is required to check the voicemail from the users devices
        /// </summary>
        /// <value>Determines if a pin is required to check the voicemail from the users devices</value>
        [DataMember(Name="require_pin", EmitDefaultValue=false)]
        public bool? RequirePin { get; set; }

        /// <summary>
        /// Move the voicemail to save folder after the notification has been sent (This setting will override delete_after_notify)
        /// </summary>
        /// <value>Move the voicemail to save folder after the notification has been sent (This setting will override delete_after_notify)</value>
        [DataMember(Name="save_after_notify", EmitDefaultValue=false)]
        public bool? SaveAfterNotify { get; set; }

        /// <summary>
        /// callflow fastforward and rewind seek duration
        /// </summary>
        /// <value>callflow fastforward and rewind seek duration</value>
        [DataMember(Name="seek_duration_ms", EmitDefaultValue=false)]
        public int? SeekDurationMs { get; set; }

        /// <summary>
        /// Determines if the envelope should be skipped
        /// </summary>
        /// <value>Determines if the envelope should be skipped</value>
        [DataMember(Name="skip_envelope", EmitDefaultValue=false)]
        public bool? SkipEnvelope { get; set; }

        /// <summary>
        /// Determines if the greeting should be skipped
        /// </summary>
        /// <value>Determines if the greeting should be skipped</value>
        [DataMember(Name="skip_greeting", EmitDefaultValue=false)]
        public bool? SkipGreeting { get; set; }

        /// <summary>
        /// Determines if the instructions after the greeting and prior to composing a message should be played
        /// </summary>
        /// <value>Determines if the instructions after the greeting and prior to composing a message should be played</value>
        [DataMember(Name="skip_instructions", EmitDefaultValue=false)]
        public bool? SkipInstructions { get; set; }

        /// <summary>
        /// The default timezone
        /// </summary>
        /// <value>The default timezone</value>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Vmboxes {\n");
            sb.Append("  CheckIfOwner: ").Append(CheckIfOwner).Append("\n");
            sb.Append("  DeleteAfterNotify: ").Append(DeleteAfterNotify).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  IsSetup: ").Append(IsSetup).Append("\n");
            sb.Append("  IsVoicemailFfRwEnabled: ").Append(IsVoicemailFfRwEnabled).Append("\n");
            sb.Append("  Mailbox: ").Append(Mailbox).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  MediaExtension: ").Append(MediaExtension).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NotConfigurable: ").Append(NotConfigurable).Append("\n");
            sb.Append("  Notify: ").Append(Notify).Append("\n");
            sb.Append("  NotifyEmailAddresses: ").Append(NotifyEmailAddresses).Append("\n");
            sb.Append("  OldestMessageFirst: ").Append(OldestMessageFirst).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  Pin: ").Append(Pin).Append("\n");
            sb.Append("  RequirePin: ").Append(RequirePin).Append("\n");
            sb.Append("  SaveAfterNotify: ").Append(SaveAfterNotify).Append("\n");
            sb.Append("  SeekDurationMs: ").Append(SeekDurationMs).Append("\n");
            sb.Append("  SkipEnvelope: ").Append(SkipEnvelope).Append("\n");
            sb.Append("  SkipGreeting: ").Append(SkipGreeting).Append("\n");
            sb.Append("  SkipInstructions: ").Append(SkipInstructions).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Vmboxes);
        }

        /// <summary>
        /// Returns true if Vmboxes instances are equal
        /// </summary>
        /// <param name="input">Instance of Vmboxes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Vmboxes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CheckIfOwner == input.CheckIfOwner ||
                    (this.CheckIfOwner != null &&
                    this.CheckIfOwner.Equals(input.CheckIfOwner))
                ) && 
                (
                    this.DeleteAfterNotify == input.DeleteAfterNotify ||
                    (this.DeleteAfterNotify != null &&
                    this.DeleteAfterNotify.Equals(input.DeleteAfterNotify))
                ) && 
                (
                    this.Flags == input.Flags ||
                    this.Flags != null &&
                    this.Flags.SequenceEqual(input.Flags)
                ) && 
                (
                    this.IsSetup == input.IsSetup ||
                    (this.IsSetup != null &&
                    this.IsSetup.Equals(input.IsSetup))
                ) && 
                (
                    this.IsVoicemailFfRwEnabled == input.IsVoicemailFfRwEnabled ||
                    (this.IsVoicemailFfRwEnabled != null &&
                    this.IsVoicemailFfRwEnabled.Equals(input.IsVoicemailFfRwEnabled))
                ) && 
                (
                    this.Mailbox == input.Mailbox ||
                    (this.Mailbox != null &&
                    this.Mailbox.Equals(input.Mailbox))
                ) && 
                (
                    this.Media == input.Media ||
                    (this.Media != null &&
                    this.Media.Equals(input.Media))
                ) && 
                (
                    this.MediaExtension == input.MediaExtension ||
                    (this.MediaExtension != null &&
                    this.MediaExtension.Equals(input.MediaExtension))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NotConfigurable == input.NotConfigurable ||
                    (this.NotConfigurable != null &&
                    this.NotConfigurable.Equals(input.NotConfigurable))
                ) && 
                (
                    this.Notify == input.Notify ||
                    (this.Notify != null &&
                    this.Notify.Equals(input.Notify))
                ) && 
                (
                    this.NotifyEmailAddresses == input.NotifyEmailAddresses ||
                    this.NotifyEmailAddresses != null &&
                    this.NotifyEmailAddresses.SequenceEqual(input.NotifyEmailAddresses)
                ) && 
                (
                    this.OldestMessageFirst == input.OldestMessageFirst ||
                    (this.OldestMessageFirst != null &&
                    this.OldestMessageFirst.Equals(input.OldestMessageFirst))
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                ) && 
                (
                    this.Pin == input.Pin ||
                    (this.Pin != null &&
                    this.Pin.Equals(input.Pin))
                ) && 
                (
                    this.RequirePin == input.RequirePin ||
                    (this.RequirePin != null &&
                    this.RequirePin.Equals(input.RequirePin))
                ) && 
                (
                    this.SaveAfterNotify == input.SaveAfterNotify ||
                    (this.SaveAfterNotify != null &&
                    this.SaveAfterNotify.Equals(input.SaveAfterNotify))
                ) && 
                (
                    this.SeekDurationMs == input.SeekDurationMs ||
                    (this.SeekDurationMs != null &&
                    this.SeekDurationMs.Equals(input.SeekDurationMs))
                ) && 
                (
                    this.SkipEnvelope == input.SkipEnvelope ||
                    (this.SkipEnvelope != null &&
                    this.SkipEnvelope.Equals(input.SkipEnvelope))
                ) && 
                (
                    this.SkipGreeting == input.SkipGreeting ||
                    (this.SkipGreeting != null &&
                    this.SkipGreeting.Equals(input.SkipGreeting))
                ) && 
                (
                    this.SkipInstructions == input.SkipInstructions ||
                    (this.SkipInstructions != null &&
                    this.SkipInstructions.Equals(input.SkipInstructions))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CheckIfOwner != null)
                    hashCode = hashCode * 59 + this.CheckIfOwner.GetHashCode();
                if (this.DeleteAfterNotify != null)
                    hashCode = hashCode * 59 + this.DeleteAfterNotify.GetHashCode();
                if (this.Flags != null)
                    hashCode = hashCode * 59 + this.Flags.GetHashCode();
                if (this.IsSetup != null)
                    hashCode = hashCode * 59 + this.IsSetup.GetHashCode();
                if (this.IsVoicemailFfRwEnabled != null)
                    hashCode = hashCode * 59 + this.IsVoicemailFfRwEnabled.GetHashCode();
                if (this.Mailbox != null)
                    hashCode = hashCode * 59 + this.Mailbox.GetHashCode();
                if (this.Media != null)
                    hashCode = hashCode * 59 + this.Media.GetHashCode();
                if (this.MediaExtension != null)
                    hashCode = hashCode * 59 + this.MediaExtension.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NotConfigurable != null)
                    hashCode = hashCode * 59 + this.NotConfigurable.GetHashCode();
                if (this.Notify != null)
                    hashCode = hashCode * 59 + this.Notify.GetHashCode();
                if (this.NotifyEmailAddresses != null)
                    hashCode = hashCode * 59 + this.NotifyEmailAddresses.GetHashCode();
                if (this.OldestMessageFirst != null)
                    hashCode = hashCode * 59 + this.OldestMessageFirst.GetHashCode();
                if (this.OwnerId != null)
                    hashCode = hashCode * 59 + this.OwnerId.GetHashCode();
                if (this.Pin != null)
                    hashCode = hashCode * 59 + this.Pin.GetHashCode();
                if (this.RequirePin != null)
                    hashCode = hashCode * 59 + this.RequirePin.GetHashCode();
                if (this.SaveAfterNotify != null)
                    hashCode = hashCode * 59 + this.SaveAfterNotify.GetHashCode();
                if (this.SeekDurationMs != null)
                    hashCode = hashCode * 59 + this.SeekDurationMs.GetHashCode();
                if (this.SkipEnvelope != null)
                    hashCode = hashCode * 59 + this.SkipEnvelope.GetHashCode();
                if (this.SkipGreeting != null)
                    hashCode = hashCode * 59 + this.SkipGreeting.GetHashCode();
                if (this.SkipInstructions != null)
                    hashCode = hashCode * 59 + this.SkipInstructions.GetHashCode();
                if (this.Timezone != null)
                    hashCode = hashCode * 59 + this.Timezone.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Mailbox (string) maxLength
            if(this.Mailbox != null && this.Mailbox.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Mailbox, length must be less than 30.", new [] { "Mailbox" });
            }

            // Mailbox (string) minLength
            if(this.Mailbox != null && this.Mailbox.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Mailbox, length must be greater than 1.", new [] { "Mailbox" });
            }

            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // OwnerId (string) maxLength
            if(this.OwnerId != null && this.OwnerId.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OwnerId, length must be less than 32.", new [] { "OwnerId" });
            }

            // OwnerId (string) minLength
            if(this.OwnerId != null && this.OwnerId.Length < 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OwnerId, length must be greater than 32.", new [] { "OwnerId" });
            }

            // Pin (string) maxLength
            if(this.Pin != null && this.Pin.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Pin, length must be less than 6.", new [] { "Pin" });
            }

            // Pin (string) minLength
            if(this.Pin != null && this.Pin.Length < 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Pin, length must be greater than 4.", new [] { "Pin" });
            }

            // SeekDurationMs (int?) minimum
            if(this.SeekDurationMs < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SeekDurationMs, must be a value greater than or equal to 0.", new [] { "SeekDurationMs" });
            }

            // Timezone (string) maxLength
            if(this.Timezone != null && this.Timezone.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Timezone, length must be less than 32.", new [] { "Timezone" });
            }

            // Timezone (string) minLength
            if(this.Timezone != null && this.Timezone.Length < 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Timezone, length must be greater than 5.", new [] { "Timezone" });
            }

            yield break;
        }
    }

}
