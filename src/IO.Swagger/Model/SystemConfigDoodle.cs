/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for doodle system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigDoodle :  IEquatable<SystemConfigDoodle>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigDoodle" /> class.
        /// </summary>
        /// <param name="apiPreserveCallerId">doodle.api preserve caller id (default to true).</param>
        /// <param name="connections">doodle connections.</param>
        /// <param name="defaultTestFromNumber">doodle default test from number (default to &quot;15552220001&quot;).</param>
        /// <param name="defaultTestRouteId">doodle default test route id (default to &quot;syneverse&quot;).</param>
        /// <param name="inboundBroker">doodle inbound broker.</param>
        /// <param name="inboundExchange">doodle inbound exchange (default to &quot;sms&quot;).</param>
        /// <param name="inboundExchangeOptions">doodle inbound exchange options.</param>
        /// <param name="inboundExchangeType">doodle inbound exchange type (default to &quot;topic&quot;).</param>
        /// <param name="inboundQueueName">doodle inbound queue name.</param>
        /// <param name="minBucketCost">doodle minimum bucket cost.</param>
        /// <param name="reschedule">doodle reschedule.</param>
        /// <param name="routeWinTimeout">doodle route win timeout.</param>
        /// <param name="unavailableMessage">doodle unavailable message.</param>
        public SystemConfigDoodle(bool? apiPreserveCallerId = true, Object connections = default(Object), string defaultTestFromNumber = "15552220001", string defaultTestRouteId = "syneverse", string inboundBroker = default(string), string inboundExchange = "sms", Object inboundExchangeOptions = default(Object), string inboundExchangeType = "topic", string inboundQueueName = default(string), int? minBucketCost = default(int?), Object reschedule = default(Object), int? routeWinTimeout = default(int?), Object unavailableMessage = default(Object))
        {
            // use default value if no "apiPreserveCallerId" provided
            if (apiPreserveCallerId == null)
            {
                this.ApiPreserveCallerId = true;
            }
            else
            {
                this.ApiPreserveCallerId = apiPreserveCallerId;
            }
            this.Connections = connections;
            // use default value if no "defaultTestFromNumber" provided
            if (defaultTestFromNumber == null)
            {
                this.DefaultTestFromNumber = "15552220001";
            }
            else
            {
                this.DefaultTestFromNumber = defaultTestFromNumber;
            }
            // use default value if no "defaultTestRouteId" provided
            if (defaultTestRouteId == null)
            {
                this.DefaultTestRouteId = "syneverse";
            }
            else
            {
                this.DefaultTestRouteId = defaultTestRouteId;
            }
            this.InboundBroker = inboundBroker;
            // use default value if no "inboundExchange" provided
            if (inboundExchange == null)
            {
                this.InboundExchange = "sms";
            }
            else
            {
                this.InboundExchange = inboundExchange;
            }
            this.InboundExchangeOptions = inboundExchangeOptions;
            // use default value if no "inboundExchangeType" provided
            if (inboundExchangeType == null)
            {
                this.InboundExchangeType = "topic";
            }
            else
            {
                this.InboundExchangeType = inboundExchangeType;
            }
            this.InboundQueueName = inboundQueueName;
            this.MinBucketCost = minBucketCost;
            this.Reschedule = reschedule;
            this.RouteWinTimeout = routeWinTimeout;
            this.UnavailableMessage = unavailableMessage;
        }
        
        /// <summary>
        /// doodle.api preserve caller id
        /// </summary>
        /// <value>doodle.api preserve caller id</value>
        [DataMember(Name="api_preserve_caller_id", EmitDefaultValue=false)]
        public bool? ApiPreserveCallerId { get; set; }

        /// <summary>
        /// doodle connections
        /// </summary>
        /// <value>doodle connections</value>
        [DataMember(Name="connections", EmitDefaultValue=false)]
        public Object Connections { get; set; }

        /// <summary>
        /// doodle default test from number
        /// </summary>
        /// <value>doodle default test from number</value>
        [DataMember(Name="default_test_from_number", EmitDefaultValue=false)]
        public string DefaultTestFromNumber { get; set; }

        /// <summary>
        /// doodle default test route id
        /// </summary>
        /// <value>doodle default test route id</value>
        [DataMember(Name="default_test_route_id", EmitDefaultValue=false)]
        public string DefaultTestRouteId { get; set; }

        /// <summary>
        /// doodle inbound broker
        /// </summary>
        /// <value>doodle inbound broker</value>
        [DataMember(Name="inbound_broker", EmitDefaultValue=false)]
        public string InboundBroker { get; set; }

        /// <summary>
        /// doodle inbound exchange
        /// </summary>
        /// <value>doodle inbound exchange</value>
        [DataMember(Name="inbound_exchange", EmitDefaultValue=false)]
        public string InboundExchange { get; set; }

        /// <summary>
        /// doodle inbound exchange options
        /// </summary>
        /// <value>doodle inbound exchange options</value>
        [DataMember(Name="inbound_exchange_options", EmitDefaultValue=false)]
        public Object InboundExchangeOptions { get; set; }

        /// <summary>
        /// doodle inbound exchange type
        /// </summary>
        /// <value>doodle inbound exchange type</value>
        [DataMember(Name="inbound_exchange_type", EmitDefaultValue=false)]
        public string InboundExchangeType { get; set; }

        /// <summary>
        /// doodle inbound queue name
        /// </summary>
        /// <value>doodle inbound queue name</value>
        [DataMember(Name="inbound_queue_name", EmitDefaultValue=false)]
        public string InboundQueueName { get; set; }

        /// <summary>
        /// doodle minimum bucket cost
        /// </summary>
        /// <value>doodle minimum bucket cost</value>
        [DataMember(Name="min_bucket_cost", EmitDefaultValue=false)]
        public int? MinBucketCost { get; set; }

        /// <summary>
        /// doodle reschedule
        /// </summary>
        /// <value>doodle reschedule</value>
        [DataMember(Name="reschedule", EmitDefaultValue=false)]
        public Object Reschedule { get; set; }

        /// <summary>
        /// doodle route win timeout
        /// </summary>
        /// <value>doodle route win timeout</value>
        [DataMember(Name="route_win_timeout", EmitDefaultValue=false)]
        public int? RouteWinTimeout { get; set; }

        /// <summary>
        /// doodle unavailable message
        /// </summary>
        /// <value>doodle unavailable message</value>
        [DataMember(Name="unavailable_message", EmitDefaultValue=false)]
        public Object UnavailableMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigDoodle {\n");
            sb.Append("  ApiPreserveCallerId: ").Append(ApiPreserveCallerId).Append("\n");
            sb.Append("  Connections: ").Append(Connections).Append("\n");
            sb.Append("  DefaultTestFromNumber: ").Append(DefaultTestFromNumber).Append("\n");
            sb.Append("  DefaultTestRouteId: ").Append(DefaultTestRouteId).Append("\n");
            sb.Append("  InboundBroker: ").Append(InboundBroker).Append("\n");
            sb.Append("  InboundExchange: ").Append(InboundExchange).Append("\n");
            sb.Append("  InboundExchangeOptions: ").Append(InboundExchangeOptions).Append("\n");
            sb.Append("  InboundExchangeType: ").Append(InboundExchangeType).Append("\n");
            sb.Append("  InboundQueueName: ").Append(InboundQueueName).Append("\n");
            sb.Append("  MinBucketCost: ").Append(MinBucketCost).Append("\n");
            sb.Append("  Reschedule: ").Append(Reschedule).Append("\n");
            sb.Append("  RouteWinTimeout: ").Append(RouteWinTimeout).Append("\n");
            sb.Append("  UnavailableMessage: ").Append(UnavailableMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigDoodle);
        }

        /// <summary>
        /// Returns true if SystemConfigDoodle instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigDoodle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigDoodle input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApiPreserveCallerId == input.ApiPreserveCallerId ||
                    (this.ApiPreserveCallerId != null &&
                    this.ApiPreserveCallerId.Equals(input.ApiPreserveCallerId))
                ) && 
                (
                    this.Connections == input.Connections ||
                    (this.Connections != null &&
                    this.Connections.Equals(input.Connections))
                ) && 
                (
                    this.DefaultTestFromNumber == input.DefaultTestFromNumber ||
                    (this.DefaultTestFromNumber != null &&
                    this.DefaultTestFromNumber.Equals(input.DefaultTestFromNumber))
                ) && 
                (
                    this.DefaultTestRouteId == input.DefaultTestRouteId ||
                    (this.DefaultTestRouteId != null &&
                    this.DefaultTestRouteId.Equals(input.DefaultTestRouteId))
                ) && 
                (
                    this.InboundBroker == input.InboundBroker ||
                    (this.InboundBroker != null &&
                    this.InboundBroker.Equals(input.InboundBroker))
                ) && 
                (
                    this.InboundExchange == input.InboundExchange ||
                    (this.InboundExchange != null &&
                    this.InboundExchange.Equals(input.InboundExchange))
                ) && 
                (
                    this.InboundExchangeOptions == input.InboundExchangeOptions ||
                    (this.InboundExchangeOptions != null &&
                    this.InboundExchangeOptions.Equals(input.InboundExchangeOptions))
                ) && 
                (
                    this.InboundExchangeType == input.InboundExchangeType ||
                    (this.InboundExchangeType != null &&
                    this.InboundExchangeType.Equals(input.InboundExchangeType))
                ) && 
                (
                    this.InboundQueueName == input.InboundQueueName ||
                    (this.InboundQueueName != null &&
                    this.InboundQueueName.Equals(input.InboundQueueName))
                ) && 
                (
                    this.MinBucketCost == input.MinBucketCost ||
                    (this.MinBucketCost != null &&
                    this.MinBucketCost.Equals(input.MinBucketCost))
                ) && 
                (
                    this.Reschedule == input.Reschedule ||
                    (this.Reschedule != null &&
                    this.Reschedule.Equals(input.Reschedule))
                ) && 
                (
                    this.RouteWinTimeout == input.RouteWinTimeout ||
                    (this.RouteWinTimeout != null &&
                    this.RouteWinTimeout.Equals(input.RouteWinTimeout))
                ) && 
                (
                    this.UnavailableMessage == input.UnavailableMessage ||
                    (this.UnavailableMessage != null &&
                    this.UnavailableMessage.Equals(input.UnavailableMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiPreserveCallerId != null)
                    hashCode = hashCode * 59 + this.ApiPreserveCallerId.GetHashCode();
                if (this.Connections != null)
                    hashCode = hashCode * 59 + this.Connections.GetHashCode();
                if (this.DefaultTestFromNumber != null)
                    hashCode = hashCode * 59 + this.DefaultTestFromNumber.GetHashCode();
                if (this.DefaultTestRouteId != null)
                    hashCode = hashCode * 59 + this.DefaultTestRouteId.GetHashCode();
                if (this.InboundBroker != null)
                    hashCode = hashCode * 59 + this.InboundBroker.GetHashCode();
                if (this.InboundExchange != null)
                    hashCode = hashCode * 59 + this.InboundExchange.GetHashCode();
                if (this.InboundExchangeOptions != null)
                    hashCode = hashCode * 59 + this.InboundExchangeOptions.GetHashCode();
                if (this.InboundExchangeType != null)
                    hashCode = hashCode * 59 + this.InboundExchangeType.GetHashCode();
                if (this.InboundQueueName != null)
                    hashCode = hashCode * 59 + this.InboundQueueName.GetHashCode();
                if (this.MinBucketCost != null)
                    hashCode = hashCode * 59 + this.MinBucketCost.GetHashCode();
                if (this.Reschedule != null)
                    hashCode = hashCode * 59 + this.Reschedule.GetHashCode();
                if (this.RouteWinTimeout != null)
                    hashCode = hashCode * 59 + this.RouteWinTimeout.GetHashCode();
                if (this.UnavailableMessage != null)
                    hashCode = hashCode * 59 + this.UnavailableMessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
