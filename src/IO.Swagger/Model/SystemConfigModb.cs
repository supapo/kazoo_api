/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for modb system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigModb :  IEquatable<SystemConfigModb>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigModb" /> class.
        /// </summary>
        /// <param name="activeModbs">modb active modbs.</param>
        /// <param name="routines">modb routines.</param>
        public SystemConfigModb(int? activeModbs = default(int?), List<string> routines = default(List<string>))
        {
            this.ActiveModbs = activeModbs;
            this.Routines = routines;
        }
        
        /// <summary>
        /// modb active modbs
        /// </summary>
        /// <value>modb active modbs</value>
        [DataMember(Name="active_modbs", EmitDefaultValue=false)]
        public int? ActiveModbs { get; set; }

        /// <summary>
        /// modb routines
        /// </summary>
        /// <value>modb routines</value>
        [DataMember(Name="routines", EmitDefaultValue=false)]
        public List<string> Routines { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigModb {\n");
            sb.Append("  ActiveModbs: ").Append(ActiveModbs).Append("\n");
            sb.Append("  Routines: ").Append(Routines).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigModb);
        }

        /// <summary>
        /// Returns true if SystemConfigModb instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigModb to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigModb input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActiveModbs == input.ActiveModbs ||
                    (this.ActiveModbs != null &&
                    this.ActiveModbs.Equals(input.ActiveModbs))
                ) && 
                (
                    this.Routines == input.Routines ||
                    this.Routines != null &&
                    this.Routines.SequenceEqual(input.Routines)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActiveModbs != null)
                    hashCode = hashCode * 59 + this.ActiveModbs.GetHashCode();
                if (this.Routines != null)
                    hashCode = hashCode * 59 + this.Routines.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
