/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for stepswitch.cnam system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigStepswitchCnam :  IEquatable<SystemConfigStepswitchCnam>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigStepswitchCnam" /> class.
        /// </summary>
        /// <param name="cnamExpires">stepswitch.cnam cnam expires.</param>
        /// <param name="disableNormalize">stepswitch.cnam disable normalize (default to false).</param>
        /// <param name="httpAcceptHeader">stepswitch.cnam http accept header (default to &quot;text/pbx,text/html,application/xhtml+xml,application/xml;q&#x3D;0.9,*/*;q&#x3D;0.8&quot;).</param>
        /// <param name="httpBasicAuthPassword">stepswitch.cnam http basic auth password (default to &quot;&quot;).</param>
        /// <param name="httpBasicAuthUsername">stepswitch.cnam http basic auth username (default to &quot;&quot;).</param>
        /// <param name="httpBody">stepswitch.cnam http body (default to &quot;&quot;).</param>
        /// <param name="httpConnectTimeoutMs">stepswitch.cnam http connect timeout in milliseconds.</param>
        /// <param name="httpContentTypeHeader">stepswitch.cnam http content type header (default to &quot;application/json&quot;).</param>
        /// <param name="httpMethod">stepswitch.cnam http method (default to &quot;get&quot;).</param>
        /// <param name="httpTokenAuthToken">stepswitch cnam http_token_auth_token (default to &quot;&quot;).</param>
        /// <param name="httpUrl">stepswitch.cnam http url (default to &quot;https://api.opencnam.com/v2/phone/{{phone_number}}&quot;).</param>
        /// <param name="httpUserAgentHeader">stepswitch.cnam http user agent header (default to &quot;Kazoo Stepswitch CNAM&quot;).</param>
        public SystemConfigStepswitchCnam(int? cnamExpires = default(int?), bool? disableNormalize = false, string httpAcceptHeader = "text/pbx,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8", string httpBasicAuthPassword = "", string httpBasicAuthUsername = "", string httpBody = "", int? httpConnectTimeoutMs = default(int?), string httpContentTypeHeader = "application/json", string httpMethod = "get", string httpTokenAuthToken = "", string httpUrl = "https://api.opencnam.com/v2/phone/{{phone_number}}", string httpUserAgentHeader = "Kazoo Stepswitch CNAM")
        {
            this.CnamExpires = cnamExpires;
            // use default value if no "disableNormalize" provided
            if (disableNormalize == null)
            {
                this.DisableNormalize = false;
            }
            else
            {
                this.DisableNormalize = disableNormalize;
            }
            // use default value if no "httpAcceptHeader" provided
            if (httpAcceptHeader == null)
            {
                this.HttpAcceptHeader = "text/pbx,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";
            }
            else
            {
                this.HttpAcceptHeader = httpAcceptHeader;
            }
            // use default value if no "httpBasicAuthPassword" provided
            if (httpBasicAuthPassword == null)
            {
                this.HttpBasicAuthPassword = "";
            }
            else
            {
                this.HttpBasicAuthPassword = httpBasicAuthPassword;
            }
            // use default value if no "httpBasicAuthUsername" provided
            if (httpBasicAuthUsername == null)
            {
                this.HttpBasicAuthUsername = "";
            }
            else
            {
                this.HttpBasicAuthUsername = httpBasicAuthUsername;
            }
            // use default value if no "httpBody" provided
            if (httpBody == null)
            {
                this.HttpBody = "";
            }
            else
            {
                this.HttpBody = httpBody;
            }
            this.HttpConnectTimeoutMs = httpConnectTimeoutMs;
            // use default value if no "httpContentTypeHeader" provided
            if (httpContentTypeHeader == null)
            {
                this.HttpContentTypeHeader = "application/json";
            }
            else
            {
                this.HttpContentTypeHeader = httpContentTypeHeader;
            }
            // use default value if no "httpMethod" provided
            if (httpMethod == null)
            {
                this.HttpMethod = "get";
            }
            else
            {
                this.HttpMethod = httpMethod;
            }
            // use default value if no "httpTokenAuthToken" provided
            if (httpTokenAuthToken == null)
            {
                this.HttpTokenAuthToken = "";
            }
            else
            {
                this.HttpTokenAuthToken = httpTokenAuthToken;
            }
            // use default value if no "httpUrl" provided
            if (httpUrl == null)
            {
                this.HttpUrl = "https://api.opencnam.com/v2/phone/{{phone_number}}";
            }
            else
            {
                this.HttpUrl = httpUrl;
            }
            // use default value if no "httpUserAgentHeader" provided
            if (httpUserAgentHeader == null)
            {
                this.HttpUserAgentHeader = "Kazoo Stepswitch CNAM";
            }
            else
            {
                this.HttpUserAgentHeader = httpUserAgentHeader;
            }
        }
        
        /// <summary>
        /// stepswitch.cnam cnam expires
        /// </summary>
        /// <value>stepswitch.cnam cnam expires</value>
        [DataMember(Name="cnam_expires", EmitDefaultValue=false)]
        public int? CnamExpires { get; set; }

        /// <summary>
        /// stepswitch.cnam disable normalize
        /// </summary>
        /// <value>stepswitch.cnam disable normalize</value>
        [DataMember(Name="disable_normalize", EmitDefaultValue=false)]
        public bool? DisableNormalize { get; set; }

        /// <summary>
        /// stepswitch.cnam http accept header
        /// </summary>
        /// <value>stepswitch.cnam http accept header</value>
        [DataMember(Name="http_accept_header", EmitDefaultValue=false)]
        public string HttpAcceptHeader { get; set; }

        /// <summary>
        /// stepswitch.cnam http basic auth password
        /// </summary>
        /// <value>stepswitch.cnam http basic auth password</value>
        [DataMember(Name="http_basic_auth_password", EmitDefaultValue=false)]
        public string HttpBasicAuthPassword { get; set; }

        /// <summary>
        /// stepswitch.cnam http basic auth username
        /// </summary>
        /// <value>stepswitch.cnam http basic auth username</value>
        [DataMember(Name="http_basic_auth_username", EmitDefaultValue=false)]
        public string HttpBasicAuthUsername { get; set; }

        /// <summary>
        /// stepswitch.cnam http body
        /// </summary>
        /// <value>stepswitch.cnam http body</value>
        [DataMember(Name="http_body", EmitDefaultValue=false)]
        public string HttpBody { get; set; }

        /// <summary>
        /// stepswitch.cnam http connect timeout in milliseconds
        /// </summary>
        /// <value>stepswitch.cnam http connect timeout in milliseconds</value>
        [DataMember(Name="http_connect_timeout_ms", EmitDefaultValue=false)]
        public int? HttpConnectTimeoutMs { get; set; }

        /// <summary>
        /// stepswitch.cnam http content type header
        /// </summary>
        /// <value>stepswitch.cnam http content type header</value>
        [DataMember(Name="http_content_type_header", EmitDefaultValue=false)]
        public string HttpContentTypeHeader { get; set; }

        /// <summary>
        /// stepswitch.cnam http method
        /// </summary>
        /// <value>stepswitch.cnam http method</value>
        [DataMember(Name="http_method", EmitDefaultValue=false)]
        public string HttpMethod { get; set; }

        /// <summary>
        /// stepswitch cnam http_token_auth_token
        /// </summary>
        /// <value>stepswitch cnam http_token_auth_token</value>
        [DataMember(Name="http_token_auth_token", EmitDefaultValue=false)]
        public string HttpTokenAuthToken { get; set; }

        /// <summary>
        /// stepswitch.cnam http url
        /// </summary>
        /// <value>stepswitch.cnam http url</value>
        [DataMember(Name="http_url", EmitDefaultValue=false)]
        public string HttpUrl { get; set; }

        /// <summary>
        /// stepswitch.cnam http user agent header
        /// </summary>
        /// <value>stepswitch.cnam http user agent header</value>
        [DataMember(Name="http_user_agent_header", EmitDefaultValue=false)]
        public string HttpUserAgentHeader { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigStepswitchCnam {\n");
            sb.Append("  CnamExpires: ").Append(CnamExpires).Append("\n");
            sb.Append("  DisableNormalize: ").Append(DisableNormalize).Append("\n");
            sb.Append("  HttpAcceptHeader: ").Append(HttpAcceptHeader).Append("\n");
            sb.Append("  HttpBasicAuthPassword: ").Append(HttpBasicAuthPassword).Append("\n");
            sb.Append("  HttpBasicAuthUsername: ").Append(HttpBasicAuthUsername).Append("\n");
            sb.Append("  HttpBody: ").Append(HttpBody).Append("\n");
            sb.Append("  HttpConnectTimeoutMs: ").Append(HttpConnectTimeoutMs).Append("\n");
            sb.Append("  HttpContentTypeHeader: ").Append(HttpContentTypeHeader).Append("\n");
            sb.Append("  HttpMethod: ").Append(HttpMethod).Append("\n");
            sb.Append("  HttpTokenAuthToken: ").Append(HttpTokenAuthToken).Append("\n");
            sb.Append("  HttpUrl: ").Append(HttpUrl).Append("\n");
            sb.Append("  HttpUserAgentHeader: ").Append(HttpUserAgentHeader).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigStepswitchCnam);
        }

        /// <summary>
        /// Returns true if SystemConfigStepswitchCnam instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigStepswitchCnam to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigStepswitchCnam input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CnamExpires == input.CnamExpires ||
                    (this.CnamExpires != null &&
                    this.CnamExpires.Equals(input.CnamExpires))
                ) && 
                (
                    this.DisableNormalize == input.DisableNormalize ||
                    (this.DisableNormalize != null &&
                    this.DisableNormalize.Equals(input.DisableNormalize))
                ) && 
                (
                    this.HttpAcceptHeader == input.HttpAcceptHeader ||
                    (this.HttpAcceptHeader != null &&
                    this.HttpAcceptHeader.Equals(input.HttpAcceptHeader))
                ) && 
                (
                    this.HttpBasicAuthPassword == input.HttpBasicAuthPassword ||
                    (this.HttpBasicAuthPassword != null &&
                    this.HttpBasicAuthPassword.Equals(input.HttpBasicAuthPassword))
                ) && 
                (
                    this.HttpBasicAuthUsername == input.HttpBasicAuthUsername ||
                    (this.HttpBasicAuthUsername != null &&
                    this.HttpBasicAuthUsername.Equals(input.HttpBasicAuthUsername))
                ) && 
                (
                    this.HttpBody == input.HttpBody ||
                    (this.HttpBody != null &&
                    this.HttpBody.Equals(input.HttpBody))
                ) && 
                (
                    this.HttpConnectTimeoutMs == input.HttpConnectTimeoutMs ||
                    (this.HttpConnectTimeoutMs != null &&
                    this.HttpConnectTimeoutMs.Equals(input.HttpConnectTimeoutMs))
                ) && 
                (
                    this.HttpContentTypeHeader == input.HttpContentTypeHeader ||
                    (this.HttpContentTypeHeader != null &&
                    this.HttpContentTypeHeader.Equals(input.HttpContentTypeHeader))
                ) && 
                (
                    this.HttpMethod == input.HttpMethod ||
                    (this.HttpMethod != null &&
                    this.HttpMethod.Equals(input.HttpMethod))
                ) && 
                (
                    this.HttpTokenAuthToken == input.HttpTokenAuthToken ||
                    (this.HttpTokenAuthToken != null &&
                    this.HttpTokenAuthToken.Equals(input.HttpTokenAuthToken))
                ) && 
                (
                    this.HttpUrl == input.HttpUrl ||
                    (this.HttpUrl != null &&
                    this.HttpUrl.Equals(input.HttpUrl))
                ) && 
                (
                    this.HttpUserAgentHeader == input.HttpUserAgentHeader ||
                    (this.HttpUserAgentHeader != null &&
                    this.HttpUserAgentHeader.Equals(input.HttpUserAgentHeader))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CnamExpires != null)
                    hashCode = hashCode * 59 + this.CnamExpires.GetHashCode();
                if (this.DisableNormalize != null)
                    hashCode = hashCode * 59 + this.DisableNormalize.GetHashCode();
                if (this.HttpAcceptHeader != null)
                    hashCode = hashCode * 59 + this.HttpAcceptHeader.GetHashCode();
                if (this.HttpBasicAuthPassword != null)
                    hashCode = hashCode * 59 + this.HttpBasicAuthPassword.GetHashCode();
                if (this.HttpBasicAuthUsername != null)
                    hashCode = hashCode * 59 + this.HttpBasicAuthUsername.GetHashCode();
                if (this.HttpBody != null)
                    hashCode = hashCode * 59 + this.HttpBody.GetHashCode();
                if (this.HttpConnectTimeoutMs != null)
                    hashCode = hashCode * 59 + this.HttpConnectTimeoutMs.GetHashCode();
                if (this.HttpContentTypeHeader != null)
                    hashCode = hashCode * 59 + this.HttpContentTypeHeader.GetHashCode();
                if (this.HttpMethod != null)
                    hashCode = hashCode * 59 + this.HttpMethod.GetHashCode();
                if (this.HttpTokenAuthToken != null)
                    hashCode = hashCode * 59 + this.HttpTokenAuthToken.GetHashCode();
                if (this.HttpUrl != null)
                    hashCode = hashCode * 59 + this.HttpUrl.GetHashCode();
                if (this.HttpUserAgentHeader != null)
                    hashCode = hashCode * 59 + this.HttpUserAgentHeader.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
