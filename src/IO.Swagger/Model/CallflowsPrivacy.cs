/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Validator for the privacy callflow data object
    /// </summary>
    [DataContract]
    public partial class CallflowsPrivacy :  IEquatable<CallflowsPrivacy>, IValidatableObject
    {
        /// <summary>
        /// whether cf_privacy should overwrite or merge with the caller_id_options of the endpoint.
        /// </summary>
        /// <value>whether cf_privacy should overwrite or merge with the caller_id_options of the endpoint.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EndpointStrategyEnum
        {
            
            /// <summary>
            /// Enum Overwrite for value: overwrite
            /// </summary>
            [EnumMember(Value = "overwrite")]
            Overwrite = 1,
            
            /// <summary>
            /// Enum Merge for value: merge
            /// </summary>
            [EnumMember(Value = "merge")]
            Merge = 2
        }

        /// <summary>
        /// whether cf_privacy should overwrite or merge with the caller_id_options of the endpoint.
        /// </summary>
        /// <value>whether cf_privacy should overwrite or merge with the caller_id_options of the endpoint.</value>
        [DataMember(Name="endpoint_strategy", EmitDefaultValue=false)]
        public EndpointStrategyEnum? EndpointStrategy { get; set; }
        /// <summary>
        /// set caller privacy on calls, restricting the presentation some or full parts of Caller ID
        /// </summary>
        /// <value>set caller privacy on calls, restricting the presentation some or full parts of Caller ID</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            
            /// <summary>
            /// Enum Full for value: full
            /// </summary>
            [EnumMember(Value = "full")]
            Full = 1,
            
            /// <summary>
            /// Enum Name for value: name
            /// </summary>
            [EnumMember(Value = "name")]
            Name = 2,
            
            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 3,
            
            /// <summary>
            /// Enum Yes for value: yes
            /// </summary>
            [EnumMember(Value = "yes")]
            Yes = 4
        }

        /// <summary>
        /// set caller privacy on calls, restricting the presentation some or full parts of Caller ID
        /// </summary>
        /// <value>set caller privacy on calls, restricting the presentation some or full parts of Caller ID</value>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public ModeEnum? Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsPrivacy" /> class.
        /// </summary>
        /// <param name="endpointStrategy">whether cf_privacy should overwrite or merge with the caller_id_options of the endpoint. (default to EndpointStrategyEnum.Overwrite).</param>
        /// <param name="mode">set caller privacy on calls, restricting the presentation some or full parts of Caller ID (default to ModeEnum.Full).</param>
        /// <param name="skipModule">When set to true this callflow action is skipped, advancing to the wildcard branch (if any).</param>
        public CallflowsPrivacy(EndpointStrategyEnum? endpointStrategy = EndpointStrategyEnum.Overwrite, ModeEnum? mode = ModeEnum.Full, bool? skipModule = default(bool?))
        {
            // use default value if no "endpointStrategy" provided
            if (endpointStrategy == null)
            {
                this.EndpointStrategy = EndpointStrategyEnum.Overwrite;
            }
            else
            {
                this.EndpointStrategy = endpointStrategy;
            }
            // use default value if no "mode" provided
            if (mode == null)
            {
                this.Mode = ModeEnum.Full;
            }
            else
            {
                this.Mode = mode;
            }
            this.SkipModule = skipModule;
        }
        


        /// <summary>
        /// When set to true this callflow action is skipped, advancing to the wildcard branch (if any)
        /// </summary>
        /// <value>When set to true this callflow action is skipped, advancing to the wildcard branch (if any)</value>
        [DataMember(Name="skip_module", EmitDefaultValue=false)]
        public bool? SkipModule { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallflowsPrivacy {\n");
            sb.Append("  EndpointStrategy: ").Append(EndpointStrategy).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  SkipModule: ").Append(SkipModule).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallflowsPrivacy);
        }

        /// <summary>
        /// Returns true if CallflowsPrivacy instances are equal
        /// </summary>
        /// <param name="input">Instance of CallflowsPrivacy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallflowsPrivacy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EndpointStrategy == input.EndpointStrategy ||
                    (this.EndpointStrategy != null &&
                    this.EndpointStrategy.Equals(input.EndpointStrategy))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.SkipModule == input.SkipModule ||
                    (this.SkipModule != null &&
                    this.SkipModule.Equals(input.SkipModule))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndpointStrategy != null)
                    hashCode = hashCode * 59 + this.EndpointStrategy.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.SkipModule != null)
                    hashCode = hashCode * 59 + this.SkipModule.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
