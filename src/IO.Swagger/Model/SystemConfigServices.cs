/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for services system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigServices :  IEquatable<SystemConfigServices>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigServices" /> class.
        /// </summary>
        /// <param name="cascadeCommitsToMasterAccount">services cascade_commits_to_master_account (default to true).</param>
        /// <param name="debugServicesQuantities">services debug_services_quantities (default to false).</param>
        /// <param name="defaultAllowUpdates">services default allow updates (default to true).</param>
        /// <param name="enforceGoodStanding">services enforce_good_standing (default to false).</param>
        /// <param name="getItemsFromQuantities">services get_items_from_quantities.</param>
        /// <param name="hydrateCascadeCommits">When an account makes a change it triggers a propagation up the account hiearchy updating the cascade quantities, if this is set to false the cascade quantities are summed with the account update deltas.  If this is set to true then the views will be invoked to fully reconcile the quantities (hydrate) during the cascade commits, a more expensive DB operation but provides self-corrective quantities. (default to true).</param>
        /// <param name="masterAccountBookkeeper">services master account bookkeeper (default to &quot;kz_bookkeeper_local&quot;).</param>
        /// <param name="mergeStrategyPriority">the object keys map to merge strategies and the values are expected to be an integer defining the merge priority between strategies.</param>
        /// <param name="modules">services modules.</param>
        /// <param name="resellerBookkeeperLookup">allow resellers configure bookkeeper for children billing (default to false).</param>
        /// <param name="scanRate">services scan rate.</param>
        /// <param name="shouldSaveMasterAuditLogs">services should save master audit logs (default to false).</param>
        /// <param name="supportBillingId">services support billing id (default to true).</param>
        /// <param name="syncBufferPeriod">services sync buffer period.</param>
        /// <param name="syncServices">services sync services (default to false).</param>
        public SystemConfigServices(bool? cascadeCommitsToMasterAccount = true, bool? debugServicesQuantities = false, bool? defaultAllowUpdates = true, bool? enforceGoodStanding = false, bool? getItemsFromQuantities = default(bool?), bool? hydrateCascadeCommits = true, string masterAccountBookkeeper = "kz_bookkeeper_local", Object mergeStrategyPriority = default(Object), List<string> modules = default(List<string>), bool? resellerBookkeeperLookup = false, int? scanRate = default(int?), bool? shouldSaveMasterAuditLogs = false, bool? supportBillingId = true, int? syncBufferPeriod = default(int?), bool? syncServices = false)
        {
            // use default value if no "cascadeCommitsToMasterAccount" provided
            if (cascadeCommitsToMasterAccount == null)
            {
                this.CascadeCommitsToMasterAccount = true;
            }
            else
            {
                this.CascadeCommitsToMasterAccount = cascadeCommitsToMasterAccount;
            }
            // use default value if no "debugServicesQuantities" provided
            if (debugServicesQuantities == null)
            {
                this.DebugServicesQuantities = false;
            }
            else
            {
                this.DebugServicesQuantities = debugServicesQuantities;
            }
            // use default value if no "defaultAllowUpdates" provided
            if (defaultAllowUpdates == null)
            {
                this.DefaultAllowUpdates = true;
            }
            else
            {
                this.DefaultAllowUpdates = defaultAllowUpdates;
            }
            // use default value if no "enforceGoodStanding" provided
            if (enforceGoodStanding == null)
            {
                this.EnforceGoodStanding = false;
            }
            else
            {
                this.EnforceGoodStanding = enforceGoodStanding;
            }
            this.GetItemsFromQuantities = getItemsFromQuantities;
            // use default value if no "hydrateCascadeCommits" provided
            if (hydrateCascadeCommits == null)
            {
                this.HydrateCascadeCommits = true;
            }
            else
            {
                this.HydrateCascadeCommits = hydrateCascadeCommits;
            }
            // use default value if no "masterAccountBookkeeper" provided
            if (masterAccountBookkeeper == null)
            {
                this.MasterAccountBookkeeper = "kz_bookkeeper_local";
            }
            else
            {
                this.MasterAccountBookkeeper = masterAccountBookkeeper;
            }
            this.MergeStrategyPriority = mergeStrategyPriority;
            this.Modules = modules;
            // use default value if no "resellerBookkeeperLookup" provided
            if (resellerBookkeeperLookup == null)
            {
                this.ResellerBookkeeperLookup = false;
            }
            else
            {
                this.ResellerBookkeeperLookup = resellerBookkeeperLookup;
            }
            this.ScanRate = scanRate;
            // use default value if no "shouldSaveMasterAuditLogs" provided
            if (shouldSaveMasterAuditLogs == null)
            {
                this.ShouldSaveMasterAuditLogs = false;
            }
            else
            {
                this.ShouldSaveMasterAuditLogs = shouldSaveMasterAuditLogs;
            }
            // use default value if no "supportBillingId" provided
            if (supportBillingId == null)
            {
                this.SupportBillingId = true;
            }
            else
            {
                this.SupportBillingId = supportBillingId;
            }
            this.SyncBufferPeriod = syncBufferPeriod;
            // use default value if no "syncServices" provided
            if (syncServices == null)
            {
                this.SyncServices = false;
            }
            else
            {
                this.SyncServices = syncServices;
            }
        }
        
        /// <summary>
        /// services cascade_commits_to_master_account
        /// </summary>
        /// <value>services cascade_commits_to_master_account</value>
        [DataMember(Name="cascade_commits_to_master_account", EmitDefaultValue=false)]
        public bool? CascadeCommitsToMasterAccount { get; set; }

        /// <summary>
        /// services debug_services_quantities
        /// </summary>
        /// <value>services debug_services_quantities</value>
        [DataMember(Name="debug_services_quantities", EmitDefaultValue=false)]
        public bool? DebugServicesQuantities { get; set; }

        /// <summary>
        /// services default allow updates
        /// </summary>
        /// <value>services default allow updates</value>
        [DataMember(Name="default_allow_updates", EmitDefaultValue=false)]
        public bool? DefaultAllowUpdates { get; set; }

        /// <summary>
        /// services enforce_good_standing
        /// </summary>
        /// <value>services enforce_good_standing</value>
        [DataMember(Name="enforce_good_standing", EmitDefaultValue=false)]
        public bool? EnforceGoodStanding { get; set; }

        /// <summary>
        /// services get_items_from_quantities
        /// </summary>
        /// <value>services get_items_from_quantities</value>
        [DataMember(Name="get_items_from_quantities", EmitDefaultValue=false)]
        public bool? GetItemsFromQuantities { get; set; }

        /// <summary>
        /// When an account makes a change it triggers a propagation up the account hiearchy updating the cascade quantities, if this is set to false the cascade quantities are summed with the account update deltas.  If this is set to true then the views will be invoked to fully reconcile the quantities (hydrate) during the cascade commits, a more expensive DB operation but provides self-corrective quantities.
        /// </summary>
        /// <value>When an account makes a change it triggers a propagation up the account hiearchy updating the cascade quantities, if this is set to false the cascade quantities are summed with the account update deltas.  If this is set to true then the views will be invoked to fully reconcile the quantities (hydrate) during the cascade commits, a more expensive DB operation but provides self-corrective quantities.</value>
        [DataMember(Name="hydrate_cascade_commits", EmitDefaultValue=false)]
        public bool? HydrateCascadeCommits { get; set; }

        /// <summary>
        /// services master account bookkeeper
        /// </summary>
        /// <value>services master account bookkeeper</value>
        [DataMember(Name="master_account_bookkeeper", EmitDefaultValue=false)]
        public string MasterAccountBookkeeper { get; set; }

        /// <summary>
        /// the object keys map to merge strategies and the values are expected to be an integer defining the merge priority between strategies
        /// </summary>
        /// <value>the object keys map to merge strategies and the values are expected to be an integer defining the merge priority between strategies</value>
        [DataMember(Name="merge_strategy_priority", EmitDefaultValue=false)]
        public Object MergeStrategyPriority { get; set; }

        /// <summary>
        /// services modules
        /// </summary>
        /// <value>services modules</value>
        [DataMember(Name="modules", EmitDefaultValue=false)]
        public List<string> Modules { get; set; }

        /// <summary>
        /// allow resellers configure bookkeeper for children billing
        /// </summary>
        /// <value>allow resellers configure bookkeeper for children billing</value>
        [DataMember(Name="reseller_bookkeeper_lookup", EmitDefaultValue=false)]
        public bool? ResellerBookkeeperLookup { get; set; }

        /// <summary>
        /// services scan rate
        /// </summary>
        /// <value>services scan rate</value>
        [DataMember(Name="scan_rate", EmitDefaultValue=false)]
        public int? ScanRate { get; set; }

        /// <summary>
        /// services should save master audit logs
        /// </summary>
        /// <value>services should save master audit logs</value>
        [DataMember(Name="should_save_master_audit_logs", EmitDefaultValue=false)]
        public bool? ShouldSaveMasterAuditLogs { get; set; }

        /// <summary>
        /// services support billing id
        /// </summary>
        /// <value>services support billing id</value>
        [DataMember(Name="support_billing_id", EmitDefaultValue=false)]
        public bool? SupportBillingId { get; set; }

        /// <summary>
        /// services sync buffer period
        /// </summary>
        /// <value>services sync buffer period</value>
        [DataMember(Name="sync_buffer_period", EmitDefaultValue=false)]
        public int? SyncBufferPeriod { get; set; }

        /// <summary>
        /// services sync services
        /// </summary>
        /// <value>services sync services</value>
        [DataMember(Name="sync_services", EmitDefaultValue=false)]
        public bool? SyncServices { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigServices {\n");
            sb.Append("  CascadeCommitsToMasterAccount: ").Append(CascadeCommitsToMasterAccount).Append("\n");
            sb.Append("  DebugServicesQuantities: ").Append(DebugServicesQuantities).Append("\n");
            sb.Append("  DefaultAllowUpdates: ").Append(DefaultAllowUpdates).Append("\n");
            sb.Append("  EnforceGoodStanding: ").Append(EnforceGoodStanding).Append("\n");
            sb.Append("  GetItemsFromQuantities: ").Append(GetItemsFromQuantities).Append("\n");
            sb.Append("  HydrateCascadeCommits: ").Append(HydrateCascadeCommits).Append("\n");
            sb.Append("  MasterAccountBookkeeper: ").Append(MasterAccountBookkeeper).Append("\n");
            sb.Append("  MergeStrategyPriority: ").Append(MergeStrategyPriority).Append("\n");
            sb.Append("  Modules: ").Append(Modules).Append("\n");
            sb.Append("  ResellerBookkeeperLookup: ").Append(ResellerBookkeeperLookup).Append("\n");
            sb.Append("  ScanRate: ").Append(ScanRate).Append("\n");
            sb.Append("  ShouldSaveMasterAuditLogs: ").Append(ShouldSaveMasterAuditLogs).Append("\n");
            sb.Append("  SupportBillingId: ").Append(SupportBillingId).Append("\n");
            sb.Append("  SyncBufferPeriod: ").Append(SyncBufferPeriod).Append("\n");
            sb.Append("  SyncServices: ").Append(SyncServices).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigServices);
        }

        /// <summary>
        /// Returns true if SystemConfigServices instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigServices to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigServices input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CascadeCommitsToMasterAccount == input.CascadeCommitsToMasterAccount ||
                    (this.CascadeCommitsToMasterAccount != null &&
                    this.CascadeCommitsToMasterAccount.Equals(input.CascadeCommitsToMasterAccount))
                ) && 
                (
                    this.DebugServicesQuantities == input.DebugServicesQuantities ||
                    (this.DebugServicesQuantities != null &&
                    this.DebugServicesQuantities.Equals(input.DebugServicesQuantities))
                ) && 
                (
                    this.DefaultAllowUpdates == input.DefaultAllowUpdates ||
                    (this.DefaultAllowUpdates != null &&
                    this.DefaultAllowUpdates.Equals(input.DefaultAllowUpdates))
                ) && 
                (
                    this.EnforceGoodStanding == input.EnforceGoodStanding ||
                    (this.EnforceGoodStanding != null &&
                    this.EnforceGoodStanding.Equals(input.EnforceGoodStanding))
                ) && 
                (
                    this.GetItemsFromQuantities == input.GetItemsFromQuantities ||
                    (this.GetItemsFromQuantities != null &&
                    this.GetItemsFromQuantities.Equals(input.GetItemsFromQuantities))
                ) && 
                (
                    this.HydrateCascadeCommits == input.HydrateCascadeCommits ||
                    (this.HydrateCascadeCommits != null &&
                    this.HydrateCascadeCommits.Equals(input.HydrateCascadeCommits))
                ) && 
                (
                    this.MasterAccountBookkeeper == input.MasterAccountBookkeeper ||
                    (this.MasterAccountBookkeeper != null &&
                    this.MasterAccountBookkeeper.Equals(input.MasterAccountBookkeeper))
                ) && 
                (
                    this.MergeStrategyPriority == input.MergeStrategyPriority ||
                    (this.MergeStrategyPriority != null &&
                    this.MergeStrategyPriority.Equals(input.MergeStrategyPriority))
                ) && 
                (
                    this.Modules == input.Modules ||
                    this.Modules != null &&
                    this.Modules.SequenceEqual(input.Modules)
                ) && 
                (
                    this.ResellerBookkeeperLookup == input.ResellerBookkeeperLookup ||
                    (this.ResellerBookkeeperLookup != null &&
                    this.ResellerBookkeeperLookup.Equals(input.ResellerBookkeeperLookup))
                ) && 
                (
                    this.ScanRate == input.ScanRate ||
                    (this.ScanRate != null &&
                    this.ScanRate.Equals(input.ScanRate))
                ) && 
                (
                    this.ShouldSaveMasterAuditLogs == input.ShouldSaveMasterAuditLogs ||
                    (this.ShouldSaveMasterAuditLogs != null &&
                    this.ShouldSaveMasterAuditLogs.Equals(input.ShouldSaveMasterAuditLogs))
                ) && 
                (
                    this.SupportBillingId == input.SupportBillingId ||
                    (this.SupportBillingId != null &&
                    this.SupportBillingId.Equals(input.SupportBillingId))
                ) && 
                (
                    this.SyncBufferPeriod == input.SyncBufferPeriod ||
                    (this.SyncBufferPeriod != null &&
                    this.SyncBufferPeriod.Equals(input.SyncBufferPeriod))
                ) && 
                (
                    this.SyncServices == input.SyncServices ||
                    (this.SyncServices != null &&
                    this.SyncServices.Equals(input.SyncServices))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CascadeCommitsToMasterAccount != null)
                    hashCode = hashCode * 59 + this.CascadeCommitsToMasterAccount.GetHashCode();
                if (this.DebugServicesQuantities != null)
                    hashCode = hashCode * 59 + this.DebugServicesQuantities.GetHashCode();
                if (this.DefaultAllowUpdates != null)
                    hashCode = hashCode * 59 + this.DefaultAllowUpdates.GetHashCode();
                if (this.EnforceGoodStanding != null)
                    hashCode = hashCode * 59 + this.EnforceGoodStanding.GetHashCode();
                if (this.GetItemsFromQuantities != null)
                    hashCode = hashCode * 59 + this.GetItemsFromQuantities.GetHashCode();
                if (this.HydrateCascadeCommits != null)
                    hashCode = hashCode * 59 + this.HydrateCascadeCommits.GetHashCode();
                if (this.MasterAccountBookkeeper != null)
                    hashCode = hashCode * 59 + this.MasterAccountBookkeeper.GetHashCode();
                if (this.MergeStrategyPriority != null)
                    hashCode = hashCode * 59 + this.MergeStrategyPriority.GetHashCode();
                if (this.Modules != null)
                    hashCode = hashCode * 59 + this.Modules.GetHashCode();
                if (this.ResellerBookkeeperLookup != null)
                    hashCode = hashCode * 59 + this.ResellerBookkeeperLookup.GetHashCode();
                if (this.ScanRate != null)
                    hashCode = hashCode * 59 + this.ScanRate.GetHashCode();
                if (this.ShouldSaveMasterAuditLogs != null)
                    hashCode = hashCode * 59 + this.ShouldSaveMasterAuditLogs.GetHashCode();
                if (this.SupportBillingId != null)
                    hashCode = hashCode * 59 + this.SupportBillingId.GetHashCode();
                if (this.SyncBufferPeriod != null)
                    hashCode = hashCode * 59 + this.SyncBufferPeriod.GetHashCode();
                if (this.SyncServices != null)
                    hashCode = hashCode * 59 + this.SyncServices.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
