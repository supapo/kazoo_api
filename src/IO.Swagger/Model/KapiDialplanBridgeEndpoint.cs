/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for dialplan.bridge_endpoint
    /// </summary>
    [DataContract]
    public partial class KapiDialplanBridgeEndpoint :  IEquatable<KapiDialplanBridgeEndpoint>, IValidatableObject
    {
        /// <summary>
        /// Defines EnableT38Gateway
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EnableT38GatewayEnum
        {
            
            /// <summary>
            /// Enum Self for value: self
            /// </summary>
            [EnumMember(Value = "self")]
            Self = 1,
            
            /// <summary>
            /// Enum Peer for value: peer
            /// </summary>
            [EnumMember(Value = "peer")]
            Peer = 2
        }

        /// <summary>
        /// Gets or Sets EnableT38Gateway
        /// </summary>
        [DataMember(Name="Enable-T38-Gateway", EmitDefaultValue=false)]
        public EnableT38GatewayEnum? EnableT38Gateway { get; set; }
        /// <summary>
        /// Defines EndpointType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EndpointTypeEnum
        {
            
            /// <summary>
            /// Enum Sip for value: sip
            /// </summary>
            [EnumMember(Value = "sip")]
            Sip = 1,
            
            /// <summary>
            /// Enum Freetdm for value: freetdm
            /// </summary>
            [EnumMember(Value = "freetdm")]
            Freetdm = 2,
            
            /// <summary>
            /// Enum Skype for value: skype
            /// </summary>
            [EnumMember(Value = "skype")]
            Skype = 3
        }

        /// <summary>
        /// Gets or Sets EndpointType
        /// </summary>
        [DataMember(Name="Endpoint-Type", EmitDefaultValue=false)]
        public EndpointTypeEnum? EndpointType { get; set; }
        /// <summary>
        /// Defines InviteFormat
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InviteFormatEnum
        {
            
            /// <summary>
            /// Enum Username for value: username
            /// </summary>
            [EnumMember(Value = "username")]
            Username = 1,
            
            /// <summary>
            /// Enum E164 for value: e164
            /// </summary>
            [EnumMember(Value = "e164")]
            E164 = 2,
            
            /// <summary>
            /// Enum Npan for value: npan
            /// </summary>
            [EnumMember(Value = "npan")]
            Npan = 3,
            
            /// <summary>
            /// Enum _1npan for value: 1npan
            /// </summary>
            [EnumMember(Value = "1npan")]
            _1npan = 4,
            
            /// <summary>
            /// Enum Route for value: route
            /// </summary>
            [EnumMember(Value = "route")]
            Route = 5,
            
            /// <summary>
            /// Enum Loopback for value: loopback
            /// </summary>
            [EnumMember(Value = "loopback")]
            Loopback = 6,
            
            /// <summary>
            /// Enum Contact for value: contact
            /// </summary>
            [EnumMember(Value = "contact")]
            Contact = 7
        }

        /// <summary>
        /// Gets or Sets InviteFormat
        /// </summary>
        [DataMember(Name="Invite-Format", EmitDefaultValue=false)]
        public InviteFormatEnum? InviteFormat { get; set; }
        /// <summary>
        /// Defines SIPTransport
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SIPTransportEnum
        {
            
            /// <summary>
            /// Enum Udp for value: udp
            /// </summary>
            [EnumMember(Value = "udp")]
            Udp = 1,
            
            /// <summary>
            /// Enum Tcp for value: tcp
            /// </summary>
            [EnumMember(Value = "tcp")]
            Tcp = 2,
            
            /// <summary>
            /// Enum Tls for value: tls
            /// </summary>
            [EnumMember(Value = "tls")]
            Tls = 3,
            
            /// <summary>
            /// Enum Sctp for value: sctp
            /// </summary>
            [EnumMember(Value = "sctp")]
            Sctp = 4
        }

        /// <summary>
        /// Gets or Sets SIPTransport
        /// </summary>
        [DataMember(Name="SIP-Transport", EmitDefaultValue=false)]
        public SIPTransportEnum? SIPTransport { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanBridgeEndpoint" /> class.
        /// </summary>
        /// <param name="bypassMedia">bypassMedia.</param>
        /// <param name="customApplicationVars">customApplicationVars.</param>
        /// <param name="customChannelVars">customChannelVars.</param>
        /// <param name="customSIPHeaders">customSIPHeaders.</param>
        /// <param name="enableT38Gateway">enableT38Gateway.</param>
        /// <param name="endpointOptions">endpointOptions.</param>
        /// <param name="endpointType">endpointType.</param>
        /// <param name="ignoreEarlyMedia">ignoreEarlyMedia.</param>
        /// <param name="inviteFormat">inviteFormat.</param>
        /// <param name="sIPInviteParameters">sIPInviteParameters.</param>
        /// <param name="sIPTransport">sIPTransport.</param>
        public KapiDialplanBridgeEndpoint(bool? bypassMedia = default(bool?), Object customApplicationVars = default(Object), Object customChannelVars = default(Object), Object customSIPHeaders = default(Object), EnableT38GatewayEnum? enableT38Gateway = default(EnableT38GatewayEnum?), Object endpointOptions = default(Object), EndpointTypeEnum? endpointType = default(EndpointTypeEnum?), bool? ignoreEarlyMedia = default(bool?), InviteFormatEnum? inviteFormat = default(InviteFormatEnum?), List<string> sIPInviteParameters = default(List<string>), SIPTransportEnum? sIPTransport = default(SIPTransportEnum?))
        {
            this.BypassMedia = bypassMedia;
            this.CustomApplicationVars = customApplicationVars;
            this.CustomChannelVars = customChannelVars;
            this.CustomSIPHeaders = customSIPHeaders;
            this.EnableT38Gateway = enableT38Gateway;
            this.EndpointOptions = endpointOptions;
            this.EndpointType = endpointType;
            this.IgnoreEarlyMedia = ignoreEarlyMedia;
            this.InviteFormat = inviteFormat;
            this.SIPInviteParameters = sIPInviteParameters;
            this.SIPTransport = sIPTransport;
        }
        
        /// <summary>
        /// Gets or Sets BypassMedia
        /// </summary>
        [DataMember(Name="Bypass-Media", EmitDefaultValue=false)]
        public bool? BypassMedia { get; set; }

        /// <summary>
        /// Gets or Sets CustomApplicationVars
        /// </summary>
        [DataMember(Name="Custom-Application-Vars", EmitDefaultValue=false)]
        public Object CustomApplicationVars { get; set; }

        /// <summary>
        /// Gets or Sets CustomChannelVars
        /// </summary>
        [DataMember(Name="Custom-Channel-Vars", EmitDefaultValue=false)]
        public Object CustomChannelVars { get; set; }

        /// <summary>
        /// Gets or Sets CustomSIPHeaders
        /// </summary>
        [DataMember(Name="Custom-SIP-Headers", EmitDefaultValue=false)]
        public Object CustomSIPHeaders { get; set; }


        /// <summary>
        /// Gets or Sets EndpointOptions
        /// </summary>
        [DataMember(Name="Endpoint-Options", EmitDefaultValue=false)]
        public Object EndpointOptions { get; set; }


        /// <summary>
        /// Gets or Sets IgnoreEarlyMedia
        /// </summary>
        [DataMember(Name="Ignore-Early-Media", EmitDefaultValue=false)]
        public bool? IgnoreEarlyMedia { get; set; }


        /// <summary>
        /// Gets or Sets SIPInviteParameters
        /// </summary>
        [DataMember(Name="SIP-Invite-Parameters", EmitDefaultValue=false)]
        public List<string> SIPInviteParameters { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiDialplanBridgeEndpoint {\n");
            sb.Append("  BypassMedia: ").Append(BypassMedia).Append("\n");
            sb.Append("  CustomApplicationVars: ").Append(CustomApplicationVars).Append("\n");
            sb.Append("  CustomChannelVars: ").Append(CustomChannelVars).Append("\n");
            sb.Append("  CustomSIPHeaders: ").Append(CustomSIPHeaders).Append("\n");
            sb.Append("  EnableT38Gateway: ").Append(EnableT38Gateway).Append("\n");
            sb.Append("  EndpointOptions: ").Append(EndpointOptions).Append("\n");
            sb.Append("  EndpointType: ").Append(EndpointType).Append("\n");
            sb.Append("  IgnoreEarlyMedia: ").Append(IgnoreEarlyMedia).Append("\n");
            sb.Append("  InviteFormat: ").Append(InviteFormat).Append("\n");
            sb.Append("  SIPInviteParameters: ").Append(SIPInviteParameters).Append("\n");
            sb.Append("  SIPTransport: ").Append(SIPTransport).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiDialplanBridgeEndpoint);
        }

        /// <summary>
        /// Returns true if KapiDialplanBridgeEndpoint instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiDialplanBridgeEndpoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiDialplanBridgeEndpoint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BypassMedia == input.BypassMedia ||
                    (this.BypassMedia != null &&
                    this.BypassMedia.Equals(input.BypassMedia))
                ) && 
                (
                    this.CustomApplicationVars == input.CustomApplicationVars ||
                    (this.CustomApplicationVars != null &&
                    this.CustomApplicationVars.Equals(input.CustomApplicationVars))
                ) && 
                (
                    this.CustomChannelVars == input.CustomChannelVars ||
                    (this.CustomChannelVars != null &&
                    this.CustomChannelVars.Equals(input.CustomChannelVars))
                ) && 
                (
                    this.CustomSIPHeaders == input.CustomSIPHeaders ||
                    (this.CustomSIPHeaders != null &&
                    this.CustomSIPHeaders.Equals(input.CustomSIPHeaders))
                ) && 
                (
                    this.EnableT38Gateway == input.EnableT38Gateway ||
                    (this.EnableT38Gateway != null &&
                    this.EnableT38Gateway.Equals(input.EnableT38Gateway))
                ) && 
                (
                    this.EndpointOptions == input.EndpointOptions ||
                    (this.EndpointOptions != null &&
                    this.EndpointOptions.Equals(input.EndpointOptions))
                ) && 
                (
                    this.EndpointType == input.EndpointType ||
                    (this.EndpointType != null &&
                    this.EndpointType.Equals(input.EndpointType))
                ) && 
                (
                    this.IgnoreEarlyMedia == input.IgnoreEarlyMedia ||
                    (this.IgnoreEarlyMedia != null &&
                    this.IgnoreEarlyMedia.Equals(input.IgnoreEarlyMedia))
                ) && 
                (
                    this.InviteFormat == input.InviteFormat ||
                    (this.InviteFormat != null &&
                    this.InviteFormat.Equals(input.InviteFormat))
                ) && 
                (
                    this.SIPInviteParameters == input.SIPInviteParameters ||
                    this.SIPInviteParameters != null &&
                    this.SIPInviteParameters.SequenceEqual(input.SIPInviteParameters)
                ) && 
                (
                    this.SIPTransport == input.SIPTransport ||
                    (this.SIPTransport != null &&
                    this.SIPTransport.Equals(input.SIPTransport))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BypassMedia != null)
                    hashCode = hashCode * 59 + this.BypassMedia.GetHashCode();
                if (this.CustomApplicationVars != null)
                    hashCode = hashCode * 59 + this.CustomApplicationVars.GetHashCode();
                if (this.CustomChannelVars != null)
                    hashCode = hashCode * 59 + this.CustomChannelVars.GetHashCode();
                if (this.CustomSIPHeaders != null)
                    hashCode = hashCode * 59 + this.CustomSIPHeaders.GetHashCode();
                if (this.EnableT38Gateway != null)
                    hashCode = hashCode * 59 + this.EnableT38Gateway.GetHashCode();
                if (this.EndpointOptions != null)
                    hashCode = hashCode * 59 + this.EndpointOptions.GetHashCode();
                if (this.EndpointType != null)
                    hashCode = hashCode * 59 + this.EndpointType.GetHashCode();
                if (this.IgnoreEarlyMedia != null)
                    hashCode = hashCode * 59 + this.IgnoreEarlyMedia.GetHashCode();
                if (this.InviteFormat != null)
                    hashCode = hashCode * 59 + this.InviteFormat.GetHashCode();
                if (this.SIPInviteParameters != null)
                    hashCode = hashCode * 59 + this.SIPInviteParameters.GetHashCode();
                if (this.SIPTransport != null)
                    hashCode = hashCode * 59 + this.SIPTransport.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
