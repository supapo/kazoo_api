/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The audio media parameters
    /// </summary>
    [DataContract]
    public partial class EndpointMediaAudio :  IEquatable<EndpointMediaAudio>, IValidatableObject
    {
        /// <summary>
        /// Defines Codecs
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CodecsEnum
        {
            
            /// <summary>
            /// Enum OPUS for value: OPUS
            /// </summary>
            [EnumMember(Value = "OPUS")]
            OPUS = 1,
            
            /// <summary>
            /// Enum CELT32000h for value: CELT@32000h
            /// </summary>
            [EnumMember(Value = "CELT@32000h")]
            CELT32000h = 2,
            
            /// <summary>
            /// Enum G722132000h for value: G7221@32000h
            /// </summary>
            [EnumMember(Value = "G7221@32000h")]
            G722132000h = 3,
            
            /// <summary>
            /// Enum G722116000h for value: G7221@16000h
            /// </summary>
            [EnumMember(Value = "G7221@16000h")]
            G722116000h = 4,
            
            /// <summary>
            /// Enum G722 for value: G722
            /// </summary>
            [EnumMember(Value = "G722")]
            G722 = 5,
            
            /// <summary>
            /// Enum Speex32000h for value: speex@32000h
            /// </summary>
            [EnumMember(Value = "speex@32000h")]
            Speex32000h = 6,
            
            /// <summary>
            /// Enum Speex16000h for value: speex@16000h
            /// </summary>
            [EnumMember(Value = "speex@16000h")]
            Speex16000h = 7,
            
            /// <summary>
            /// Enum PCMU for value: PCMU
            /// </summary>
            [EnumMember(Value = "PCMU")]
            PCMU = 8,
            
            /// <summary>
            /// Enum PCMA for value: PCMA
            /// </summary>
            [EnumMember(Value = "PCMA")]
            PCMA = 9,
            
            /// <summary>
            /// Enum G729 for value: G729
            /// </summary>
            [EnumMember(Value = "G729")]
            G729 = 10,
            
            /// <summary>
            /// Enum GSM for value: GSM
            /// </summary>
            [EnumMember(Value = "GSM")]
            GSM = 11,
            
            /// <summary>
            /// Enum CELT48000h for value: CELT@48000h
            /// </summary>
            [EnumMember(Value = "CELT@48000h")]
            CELT48000h = 12,
            
            /// <summary>
            /// Enum CELT64000h for value: CELT@64000h
            /// </summary>
            [EnumMember(Value = "CELT@64000h")]
            CELT64000h = 13,
            
            /// <summary>
            /// Enum G72216 for value: G722_16
            /// </summary>
            [EnumMember(Value = "G722_16")]
            G72216 = 14,
            
            /// <summary>
            /// Enum G72232 for value: G722_32
            /// </summary>
            [EnumMember(Value = "G722_32")]
            G72232 = 15,
            
            /// <summary>
            /// Enum CELT48 for value: CELT_48
            /// </summary>
            [EnumMember(Value = "CELT_48")]
            CELT48 = 16,
            
            /// <summary>
            /// Enum CELT64 for value: CELT_64
            /// </summary>
            [EnumMember(Value = "CELT_64")]
            CELT64 = 17,
            
            /// <summary>
            /// Enum Speex for value: Speex
            /// </summary>
            [EnumMember(Value = "Speex")]
            Speex = 18,
            
            /// <summary>
            /// Enum Speex for value: speex
            /// </summary>
            [EnumMember(Value = "speex")]
            Speex = 19
        }


        /// <summary>
        /// A list of audio codecs the endpoint supports
        /// </summary>
        /// <value>A list of audio codecs the endpoint supports</value>
        [DataMember(Name="codecs", EmitDefaultValue=false)]
        public List<CodecsEnum> Codecs { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EndpointMediaAudio" /> class.
        /// </summary>
        /// <param name="codecs">A list of audio codecs the endpoint supports.</param>
        public EndpointMediaAudio(List<CodecsEnum> codecs = default(List<CodecsEnum>))
        {
            this.Codecs = codecs;
        }
        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EndpointMediaAudio {\n");
            sb.Append("  Codecs: ").Append(Codecs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EndpointMediaAudio);
        }

        /// <summary>
        /// Returns true if EndpointMediaAudio instances are equal
        /// </summary>
        /// <param name="input">Instance of EndpointMediaAudio to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EndpointMediaAudio input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Codecs == input.Codecs ||
                    this.Codecs != null &&
                    this.Codecs.SequenceEqual(input.Codecs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Codecs != null)
                    hashCode = hashCode * 59 + this.Codecs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
