/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TrunkstoreAccountCallerId
    /// </summary>
    [DataContract]
    public partial class TrunkstoreAccountCallerId :  IEquatable<TrunkstoreAccountCallerId>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrunkstoreAccountCallerId" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TrunkstoreAccountCallerId() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrunkstoreAccountCallerId" /> class.
        /// </summary>
        /// <param name="cidName">cidName (required).</param>
        /// <param name="cidNumber">cidNumber (required).</param>
        public TrunkstoreAccountCallerId(string cidName = default(string), string cidNumber = default(string))
        {
            // to ensure "cidName" is required (not null)
            if (cidName == null)
            {
                throw new InvalidDataException("cidName is a required property for TrunkstoreAccountCallerId and cannot be null");
            }
            else
            {
                this.CidName = cidName;
            }
            // to ensure "cidNumber" is required (not null)
            if (cidNumber == null)
            {
                throw new InvalidDataException("cidNumber is a required property for TrunkstoreAccountCallerId and cannot be null");
            }
            else
            {
                this.CidNumber = cidNumber;
            }
        }
        
        /// <summary>
        /// Gets or Sets CidName
        /// </summary>
        [DataMember(Name="cid_name", EmitDefaultValue=false)]
        public string CidName { get; set; }

        /// <summary>
        /// Gets or Sets CidNumber
        /// </summary>
        [DataMember(Name="cid_number", EmitDefaultValue=false)]
        public string CidNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrunkstoreAccountCallerId {\n");
            sb.Append("  CidName: ").Append(CidName).Append("\n");
            sb.Append("  CidNumber: ").Append(CidNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrunkstoreAccountCallerId);
        }

        /// <summary>
        /// Returns true if TrunkstoreAccountCallerId instances are equal
        /// </summary>
        /// <param name="input">Instance of TrunkstoreAccountCallerId to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrunkstoreAccountCallerId input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CidName == input.CidName ||
                    (this.CidName != null &&
                    this.CidName.Equals(input.CidName))
                ) && 
                (
                    this.CidNumber == input.CidNumber ||
                    (this.CidNumber != null &&
                    this.CidNumber.Equals(input.CidNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CidName != null)
                    hashCode = hashCode * 59 + this.CidName.GetHashCode();
                if (this.CidNumber != null)
                    hashCode = hashCode * 59 + this.CidNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CidName (string) maxLength
            if(this.CidName != null && this.CidName.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CidName, length must be less than 35.", new [] { "CidName" });
            }

            // CidName (string) minLength
            if(this.CidName != null && this.CidName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CidName, length must be greater than 1.", new [] { "CidName" });
            }

            // CidNumber (string) maxLength
            if(this.CidNumber != null && this.CidNumber.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CidNumber, length must be less than 35.", new [] { "CidNumber" });
            }

            // CidNumber (string) minLength
            if(this.CidNumber != null && this.CidNumber.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CidNumber, length must be greater than 1.", new [] { "CidNumber" });
            }

            yield break;
        }
    }

}
