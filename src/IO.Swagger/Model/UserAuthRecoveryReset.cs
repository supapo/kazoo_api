/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Request a password reset from a trusted source
    /// </summary>
    [DataContract]
    public partial class UserAuthRecoveryReset :  IEquatable<UserAuthRecoveryReset>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAuthRecoveryReset" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserAuthRecoveryReset() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAuthRecoveryReset" /> class.
        /// </summary>
        /// <param name="resetId">The UUID that is part of the password-reset link (required).</param>
        public UserAuthRecoveryReset(string resetId = default(string))
        {
            // to ensure "resetId" is required (not null)
            if (resetId == null)
            {
                throw new InvalidDataException("resetId is a required property for UserAuthRecoveryReset and cannot be null");
            }
            else
            {
                this.ResetId = resetId;
            }
        }
        
        /// <summary>
        /// The UUID that is part of the password-reset link
        /// </summary>
        /// <value>The UUID that is part of the password-reset link</value>
        [DataMember(Name="reset_id", EmitDefaultValue=false)]
        public string ResetId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserAuthRecoveryReset {\n");
            sb.Append("  ResetId: ").Append(ResetId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserAuthRecoveryReset);
        }

        /// <summary>
        /// Returns true if UserAuthRecoveryReset instances are equal
        /// </summary>
        /// <param name="input">Instance of UserAuthRecoveryReset to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserAuthRecoveryReset input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResetId == input.ResetId ||
                    (this.ResetId != null &&
                    this.ResetId.Equals(input.ResetId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResetId != null)
                    hashCode = hashCode * 59 + this.ResetId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ResetId (string) pattern
            Regex regexResetId = new Regex(@"^[a-fA-F0-9]{40,250}$", RegexOptions.CultureInvariant);
            if (false == regexResetId.Match(this.ResetId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResetId, must match a pattern of " + regexResetId, new [] { "ResetId" });
            }

            yield break;
        }
    }

}
