/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for authn.resp
    /// </summary>
    [DataContract]
    public partial class KapiAuthnResp :  IEquatable<KapiAuthnResp>, IValidatableObject
    {
        /// <summary>
        /// Defines AuthMethod
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AuthMethodEnum
        {
            
            /// <summary>
            /// Enum Password for value: password
            /// </summary>
            [EnumMember(Value = "password")]
            Password = 1,
            
            /// <summary>
            /// Enum Ip for value: ip
            /// </summary>
            [EnumMember(Value = "ip")]
            Ip = 2,
            
            /// <summary>
            /// Enum A1Hash for value: a1-hash
            /// </summary>
            [EnumMember(Value = "a1-hash")]
            A1Hash = 3,
            
            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 4,
            
            /// <summary>
            /// Enum Gsm for value: gsm
            /// </summary>
            [EnumMember(Value = "gsm")]
            Gsm = 5,
            
            /// <summary>
            /// Enum Nonce for value: nonce
            /// </summary>
            [EnumMember(Value = "nonce")]
            Nonce = 6,
            
            /// <summary>
            /// Enum A3a8 for value: a3a8
            /// </summary>
            [EnumMember(Value = "a3a8")]
            A3a8 = 7
        }

        /// <summary>
        /// Gets or Sets AuthMethod
        /// </summary>
        [DataMember(Name="Auth-Method", EmitDefaultValue=false)]
        public AuthMethodEnum AuthMethod { get; set; }
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Directory for value: directory
            /// </summary>
            [EnumMember(Value = "directory")]
            Directory = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Authnresp for value: authn_resp
            /// </summary>
            [EnumMember(Value = "authn_resp")]
            Authnresp = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiAuthnResp" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiAuthnResp() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiAuthnResp" /> class.
        /// </summary>
        /// <param name="accessGroup">accessGroup.</param>
        /// <param name="authMethod">authMethod (required).</param>
        /// <param name="authNonce">authNonce.</param>
        /// <param name="authPassword">authPassword (required).</param>
        /// <param name="authUsername">authUsername.</param>
        /// <param name="customChannelVars">customChannelVars.</param>
        /// <param name="customSIPHeaders">customSIPHeaders.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="expires">expires.</param>
        /// <param name="registerOverwriteNotify">registerOverwriteNotify.</param>
        /// <param name="suppressUnregisterNotifications">suppressUnregisterNotifications.</param>
        /// <param name="tenantID">tenantID.</param>
        public KapiAuthnResp(string accessGroup = default(string), AuthMethodEnum authMethod = default(AuthMethodEnum), string authNonce = default(string), string authPassword = default(string), string authUsername = default(string), Object customChannelVars = default(Object), Object customSIPHeaders = default(Object), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string expires = default(string), string registerOverwriteNotify = default(string), string suppressUnregisterNotifications = default(string), string tenantID = default(string))
        {
            // to ensure "authMethod" is required (not null)
            if (authMethod == null)
            {
                throw new InvalidDataException("authMethod is a required property for KapiAuthnResp and cannot be null");
            }
            else
            {
                this.AuthMethod = authMethod;
            }
            // to ensure "authPassword" is required (not null)
            if (authPassword == null)
            {
                throw new InvalidDataException("authPassword is a required property for KapiAuthnResp and cannot be null");
            }
            else
            {
                this.AuthPassword = authPassword;
            }
            this.AccessGroup = accessGroup;
            this.AuthNonce = authNonce;
            this.AuthUsername = authUsername;
            this.CustomChannelVars = customChannelVars;
            this.CustomSIPHeaders = customSIPHeaders;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.Expires = expires;
            this.RegisterOverwriteNotify = registerOverwriteNotify;
            this.SuppressUnregisterNotifications = suppressUnregisterNotifications;
            this.TenantID = tenantID;
        }
        
        /// <summary>
        /// Gets or Sets AccessGroup
        /// </summary>
        [DataMember(Name="Access-Group", EmitDefaultValue=false)]
        public string AccessGroup { get; set; }


        /// <summary>
        /// Gets or Sets AuthNonce
        /// </summary>
        [DataMember(Name="Auth-Nonce", EmitDefaultValue=false)]
        public string AuthNonce { get; set; }

        /// <summary>
        /// Gets or Sets AuthPassword
        /// </summary>
        [DataMember(Name="Auth-Password", EmitDefaultValue=false)]
        public string AuthPassword { get; set; }

        /// <summary>
        /// Gets or Sets AuthUsername
        /// </summary>
        [DataMember(Name="Auth-Username", EmitDefaultValue=false)]
        public string AuthUsername { get; set; }

        /// <summary>
        /// Gets or Sets CustomChannelVars
        /// </summary>
        [DataMember(Name="Custom-Channel-Vars", EmitDefaultValue=false)]
        public Object CustomChannelVars { get; set; }

        /// <summary>
        /// Gets or Sets CustomSIPHeaders
        /// </summary>
        [DataMember(Name="Custom-SIP-Headers", EmitDefaultValue=false)]
        public Object CustomSIPHeaders { get; set; }



        /// <summary>
        /// Gets or Sets Expires
        /// </summary>
        [DataMember(Name="Expires", EmitDefaultValue=false)]
        public string Expires { get; set; }

        /// <summary>
        /// Gets or Sets RegisterOverwriteNotify
        /// </summary>
        [DataMember(Name="Register-Overwrite-Notify", EmitDefaultValue=false)]
        public string RegisterOverwriteNotify { get; set; }

        /// <summary>
        /// Gets or Sets SuppressUnregisterNotifications
        /// </summary>
        [DataMember(Name="Suppress-Unregister-Notifications", EmitDefaultValue=false)]
        public string SuppressUnregisterNotifications { get; set; }

        /// <summary>
        /// Gets or Sets TenantID
        /// </summary>
        [DataMember(Name="Tenant-ID", EmitDefaultValue=false)]
        public string TenantID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiAuthnResp {\n");
            sb.Append("  AccessGroup: ").Append(AccessGroup).Append("\n");
            sb.Append("  AuthMethod: ").Append(AuthMethod).Append("\n");
            sb.Append("  AuthNonce: ").Append(AuthNonce).Append("\n");
            sb.Append("  AuthPassword: ").Append(AuthPassword).Append("\n");
            sb.Append("  AuthUsername: ").Append(AuthUsername).Append("\n");
            sb.Append("  CustomChannelVars: ").Append(CustomChannelVars).Append("\n");
            sb.Append("  CustomSIPHeaders: ").Append(CustomSIPHeaders).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("  RegisterOverwriteNotify: ").Append(RegisterOverwriteNotify).Append("\n");
            sb.Append("  SuppressUnregisterNotifications: ").Append(SuppressUnregisterNotifications).Append("\n");
            sb.Append("  TenantID: ").Append(TenantID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiAuthnResp);
        }

        /// <summary>
        /// Returns true if KapiAuthnResp instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiAuthnResp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiAuthnResp input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessGroup == input.AccessGroup ||
                    (this.AccessGroup != null &&
                    this.AccessGroup.Equals(input.AccessGroup))
                ) && 
                (
                    this.AuthMethod == input.AuthMethod ||
                    (this.AuthMethod != null &&
                    this.AuthMethod.Equals(input.AuthMethod))
                ) && 
                (
                    this.AuthNonce == input.AuthNonce ||
                    (this.AuthNonce != null &&
                    this.AuthNonce.Equals(input.AuthNonce))
                ) && 
                (
                    this.AuthPassword == input.AuthPassword ||
                    (this.AuthPassword != null &&
                    this.AuthPassword.Equals(input.AuthPassword))
                ) && 
                (
                    this.AuthUsername == input.AuthUsername ||
                    (this.AuthUsername != null &&
                    this.AuthUsername.Equals(input.AuthUsername))
                ) && 
                (
                    this.CustomChannelVars == input.CustomChannelVars ||
                    (this.CustomChannelVars != null &&
                    this.CustomChannelVars.Equals(input.CustomChannelVars))
                ) && 
                (
                    this.CustomSIPHeaders == input.CustomSIPHeaders ||
                    (this.CustomSIPHeaders != null &&
                    this.CustomSIPHeaders.Equals(input.CustomSIPHeaders))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.Expires == input.Expires ||
                    (this.Expires != null &&
                    this.Expires.Equals(input.Expires))
                ) && 
                (
                    this.RegisterOverwriteNotify == input.RegisterOverwriteNotify ||
                    (this.RegisterOverwriteNotify != null &&
                    this.RegisterOverwriteNotify.Equals(input.RegisterOverwriteNotify))
                ) && 
                (
                    this.SuppressUnregisterNotifications == input.SuppressUnregisterNotifications ||
                    (this.SuppressUnregisterNotifications != null &&
                    this.SuppressUnregisterNotifications.Equals(input.SuppressUnregisterNotifications))
                ) && 
                (
                    this.TenantID == input.TenantID ||
                    (this.TenantID != null &&
                    this.TenantID.Equals(input.TenantID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessGroup != null)
                    hashCode = hashCode * 59 + this.AccessGroup.GetHashCode();
                if (this.AuthMethod != null)
                    hashCode = hashCode * 59 + this.AuthMethod.GetHashCode();
                if (this.AuthNonce != null)
                    hashCode = hashCode * 59 + this.AuthNonce.GetHashCode();
                if (this.AuthPassword != null)
                    hashCode = hashCode * 59 + this.AuthPassword.GetHashCode();
                if (this.AuthUsername != null)
                    hashCode = hashCode * 59 + this.AuthUsername.GetHashCode();
                if (this.CustomChannelVars != null)
                    hashCode = hashCode * 59 + this.CustomChannelVars.GetHashCode();
                if (this.CustomSIPHeaders != null)
                    hashCode = hashCode * 59 + this.CustomSIPHeaders.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.Expires != null)
                    hashCode = hashCode * 59 + this.Expires.GetHashCode();
                if (this.RegisterOverwriteNotify != null)
                    hashCode = hashCode * 59 + this.RegisterOverwriteNotify.GetHashCode();
                if (this.SuppressUnregisterNotifications != null)
                    hashCode = hashCode * 59 + this.SuppressUnregisterNotifications.GetHashCode();
                if (this.TenantID != null)
                    hashCode = hashCode * 59 + this.TenantID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
