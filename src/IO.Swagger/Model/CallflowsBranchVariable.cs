/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Validator for the branch_variable callflow data object
    /// </summary>
    [DataContract]
    public partial class CallflowsBranchVariable :  IEquatable<CallflowsBranchVariable>, IValidatableObject
    {
        /// <summary>
        /// specifies where the variable is defined
        /// </summary>
        /// <value>specifies where the variable is defined</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScopeEnum
        {
            
            /// <summary>
            /// Enum Account for value: account
            /// </summary>
            [EnumMember(Value = "account")]
            Account = 1,
            
            /// <summary>
            /// Enum Customchannelvars for value: custom_channel_vars
            /// </summary>
            [EnumMember(Value = "custom_channel_vars")]
            Customchannelvars = 2,
            
            /// <summary>
            /// Enum Device for value: device
            /// </summary>
            [EnumMember(Value = "device")]
            Device = 3,
            
            /// <summary>
            /// Enum Merged for value: merged
            /// </summary>
            [EnumMember(Value = "merged")]
            Merged = 4,
            
            /// <summary>
            /// Enum User for value: user
            /// </summary>
            [EnumMember(Value = "user")]
            User = 5
        }

        /// <summary>
        /// specifies where the variable is defined
        /// </summary>
        /// <value>specifies where the variable is defined</value>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public ScopeEnum? Scope { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsBranchVariable" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallflowsBranchVariable() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsBranchVariable" /> class.
        /// </summary>
        /// <param name="scope">specifies where the variable is defined (default to ScopeEnum.Customchannelvars).</param>
        /// <param name="skipModule">When set to true this callflow action is skipped, advancing to the wildcard branch (if any).</param>
        /// <param name="variable">specifies the name of variable/property that should be looked up (required) (default to &quot;&quot;).</param>
        public CallflowsBranchVariable(ScopeEnum? scope = ScopeEnum.Customchannelvars, bool? skipModule = default(bool?), string variable = "")
        {
            // to ensure "variable" is required (not null)
            if (variable == null)
            {
                throw new InvalidDataException("variable is a required property for CallflowsBranchVariable and cannot be null");
            }
            else
            {
                this.Variable = variable;
            }
            // use default value if no "scope" provided
            if (scope == null)
            {
                this.Scope = ScopeEnum.Customchannelvars;
            }
            else
            {
                this.Scope = scope;
            }
            this.SkipModule = skipModule;
        }
        

        /// <summary>
        /// When set to true this callflow action is skipped, advancing to the wildcard branch (if any)
        /// </summary>
        /// <value>When set to true this callflow action is skipped, advancing to the wildcard branch (if any)</value>
        [DataMember(Name="skip_module", EmitDefaultValue=false)]
        public bool? SkipModule { get; set; }

        /// <summary>
        /// specifies the name of variable/property that should be looked up
        /// </summary>
        /// <value>specifies the name of variable/property that should be looked up</value>
        [DataMember(Name="variable", EmitDefaultValue=false)]
        public string Variable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallflowsBranchVariable {\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  SkipModule: ").Append(SkipModule).Append("\n");
            sb.Append("  Variable: ").Append(Variable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallflowsBranchVariable);
        }

        /// <summary>
        /// Returns true if CallflowsBranchVariable instances are equal
        /// </summary>
        /// <param name="input">Instance of CallflowsBranchVariable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallflowsBranchVariable input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.SkipModule == input.SkipModule ||
                    (this.SkipModule != null &&
                    this.SkipModule.Equals(input.SkipModule))
                ) && 
                (
                    this.Variable == input.Variable ||
                    (this.Variable != null &&
                    this.Variable.Equals(input.Variable))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.SkipModule != null)
                    hashCode = hashCode * 59 + this.SkipModule.GetHashCode();
                if (this.Variable != null)
                    hashCode = hashCode * 59 + this.Variable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
