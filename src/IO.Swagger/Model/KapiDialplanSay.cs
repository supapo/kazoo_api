/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for dialplan.say
    /// </summary>
    [DataContract]
    public partial class KapiDialplanSay :  IEquatable<KapiDialplanSay>, IValidatableObject
    {
        /// <summary>
        /// Defines ApplicationName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApplicationNameEnum
        {
            
            /// <summary>
            /// Enum Say for value: say
            /// </summary>
            [EnumMember(Value = "say")]
            Say = 1
        }

        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name="Application-Name", EmitDefaultValue=false)]
        public ApplicationNameEnum ApplicationName { get; set; }
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Call for value: call
            /// </summary>
            [EnumMember(Value = "call")]
            Call = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Command for value: command
            /// </summary>
            [EnumMember(Value = "command")]
            Command = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Defines Gender
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GenderEnum
        {
            
            /// <summary>
            /// Enum Masculine for value: masculine
            /// </summary>
            [EnumMember(Value = "masculine")]
            Masculine = 1,
            
            /// <summary>
            /// Enum Feminine for value: feminine
            /// </summary>
            [EnumMember(Value = "feminine")]
            Feminine = 2,
            
            /// <summary>
            /// Enum Neuter for value: neuter
            /// </summary>
            [EnumMember(Value = "neuter")]
            Neuter = 3
        }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name="Gender", EmitDefaultValue=false)]
        public GenderEnum? Gender { get; set; }
        /// <summary>
        /// Defines InsertAt
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InsertAtEnum
        {
            
            /// <summary>
            /// Enum Head for value: head
            /// </summary>
            [EnumMember(Value = "head")]
            Head = 1,
            
            /// <summary>
            /// Enum Tail for value: tail
            /// </summary>
            [EnumMember(Value = "tail")]
            Tail = 2,
            
            /// <summary>
            /// Enum Flush for value: flush
            /// </summary>
            [EnumMember(Value = "flush")]
            Flush = 3,
            
            /// <summary>
            /// Enum Now for value: now
            /// </summary>
            [EnumMember(Value = "now")]
            Now = 4
        }

        /// <summary>
        /// Gets or Sets InsertAt
        /// </summary>
        [DataMember(Name="Insert-At", EmitDefaultValue=false)]
        public InsertAtEnum? InsertAt { get; set; }
        /// <summary>
        /// Defines Method
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodEnum
        {
            
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,
            
            /// <summary>
            /// Enum Pronounced for value: pronounced
            /// </summary>
            [EnumMember(Value = "pronounced")]
            Pronounced = 2,
            
            /// <summary>
            /// Enum Iterated for value: iterated
            /// </summary>
            [EnumMember(Value = "iterated")]
            Iterated = 3,
            
            /// <summary>
            /// Enum Counted for value: counted
            /// </summary>
            [EnumMember(Value = "counted")]
            Counted = 4
        }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name="Method", EmitDefaultValue=false)]
        public MethodEnum Method { get; set; }
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 1,
            
            /// <summary>
            /// Enum Items for value: items
            /// </summary>
            [EnumMember(Value = "items")]
            Items = 2,
            
            /// <summary>
            /// Enum Persons for value: persons
            /// </summary>
            [EnumMember(Value = "persons")]
            Persons = 3,
            
            /// <summary>
            /// Enum Messages for value: messages
            /// </summary>
            [EnumMember(Value = "messages")]
            Messages = 4,
            
            /// <summary>
            /// Enum Currency for value: currency
            /// </summary>
            [EnumMember(Value = "currency")]
            Currency = 5,
            
            /// <summary>
            /// Enum Timemeasurement for value: time_measurement
            /// </summary>
            [EnumMember(Value = "time_measurement")]
            Timemeasurement = 6,
            
            /// <summary>
            /// Enum Currentdate for value: current_date
            /// </summary>
            [EnumMember(Value = "current_date")]
            Currentdate = 7,
            
            /// <summary>
            /// Enum Currenttime for value: current_time
            /// </summary>
            [EnumMember(Value = "current_time")]
            Currenttime = 8,
            
            /// <summary>
            /// Enum Currentdatetime for value: current_date_time
            /// </summary>
            [EnumMember(Value = "current_date_time")]
            Currentdatetime = 9,
            
            /// <summary>
            /// Enum Telephonenumber for value: telephone_number
            /// </summary>
            [EnumMember(Value = "telephone_number")]
            Telephonenumber = 10,
            
            /// <summary>
            /// Enum Telephoneextension for value: telephone_extension
            /// </summary>
            [EnumMember(Value = "telephone_extension")]
            Telephoneextension = 11,
            
            /// <summary>
            /// Enum Url for value: url
            /// </summary>
            [EnumMember(Value = "url")]
            Url = 12,
            
            /// <summary>
            /// Enum Ipaddress for value: ip_address
            /// </summary>
            [EnumMember(Value = "ip_address")]
            Ipaddress = 13,
            
            /// <summary>
            /// Enum EMailaddress for value: e-mail_address
            /// </summary>
            [EnumMember(Value = "e-mail_address")]
            EMailaddress = 14,
            
            /// <summary>
            /// Enum Postaladdress for value: postal_address
            /// </summary>
            [EnumMember(Value = "postal_address")]
            Postaladdress = 15,
            
            /// <summary>
            /// Enum Accountnumber for value: account_number
            /// </summary>
            [EnumMember(Value = "account_number")]
            Accountnumber = 16,
            
            /// <summary>
            /// Enum Namespelled for value: name_spelled
            /// </summary>
            [EnumMember(Value = "name_spelled")]
            Namespelled = 17,
            
            /// <summary>
            /// Enum Namephonetic for value: name_phonetic
            /// </summary>
            [EnumMember(Value = "name_phonetic")]
            Namephonetic = 18,
            
            /// <summary>
            /// Enum Shortdatetime for value: short_date_time
            /// </summary>
            [EnumMember(Value = "short_date_time")]
            Shortdatetime = 19
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanSay" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiDialplanSay() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanSay" /> class.
        /// </summary>
        /// <param name="applicationName">applicationName (required).</param>
        /// <param name="callID">callID (required).</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="gender">gender.</param>
        /// <param name="groupID">groupID.</param>
        /// <param name="insertAt">insertAt.</param>
        /// <param name="language">language (required).</param>
        /// <param name="method">method (required).</param>
        /// <param name="sayText">sayText (required).</param>
        /// <param name="type">type (required).</param>
        public KapiDialplanSay(ApplicationNameEnum applicationName = default(ApplicationNameEnum), string callID = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), GenderEnum? gender = default(GenderEnum?), string groupID = default(string), InsertAtEnum? insertAt = default(InsertAtEnum?), string language = default(string), MethodEnum method = default(MethodEnum), string sayText = default(string), TypeEnum type = default(TypeEnum))
        {
            // to ensure "applicationName" is required (not null)
            if (applicationName == null)
            {
                throw new InvalidDataException("applicationName is a required property for KapiDialplanSay and cannot be null");
            }
            else
            {
                this.ApplicationName = applicationName;
            }
            // to ensure "callID" is required (not null)
            if (callID == null)
            {
                throw new InvalidDataException("callID is a required property for KapiDialplanSay and cannot be null");
            }
            else
            {
                this.CallID = callID;
            }
            // to ensure "language" is required (not null)
            if (language == null)
            {
                throw new InvalidDataException("language is a required property for KapiDialplanSay and cannot be null");
            }
            else
            {
                this.Language = language;
            }
            // to ensure "method" is required (not null)
            if (method == null)
            {
                throw new InvalidDataException("method is a required property for KapiDialplanSay and cannot be null");
            }
            else
            {
                this.Method = method;
            }
            // to ensure "sayText" is required (not null)
            if (sayText == null)
            {
                throw new InvalidDataException("sayText is a required property for KapiDialplanSay and cannot be null");
            }
            else
            {
                this.SayText = sayText;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for KapiDialplanSay and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.Gender = gender;
            this.GroupID = groupID;
            this.InsertAt = insertAt;
        }
        

        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }




        /// <summary>
        /// Gets or Sets GroupID
        /// </summary>
        [DataMember(Name="Group-ID", EmitDefaultValue=false)]
        public string GroupID { get; set; }


        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name="Language", EmitDefaultValue=false)]
        public string Language { get; set; }


        /// <summary>
        /// Gets or Sets SayText
        /// </summary>
        [DataMember(Name="Say-Text", EmitDefaultValue=false)]
        public string SayText { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiDialplanSay {\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  GroupID: ").Append(GroupID).Append("\n");
            sb.Append("  InsertAt: ").Append(InsertAt).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  SayText: ").Append(SayText).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiDialplanSay);
        }

        /// <summary>
        /// Returns true if KapiDialplanSay instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiDialplanSay to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiDialplanSay input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                ) && 
                (
                    this.GroupID == input.GroupID ||
                    (this.GroupID != null &&
                    this.GroupID.Equals(input.GroupID))
                ) && 
                (
                    this.InsertAt == input.InsertAt ||
                    (this.InsertAt != null &&
                    this.InsertAt.Equals(input.InsertAt))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.SayText == input.SayText ||
                    (this.SayText != null &&
                    this.SayText.Equals(input.SayText))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationName != null)
                    hashCode = hashCode * 59 + this.ApplicationName.GetHashCode();
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.Gender != null)
                    hashCode = hashCode * 59 + this.Gender.GetHashCode();
                if (this.GroupID != null)
                    hashCode = hashCode * 59 + this.GroupID.GetHashCode();
                if (this.InsertAt != null)
                    hashCode = hashCode * 59 + this.InsertAt.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.SayText != null)
                    hashCode = hashCode * 59 + this.SayText.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
