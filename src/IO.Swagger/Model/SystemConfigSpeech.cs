/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for speech system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigSpeech :  IEquatable<SystemConfigSpeech>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigSpeech" /> class.
        /// </summary>
        /// <param name="asrApiKey">speech asr API key (default to &quot;&quot;).</param>
        /// <param name="asrLocale">speech asr default locale (default to &quot;en-us&quot;).</param>
        /// <param name="asrMimeType">speech asr mime type (default to &quot;application/wav&quot;).</param>
        /// <param name="asrPreferredContentType">speech asr preferred content type (default to &quot;application/wav&quot;).</param>
        /// <param name="asrProvider">speech asr provider (default to &quot;ispeech&quot;).</param>
        /// <param name="asrUrl">speech asr url (default to &quot;http://api.ispeech.org/api/json&quot;).</param>
        /// <param name="temporaryStoragePath">speech temporary storage path (default to &quot;/tmp&quot;).</param>
        /// <param name="ttsApiKey">speech tts api key (default to &quot;&quot;).</param>
        /// <param name="ttsArgsEncode">speech tts args encode (default to &quot;multipart&quot;).</param>
        /// <param name="ttsCache">How long, in milliseconds, to cache TTS media files.</param>
        /// <param name="ttsEndPadding">speech tts end padding.</param>
        /// <param name="ttsLanguage">speech tts language (default to &quot;en-us&quot;).</param>
        /// <param name="ttsProvider">speech tts provider (default to &quot;flite&quot;).</param>
        /// <param name="ttsSpeed">speech tts speed.</param>
        /// <param name="ttsStartPadding">speech tts start padding.</param>
        /// <param name="ttsUrlIspeech">speech TTS URL for iSpeech provider (default to &quot;http://api.ispeech.org/api/json&quot;).</param>
        /// <param name="ttsUrlVoicefabric">speech TTS URL for VoiceFabric provider (default to &quot;https://voicefabric.ru/WSServer/ws/tts&quot;).</param>
        /// <param name="ttsVoice">speech tts voice (default to &quot;male&quot;).</param>
        public SystemConfigSpeech(string asrApiKey = "", string asrLocale = "en-us", string asrMimeType = "application/wav", string asrPreferredContentType = "application/wav", string asrProvider = "ispeech", string asrUrl = "http://api.ispeech.org/api/json", string temporaryStoragePath = "/tmp", string ttsApiKey = "", string ttsArgsEncode = "multipart", int? ttsCache = default(int?), int? ttsEndPadding = default(int?), string ttsLanguage = "en-us", string ttsProvider = "flite", int? ttsSpeed = default(int?), int? ttsStartPadding = default(int?), string ttsUrlIspeech = "http://api.ispeech.org/api/json", string ttsUrlVoicefabric = "https://voicefabric.ru/WSServer/ws/tts", string ttsVoice = "male")
        {
            // use default value if no "asrApiKey" provided
            if (asrApiKey == null)
            {
                this.AsrApiKey = "";
            }
            else
            {
                this.AsrApiKey = asrApiKey;
            }
            // use default value if no "asrLocale" provided
            if (asrLocale == null)
            {
                this.AsrLocale = "en-us";
            }
            else
            {
                this.AsrLocale = asrLocale;
            }
            // use default value if no "asrMimeType" provided
            if (asrMimeType == null)
            {
                this.AsrMimeType = "application/wav";
            }
            else
            {
                this.AsrMimeType = asrMimeType;
            }
            // use default value if no "asrPreferredContentType" provided
            if (asrPreferredContentType == null)
            {
                this.AsrPreferredContentType = "application/wav";
            }
            else
            {
                this.AsrPreferredContentType = asrPreferredContentType;
            }
            // use default value if no "asrProvider" provided
            if (asrProvider == null)
            {
                this.AsrProvider = "ispeech";
            }
            else
            {
                this.AsrProvider = asrProvider;
            }
            // use default value if no "asrUrl" provided
            if (asrUrl == null)
            {
                this.AsrUrl = "http://api.ispeech.org/api/json";
            }
            else
            {
                this.AsrUrl = asrUrl;
            }
            // use default value if no "temporaryStoragePath" provided
            if (temporaryStoragePath == null)
            {
                this.TemporaryStoragePath = "/tmp";
            }
            else
            {
                this.TemporaryStoragePath = temporaryStoragePath;
            }
            // use default value if no "ttsApiKey" provided
            if (ttsApiKey == null)
            {
                this.TtsApiKey = "";
            }
            else
            {
                this.TtsApiKey = ttsApiKey;
            }
            // use default value if no "ttsArgsEncode" provided
            if (ttsArgsEncode == null)
            {
                this.TtsArgsEncode = "multipart";
            }
            else
            {
                this.TtsArgsEncode = ttsArgsEncode;
            }
            this.TtsCache = ttsCache;
            this.TtsEndPadding = ttsEndPadding;
            // use default value if no "ttsLanguage" provided
            if (ttsLanguage == null)
            {
                this.TtsLanguage = "en-us";
            }
            else
            {
                this.TtsLanguage = ttsLanguage;
            }
            // use default value if no "ttsProvider" provided
            if (ttsProvider == null)
            {
                this.TtsProvider = "flite";
            }
            else
            {
                this.TtsProvider = ttsProvider;
            }
            this.TtsSpeed = ttsSpeed;
            this.TtsStartPadding = ttsStartPadding;
            // use default value if no "ttsUrlIspeech" provided
            if (ttsUrlIspeech == null)
            {
                this.TtsUrlIspeech = "http://api.ispeech.org/api/json";
            }
            else
            {
                this.TtsUrlIspeech = ttsUrlIspeech;
            }
            // use default value if no "ttsUrlVoicefabric" provided
            if (ttsUrlVoicefabric == null)
            {
                this.TtsUrlVoicefabric = "https://voicefabric.ru/WSServer/ws/tts";
            }
            else
            {
                this.TtsUrlVoicefabric = ttsUrlVoicefabric;
            }
            // use default value if no "ttsVoice" provided
            if (ttsVoice == null)
            {
                this.TtsVoice = "male";
            }
            else
            {
                this.TtsVoice = ttsVoice;
            }
        }
        
        /// <summary>
        /// speech asr API key
        /// </summary>
        /// <value>speech asr API key</value>
        [DataMember(Name="asr_api_key", EmitDefaultValue=false)]
        public string AsrApiKey { get; set; }

        /// <summary>
        /// speech asr default locale
        /// </summary>
        /// <value>speech asr default locale</value>
        [DataMember(Name="asr_locale", EmitDefaultValue=false)]
        public string AsrLocale { get; set; }

        /// <summary>
        /// speech asr mime type
        /// </summary>
        /// <value>speech asr mime type</value>
        [DataMember(Name="asr_mime_type", EmitDefaultValue=false)]
        public string AsrMimeType { get; set; }

        /// <summary>
        /// speech asr preferred content type
        /// </summary>
        /// <value>speech asr preferred content type</value>
        [DataMember(Name="asr_preferred_content_type", EmitDefaultValue=false)]
        public string AsrPreferredContentType { get; set; }

        /// <summary>
        /// speech asr provider
        /// </summary>
        /// <value>speech asr provider</value>
        [DataMember(Name="asr_provider", EmitDefaultValue=false)]
        public string AsrProvider { get; set; }

        /// <summary>
        /// speech asr url
        /// </summary>
        /// <value>speech asr url</value>
        [DataMember(Name="asr_url", EmitDefaultValue=false)]
        public string AsrUrl { get; set; }

        /// <summary>
        /// speech temporary storage path
        /// </summary>
        /// <value>speech temporary storage path</value>
        [DataMember(Name="temporary_storage_path", EmitDefaultValue=false)]
        public string TemporaryStoragePath { get; set; }

        /// <summary>
        /// speech tts api key
        /// </summary>
        /// <value>speech tts api key</value>
        [DataMember(Name="tts_api_key", EmitDefaultValue=false)]
        public string TtsApiKey { get; set; }

        /// <summary>
        /// speech tts args encode
        /// </summary>
        /// <value>speech tts args encode</value>
        [DataMember(Name="tts_args_encode", EmitDefaultValue=false)]
        public string TtsArgsEncode { get; set; }

        /// <summary>
        /// How long, in milliseconds, to cache TTS media files
        /// </summary>
        /// <value>How long, in milliseconds, to cache TTS media files</value>
        [DataMember(Name="tts_cache", EmitDefaultValue=false)]
        public int? TtsCache { get; set; }

        /// <summary>
        /// speech tts end padding
        /// </summary>
        /// <value>speech tts end padding</value>
        [DataMember(Name="tts_end_padding", EmitDefaultValue=false)]
        public int? TtsEndPadding { get; set; }

        /// <summary>
        /// speech tts language
        /// </summary>
        /// <value>speech tts language</value>
        [DataMember(Name="tts_language", EmitDefaultValue=false)]
        public string TtsLanguage { get; set; }

        /// <summary>
        /// speech tts provider
        /// </summary>
        /// <value>speech tts provider</value>
        [DataMember(Name="tts_provider", EmitDefaultValue=false)]
        public string TtsProvider { get; set; }

        /// <summary>
        /// speech tts speed
        /// </summary>
        /// <value>speech tts speed</value>
        [DataMember(Name="tts_speed", EmitDefaultValue=false)]
        public int? TtsSpeed { get; set; }

        /// <summary>
        /// speech tts start padding
        /// </summary>
        /// <value>speech tts start padding</value>
        [DataMember(Name="tts_start_padding", EmitDefaultValue=false)]
        public int? TtsStartPadding { get; set; }

        /// <summary>
        /// speech TTS URL for iSpeech provider
        /// </summary>
        /// <value>speech TTS URL for iSpeech provider</value>
        [DataMember(Name="tts_url_ispeech", EmitDefaultValue=false)]
        public string TtsUrlIspeech { get; set; }

        /// <summary>
        /// speech TTS URL for VoiceFabric provider
        /// </summary>
        /// <value>speech TTS URL for VoiceFabric provider</value>
        [DataMember(Name="tts_url_voicefabric", EmitDefaultValue=false)]
        public string TtsUrlVoicefabric { get; set; }

        /// <summary>
        /// speech tts voice
        /// </summary>
        /// <value>speech tts voice</value>
        [DataMember(Name="tts_voice", EmitDefaultValue=false)]
        public string TtsVoice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigSpeech {\n");
            sb.Append("  AsrApiKey: ").Append(AsrApiKey).Append("\n");
            sb.Append("  AsrLocale: ").Append(AsrLocale).Append("\n");
            sb.Append("  AsrMimeType: ").Append(AsrMimeType).Append("\n");
            sb.Append("  AsrPreferredContentType: ").Append(AsrPreferredContentType).Append("\n");
            sb.Append("  AsrProvider: ").Append(AsrProvider).Append("\n");
            sb.Append("  AsrUrl: ").Append(AsrUrl).Append("\n");
            sb.Append("  TemporaryStoragePath: ").Append(TemporaryStoragePath).Append("\n");
            sb.Append("  TtsApiKey: ").Append(TtsApiKey).Append("\n");
            sb.Append("  TtsArgsEncode: ").Append(TtsArgsEncode).Append("\n");
            sb.Append("  TtsCache: ").Append(TtsCache).Append("\n");
            sb.Append("  TtsEndPadding: ").Append(TtsEndPadding).Append("\n");
            sb.Append("  TtsLanguage: ").Append(TtsLanguage).Append("\n");
            sb.Append("  TtsProvider: ").Append(TtsProvider).Append("\n");
            sb.Append("  TtsSpeed: ").Append(TtsSpeed).Append("\n");
            sb.Append("  TtsStartPadding: ").Append(TtsStartPadding).Append("\n");
            sb.Append("  TtsUrlIspeech: ").Append(TtsUrlIspeech).Append("\n");
            sb.Append("  TtsUrlVoicefabric: ").Append(TtsUrlVoicefabric).Append("\n");
            sb.Append("  TtsVoice: ").Append(TtsVoice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigSpeech);
        }

        /// <summary>
        /// Returns true if SystemConfigSpeech instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigSpeech to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigSpeech input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AsrApiKey == input.AsrApiKey ||
                    (this.AsrApiKey != null &&
                    this.AsrApiKey.Equals(input.AsrApiKey))
                ) && 
                (
                    this.AsrLocale == input.AsrLocale ||
                    (this.AsrLocale != null &&
                    this.AsrLocale.Equals(input.AsrLocale))
                ) && 
                (
                    this.AsrMimeType == input.AsrMimeType ||
                    (this.AsrMimeType != null &&
                    this.AsrMimeType.Equals(input.AsrMimeType))
                ) && 
                (
                    this.AsrPreferredContentType == input.AsrPreferredContentType ||
                    (this.AsrPreferredContentType != null &&
                    this.AsrPreferredContentType.Equals(input.AsrPreferredContentType))
                ) && 
                (
                    this.AsrProvider == input.AsrProvider ||
                    (this.AsrProvider != null &&
                    this.AsrProvider.Equals(input.AsrProvider))
                ) && 
                (
                    this.AsrUrl == input.AsrUrl ||
                    (this.AsrUrl != null &&
                    this.AsrUrl.Equals(input.AsrUrl))
                ) && 
                (
                    this.TemporaryStoragePath == input.TemporaryStoragePath ||
                    (this.TemporaryStoragePath != null &&
                    this.TemporaryStoragePath.Equals(input.TemporaryStoragePath))
                ) && 
                (
                    this.TtsApiKey == input.TtsApiKey ||
                    (this.TtsApiKey != null &&
                    this.TtsApiKey.Equals(input.TtsApiKey))
                ) && 
                (
                    this.TtsArgsEncode == input.TtsArgsEncode ||
                    (this.TtsArgsEncode != null &&
                    this.TtsArgsEncode.Equals(input.TtsArgsEncode))
                ) && 
                (
                    this.TtsCache == input.TtsCache ||
                    (this.TtsCache != null &&
                    this.TtsCache.Equals(input.TtsCache))
                ) && 
                (
                    this.TtsEndPadding == input.TtsEndPadding ||
                    (this.TtsEndPadding != null &&
                    this.TtsEndPadding.Equals(input.TtsEndPadding))
                ) && 
                (
                    this.TtsLanguage == input.TtsLanguage ||
                    (this.TtsLanguage != null &&
                    this.TtsLanguage.Equals(input.TtsLanguage))
                ) && 
                (
                    this.TtsProvider == input.TtsProvider ||
                    (this.TtsProvider != null &&
                    this.TtsProvider.Equals(input.TtsProvider))
                ) && 
                (
                    this.TtsSpeed == input.TtsSpeed ||
                    (this.TtsSpeed != null &&
                    this.TtsSpeed.Equals(input.TtsSpeed))
                ) && 
                (
                    this.TtsStartPadding == input.TtsStartPadding ||
                    (this.TtsStartPadding != null &&
                    this.TtsStartPadding.Equals(input.TtsStartPadding))
                ) && 
                (
                    this.TtsUrlIspeech == input.TtsUrlIspeech ||
                    (this.TtsUrlIspeech != null &&
                    this.TtsUrlIspeech.Equals(input.TtsUrlIspeech))
                ) && 
                (
                    this.TtsUrlVoicefabric == input.TtsUrlVoicefabric ||
                    (this.TtsUrlVoicefabric != null &&
                    this.TtsUrlVoicefabric.Equals(input.TtsUrlVoicefabric))
                ) && 
                (
                    this.TtsVoice == input.TtsVoice ||
                    (this.TtsVoice != null &&
                    this.TtsVoice.Equals(input.TtsVoice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AsrApiKey != null)
                    hashCode = hashCode * 59 + this.AsrApiKey.GetHashCode();
                if (this.AsrLocale != null)
                    hashCode = hashCode * 59 + this.AsrLocale.GetHashCode();
                if (this.AsrMimeType != null)
                    hashCode = hashCode * 59 + this.AsrMimeType.GetHashCode();
                if (this.AsrPreferredContentType != null)
                    hashCode = hashCode * 59 + this.AsrPreferredContentType.GetHashCode();
                if (this.AsrProvider != null)
                    hashCode = hashCode * 59 + this.AsrProvider.GetHashCode();
                if (this.AsrUrl != null)
                    hashCode = hashCode * 59 + this.AsrUrl.GetHashCode();
                if (this.TemporaryStoragePath != null)
                    hashCode = hashCode * 59 + this.TemporaryStoragePath.GetHashCode();
                if (this.TtsApiKey != null)
                    hashCode = hashCode * 59 + this.TtsApiKey.GetHashCode();
                if (this.TtsArgsEncode != null)
                    hashCode = hashCode * 59 + this.TtsArgsEncode.GetHashCode();
                if (this.TtsCache != null)
                    hashCode = hashCode * 59 + this.TtsCache.GetHashCode();
                if (this.TtsEndPadding != null)
                    hashCode = hashCode * 59 + this.TtsEndPadding.GetHashCode();
                if (this.TtsLanguage != null)
                    hashCode = hashCode * 59 + this.TtsLanguage.GetHashCode();
                if (this.TtsProvider != null)
                    hashCode = hashCode * 59 + this.TtsProvider.GetHashCode();
                if (this.TtsSpeed != null)
                    hashCode = hashCode * 59 + this.TtsSpeed.GetHashCode();
                if (this.TtsStartPadding != null)
                    hashCode = hashCode * 59 + this.TtsStartPadding.GetHashCode();
                if (this.TtsUrlIspeech != null)
                    hashCode = hashCode * 59 + this.TtsUrlIspeech.GetHashCode();
                if (this.TtsUrlVoicefabric != null)
                    hashCode = hashCode * 59 + this.TtsUrlVoicefabric.GetHashCode();
                if (this.TtsVoice != null)
                    hashCode = hashCode * 59 + this.TtsVoice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
