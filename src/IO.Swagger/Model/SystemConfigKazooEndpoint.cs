/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for kazoo_endpoint system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigKazooEndpoint :  IEquatable<SystemConfigKazooEndpoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigKazooEndpoint" /> class.
        /// </summary>
        /// <param name="customSipInterface">kazoo_endpoint custom sip interface.</param>
        /// <param name="defaultCallerIdName">kazoo_endpoint default caller id name.</param>
        /// <param name="defaultCallerIdNumber">kazoo_endpoint default caller id number.</param>
        /// <param name="defaultCanTextSelf">kazoo_endpoint default can text self (default to true).</param>
        /// <param name="defaultIgnoreCompletedElsewhere">kazoo_endpoint default ignore completed elsewhere (default to true).</param>
        /// <param name="restrictToKnownTypes">kazoo_endpoint restrict to known types (default to false).</param>
        /// <param name="shouldAddDiversionHeader">kazoo_endpoint should add diversion header (default to false).</param>
        /// <param name="sipTransport">kazoo_endpoint sip transport.</param>
        public SystemConfigKazooEndpoint(string customSipInterface = default(string), string defaultCallerIdName = default(string), string defaultCallerIdNumber = default(string), bool? defaultCanTextSelf = true, bool? defaultIgnoreCompletedElsewhere = true, bool? restrictToKnownTypes = false, bool? shouldAddDiversionHeader = false, string sipTransport = default(string))
        {
            this.CustomSipInterface = customSipInterface;
            this.DefaultCallerIdName = defaultCallerIdName;
            this.DefaultCallerIdNumber = defaultCallerIdNumber;
            // use default value if no "defaultCanTextSelf" provided
            if (defaultCanTextSelf == null)
            {
                this.DefaultCanTextSelf = true;
            }
            else
            {
                this.DefaultCanTextSelf = defaultCanTextSelf;
            }
            // use default value if no "defaultIgnoreCompletedElsewhere" provided
            if (defaultIgnoreCompletedElsewhere == null)
            {
                this.DefaultIgnoreCompletedElsewhere = true;
            }
            else
            {
                this.DefaultIgnoreCompletedElsewhere = defaultIgnoreCompletedElsewhere;
            }
            // use default value if no "restrictToKnownTypes" provided
            if (restrictToKnownTypes == null)
            {
                this.RestrictToKnownTypes = false;
            }
            else
            {
                this.RestrictToKnownTypes = restrictToKnownTypes;
            }
            // use default value if no "shouldAddDiversionHeader" provided
            if (shouldAddDiversionHeader == null)
            {
                this.ShouldAddDiversionHeader = false;
            }
            else
            {
                this.ShouldAddDiversionHeader = shouldAddDiversionHeader;
            }
            this.SipTransport = sipTransport;
        }
        
        /// <summary>
        /// kazoo_endpoint custom sip interface
        /// </summary>
        /// <value>kazoo_endpoint custom sip interface</value>
        [DataMember(Name="custom_sip_interface", EmitDefaultValue=false)]
        public string CustomSipInterface { get; set; }

        /// <summary>
        /// kazoo_endpoint default caller id name
        /// </summary>
        /// <value>kazoo_endpoint default caller id name</value>
        [DataMember(Name="default_caller_id_name", EmitDefaultValue=false)]
        public string DefaultCallerIdName { get; set; }

        /// <summary>
        /// kazoo_endpoint default caller id number
        /// </summary>
        /// <value>kazoo_endpoint default caller id number</value>
        [DataMember(Name="default_caller_id_number", EmitDefaultValue=false)]
        public string DefaultCallerIdNumber { get; set; }

        /// <summary>
        /// kazoo_endpoint default can text self
        /// </summary>
        /// <value>kazoo_endpoint default can text self</value>
        [DataMember(Name="default_can_text_self", EmitDefaultValue=false)]
        public bool? DefaultCanTextSelf { get; set; }

        /// <summary>
        /// kazoo_endpoint default ignore completed elsewhere
        /// </summary>
        /// <value>kazoo_endpoint default ignore completed elsewhere</value>
        [DataMember(Name="default_ignore_completed_elsewhere", EmitDefaultValue=false)]
        public bool? DefaultIgnoreCompletedElsewhere { get; set; }

        /// <summary>
        /// kazoo_endpoint restrict to known types
        /// </summary>
        /// <value>kazoo_endpoint restrict to known types</value>
        [DataMember(Name="restrict_to_known_types", EmitDefaultValue=false)]
        public bool? RestrictToKnownTypes { get; set; }

        /// <summary>
        /// kazoo_endpoint should add diversion header
        /// </summary>
        /// <value>kazoo_endpoint should add diversion header</value>
        [DataMember(Name="should_add_diversion_header", EmitDefaultValue=false)]
        public bool? ShouldAddDiversionHeader { get; set; }

        /// <summary>
        /// kazoo_endpoint sip transport
        /// </summary>
        /// <value>kazoo_endpoint sip transport</value>
        [DataMember(Name="sip_transport", EmitDefaultValue=false)]
        public string SipTransport { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigKazooEndpoint {\n");
            sb.Append("  CustomSipInterface: ").Append(CustomSipInterface).Append("\n");
            sb.Append("  DefaultCallerIdName: ").Append(DefaultCallerIdName).Append("\n");
            sb.Append("  DefaultCallerIdNumber: ").Append(DefaultCallerIdNumber).Append("\n");
            sb.Append("  DefaultCanTextSelf: ").Append(DefaultCanTextSelf).Append("\n");
            sb.Append("  DefaultIgnoreCompletedElsewhere: ").Append(DefaultIgnoreCompletedElsewhere).Append("\n");
            sb.Append("  RestrictToKnownTypes: ").Append(RestrictToKnownTypes).Append("\n");
            sb.Append("  ShouldAddDiversionHeader: ").Append(ShouldAddDiversionHeader).Append("\n");
            sb.Append("  SipTransport: ").Append(SipTransport).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigKazooEndpoint);
        }

        /// <summary>
        /// Returns true if SystemConfigKazooEndpoint instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigKazooEndpoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigKazooEndpoint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomSipInterface == input.CustomSipInterface ||
                    (this.CustomSipInterface != null &&
                    this.CustomSipInterface.Equals(input.CustomSipInterface))
                ) && 
                (
                    this.DefaultCallerIdName == input.DefaultCallerIdName ||
                    (this.DefaultCallerIdName != null &&
                    this.DefaultCallerIdName.Equals(input.DefaultCallerIdName))
                ) && 
                (
                    this.DefaultCallerIdNumber == input.DefaultCallerIdNumber ||
                    (this.DefaultCallerIdNumber != null &&
                    this.DefaultCallerIdNumber.Equals(input.DefaultCallerIdNumber))
                ) && 
                (
                    this.DefaultCanTextSelf == input.DefaultCanTextSelf ||
                    (this.DefaultCanTextSelf != null &&
                    this.DefaultCanTextSelf.Equals(input.DefaultCanTextSelf))
                ) && 
                (
                    this.DefaultIgnoreCompletedElsewhere == input.DefaultIgnoreCompletedElsewhere ||
                    (this.DefaultIgnoreCompletedElsewhere != null &&
                    this.DefaultIgnoreCompletedElsewhere.Equals(input.DefaultIgnoreCompletedElsewhere))
                ) && 
                (
                    this.RestrictToKnownTypes == input.RestrictToKnownTypes ||
                    (this.RestrictToKnownTypes != null &&
                    this.RestrictToKnownTypes.Equals(input.RestrictToKnownTypes))
                ) && 
                (
                    this.ShouldAddDiversionHeader == input.ShouldAddDiversionHeader ||
                    (this.ShouldAddDiversionHeader != null &&
                    this.ShouldAddDiversionHeader.Equals(input.ShouldAddDiversionHeader))
                ) && 
                (
                    this.SipTransport == input.SipTransport ||
                    (this.SipTransport != null &&
                    this.SipTransport.Equals(input.SipTransport))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomSipInterface != null)
                    hashCode = hashCode * 59 + this.CustomSipInterface.GetHashCode();
                if (this.DefaultCallerIdName != null)
                    hashCode = hashCode * 59 + this.DefaultCallerIdName.GetHashCode();
                if (this.DefaultCallerIdNumber != null)
                    hashCode = hashCode * 59 + this.DefaultCallerIdNumber.GetHashCode();
                if (this.DefaultCanTextSelf != null)
                    hashCode = hashCode * 59 + this.DefaultCanTextSelf.GetHashCode();
                if (this.DefaultIgnoreCompletedElsewhere != null)
                    hashCode = hashCode * 59 + this.DefaultIgnoreCompletedElsewhere.GetHashCode();
                if (this.RestrictToKnownTypes != null)
                    hashCode = hashCode * 59 + this.RestrictToKnownTypes.GetHashCode();
                if (this.ShouldAddDiversionHeader != null)
                    hashCode = hashCode * 59 + this.ShouldAddDiversionHeader.GetHashCode();
                if (this.SipTransport != null)
                    hashCode = hashCode * 59 + this.SipTransport.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
