/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for conference dial API command
    /// </summary>
    [DataContract]
    public partial class ConferencesDial :  IEquatable<ConferencesDial>, IValidatableObject
    {
        /// <summary>
        /// Participant flag
        /// </summary>
        /// <value>Participant flag</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ParticipantFlagsEnum
        {
            
            /// <summary>
            /// Enum Mute for value: mute
            /// </summary>
            [EnumMember(Value = "mute")]
            Mute = 1,
            
            /// <summary>
            /// Enum Deaf for value: deaf
            /// </summary>
            [EnumMember(Value = "deaf")]
            Deaf = 2,
            
            /// <summary>
            /// Enum Distributedtmf for value: distribute_dtmf
            /// </summary>
            [EnumMember(Value = "distribute_dtmf")]
            Distributedtmf = 3,
            
            /// <summary>
            /// Enum Ismoderator for value: is_moderator
            /// </summary>
            [EnumMember(Value = "is_moderator")]
            Ismoderator = 4,
            
            /// <summary>
            /// Enum Disablemoh for value: disable_moh
            /// </summary>
            [EnumMember(Value = "disable_moh")]
            Disablemoh = 5,
            
            /// <summary>
            /// Enum Ghost for value: ghost
            /// </summary>
            [EnumMember(Value = "ghost")]
            Ghost = 6,
            
            /// <summary>
            /// Enum Joinexisting for value: join_existing
            /// </summary>
            [EnumMember(Value = "join_existing")]
            Joinexisting = 7,
            
            /// <summary>
            /// Enum Videomute for value: video_mute
            /// </summary>
            [EnumMember(Value = "video_mute")]
            Videomute = 8
        }


        /// <summary>
        /// Participant flags applied to each endpoint when it joins the conference
        /// </summary>
        /// <value>Participant flags applied to each endpoint when it joins the conference</value>
        [DataMember(Name="participant_flags", EmitDefaultValue=false)]
        public List<ParticipantFlagsEnum> ParticipantFlags { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConferencesDial" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConferencesDial() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConferencesDial" /> class.
        /// </summary>
        /// <param name="callerIdName">Caller ID Name to use when dialing out to endpoints.</param>
        /// <param name="callerIdNumber">Caller ID Number to use when dialing out to endpoints.</param>
        /// <param name="endpoints">Endpoints to dial out to and join to the conference (required).</param>
        /// <param name="participantFlags">Participant flags applied to each endpoint when it joins the conference.</param>
        /// <param name="profileName">The profile name to use for configuration.</param>
        /// <param name="targetCallId">Existing UUID to use as a hint for where to start the conference.</param>
        /// <param name="timeout">How long to try to reach the endpoint(s).</param>
        public ConferencesDial(string callerIdName = default(string), string callerIdNumber = default(string), List<Object> endpoints = default(List<Object>), List<ParticipantFlagsEnum> participantFlags = default(List<ParticipantFlagsEnum>), string profileName = default(string), string targetCallId = default(string), int? timeout = default(int?))
        {
            // to ensure "endpoints" is required (not null)
            if (endpoints == null)
            {
                throw new InvalidDataException("endpoints is a required property for ConferencesDial and cannot be null");
            }
            else
            {
                this.Endpoints = endpoints;
            }
            this.CallerIdName = callerIdName;
            this.CallerIdNumber = callerIdNumber;
            this.ParticipantFlags = participantFlags;
            this.ProfileName = profileName;
            this.TargetCallId = targetCallId;
            this.Timeout = timeout;
        }
        
        /// <summary>
        /// Caller ID Name to use when dialing out to endpoints
        /// </summary>
        /// <value>Caller ID Name to use when dialing out to endpoints</value>
        [DataMember(Name="caller_id_name", EmitDefaultValue=false)]
        public string CallerIdName { get; set; }

        /// <summary>
        /// Caller ID Number to use when dialing out to endpoints
        /// </summary>
        /// <value>Caller ID Number to use when dialing out to endpoints</value>
        [DataMember(Name="caller_id_number", EmitDefaultValue=false)]
        public string CallerIdNumber { get; set; }

        /// <summary>
        /// Endpoints to dial out to and join to the conference
        /// </summary>
        /// <value>Endpoints to dial out to and join to the conference</value>
        [DataMember(Name="endpoints", EmitDefaultValue=false)]
        public List<Object> Endpoints { get; set; }


        /// <summary>
        /// The profile name to use for configuration
        /// </summary>
        /// <value>The profile name to use for configuration</value>
        [DataMember(Name="profile_name", EmitDefaultValue=false)]
        public string ProfileName { get; set; }

        /// <summary>
        /// Existing UUID to use as a hint for where to start the conference
        /// </summary>
        /// <value>Existing UUID to use as a hint for where to start the conference</value>
        [DataMember(Name="target_call_id", EmitDefaultValue=false)]
        public string TargetCallId { get; set; }

        /// <summary>
        /// How long to try to reach the endpoint(s)
        /// </summary>
        /// <value>How long to try to reach the endpoint(s)</value>
        [DataMember(Name="timeout", EmitDefaultValue=false)]
        public int? Timeout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConferencesDial {\n");
            sb.Append("  CallerIdName: ").Append(CallerIdName).Append("\n");
            sb.Append("  CallerIdNumber: ").Append(CallerIdNumber).Append("\n");
            sb.Append("  Endpoints: ").Append(Endpoints).Append("\n");
            sb.Append("  ParticipantFlags: ").Append(ParticipantFlags).Append("\n");
            sb.Append("  ProfileName: ").Append(ProfileName).Append("\n");
            sb.Append("  TargetCallId: ").Append(TargetCallId).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConferencesDial);
        }

        /// <summary>
        /// Returns true if ConferencesDial instances are equal
        /// </summary>
        /// <param name="input">Instance of ConferencesDial to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConferencesDial input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CallerIdName == input.CallerIdName ||
                    (this.CallerIdName != null &&
                    this.CallerIdName.Equals(input.CallerIdName))
                ) && 
                (
                    this.CallerIdNumber == input.CallerIdNumber ||
                    (this.CallerIdNumber != null &&
                    this.CallerIdNumber.Equals(input.CallerIdNumber))
                ) && 
                (
                    this.Endpoints == input.Endpoints ||
                    this.Endpoints != null &&
                    this.Endpoints.SequenceEqual(input.Endpoints)
                ) && 
                (
                    this.ParticipantFlags == input.ParticipantFlags ||
                    this.ParticipantFlags != null &&
                    this.ParticipantFlags.SequenceEqual(input.ParticipantFlags)
                ) && 
                (
                    this.ProfileName == input.ProfileName ||
                    (this.ProfileName != null &&
                    this.ProfileName.Equals(input.ProfileName))
                ) && 
                (
                    this.TargetCallId == input.TargetCallId ||
                    (this.TargetCallId != null &&
                    this.TargetCallId.Equals(input.TargetCallId))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    (this.Timeout != null &&
                    this.Timeout.Equals(input.Timeout))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CallerIdName != null)
                    hashCode = hashCode * 59 + this.CallerIdName.GetHashCode();
                if (this.CallerIdNumber != null)
                    hashCode = hashCode * 59 + this.CallerIdNumber.GetHashCode();
                if (this.Endpoints != null)
                    hashCode = hashCode * 59 + this.Endpoints.GetHashCode();
                if (this.ParticipantFlags != null)
                    hashCode = hashCode * 59 + this.ParticipantFlags.GetHashCode();
                if (this.ProfileName != null)
                    hashCode = hashCode * 59 + this.ProfileName.GetHashCode();
                if (this.TargetCallId != null)
                    hashCode = hashCode * 59 + this.TargetCallId.GetHashCode();
                if (this.Timeout != null)
                    hashCode = hashCode * 59 + this.Timeout.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Timeout (int?) minimum
            if(this.Timeout < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Timeout, must be a value greater than or equal to 1.", new [] { "Timeout" });
            }

            yield break;
        }
    }

}
