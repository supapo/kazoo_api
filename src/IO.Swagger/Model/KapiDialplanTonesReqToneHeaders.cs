/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for dialplan.tones_req_tone_headers
    /// </summary>
    [DataContract]
    public partial class KapiDialplanTonesReqToneHeaders :  IEquatable<KapiDialplanTonesReqToneHeaders>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanTonesReqToneHeaders" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiDialplanTonesReqToneHeaders() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanTonesReqToneHeaders" /> class.
        /// </summary>
        /// <param name="durationOFF">durationOFF (required).</param>
        /// <param name="durationON">durationON (required).</param>
        /// <param name="frequencies">frequencies (required).</param>
        /// <param name="repeat">repeat.</param>
        /// <param name="volume">volume.</param>
        public KapiDialplanTonesReqToneHeaders(string durationOFF = default(string), string durationON = default(string), string frequencies = default(string), string repeat = default(string), string volume = default(string))
        {
            // to ensure "durationOFF" is required (not null)
            if (durationOFF == null)
            {
                throw new InvalidDataException("durationOFF is a required property for KapiDialplanTonesReqToneHeaders and cannot be null");
            }
            else
            {
                this.DurationOFF = durationOFF;
            }
            // to ensure "durationON" is required (not null)
            if (durationON == null)
            {
                throw new InvalidDataException("durationON is a required property for KapiDialplanTonesReqToneHeaders and cannot be null");
            }
            else
            {
                this.DurationON = durationON;
            }
            // to ensure "frequencies" is required (not null)
            if (frequencies == null)
            {
                throw new InvalidDataException("frequencies is a required property for KapiDialplanTonesReqToneHeaders and cannot be null");
            }
            else
            {
                this.Frequencies = frequencies;
            }
            this.Repeat = repeat;
            this.Volume = volume;
        }
        
        /// <summary>
        /// Gets or Sets DurationOFF
        /// </summary>
        [DataMember(Name="Duration-OFF", EmitDefaultValue=false)]
        public string DurationOFF { get; set; }

        /// <summary>
        /// Gets or Sets DurationON
        /// </summary>
        [DataMember(Name="Duration-ON", EmitDefaultValue=false)]
        public string DurationON { get; set; }

        /// <summary>
        /// Gets or Sets Frequencies
        /// </summary>
        [DataMember(Name="Frequencies", EmitDefaultValue=false)]
        public string Frequencies { get; set; }

        /// <summary>
        /// Gets or Sets Repeat
        /// </summary>
        [DataMember(Name="Repeat", EmitDefaultValue=false)]
        public string Repeat { get; set; }

        /// <summary>
        /// Gets or Sets Volume
        /// </summary>
        [DataMember(Name="Volume", EmitDefaultValue=false)]
        public string Volume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiDialplanTonesReqToneHeaders {\n");
            sb.Append("  DurationOFF: ").Append(DurationOFF).Append("\n");
            sb.Append("  DurationON: ").Append(DurationON).Append("\n");
            sb.Append("  Frequencies: ").Append(Frequencies).Append("\n");
            sb.Append("  Repeat: ").Append(Repeat).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiDialplanTonesReqToneHeaders);
        }

        /// <summary>
        /// Returns true if KapiDialplanTonesReqToneHeaders instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiDialplanTonesReqToneHeaders to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiDialplanTonesReqToneHeaders input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DurationOFF == input.DurationOFF ||
                    (this.DurationOFF != null &&
                    this.DurationOFF.Equals(input.DurationOFF))
                ) && 
                (
                    this.DurationON == input.DurationON ||
                    (this.DurationON != null &&
                    this.DurationON.Equals(input.DurationON))
                ) && 
                (
                    this.Frequencies == input.Frequencies ||
                    (this.Frequencies != null &&
                    this.Frequencies.Equals(input.Frequencies))
                ) && 
                (
                    this.Repeat == input.Repeat ||
                    (this.Repeat != null &&
                    this.Repeat.Equals(input.Repeat))
                ) && 
                (
                    this.Volume == input.Volume ||
                    (this.Volume != null &&
                    this.Volume.Equals(input.Volume))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DurationOFF != null)
                    hashCode = hashCode * 59 + this.DurationOFF.GetHashCode();
                if (this.DurationON != null)
                    hashCode = hashCode * 59 + this.DurationON.GetHashCode();
                if (this.Frequencies != null)
                    hashCode = hashCode * 59 + this.Frequencies.GetHashCode();
                if (this.Repeat != null)
                    hashCode = hashCode * 59 + this.Repeat.GetHashCode();
                if (this.Volume != null)
                    hashCode = hashCode * 59 + this.Volume.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
