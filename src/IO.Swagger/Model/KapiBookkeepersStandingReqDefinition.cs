/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for bookkeepers.standing_req_definition
    /// </summary>
    [DataContract]
    public partial class KapiBookkeepersStandingReqDefinition :  IEquatable<KapiBookkeepersStandingReqDefinition>, IValidatableObject
    {
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Bookkeepers for value: bookkeepers
            /// </summary>
            [EnumMember(Value = "bookkeepers")]
            Bookkeepers = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Standingreq for value: standing_req
            /// </summary>
            [EnumMember(Value = "standing_req")]
            Standingreq = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiBookkeepersStandingReqDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiBookkeepersStandingReqDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiBookkeepersStandingReqDefinition" /> class.
        /// </summary>
        /// <param name="accountID">accountID (required).</param>
        /// <param name="bookkeeperID">bookkeeperID (required).</param>
        /// <param name="bookkeeperType">bookkeeperType (required).</param>
        /// <param name="estimatedWithdrawal">estimatedWithdrawal (required).</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="items">items (required).</param>
        /// <param name="vendorID">vendorID (required).</param>
        public KapiBookkeepersStandingReqDefinition(string accountID = default(string), string bookkeeperID = default(string), string bookkeeperType = default(string), string estimatedWithdrawal = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string items = default(string), string vendorID = default(string))
        {
            // to ensure "accountID" is required (not null)
            if (accountID == null)
            {
                throw new InvalidDataException("accountID is a required property for KapiBookkeepersStandingReqDefinition and cannot be null");
            }
            else
            {
                this.AccountID = accountID;
            }
            // to ensure "bookkeeperID" is required (not null)
            if (bookkeeperID == null)
            {
                throw new InvalidDataException("bookkeeperID is a required property for KapiBookkeepersStandingReqDefinition and cannot be null");
            }
            else
            {
                this.BookkeeperID = bookkeeperID;
            }
            // to ensure "bookkeeperType" is required (not null)
            if (bookkeeperType == null)
            {
                throw new InvalidDataException("bookkeeperType is a required property for KapiBookkeepersStandingReqDefinition and cannot be null");
            }
            else
            {
                this.BookkeeperType = bookkeeperType;
            }
            // to ensure "estimatedWithdrawal" is required (not null)
            if (estimatedWithdrawal == null)
            {
                throw new InvalidDataException("estimatedWithdrawal is a required property for KapiBookkeepersStandingReqDefinition and cannot be null");
            }
            else
            {
                this.EstimatedWithdrawal = estimatedWithdrawal;
            }
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new InvalidDataException("items is a required property for KapiBookkeepersStandingReqDefinition and cannot be null");
            }
            else
            {
                this.Items = items;
            }
            // to ensure "vendorID" is required (not null)
            if (vendorID == null)
            {
                throw new InvalidDataException("vendorID is a required property for KapiBookkeepersStandingReqDefinition and cannot be null");
            }
            else
            {
                this.VendorID = vendorID;
            }
            this.EventCategory = eventCategory;
            this.EventName = eventName;
        }
        
        /// <summary>
        /// Gets or Sets AccountID
        /// </summary>
        [DataMember(Name="Account-ID", EmitDefaultValue=false)]
        public string AccountID { get; set; }

        /// <summary>
        /// Gets or Sets BookkeeperID
        /// </summary>
        [DataMember(Name="Bookkeeper-ID", EmitDefaultValue=false)]
        public string BookkeeperID { get; set; }

        /// <summary>
        /// Gets or Sets BookkeeperType
        /// </summary>
        [DataMember(Name="Bookkeeper-Type", EmitDefaultValue=false)]
        public string BookkeeperType { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedWithdrawal
        /// </summary>
        [DataMember(Name="Estimated-Withdrawal", EmitDefaultValue=false)]
        public string EstimatedWithdrawal { get; set; }



        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="Items", EmitDefaultValue=false)]
        public string Items { get; set; }

        /// <summary>
        /// Gets or Sets VendorID
        /// </summary>
        [DataMember(Name="Vendor-ID", EmitDefaultValue=false)]
        public string VendorID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiBookkeepersStandingReqDefinition {\n");
            sb.Append("  AccountID: ").Append(AccountID).Append("\n");
            sb.Append("  BookkeeperID: ").Append(BookkeeperID).Append("\n");
            sb.Append("  BookkeeperType: ").Append(BookkeeperType).Append("\n");
            sb.Append("  EstimatedWithdrawal: ").Append(EstimatedWithdrawal).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  VendorID: ").Append(VendorID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiBookkeepersStandingReqDefinition);
        }

        /// <summary>
        /// Returns true if KapiBookkeepersStandingReqDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiBookkeepersStandingReqDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiBookkeepersStandingReqDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountID == input.AccountID ||
                    (this.AccountID != null &&
                    this.AccountID.Equals(input.AccountID))
                ) && 
                (
                    this.BookkeeperID == input.BookkeeperID ||
                    (this.BookkeeperID != null &&
                    this.BookkeeperID.Equals(input.BookkeeperID))
                ) && 
                (
                    this.BookkeeperType == input.BookkeeperType ||
                    (this.BookkeeperType != null &&
                    this.BookkeeperType.Equals(input.BookkeeperType))
                ) && 
                (
                    this.EstimatedWithdrawal == input.EstimatedWithdrawal ||
                    (this.EstimatedWithdrawal != null &&
                    this.EstimatedWithdrawal.Equals(input.EstimatedWithdrawal))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.Items == input.Items ||
                    (this.Items != null &&
                    this.Items.Equals(input.Items))
                ) && 
                (
                    this.VendorID == input.VendorID ||
                    (this.VendorID != null &&
                    this.VendorID.Equals(input.VendorID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountID != null)
                    hashCode = hashCode * 59 + this.AccountID.GetHashCode();
                if (this.BookkeeperID != null)
                    hashCode = hashCode * 59 + this.BookkeeperID.GetHashCode();
                if (this.BookkeeperType != null)
                    hashCode = hashCode * 59 + this.BookkeeperType.GetHashCode();
                if (this.EstimatedWithdrawal != null)
                    hashCode = hashCode * 59 + this.EstimatedWithdrawal.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.VendorID != null)
                    hashCode = hashCode * 59 + this.VendorID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
