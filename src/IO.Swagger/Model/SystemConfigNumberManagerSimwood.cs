/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for number_manager.simwood system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigNumberManagerSimwood :  IEquatable<SystemConfigNumberManagerSimwood>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigNumberManagerSimwood" /> class.
        /// </summary>
        /// <param name="authPassword">number_manager.simwood auth password (default to &quot;&quot;).</param>
        /// <param name="authUsername">number_manager.simwood auth username (default to &quot;&quot;).</param>
        /// <param name="numbersApiUrl">number_manager.simwood numbers api url (default to &quot;https://api.simwood.com/v3/numbers&quot;).</param>
        /// <param name="simwoodAccountId">number_manager.simwood simwood account id (default to &quot;&quot;).</param>
        public SystemConfigNumberManagerSimwood(string authPassword = "", string authUsername = "", string numbersApiUrl = "https://api.simwood.com/v3/numbers", string simwoodAccountId = "")
        {
            // use default value if no "authPassword" provided
            if (authPassword == null)
            {
                this.AuthPassword = "";
            }
            else
            {
                this.AuthPassword = authPassword;
            }
            // use default value if no "authUsername" provided
            if (authUsername == null)
            {
                this.AuthUsername = "";
            }
            else
            {
                this.AuthUsername = authUsername;
            }
            // use default value if no "numbersApiUrl" provided
            if (numbersApiUrl == null)
            {
                this.NumbersApiUrl = "https://api.simwood.com/v3/numbers";
            }
            else
            {
                this.NumbersApiUrl = numbersApiUrl;
            }
            // use default value if no "simwoodAccountId" provided
            if (simwoodAccountId == null)
            {
                this.SimwoodAccountId = "";
            }
            else
            {
                this.SimwoodAccountId = simwoodAccountId;
            }
        }
        
        /// <summary>
        /// number_manager.simwood auth password
        /// </summary>
        /// <value>number_manager.simwood auth password</value>
        [DataMember(Name="auth_password", EmitDefaultValue=false)]
        public string AuthPassword { get; set; }

        /// <summary>
        /// number_manager.simwood auth username
        /// </summary>
        /// <value>number_manager.simwood auth username</value>
        [DataMember(Name="auth_username", EmitDefaultValue=false)]
        public string AuthUsername { get; set; }

        /// <summary>
        /// number_manager.simwood numbers api url
        /// </summary>
        /// <value>number_manager.simwood numbers api url</value>
        [DataMember(Name="numbers_api_url", EmitDefaultValue=false)]
        public string NumbersApiUrl { get; set; }

        /// <summary>
        /// number_manager.simwood simwood account id
        /// </summary>
        /// <value>number_manager.simwood simwood account id</value>
        [DataMember(Name="simwood_account_id", EmitDefaultValue=false)]
        public string SimwoodAccountId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigNumberManagerSimwood {\n");
            sb.Append("  AuthPassword: ").Append(AuthPassword).Append("\n");
            sb.Append("  AuthUsername: ").Append(AuthUsername).Append("\n");
            sb.Append("  NumbersApiUrl: ").Append(NumbersApiUrl).Append("\n");
            sb.Append("  SimwoodAccountId: ").Append(SimwoodAccountId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigNumberManagerSimwood);
        }

        /// <summary>
        /// Returns true if SystemConfigNumberManagerSimwood instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigNumberManagerSimwood to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigNumberManagerSimwood input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthPassword == input.AuthPassword ||
                    (this.AuthPassword != null &&
                    this.AuthPassword.Equals(input.AuthPassword))
                ) && 
                (
                    this.AuthUsername == input.AuthUsername ||
                    (this.AuthUsername != null &&
                    this.AuthUsername.Equals(input.AuthUsername))
                ) && 
                (
                    this.NumbersApiUrl == input.NumbersApiUrl ||
                    (this.NumbersApiUrl != null &&
                    this.NumbersApiUrl.Equals(input.NumbersApiUrl))
                ) && 
                (
                    this.SimwoodAccountId == input.SimwoodAccountId ||
                    (this.SimwoodAccountId != null &&
                    this.SimwoodAccountId.Equals(input.SimwoodAccountId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthPassword != null)
                    hashCode = hashCode * 59 + this.AuthPassword.GetHashCode();
                if (this.AuthUsername != null)
                    hashCode = hashCode * 59 + this.AuthUsername.GetHashCode();
                if (this.NumbersApiUrl != null)
                    hashCode = hashCode * 59 + this.NumbersApiUrl.GetHashCode();
                if (this.SimwoodAccountId != null)
                    hashCode = hashCode * 59 + this.SimwoodAccountId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
