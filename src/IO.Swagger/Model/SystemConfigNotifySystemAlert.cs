/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for notify.system_alert system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigNotifySystemAlert :  IEquatable<SystemConfigNotifySystemAlert>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigNotifySystemAlert" /> class.
        /// </summary>
        /// <param name="defaultTo">notify.system_alert default to.</param>
        /// <param name="enableEmailAlerts">notify.system_alert enable email alerts (default to true).</param>
        /// <param name="htmlContentTransferEncoding">notify.system_alert html content transfer encoding (default to &quot;7BIT&quot;).</param>
        /// <param name="subscriberUrl">notify.system_alert subscriber url.</param>
        /// <param name="textContentTransferEncoding">notify.system_alert text content transfer encoding (default to &quot;7BIT&quot;).</param>
        public SystemConfigNotifySystemAlert(Object defaultTo = default(Object), bool? enableEmailAlerts = true, string htmlContentTransferEncoding = "7BIT", string subscriberUrl = default(string), string textContentTransferEncoding = "7BIT")
        {
            this.DefaultTo = defaultTo;
            // use default value if no "enableEmailAlerts" provided
            if (enableEmailAlerts == null)
            {
                this.EnableEmailAlerts = true;
            }
            else
            {
                this.EnableEmailAlerts = enableEmailAlerts;
            }
            // use default value if no "htmlContentTransferEncoding" provided
            if (htmlContentTransferEncoding == null)
            {
                this.HtmlContentTransferEncoding = "7BIT";
            }
            else
            {
                this.HtmlContentTransferEncoding = htmlContentTransferEncoding;
            }
            this.SubscriberUrl = subscriberUrl;
            // use default value if no "textContentTransferEncoding" provided
            if (textContentTransferEncoding == null)
            {
                this.TextContentTransferEncoding = "7BIT";
            }
            else
            {
                this.TextContentTransferEncoding = textContentTransferEncoding;
            }
        }
        
        /// <summary>
        /// notify.system_alert default to
        /// </summary>
        /// <value>notify.system_alert default to</value>
        [DataMember(Name="default_to", EmitDefaultValue=false)]
        public Object DefaultTo { get; set; }

        /// <summary>
        /// notify.system_alert enable email alerts
        /// </summary>
        /// <value>notify.system_alert enable email alerts</value>
        [DataMember(Name="enable_email_alerts", EmitDefaultValue=false)]
        public bool? EnableEmailAlerts { get; set; }

        /// <summary>
        /// notify.system_alert html content transfer encoding
        /// </summary>
        /// <value>notify.system_alert html content transfer encoding</value>
        [DataMember(Name="html_content_transfer_encoding", EmitDefaultValue=false)]
        public string HtmlContentTransferEncoding { get; set; }

        /// <summary>
        /// notify.system_alert subscriber url
        /// </summary>
        /// <value>notify.system_alert subscriber url</value>
        [DataMember(Name="subscriber_url", EmitDefaultValue=false)]
        public string SubscriberUrl { get; set; }

        /// <summary>
        /// notify.system_alert text content transfer encoding
        /// </summary>
        /// <value>notify.system_alert text content transfer encoding</value>
        [DataMember(Name="text_content_transfer_encoding", EmitDefaultValue=false)]
        public string TextContentTransferEncoding { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigNotifySystemAlert {\n");
            sb.Append("  DefaultTo: ").Append(DefaultTo).Append("\n");
            sb.Append("  EnableEmailAlerts: ").Append(EnableEmailAlerts).Append("\n");
            sb.Append("  HtmlContentTransferEncoding: ").Append(HtmlContentTransferEncoding).Append("\n");
            sb.Append("  SubscriberUrl: ").Append(SubscriberUrl).Append("\n");
            sb.Append("  TextContentTransferEncoding: ").Append(TextContentTransferEncoding).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigNotifySystemAlert);
        }

        /// <summary>
        /// Returns true if SystemConfigNotifySystemAlert instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigNotifySystemAlert to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigNotifySystemAlert input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefaultTo == input.DefaultTo ||
                    (this.DefaultTo != null &&
                    this.DefaultTo.Equals(input.DefaultTo))
                ) && 
                (
                    this.EnableEmailAlerts == input.EnableEmailAlerts ||
                    (this.EnableEmailAlerts != null &&
                    this.EnableEmailAlerts.Equals(input.EnableEmailAlerts))
                ) && 
                (
                    this.HtmlContentTransferEncoding == input.HtmlContentTransferEncoding ||
                    (this.HtmlContentTransferEncoding != null &&
                    this.HtmlContentTransferEncoding.Equals(input.HtmlContentTransferEncoding))
                ) && 
                (
                    this.SubscriberUrl == input.SubscriberUrl ||
                    (this.SubscriberUrl != null &&
                    this.SubscriberUrl.Equals(input.SubscriberUrl))
                ) && 
                (
                    this.TextContentTransferEncoding == input.TextContentTransferEncoding ||
                    (this.TextContentTransferEncoding != null &&
                    this.TextContentTransferEncoding.Equals(input.TextContentTransferEncoding))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultTo != null)
                    hashCode = hashCode * 59 + this.DefaultTo.GetHashCode();
                if (this.EnableEmailAlerts != null)
                    hashCode = hashCode * 59 + this.EnableEmailAlerts.GetHashCode();
                if (this.HtmlContentTransferEncoding != null)
                    hashCode = hashCode * 59 + this.HtmlContentTransferEncoding.GetHashCode();
                if (this.SubscriberUrl != null)
                    hashCode = hashCode * 59 + this.SubscriberUrl.GetHashCode();
                if (this.TextContentTransferEncoding != null)
                    hashCode = hashCode * 59 + this.TextContentTransferEncoding.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
