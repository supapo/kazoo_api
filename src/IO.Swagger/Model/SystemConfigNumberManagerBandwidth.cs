/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for number_manager.bandwidth system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigNumberManagerBandwidth :  IEquatable<SystemConfigNumberManagerBandwidth>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigNumberManagerBandwidth" /> class.
        /// </summary>
        /// <param name="debug">should debug mode be activated for the legacy knm_bandwidth? (default to false).</param>
        /// <param name="developerKey">developer key for the legacy Bandwidth API (default to &quot;&quot;).</param>
        /// <param name="enableProvisioning">number_manager.bandwidth enable provisioning (default to true).</param>
        /// <param name="endpoints">number_manager.bandwidth endpoints.</param>
        /// <param name="numbersApiUrl">number_manager.bandwidth numbers api url (default to &quot;https://api.bandwidth.com/public/v2/numbers.api&quot;).</param>
        /// <param name="orderNamePrefix">number_manager.bandwidth order name prefix (default to &quot;Kazoo&quot;).</param>
        /// <param name="sandboxProvisioning">number_manager.bandwidth sandbox provisioning (default to true).</param>
        public SystemConfigNumberManagerBandwidth(bool? debug = false, string developerKey = "", bool? enableProvisioning = true, Object endpoints = default(Object), string numbersApiUrl = "https://api.bandwidth.com/public/v2/numbers.api", string orderNamePrefix = "Kazoo", bool? sandboxProvisioning = true)
        {
            // use default value if no "debug" provided
            if (debug == null)
            {
                this.Debug = false;
            }
            else
            {
                this.Debug = debug;
            }
            // use default value if no "developerKey" provided
            if (developerKey == null)
            {
                this.DeveloperKey = "";
            }
            else
            {
                this.DeveloperKey = developerKey;
            }
            // use default value if no "enableProvisioning" provided
            if (enableProvisioning == null)
            {
                this.EnableProvisioning = true;
            }
            else
            {
                this.EnableProvisioning = enableProvisioning;
            }
            this.Endpoints = endpoints;
            // use default value if no "numbersApiUrl" provided
            if (numbersApiUrl == null)
            {
                this.NumbersApiUrl = "https://api.bandwidth.com/public/v2/numbers.api";
            }
            else
            {
                this.NumbersApiUrl = numbersApiUrl;
            }
            // use default value if no "orderNamePrefix" provided
            if (orderNamePrefix == null)
            {
                this.OrderNamePrefix = "Kazoo";
            }
            else
            {
                this.OrderNamePrefix = orderNamePrefix;
            }
            // use default value if no "sandboxProvisioning" provided
            if (sandboxProvisioning == null)
            {
                this.SandboxProvisioning = true;
            }
            else
            {
                this.SandboxProvisioning = sandboxProvisioning;
            }
        }
        
        /// <summary>
        /// should debug mode be activated for the legacy knm_bandwidth?
        /// </summary>
        /// <value>should debug mode be activated for the legacy knm_bandwidth?</value>
        [DataMember(Name="debug", EmitDefaultValue=false)]
        public bool? Debug { get; set; }

        /// <summary>
        /// developer key for the legacy Bandwidth API
        /// </summary>
        /// <value>developer key for the legacy Bandwidth API</value>
        [DataMember(Name="developer_key", EmitDefaultValue=false)]
        public string DeveloperKey { get; set; }

        /// <summary>
        /// number_manager.bandwidth enable provisioning
        /// </summary>
        /// <value>number_manager.bandwidth enable provisioning</value>
        [DataMember(Name="enable_provisioning", EmitDefaultValue=false)]
        public bool? EnableProvisioning { get; set; }

        /// <summary>
        /// number_manager.bandwidth endpoints
        /// </summary>
        /// <value>number_manager.bandwidth endpoints</value>
        [DataMember(Name="endpoints", EmitDefaultValue=false)]
        public Object Endpoints { get; set; }

        /// <summary>
        /// number_manager.bandwidth numbers api url
        /// </summary>
        /// <value>number_manager.bandwidth numbers api url</value>
        [DataMember(Name="numbers_api_url", EmitDefaultValue=false)]
        public string NumbersApiUrl { get; set; }

        /// <summary>
        /// number_manager.bandwidth order name prefix
        /// </summary>
        /// <value>number_manager.bandwidth order name prefix</value>
        [DataMember(Name="order_name_prefix", EmitDefaultValue=false)]
        public string OrderNamePrefix { get; set; }

        /// <summary>
        /// number_manager.bandwidth sandbox provisioning
        /// </summary>
        /// <value>number_manager.bandwidth sandbox provisioning</value>
        [DataMember(Name="sandbox_provisioning", EmitDefaultValue=false)]
        public bool? SandboxProvisioning { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigNumberManagerBandwidth {\n");
            sb.Append("  Debug: ").Append(Debug).Append("\n");
            sb.Append("  DeveloperKey: ").Append(DeveloperKey).Append("\n");
            sb.Append("  EnableProvisioning: ").Append(EnableProvisioning).Append("\n");
            sb.Append("  Endpoints: ").Append(Endpoints).Append("\n");
            sb.Append("  NumbersApiUrl: ").Append(NumbersApiUrl).Append("\n");
            sb.Append("  OrderNamePrefix: ").Append(OrderNamePrefix).Append("\n");
            sb.Append("  SandboxProvisioning: ").Append(SandboxProvisioning).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigNumberManagerBandwidth);
        }

        /// <summary>
        /// Returns true if SystemConfigNumberManagerBandwidth instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigNumberManagerBandwidth to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigNumberManagerBandwidth input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Debug == input.Debug ||
                    (this.Debug != null &&
                    this.Debug.Equals(input.Debug))
                ) && 
                (
                    this.DeveloperKey == input.DeveloperKey ||
                    (this.DeveloperKey != null &&
                    this.DeveloperKey.Equals(input.DeveloperKey))
                ) && 
                (
                    this.EnableProvisioning == input.EnableProvisioning ||
                    (this.EnableProvisioning != null &&
                    this.EnableProvisioning.Equals(input.EnableProvisioning))
                ) && 
                (
                    this.Endpoints == input.Endpoints ||
                    (this.Endpoints != null &&
                    this.Endpoints.Equals(input.Endpoints))
                ) && 
                (
                    this.NumbersApiUrl == input.NumbersApiUrl ||
                    (this.NumbersApiUrl != null &&
                    this.NumbersApiUrl.Equals(input.NumbersApiUrl))
                ) && 
                (
                    this.OrderNamePrefix == input.OrderNamePrefix ||
                    (this.OrderNamePrefix != null &&
                    this.OrderNamePrefix.Equals(input.OrderNamePrefix))
                ) && 
                (
                    this.SandboxProvisioning == input.SandboxProvisioning ||
                    (this.SandboxProvisioning != null &&
                    this.SandboxProvisioning.Equals(input.SandboxProvisioning))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Debug != null)
                    hashCode = hashCode * 59 + this.Debug.GetHashCode();
                if (this.DeveloperKey != null)
                    hashCode = hashCode * 59 + this.DeveloperKey.GetHashCode();
                if (this.EnableProvisioning != null)
                    hashCode = hashCode * 59 + this.EnableProvisioning.GetHashCode();
                if (this.Endpoints != null)
                    hashCode = hashCode * 59 + this.Endpoints.GetHashCode();
                if (this.NumbersApiUrl != null)
                    hashCode = hashCode * 59 + this.NumbersApiUrl.GetHashCode();
                if (this.OrderNamePrefix != null)
                    hashCode = hashCode * 59 + this.OrderNamePrefix.GetHashCode();
                if (this.SandboxProvisioning != null)
                    hashCode = hashCode * 59 + this.SandboxProvisioning.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
