/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Use the Text-to-speech engine to say the provided text
    /// </summary>
    [DataContract]
    public partial class MetaflowsTts :  IEquatable<MetaflowsTts>, IValidatableObject
    {
        /// <summary>
        /// Defines Terminators
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TerminatorsEnum
        {
            
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 1,
            
            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 2,
            
            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 3,
            
            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 4,
            
            /// <summary>
            /// Enum _5 for value: 5
            /// </summary>
            [EnumMember(Value = "5")]
            _5 = 5,
            
            /// <summary>
            /// Enum _6 for value: 6
            /// </summary>
            [EnumMember(Value = "6")]
            _6 = 6,
            
            /// <summary>
            /// Enum _7 for value: 7
            /// </summary>
            [EnumMember(Value = "7")]
            _7 = 7,
            
            /// <summary>
            /// Enum _8 for value: 8
            /// </summary>
            [EnumMember(Value = "8")]
            _8 = 8,
            
            /// <summary>
            /// Enum _9 for value: 9
            /// </summary>
            [EnumMember(Value = "9")]
            _9 = 9,
            
            /// <summary>
            /// Enum Star for value: *
            /// </summary>
            [EnumMember(Value = "*")]
            Star = 10,
            
            /// <summary>
            /// Enum _0 for value: 0
            /// </summary>
            [EnumMember(Value = "0")]
            _0 = 11,
            
            /// <summary>
            /// Enum Hash for value: #
            /// </summary>
            [EnumMember(Value = "#")]
            Hash = 12
        }


        /// <summary>
        /// What DTMF can terminate the TTS playback
        /// </summary>
        /// <value>What DTMF can terminate the TTS playback</value>
        [DataMember(Name="terminators", EmitDefaultValue=false)]
        public List<TerminatorsEnum> Terminators { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetaflowsTts" /> class.
        /// </summary>
        /// <param name="engine">What engine to use (system-dependant) (default to &quot;flite&quot;).</param>
        /// <param name="language">What language is the text in.</param>
        /// <param name="leg">What leg to say the text to (default to &quot;self&quot;).</param>
        /// <param name="terminators">What DTMF can terminate the TTS playback.</param>
        /// <param name="text">What to say.</param>
        /// <param name="voice">What voice to use when speaking (default to &quot;female&quot;).</param>
        public MetaflowsTts(string engine = "flite", string language = default(string), string leg = "self", List<TerminatorsEnum> terminators = default(List<TerminatorsEnum>), string text = default(string), string voice = "female")
        {
            // use default value if no "engine" provided
            if (engine == null)
            {
                this.Engine = "flite";
            }
            else
            {
                this.Engine = engine;
            }
            this.Language = language;
            // use default value if no "leg" provided
            if (leg == null)
            {
                this.Leg = "self";
            }
            else
            {
                this.Leg = leg;
            }
            this.Terminators = terminators;
            this.Text = text;
            // use default value if no "voice" provided
            if (voice == null)
            {
                this.Voice = "female";
            }
            else
            {
                this.Voice = voice;
            }
        }
        
        /// <summary>
        /// What engine to use (system-dependant)
        /// </summary>
        /// <value>What engine to use (system-dependant)</value>
        [DataMember(Name="engine", EmitDefaultValue=false)]
        public string Engine { get; set; }

        /// <summary>
        /// What language is the text in
        /// </summary>
        /// <value>What language is the text in</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// What leg to say the text to
        /// </summary>
        /// <value>What leg to say the text to</value>
        [DataMember(Name="leg", EmitDefaultValue=false)]
        public string Leg { get; set; }


        /// <summary>
        /// What to say
        /// </summary>
        /// <value>What to say</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// What voice to use when speaking
        /// </summary>
        /// <value>What voice to use when speaking</value>
        [DataMember(Name="voice", EmitDefaultValue=false)]
        public string Voice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MetaflowsTts {\n");
            sb.Append("  Engine: ").Append(Engine).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Leg: ").Append(Leg).Append("\n");
            sb.Append("  Terminators: ").Append(Terminators).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Voice: ").Append(Voice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MetaflowsTts);
        }

        /// <summary>
        /// Returns true if MetaflowsTts instances are equal
        /// </summary>
        /// <param name="input">Instance of MetaflowsTts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetaflowsTts input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Engine == input.Engine ||
                    (this.Engine != null &&
                    this.Engine.Equals(input.Engine))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Leg == input.Leg ||
                    (this.Leg != null &&
                    this.Leg.Equals(input.Leg))
                ) && 
                (
                    this.Terminators == input.Terminators ||
                    this.Terminators != null &&
                    this.Terminators.SequenceEqual(input.Terminators)
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Voice == input.Voice ||
                    (this.Voice != null &&
                    this.Voice.Equals(input.Voice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Engine != null)
                    hashCode = hashCode * 59 + this.Engine.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.Leg != null)
                    hashCode = hashCode * 59 + this.Leg.GetHashCode();
                if (this.Terminators != null)
                    hashCode = hashCode * 59 + this.Terminators.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Voice != null)
                    hashCode = hashCode * 59 + this.Voice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
