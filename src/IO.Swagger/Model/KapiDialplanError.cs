/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for dialplan.error
    /// </summary>
    [DataContract]
    public partial class KapiDialplanError :  IEquatable<KapiDialplanError>, IValidatableObject
    {
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Dialplan for value: dialplan
            /// </summary>
            [EnumMember(Value = "dialplan")]
            Dialplan = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanError" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiDialplanError() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanError" /> class.
        /// </summary>
        /// <param name="callID">callID.</param>
        /// <param name="channelCallState">channelCallState.</param>
        /// <param name="channelState">channelState.</param>
        /// <param name="customChannelVars">customChannelVars.</param>
        /// <param name="dialplanError">dialplanError.</param>
        /// <param name="errorMessage">errorMessage (required).</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="request">request.</param>
        public KapiDialplanError(string callID = default(string), string channelCallState = default(string), string channelState = default(string), Object customChannelVars = default(Object), string dialplanError = default(string), string errorMessage = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string request = default(string))
        {
            // to ensure "errorMessage" is required (not null)
            if (errorMessage == null)
            {
                throw new InvalidDataException("errorMessage is a required property for KapiDialplanError and cannot be null");
            }
            else
            {
                this.ErrorMessage = errorMessage;
            }
            this.CallID = callID;
            this.ChannelCallState = channelCallState;
            this.ChannelState = channelState;
            this.CustomChannelVars = customChannelVars;
            this.DialplanError = dialplanError;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.Request = request;
        }
        
        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }

        /// <summary>
        /// Gets or Sets ChannelCallState
        /// </summary>
        [DataMember(Name="Channel-Call-State", EmitDefaultValue=false)]
        public string ChannelCallState { get; set; }

        /// <summary>
        /// Gets or Sets ChannelState
        /// </summary>
        [DataMember(Name="Channel-State", EmitDefaultValue=false)]
        public string ChannelState { get; set; }

        /// <summary>
        /// Gets or Sets CustomChannelVars
        /// </summary>
        [DataMember(Name="Custom-Channel-Vars", EmitDefaultValue=false)]
        public Object CustomChannelVars { get; set; }

        /// <summary>
        /// Gets or Sets DialplanError
        /// </summary>
        [DataMember(Name="Dialplan-Error", EmitDefaultValue=false)]
        public string DialplanError { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name="Error-Message", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }



        /// <summary>
        /// Gets or Sets Request
        /// </summary>
        [DataMember(Name="Request", EmitDefaultValue=false)]
        public string Request { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiDialplanError {\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  ChannelCallState: ").Append(ChannelCallState).Append("\n");
            sb.Append("  ChannelState: ").Append(ChannelState).Append("\n");
            sb.Append("  CustomChannelVars: ").Append(CustomChannelVars).Append("\n");
            sb.Append("  DialplanError: ").Append(DialplanError).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiDialplanError);
        }

        /// <summary>
        /// Returns true if KapiDialplanError instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiDialplanError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiDialplanError input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.ChannelCallState == input.ChannelCallState ||
                    (this.ChannelCallState != null &&
                    this.ChannelCallState.Equals(input.ChannelCallState))
                ) && 
                (
                    this.ChannelState == input.ChannelState ||
                    (this.ChannelState != null &&
                    this.ChannelState.Equals(input.ChannelState))
                ) && 
                (
                    this.CustomChannelVars == input.CustomChannelVars ||
                    (this.CustomChannelVars != null &&
                    this.CustomChannelVars.Equals(input.CustomChannelVars))
                ) && 
                (
                    this.DialplanError == input.DialplanError ||
                    (this.DialplanError != null &&
                    this.DialplanError.Equals(input.DialplanError))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.Request == input.Request ||
                    (this.Request != null &&
                    this.Request.Equals(input.Request))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.ChannelCallState != null)
                    hashCode = hashCode * 59 + this.ChannelCallState.GetHashCode();
                if (this.ChannelState != null)
                    hashCode = hashCode * 59 + this.ChannelState.GetHashCode();
                if (this.CustomChannelVars != null)
                    hashCode = hashCode * 59 + this.CustomChannelVars.GetHashCode();
                if (this.DialplanError != null)
                    hashCode = hashCode * 59 + this.DialplanError.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.Request != null)
                    hashCode = hashCode * 59 + this.Request.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
