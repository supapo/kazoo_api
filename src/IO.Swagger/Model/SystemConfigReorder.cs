/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for reorder system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigReorder :  IEquatable<SystemConfigReorder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigReorder" /> class.
        /// </summary>
        /// <param name="assumeInboundE164">reorder assume inbound e164 (default to false).</param>
        /// <param name="knownNumber">knownNumber.</param>
        /// <param name="unknownNumber">unknownNumber.</param>
        public SystemConfigReorder(bool? assumeInboundE164 = false, SystemConfigReorderKnownNumber knownNumber = default(SystemConfigReorderKnownNumber), SystemConfigReorderUnknownNumber unknownNumber = default(SystemConfigReorderUnknownNumber))
        {
            // use default value if no "assumeInboundE164" provided
            if (assumeInboundE164 == null)
            {
                this.AssumeInboundE164 = false;
            }
            else
            {
                this.AssumeInboundE164 = assumeInboundE164;
            }
            this.KnownNumber = knownNumber;
            this.UnknownNumber = unknownNumber;
        }
        
        /// <summary>
        /// reorder assume inbound e164
        /// </summary>
        /// <value>reorder assume inbound e164</value>
        [DataMember(Name="assume_inbound_e164", EmitDefaultValue=false)]
        public bool? AssumeInboundE164 { get; set; }

        /// <summary>
        /// Gets or Sets KnownNumber
        /// </summary>
        [DataMember(Name="known_number", EmitDefaultValue=false)]
        public SystemConfigReorderKnownNumber KnownNumber { get; set; }

        /// <summary>
        /// Gets or Sets UnknownNumber
        /// </summary>
        [DataMember(Name="unknown_number", EmitDefaultValue=false)]
        public SystemConfigReorderUnknownNumber UnknownNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigReorder {\n");
            sb.Append("  AssumeInboundE164: ").Append(AssumeInboundE164).Append("\n");
            sb.Append("  KnownNumber: ").Append(KnownNumber).Append("\n");
            sb.Append("  UnknownNumber: ").Append(UnknownNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigReorder);
        }

        /// <summary>
        /// Returns true if SystemConfigReorder instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigReorder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigReorder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssumeInboundE164 == input.AssumeInboundE164 ||
                    (this.AssumeInboundE164 != null &&
                    this.AssumeInboundE164.Equals(input.AssumeInboundE164))
                ) && 
                (
                    this.KnownNumber == input.KnownNumber ||
                    (this.KnownNumber != null &&
                    this.KnownNumber.Equals(input.KnownNumber))
                ) && 
                (
                    this.UnknownNumber == input.UnknownNumber ||
                    (this.UnknownNumber != null &&
                    this.UnknownNumber.Equals(input.UnknownNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssumeInboundE164 != null)
                    hashCode = hashCode * 59 + this.AssumeInboundE164.GetHashCode();
                if (this.KnownNumber != null)
                    hashCode = hashCode * 59 + this.KnownNumber.GetHashCode();
                if (this.UnknownNumber != null)
                    hashCode = hashCode * 59 + this.UnknownNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
