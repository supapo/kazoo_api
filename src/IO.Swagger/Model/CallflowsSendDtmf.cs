/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Validator for the Send DTMF callflow action
    /// </summary>
    [DataContract]
    public partial class CallflowsSendDtmf :  IEquatable<CallflowsSendDtmf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsSendDtmf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallflowsSendDtmf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsSendDtmf" /> class.
        /// </summary>
        /// <param name="digits">String of DTMF tones to send (required).</param>
        /// <param name="durationMs">How long, in milliseconds, to send each DTMF.</param>
        /// <param name="skipModule">When set to true this callflow action is skipped, advancing to the wildcard branch (if any).</param>
        public CallflowsSendDtmf(string digits = default(string), Object durationMs = default(Object), bool? skipModule = default(bool?))
        {
            // to ensure "digits" is required (not null)
            if (digits == null)
            {
                throw new InvalidDataException("digits is a required property for CallflowsSendDtmf and cannot be null");
            }
            else
            {
                this.Digits = digits;
            }
            this.DurationMs = durationMs;
            this.SkipModule = skipModule;
        }
        
        /// <summary>
        /// String of DTMF tones to send
        /// </summary>
        /// <value>String of DTMF tones to send</value>
        [DataMember(Name="digits", EmitDefaultValue=false)]
        public string Digits { get; set; }

        /// <summary>
        /// How long, in milliseconds, to send each DTMF
        /// </summary>
        /// <value>How long, in milliseconds, to send each DTMF</value>
        [DataMember(Name="duration_ms", EmitDefaultValue=false)]
        public Object DurationMs { get; set; }

        /// <summary>
        /// When set to true this callflow action is skipped, advancing to the wildcard branch (if any)
        /// </summary>
        /// <value>When set to true this callflow action is skipped, advancing to the wildcard branch (if any)</value>
        [DataMember(Name="skip_module", EmitDefaultValue=false)]
        public bool? SkipModule { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallflowsSendDtmf {\n");
            sb.Append("  Digits: ").Append(Digits).Append("\n");
            sb.Append("  DurationMs: ").Append(DurationMs).Append("\n");
            sb.Append("  SkipModule: ").Append(SkipModule).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallflowsSendDtmf);
        }

        /// <summary>
        /// Returns true if CallflowsSendDtmf instances are equal
        /// </summary>
        /// <param name="input">Instance of CallflowsSendDtmf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallflowsSendDtmf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Digits == input.Digits ||
                    (this.Digits != null &&
                    this.Digits.Equals(input.Digits))
                ) && 
                (
                    this.DurationMs == input.DurationMs ||
                    (this.DurationMs != null &&
                    this.DurationMs.Equals(input.DurationMs))
                ) && 
                (
                    this.SkipModule == input.SkipModule ||
                    (this.SkipModule != null &&
                    this.SkipModule.Equals(input.SkipModule))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Digits != null)
                    hashCode = hashCode * 59 + this.Digits.GetHashCode();
                if (this.DurationMs != null)
                    hashCode = hashCode * 59 + this.DurationMs.GetHashCode();
                if (this.SkipModule != null)
                    hashCode = hashCode * 59 + this.SkipModule.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
