/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Configuration for periodic announcements to callers waiting in the queue
    /// </summary>
    [DataContract]
    public partial class QueuesAnnouncements :  IEquatable<QueuesAnnouncements>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueuesAnnouncements" /> class.
        /// </summary>
        /// <param name="interval">Time between announcements.</param>
        /// <param name="media">media.</param>
        /// <param name="positionAnnouncementsEnabled">Whether announcements of the caller&#39;s position in the queue should be played.</param>
        /// <param name="waitTimeAnnouncementsEnabled">Whether announcements of the estimated wait time in the queue should be played.</param>
        public QueuesAnnouncements(int? interval = default(int?), QueuesAnnouncementsMedia media = default(QueuesAnnouncementsMedia), bool? positionAnnouncementsEnabled = default(bool?), bool? waitTimeAnnouncementsEnabled = default(bool?))
        {
            this.Interval = interval;
            this.Media = media;
            this.PositionAnnouncementsEnabled = positionAnnouncementsEnabled;
            this.WaitTimeAnnouncementsEnabled = waitTimeAnnouncementsEnabled;
        }
        
        /// <summary>
        /// Time between announcements
        /// </summary>
        /// <value>Time between announcements</value>
        [DataMember(Name="interval", EmitDefaultValue=false)]
        public int? Interval { get; set; }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name="media", EmitDefaultValue=false)]
        public QueuesAnnouncementsMedia Media { get; set; }

        /// <summary>
        /// Whether announcements of the caller&#39;s position in the queue should be played
        /// </summary>
        /// <value>Whether announcements of the caller&#39;s position in the queue should be played</value>
        [DataMember(Name="position_announcements_enabled", EmitDefaultValue=false)]
        public bool? PositionAnnouncementsEnabled { get; set; }

        /// <summary>
        /// Whether announcements of the estimated wait time in the queue should be played
        /// </summary>
        /// <value>Whether announcements of the estimated wait time in the queue should be played</value>
        [DataMember(Name="wait_time_announcements_enabled", EmitDefaultValue=false)]
        public bool? WaitTimeAnnouncementsEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueuesAnnouncements {\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  PositionAnnouncementsEnabled: ").Append(PositionAnnouncementsEnabled).Append("\n");
            sb.Append("  WaitTimeAnnouncementsEnabled: ").Append(WaitTimeAnnouncementsEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueuesAnnouncements);
        }

        /// <summary>
        /// Returns true if QueuesAnnouncements instances are equal
        /// </summary>
        /// <param name="input">Instance of QueuesAnnouncements to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueuesAnnouncements input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Interval == input.Interval ||
                    (this.Interval != null &&
                    this.Interval.Equals(input.Interval))
                ) && 
                (
                    this.Media == input.Media ||
                    (this.Media != null &&
                    this.Media.Equals(input.Media))
                ) && 
                (
                    this.PositionAnnouncementsEnabled == input.PositionAnnouncementsEnabled ||
                    (this.PositionAnnouncementsEnabled != null &&
                    this.PositionAnnouncementsEnabled.Equals(input.PositionAnnouncementsEnabled))
                ) && 
                (
                    this.WaitTimeAnnouncementsEnabled == input.WaitTimeAnnouncementsEnabled ||
                    (this.WaitTimeAnnouncementsEnabled != null &&
                    this.WaitTimeAnnouncementsEnabled.Equals(input.WaitTimeAnnouncementsEnabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Interval != null)
                    hashCode = hashCode * 59 + this.Interval.GetHashCode();
                if (this.Media != null)
                    hashCode = hashCode * 59 + this.Media.GetHashCode();
                if (this.PositionAnnouncementsEnabled != null)
                    hashCode = hashCode * 59 + this.PositionAnnouncementsEnabled.GetHashCode();
                if (this.WaitTimeAnnouncementsEnabled != null)
                    hashCode = hashCode * 59 + this.WaitTimeAnnouncementsEnabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Interval (int?) minimum
            if(this.Interval < (int?)15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Interval, must be a value greater than or equal to 15.", new [] { "Interval" });
            }

            yield break;
        }
    }

}
