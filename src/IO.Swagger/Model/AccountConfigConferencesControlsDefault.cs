/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AccountConfigConferencesControlsDefault
    /// </summary>
    [DataContract]
    public partial class AccountConfigConferencesControlsDefault :  IEquatable<AccountConfigConferencesControlsDefault>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountConfigConferencesControlsDefault" /> class.
        /// </summary>
        /// <param name="action">what action to assign to the star-code.</param>
        /// <param name="digits">what digit sequence to bind the action to.</param>
        public AccountConfigConferencesControlsDefault(string action = default(string), string digits = default(string))
        {
            this.Action = action;
            this.Digits = digits;
        }
        
        /// <summary>
        /// what action to assign to the star-code
        /// </summary>
        /// <value>what action to assign to the star-code</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public string Action { get; set; }

        /// <summary>
        /// what digit sequence to bind the action to
        /// </summary>
        /// <value>what digit sequence to bind the action to</value>
        [DataMember(Name="digits", EmitDefaultValue=false)]
        public string Digits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountConfigConferencesControlsDefault {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Digits: ").Append(Digits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountConfigConferencesControlsDefault);
        }

        /// <summary>
        /// Returns true if AccountConfigConferencesControlsDefault instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountConfigConferencesControlsDefault to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountConfigConferencesControlsDefault input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Digits == input.Digits ||
                    (this.Digits != null &&
                    this.Digits.Equals(input.Digits))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Digits != null)
                    hashCode = hashCode * 59 + this.Digits.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
