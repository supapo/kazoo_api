/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for callflow.call_forward system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigCallflowCallForward :  IEquatable<SystemConfigCallflowCallForward>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigCallflowCallForward" /> class.
        /// </summary>
        /// <param name="callfwdNumberTimeout">callflow.call_forward callfwd number timeout.</param>
        /// <param name="keys">keys.</param>
        /// <param name="maxCallfwdNumberLength">callflow.call_forward maximum callfwd number length.</param>
        /// <param name="minCallfwdNumberLength">callflow.call_forward minimum callfwd number length.</param>
        public SystemConfigCallflowCallForward(int? callfwdNumberTimeout = default(int?), SystemConfigCallflowCallForwardKeys keys = default(SystemConfigCallflowCallForwardKeys), int? maxCallfwdNumberLength = default(int?), int? minCallfwdNumberLength = default(int?))
        {
            this.CallfwdNumberTimeout = callfwdNumberTimeout;
            this.Keys = keys;
            this.MaxCallfwdNumberLength = maxCallfwdNumberLength;
            this.MinCallfwdNumberLength = minCallfwdNumberLength;
        }
        
        /// <summary>
        /// callflow.call_forward callfwd number timeout
        /// </summary>
        /// <value>callflow.call_forward callfwd number timeout</value>
        [DataMember(Name="callfwd_number_timeout", EmitDefaultValue=false)]
        public int? CallfwdNumberTimeout { get; set; }

        /// <summary>
        /// Gets or Sets Keys
        /// </summary>
        [DataMember(Name="keys", EmitDefaultValue=false)]
        public SystemConfigCallflowCallForwardKeys Keys { get; set; }

        /// <summary>
        /// callflow.call_forward maximum callfwd number length
        /// </summary>
        /// <value>callflow.call_forward maximum callfwd number length</value>
        [DataMember(Name="max_callfwd_number_length", EmitDefaultValue=false)]
        public int? MaxCallfwdNumberLength { get; set; }

        /// <summary>
        /// callflow.call_forward minimum callfwd number length
        /// </summary>
        /// <value>callflow.call_forward minimum callfwd number length</value>
        [DataMember(Name="min_callfwd_number_length", EmitDefaultValue=false)]
        public int? MinCallfwdNumberLength { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigCallflowCallForward {\n");
            sb.Append("  CallfwdNumberTimeout: ").Append(CallfwdNumberTimeout).Append("\n");
            sb.Append("  Keys: ").Append(Keys).Append("\n");
            sb.Append("  MaxCallfwdNumberLength: ").Append(MaxCallfwdNumberLength).Append("\n");
            sb.Append("  MinCallfwdNumberLength: ").Append(MinCallfwdNumberLength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigCallflowCallForward);
        }

        /// <summary>
        /// Returns true if SystemConfigCallflowCallForward instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigCallflowCallForward to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigCallflowCallForward input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CallfwdNumberTimeout == input.CallfwdNumberTimeout ||
                    (this.CallfwdNumberTimeout != null &&
                    this.CallfwdNumberTimeout.Equals(input.CallfwdNumberTimeout))
                ) && 
                (
                    this.Keys == input.Keys ||
                    (this.Keys != null &&
                    this.Keys.Equals(input.Keys))
                ) && 
                (
                    this.MaxCallfwdNumberLength == input.MaxCallfwdNumberLength ||
                    (this.MaxCallfwdNumberLength != null &&
                    this.MaxCallfwdNumberLength.Equals(input.MaxCallfwdNumberLength))
                ) && 
                (
                    this.MinCallfwdNumberLength == input.MinCallfwdNumberLength ||
                    (this.MinCallfwdNumberLength != null &&
                    this.MinCallfwdNumberLength.Equals(input.MinCallfwdNumberLength))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CallfwdNumberTimeout != null)
                    hashCode = hashCode * 59 + this.CallfwdNumberTimeout.GetHashCode();
                if (this.Keys != null)
                    hashCode = hashCode * 59 + this.Keys.GetHashCode();
                if (this.MaxCallfwdNumberLength != null)
                    hashCode = hashCode * 59 + this.MaxCallfwdNumberLength.GetHashCode();
                if (this.MinCallfwdNumberLength != null)
                    hashCode = hashCode * 59 + this.MinCallfwdNumberLength.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
