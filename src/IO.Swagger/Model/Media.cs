/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for media
    /// </summary>
    [DataContract]
    public partial class Media :  IEquatable<Media>, IValidatableObject
    {
        /// <summary>
        /// Used to override the automatic upload type
        /// </summary>
        /// <value>Used to override the automatic upload type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContentTypeEnum
        {
            
            /// <summary>
            /// Enum AudioMp3 for value: audio/mp3
            /// </summary>
            [EnumMember(Value = "audio/mp3")]
            AudioMp3 = 1,
            
            /// <summary>
            /// Enum AudioMpeg for value: audio/mpeg
            /// </summary>
            [EnumMember(Value = "audio/mpeg")]
            AudioMpeg = 2,
            
            /// <summary>
            /// Enum AudioMpeg3 for value: audio/mpeg3
            /// </summary>
            [EnumMember(Value = "audio/mpeg3")]
            AudioMpeg3 = 3,
            
            /// <summary>
            /// Enum AudioXWav for value: audio/x-wav
            /// </summary>
            [EnumMember(Value = "audio/x-wav")]
            AudioXWav = 4,
            
            /// <summary>
            /// Enum AudioWav for value: audio/wav
            /// </summary>
            [EnumMember(Value = "audio/wav")]
            AudioWav = 5,
            
            /// <summary>
            /// Enum AudioOgg for value: audio/ogg
            /// </summary>
            [EnumMember(Value = "audio/ogg")]
            AudioOgg = 6,
            
            /// <summary>
            /// Enum VideoXFlv for value: video/x-flv
            /// </summary>
            [EnumMember(Value = "video/x-flv")]
            VideoXFlv = 7,
            
            /// <summary>
            /// Enum VideoH264 for value: video/h264
            /// </summary>
            [EnumMember(Value = "video/h264")]
            VideoH264 = 8,
            
            /// <summary>
            /// Enum VideoMpeg for value: video/mpeg
            /// </summary>
            [EnumMember(Value = "video/mpeg")]
            VideoMpeg = 9,
            
            /// <summary>
            /// Enum VideoQuicktime for value: video/quicktime
            /// </summary>
            [EnumMember(Value = "video/quicktime")]
            VideoQuicktime = 10,
            
            /// <summary>
            /// Enum VideoMp4 for value: video/mp4
            /// </summary>
            [EnumMember(Value = "video/mp4")]
            VideoMp4 = 11,
            
            /// <summary>
            /// Enum VideoWebm for value: video/webm
            /// </summary>
            [EnumMember(Value = "video/webm")]
            VideoWebm = 12
        }

        /// <summary>
        /// Used to override the automatic upload type
        /// </summary>
        /// <value>Used to override the automatic upload type</value>
        [DataMember(Name="content_type", EmitDefaultValue=false)]
        public ContentTypeEnum? ContentType { get; set; }
        /// <summary>
        /// Defines the source of the media
        /// </summary>
        /// <value>Defines the source of the media</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MediaSourceEnum
        {
            
            /// <summary>
            /// Enum Recording for value: recording
            /// </summary>
            [EnumMember(Value = "recording")]
            Recording = 1,
            
            /// <summary>
            /// Enum Upload for value: upload
            /// </summary>
            [EnumMember(Value = "upload")]
            Upload = 2,
            
            /// <summary>
            /// Enum Tts for value: tts
            /// </summary>
            [EnumMember(Value = "tts")]
            Tts = 3
        }

        /// <summary>
        /// Defines the source of the media
        /// </summary>
        /// <value>Defines the source of the media</value>
        [DataMember(Name="media_source", EmitDefaultValue=false)]
        public MediaSourceEnum MediaSource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Media" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Media() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Media" /> class.
        /// </summary>
        /// <param name="contentLength">Length, in bytes, of the file.</param>
        /// <param name="contentType">Used to override the automatic upload type.</param>
        /// <param name="description">A brief description of the media update, usually the original file name.</param>
        /// <param name="language">The language of the media file or text (default to &quot;en-us&quot;).</param>
        /// <param name="mediaSource">Defines the source of the media (required) (default to MediaSourceEnum.Upload).</param>
        /// <param name="name">A friendly name for the media (required).</param>
        /// <param name="promptId">The prompt this media file represents.</param>
        /// <param name="sourceId">If the media was generated from a callflow module, this is ID of the properties.</param>
        /// <param name="sourceType">If the media was generated from a callflow module, this is the module name.</param>
        /// <param name="streamable">Determines if the media can be streamed (default to true).</param>
        /// <param name="tts">tts.</param>
        public Media(int? contentLength = default(int?), ContentTypeEnum? contentType = default(ContentTypeEnum?), string description = default(string), string language = "en-us", MediaSourceEnum mediaSource = MediaSourceEnum.Upload, string name = default(string), string promptId = default(string), string sourceId = default(string), string sourceType = default(string), bool? streamable = true, MediaTts tts = default(MediaTts))
        {
            // to ensure "mediaSource" is required (not null)
            if (mediaSource == null)
            {
                throw new InvalidDataException("mediaSource is a required property for Media and cannot be null");
            }
            else
            {
                this.MediaSource = mediaSource;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Media and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.ContentLength = contentLength;
            this.ContentType = contentType;
            this.Description = description;
            // use default value if no "language" provided
            if (language == null)
            {
                this.Language = "en-us";
            }
            else
            {
                this.Language = language;
            }
            this.PromptId = promptId;
            this.SourceId = sourceId;
            this.SourceType = sourceType;
            // use default value if no "streamable" provided
            if (streamable == null)
            {
                this.Streamable = true;
            }
            else
            {
                this.Streamable = streamable;
            }
            this.Tts = tts;
        }
        
        /// <summary>
        /// Length, in bytes, of the file
        /// </summary>
        /// <value>Length, in bytes, of the file</value>
        [DataMember(Name="content_length", EmitDefaultValue=false)]
        public int? ContentLength { get; set; }


        /// <summary>
        /// A brief description of the media update, usually the original file name
        /// </summary>
        /// <value>A brief description of the media update, usually the original file name</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The language of the media file or text
        /// </summary>
        /// <value>The language of the media file or text</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }


        /// <summary>
        /// A friendly name for the media
        /// </summary>
        /// <value>A friendly name for the media</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The prompt this media file represents
        /// </summary>
        /// <value>The prompt this media file represents</value>
        [DataMember(Name="prompt_id", EmitDefaultValue=false)]
        public string PromptId { get; set; }

        /// <summary>
        /// If the media was generated from a callflow module, this is ID of the properties
        /// </summary>
        /// <value>If the media was generated from a callflow module, this is ID of the properties</value>
        [DataMember(Name="source_id", EmitDefaultValue=false)]
        public string SourceId { get; set; }

        /// <summary>
        /// If the media was generated from a callflow module, this is the module name
        /// </summary>
        /// <value>If the media was generated from a callflow module, this is the module name</value>
        [DataMember(Name="source_type", EmitDefaultValue=false)]
        public string SourceType { get; set; }

        /// <summary>
        /// Determines if the media can be streamed
        /// </summary>
        /// <value>Determines if the media can be streamed</value>
        [DataMember(Name="streamable", EmitDefaultValue=false)]
        public bool? Streamable { get; set; }

        /// <summary>
        /// Gets or Sets Tts
        /// </summary>
        [DataMember(Name="tts", EmitDefaultValue=false)]
        public MediaTts Tts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Media {\n");
            sb.Append("  ContentLength: ").Append(ContentLength).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  MediaSource: ").Append(MediaSource).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PromptId: ").Append(PromptId).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("  Streamable: ").Append(Streamable).Append("\n");
            sb.Append("  Tts: ").Append(Tts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Media);
        }

        /// <summary>
        /// Returns true if Media instances are equal
        /// </summary>
        /// <param name="input">Instance of Media to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Media input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContentLength == input.ContentLength ||
                    (this.ContentLength != null &&
                    this.ContentLength.Equals(input.ContentLength))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.MediaSource == input.MediaSource ||
                    (this.MediaSource != null &&
                    this.MediaSource.Equals(input.MediaSource))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PromptId == input.PromptId ||
                    (this.PromptId != null &&
                    this.PromptId.Equals(input.PromptId))
                ) && 
                (
                    this.SourceId == input.SourceId ||
                    (this.SourceId != null &&
                    this.SourceId.Equals(input.SourceId))
                ) && 
                (
                    this.SourceType == input.SourceType ||
                    (this.SourceType != null &&
                    this.SourceType.Equals(input.SourceType))
                ) && 
                (
                    this.Streamable == input.Streamable ||
                    (this.Streamable != null &&
                    this.Streamable.Equals(input.Streamable))
                ) && 
                (
                    this.Tts == input.Tts ||
                    (this.Tts != null &&
                    this.Tts.Equals(input.Tts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContentLength != null)
                    hashCode = hashCode * 59 + this.ContentLength.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.MediaSource != null)
                    hashCode = hashCode * 59 + this.MediaSource.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PromptId != null)
                    hashCode = hashCode * 59 + this.PromptId.GetHashCode();
                if (this.SourceId != null)
                    hashCode = hashCode * 59 + this.SourceId.GetHashCode();
                if (this.SourceType != null)
                    hashCode = hashCode * 59 + this.SourceType.GetHashCode();
                if (this.Streamable != null)
                    hashCode = hashCode * 59 + this.Streamable.GetHashCode();
                if (this.Tts != null)
                    hashCode = hashCode * 59 + this.Tts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ContentLength (int?) maximum
            if(this.ContentLength > (int?)11534336)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContentLength, must be a value less than or equal to 11534336.", new [] { "ContentLength" });
            }

            // ContentLength (int?) minimum
            if(this.ContentLength < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContentLength, must be a value greater than or equal to 1.", new [] { "ContentLength" });
            }

            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 128.", new [] { "Description" });
            }

            // Description (string) minLength
            if(this.Description != null && this.Description.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 1.", new [] { "Description" });
            }

            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // SourceId (string) maxLength
            if(this.SourceId != null && this.SourceId.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceId, length must be less than 32.", new [] { "SourceId" });
            }

            // SourceId (string) minLength
            if(this.SourceId != null && this.SourceId.Length < 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceId, length must be greater than 32.", new [] { "SourceId" });
            }

            yield break;
        }
    }

}
