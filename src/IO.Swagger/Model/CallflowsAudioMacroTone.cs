/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Validator for playing a tone - TGML
    /// </summary>
    [DataContract]
    public partial class CallflowsAudioMacroTone :  IEquatable<CallflowsAudioMacroTone>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsAudioMacroTone" /> class.
        /// </summary>
        /// <param name="durationOff">time, in milliseconds, for turning the tone off.</param>
        /// <param name="durationOn">time, in milliseconds, for turning the tone on.</param>
        /// <param name="frequencies">The tone frequencies to play.</param>
        /// <param name="repeat">how many times to repeat the tone.</param>
        /// <param name="volume">Volume of the tone being played.</param>
        public CallflowsAudioMacroTone(int? durationOff = default(int?), int? durationOn = default(int?), List<int?> frequencies = default(List<int?>), int? repeat = default(int?), int? volume = default(int?))
        {
            this.DurationOff = durationOff;
            this.DurationOn = durationOn;
            this.Frequencies = frequencies;
            this.Repeat = repeat;
            this.Volume = volume;
        }
        
        /// <summary>
        /// time, in milliseconds, for turning the tone off
        /// </summary>
        /// <value>time, in milliseconds, for turning the tone off</value>
        [DataMember(Name="duration_off", EmitDefaultValue=false)]
        public int? DurationOff { get; set; }

        /// <summary>
        /// time, in milliseconds, for turning the tone on
        /// </summary>
        /// <value>time, in milliseconds, for turning the tone on</value>
        [DataMember(Name="duration_on", EmitDefaultValue=false)]
        public int? DurationOn { get; set; }

        /// <summary>
        /// The tone frequencies to play
        /// </summary>
        /// <value>The tone frequencies to play</value>
        [DataMember(Name="frequencies", EmitDefaultValue=false)]
        public List<int?> Frequencies { get; set; }

        /// <summary>
        /// how many times to repeat the tone
        /// </summary>
        /// <value>how many times to repeat the tone</value>
        [DataMember(Name="repeat", EmitDefaultValue=false)]
        public int? Repeat { get; set; }

        /// <summary>
        /// Volume of the tone being played
        /// </summary>
        /// <value>Volume of the tone being played</value>
        [DataMember(Name="volume", EmitDefaultValue=false)]
        public int? Volume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallflowsAudioMacroTone {\n");
            sb.Append("  DurationOff: ").Append(DurationOff).Append("\n");
            sb.Append("  DurationOn: ").Append(DurationOn).Append("\n");
            sb.Append("  Frequencies: ").Append(Frequencies).Append("\n");
            sb.Append("  Repeat: ").Append(Repeat).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallflowsAudioMacroTone);
        }

        /// <summary>
        /// Returns true if CallflowsAudioMacroTone instances are equal
        /// </summary>
        /// <param name="input">Instance of CallflowsAudioMacroTone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallflowsAudioMacroTone input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DurationOff == input.DurationOff ||
                    (this.DurationOff != null &&
                    this.DurationOff.Equals(input.DurationOff))
                ) && 
                (
                    this.DurationOn == input.DurationOn ||
                    (this.DurationOn != null &&
                    this.DurationOn.Equals(input.DurationOn))
                ) && 
                (
                    this.Frequencies == input.Frequencies ||
                    this.Frequencies != null &&
                    this.Frequencies.SequenceEqual(input.Frequencies)
                ) && 
                (
                    this.Repeat == input.Repeat ||
                    (this.Repeat != null &&
                    this.Repeat.Equals(input.Repeat))
                ) && 
                (
                    this.Volume == input.Volume ||
                    (this.Volume != null &&
                    this.Volume.Equals(input.Volume))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DurationOff != null)
                    hashCode = hashCode * 59 + this.DurationOff.GetHashCode();
                if (this.DurationOn != null)
                    hashCode = hashCode * 59 + this.DurationOn.GetHashCode();
                if (this.Frequencies != null)
                    hashCode = hashCode * 59 + this.Frequencies.GetHashCode();
                if (this.Repeat != null)
                    hashCode = hashCode * 59 + this.Repeat.GetHashCode();
                if (this.Volume != null)
                    hashCode = hashCode * 59 + this.Volume.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Volume (int?) maximum
            if(this.Volume > (int?)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Volume, must be a value less than or equal to 100.", new [] { "Volume" });
            }

            // Volume (int?) minimum
            if(this.Volume < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Volume, must be a value greater than or equal to 0.", new [] { "Volume" });
            }

            yield break;
        }
    }

}
