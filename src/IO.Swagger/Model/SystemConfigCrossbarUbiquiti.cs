/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for crossbar.ubiquiti system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigCrossbarUbiquiti :  IEquatable<SystemConfigCrossbarUbiquiti>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigCrossbarUbiquiti" /> class.
        /// </summary>
        /// <param name="apiSecret">crossbar.ubiquiti api secret.</param>
        /// <param name="apiTokenExpiresS">crossbar.ubiquiti api token expires in seconds.</param>
        /// <param name="production">production.</param>
        /// <param name="saltLength">crossbar.ubiquiti salt length.</param>
        /// <param name="ssoEnvironment">crossbar.ubiquiti sso environment (default to &quot;staging&quot;).</param>
        /// <param name="ssoProviderId">crossbar.ubiquiti sso provider id.</param>
        /// <param name="staging">staging.</param>
        /// <param name="tokensPerRequest">crossbar.ubiquiti tokens per request.</param>
        public SystemConfigCrossbarUbiquiti(string apiSecret = default(string), int? apiTokenExpiresS = default(int?), SystemConfigCrossbarUbiquitiProduction production = default(SystemConfigCrossbarUbiquitiProduction), int? saltLength = default(int?), string ssoEnvironment = "staging", string ssoProviderId = default(string), SystemConfigCrossbarUbiquitiStaging staging = default(SystemConfigCrossbarUbiquitiStaging), int? tokensPerRequest = default(int?))
        {
            this.ApiSecret = apiSecret;
            this.ApiTokenExpiresS = apiTokenExpiresS;
            this.Production = production;
            this.SaltLength = saltLength;
            // use default value if no "ssoEnvironment" provided
            if (ssoEnvironment == null)
            {
                this.SsoEnvironment = "staging";
            }
            else
            {
                this.SsoEnvironment = ssoEnvironment;
            }
            this.SsoProviderId = ssoProviderId;
            this.Staging = staging;
            this.TokensPerRequest = tokensPerRequest;
        }
        
        /// <summary>
        /// crossbar.ubiquiti api secret
        /// </summary>
        /// <value>crossbar.ubiquiti api secret</value>
        [DataMember(Name="api_secret", EmitDefaultValue=false)]
        public string ApiSecret { get; set; }

        /// <summary>
        /// crossbar.ubiquiti api token expires in seconds
        /// </summary>
        /// <value>crossbar.ubiquiti api token expires in seconds</value>
        [DataMember(Name="api_token_expires_s", EmitDefaultValue=false)]
        public int? ApiTokenExpiresS { get; set; }

        /// <summary>
        /// Gets or Sets Production
        /// </summary>
        [DataMember(Name="production", EmitDefaultValue=false)]
        public SystemConfigCrossbarUbiquitiProduction Production { get; set; }

        /// <summary>
        /// crossbar.ubiquiti salt length
        /// </summary>
        /// <value>crossbar.ubiquiti salt length</value>
        [DataMember(Name="salt_length", EmitDefaultValue=false)]
        public int? SaltLength { get; set; }

        /// <summary>
        /// crossbar.ubiquiti sso environment
        /// </summary>
        /// <value>crossbar.ubiquiti sso environment</value>
        [DataMember(Name="sso_environment", EmitDefaultValue=false)]
        public string SsoEnvironment { get; set; }

        /// <summary>
        /// crossbar.ubiquiti sso provider id
        /// </summary>
        /// <value>crossbar.ubiquiti sso provider id</value>
        [DataMember(Name="sso_provider_id", EmitDefaultValue=false)]
        public string SsoProviderId { get; set; }

        /// <summary>
        /// Gets or Sets Staging
        /// </summary>
        [DataMember(Name="staging", EmitDefaultValue=false)]
        public SystemConfigCrossbarUbiquitiStaging Staging { get; set; }

        /// <summary>
        /// crossbar.ubiquiti tokens per request
        /// </summary>
        /// <value>crossbar.ubiquiti tokens per request</value>
        [DataMember(Name="tokens_per_request", EmitDefaultValue=false)]
        public int? TokensPerRequest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigCrossbarUbiquiti {\n");
            sb.Append("  ApiSecret: ").Append(ApiSecret).Append("\n");
            sb.Append("  ApiTokenExpiresS: ").Append(ApiTokenExpiresS).Append("\n");
            sb.Append("  Production: ").Append(Production).Append("\n");
            sb.Append("  SaltLength: ").Append(SaltLength).Append("\n");
            sb.Append("  SsoEnvironment: ").Append(SsoEnvironment).Append("\n");
            sb.Append("  SsoProviderId: ").Append(SsoProviderId).Append("\n");
            sb.Append("  Staging: ").Append(Staging).Append("\n");
            sb.Append("  TokensPerRequest: ").Append(TokensPerRequest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigCrossbarUbiquiti);
        }

        /// <summary>
        /// Returns true if SystemConfigCrossbarUbiquiti instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigCrossbarUbiquiti to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigCrossbarUbiquiti input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApiSecret == input.ApiSecret ||
                    (this.ApiSecret != null &&
                    this.ApiSecret.Equals(input.ApiSecret))
                ) && 
                (
                    this.ApiTokenExpiresS == input.ApiTokenExpiresS ||
                    (this.ApiTokenExpiresS != null &&
                    this.ApiTokenExpiresS.Equals(input.ApiTokenExpiresS))
                ) && 
                (
                    this.Production == input.Production ||
                    (this.Production != null &&
                    this.Production.Equals(input.Production))
                ) && 
                (
                    this.SaltLength == input.SaltLength ||
                    (this.SaltLength != null &&
                    this.SaltLength.Equals(input.SaltLength))
                ) && 
                (
                    this.SsoEnvironment == input.SsoEnvironment ||
                    (this.SsoEnvironment != null &&
                    this.SsoEnvironment.Equals(input.SsoEnvironment))
                ) && 
                (
                    this.SsoProviderId == input.SsoProviderId ||
                    (this.SsoProviderId != null &&
                    this.SsoProviderId.Equals(input.SsoProviderId))
                ) && 
                (
                    this.Staging == input.Staging ||
                    (this.Staging != null &&
                    this.Staging.Equals(input.Staging))
                ) && 
                (
                    this.TokensPerRequest == input.TokensPerRequest ||
                    (this.TokensPerRequest != null &&
                    this.TokensPerRequest.Equals(input.TokensPerRequest))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiSecret != null)
                    hashCode = hashCode * 59 + this.ApiSecret.GetHashCode();
                if (this.ApiTokenExpiresS != null)
                    hashCode = hashCode * 59 + this.ApiTokenExpiresS.GetHashCode();
                if (this.Production != null)
                    hashCode = hashCode * 59 + this.Production.GetHashCode();
                if (this.SaltLength != null)
                    hashCode = hashCode * 59 + this.SaltLength.GetHashCode();
                if (this.SsoEnvironment != null)
                    hashCode = hashCode * 59 + this.SsoEnvironment.GetHashCode();
                if (this.SsoProviderId != null)
                    hashCode = hashCode * 59 + this.SsoProviderId.GetHashCode();
                if (this.Staging != null)
                    hashCode = hashCode * 59 + this.Staging.GetHashCode();
                if (this.TokensPerRequest != null)
                    hashCode = hashCode * 59 + this.TokensPerRequest.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
