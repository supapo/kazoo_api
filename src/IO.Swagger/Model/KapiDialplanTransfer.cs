/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for dialplan.transfer
    /// </summary>
    [DataContract]
    public partial class KapiDialplanTransfer :  IEquatable<KapiDialplanTransfer>, IValidatableObject
    {
        /// <summary>
        /// Defines ApplicationName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApplicationNameEnum
        {
            
            /// <summary>
            /// Enum Transfer for value: transfer
            /// </summary>
            [EnumMember(Value = "transfer")]
            Transfer = 1
        }

        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name="Application-Name", EmitDefaultValue=false)]
        public ApplicationNameEnum ApplicationName { get; set; }
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Call for value: call
            /// </summary>
            [EnumMember(Value = "call")]
            Call = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Command for value: command
            /// </summary>
            [EnumMember(Value = "command")]
            Command = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Defines InsertAt
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InsertAtEnum
        {
            
            /// <summary>
            /// Enum Head for value: head
            /// </summary>
            [EnumMember(Value = "head")]
            Head = 1,
            
            /// <summary>
            /// Enum Tail for value: tail
            /// </summary>
            [EnumMember(Value = "tail")]
            Tail = 2,
            
            /// <summary>
            /// Enum Flush for value: flush
            /// </summary>
            [EnumMember(Value = "flush")]
            Flush = 3,
            
            /// <summary>
            /// Enum Now for value: now
            /// </summary>
            [EnumMember(Value = "now")]
            Now = 4
        }

        /// <summary>
        /// Gets or Sets InsertAt
        /// </summary>
        [DataMember(Name="Insert-At", EmitDefaultValue=false)]
        public InsertAtEnum? InsertAt { get; set; }
        /// <summary>
        /// Defines TransferLeg
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransferLegEnum
        {
            
            /// <summary>
            /// Enum Bleg for value: bleg
            /// </summary>
            [EnumMember(Value = "bleg")]
            Bleg = 1,
            
            /// <summary>
            /// Enum Both for value: both
            /// </summary>
            [EnumMember(Value = "both")]
            Both = 2
        }

        /// <summary>
        /// Gets or Sets TransferLeg
        /// </summary>
        [DataMember(Name="Transfer-Leg", EmitDefaultValue=false)]
        public TransferLegEnum? TransferLeg { get; set; }
        /// <summary>
        /// Defines TransferType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransferTypeEnum
        {
            
            /// <summary>
            /// Enum Blind for value: blind
            /// </summary>
            [EnumMember(Value = "blind")]
            Blind = 1,
            
            /// <summary>
            /// Enum Attended for value: attended
            /// </summary>
            [EnumMember(Value = "attended")]
            Attended = 2
        }

        /// <summary>
        /// Gets or Sets TransferType
        /// </summary>
        [DataMember(Name="Transfer-Type", EmitDefaultValue=false)]
        public TransferTypeEnum TransferType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanTransfer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiDialplanTransfer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanTransfer" /> class.
        /// </summary>
        /// <param name="applicationName">applicationName (required).</param>
        /// <param name="attendedTransferKeys">attendedTransferKeys.</param>
        /// <param name="callID">callID (required).</param>
        /// <param name="callerIDName">callerIDName.</param>
        /// <param name="callerIDNumber">callerIDNumber.</param>
        /// <param name="customChannelVars">customChannelVars.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="insertAt">insertAt.</param>
        /// <param name="transferContext">transferContext.</param>
        /// <param name="transferLeg">transferLeg.</param>
        /// <param name="transferTo">transferTo (required).</param>
        /// <param name="transferType">transferType (required).</param>
        public KapiDialplanTransfer(ApplicationNameEnum applicationName = default(ApplicationNameEnum), string attendedTransferKeys = default(string), string callID = default(string), string callerIDName = default(string), string callerIDNumber = default(string), Object customChannelVars = default(Object), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), InsertAtEnum? insertAt = default(InsertAtEnum?), string transferContext = default(string), TransferLegEnum? transferLeg = default(TransferLegEnum?), string transferTo = default(string), TransferTypeEnum transferType = default(TransferTypeEnum))
        {
            // to ensure "applicationName" is required (not null)
            if (applicationName == null)
            {
                throw new InvalidDataException("applicationName is a required property for KapiDialplanTransfer and cannot be null");
            }
            else
            {
                this.ApplicationName = applicationName;
            }
            // to ensure "callID" is required (not null)
            if (callID == null)
            {
                throw new InvalidDataException("callID is a required property for KapiDialplanTransfer and cannot be null");
            }
            else
            {
                this.CallID = callID;
            }
            // to ensure "transferTo" is required (not null)
            if (transferTo == null)
            {
                throw new InvalidDataException("transferTo is a required property for KapiDialplanTransfer and cannot be null");
            }
            else
            {
                this.TransferTo = transferTo;
            }
            // to ensure "transferType" is required (not null)
            if (transferType == null)
            {
                throw new InvalidDataException("transferType is a required property for KapiDialplanTransfer and cannot be null");
            }
            else
            {
                this.TransferType = transferType;
            }
            this.AttendedTransferKeys = attendedTransferKeys;
            this.CallerIDName = callerIDName;
            this.CallerIDNumber = callerIDNumber;
            this.CustomChannelVars = customChannelVars;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.InsertAt = insertAt;
            this.TransferContext = transferContext;
            this.TransferLeg = transferLeg;
        }
        

        /// <summary>
        /// Gets or Sets AttendedTransferKeys
        /// </summary>
        [DataMember(Name="Attended-Transfer-Keys", EmitDefaultValue=false)]
        public string AttendedTransferKeys { get; set; }

        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }

        /// <summary>
        /// Gets or Sets CallerIDName
        /// </summary>
        [DataMember(Name="Caller-ID-Name", EmitDefaultValue=false)]
        public string CallerIDName { get; set; }

        /// <summary>
        /// Gets or Sets CallerIDNumber
        /// </summary>
        [DataMember(Name="Caller-ID-Number", EmitDefaultValue=false)]
        public string CallerIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets CustomChannelVars
        /// </summary>
        [DataMember(Name="Custom-Channel-Vars", EmitDefaultValue=false)]
        public Object CustomChannelVars { get; set; }




        /// <summary>
        /// Gets or Sets TransferContext
        /// </summary>
        [DataMember(Name="Transfer-Context", EmitDefaultValue=false)]
        public string TransferContext { get; set; }


        /// <summary>
        /// Gets or Sets TransferTo
        /// </summary>
        [DataMember(Name="Transfer-To", EmitDefaultValue=false)]
        public string TransferTo { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiDialplanTransfer {\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  AttendedTransferKeys: ").Append(AttendedTransferKeys).Append("\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  CallerIDName: ").Append(CallerIDName).Append("\n");
            sb.Append("  CallerIDNumber: ").Append(CallerIDNumber).Append("\n");
            sb.Append("  CustomChannelVars: ").Append(CustomChannelVars).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  InsertAt: ").Append(InsertAt).Append("\n");
            sb.Append("  TransferContext: ").Append(TransferContext).Append("\n");
            sb.Append("  TransferLeg: ").Append(TransferLeg).Append("\n");
            sb.Append("  TransferTo: ").Append(TransferTo).Append("\n");
            sb.Append("  TransferType: ").Append(TransferType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiDialplanTransfer);
        }

        /// <summary>
        /// Returns true if KapiDialplanTransfer instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiDialplanTransfer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiDialplanTransfer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.AttendedTransferKeys == input.AttendedTransferKeys ||
                    (this.AttendedTransferKeys != null &&
                    this.AttendedTransferKeys.Equals(input.AttendedTransferKeys))
                ) && 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.CallerIDName == input.CallerIDName ||
                    (this.CallerIDName != null &&
                    this.CallerIDName.Equals(input.CallerIDName))
                ) && 
                (
                    this.CallerIDNumber == input.CallerIDNumber ||
                    (this.CallerIDNumber != null &&
                    this.CallerIDNumber.Equals(input.CallerIDNumber))
                ) && 
                (
                    this.CustomChannelVars == input.CustomChannelVars ||
                    (this.CustomChannelVars != null &&
                    this.CustomChannelVars.Equals(input.CustomChannelVars))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.InsertAt == input.InsertAt ||
                    (this.InsertAt != null &&
                    this.InsertAt.Equals(input.InsertAt))
                ) && 
                (
                    this.TransferContext == input.TransferContext ||
                    (this.TransferContext != null &&
                    this.TransferContext.Equals(input.TransferContext))
                ) && 
                (
                    this.TransferLeg == input.TransferLeg ||
                    (this.TransferLeg != null &&
                    this.TransferLeg.Equals(input.TransferLeg))
                ) && 
                (
                    this.TransferTo == input.TransferTo ||
                    (this.TransferTo != null &&
                    this.TransferTo.Equals(input.TransferTo))
                ) && 
                (
                    this.TransferType == input.TransferType ||
                    (this.TransferType != null &&
                    this.TransferType.Equals(input.TransferType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationName != null)
                    hashCode = hashCode * 59 + this.ApplicationName.GetHashCode();
                if (this.AttendedTransferKeys != null)
                    hashCode = hashCode * 59 + this.AttendedTransferKeys.GetHashCode();
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.CallerIDName != null)
                    hashCode = hashCode * 59 + this.CallerIDName.GetHashCode();
                if (this.CallerIDNumber != null)
                    hashCode = hashCode * 59 + this.CallerIDNumber.GetHashCode();
                if (this.CustomChannelVars != null)
                    hashCode = hashCode * 59 + this.CustomChannelVars.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.InsertAt != null)
                    hashCode = hashCode * 59 + this.InsertAt.GetHashCode();
                if (this.TransferContext != null)
                    hashCode = hashCode * 59 + this.TransferContext.GetHashCode();
                if (this.TransferLeg != null)
                    hashCode = hashCode * 59 + this.TransferLeg.GetHashCode();
                if (this.TransferTo != null)
                    hashCode = hashCode * 59 + this.TransferTo.GetHashCode();
                if (this.TransferType != null)
                    hashCode = hashCode * 59 + this.TransferType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
