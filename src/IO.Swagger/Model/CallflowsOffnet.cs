/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Validator for the offnet callflow data object
    /// </summary>
    [DataContract]
    public partial class CallflowsOffnet :  IEquatable<CallflowsOffnet>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsOffnet" /> class.
        /// </summary>
        /// <param name="bypassE164">Use the original requested number instead of normalizing to E164.</param>
        /// <param name="callerIdType">Which configured caller-id to use (key in the &#39;caller_id&#39; object) (default to &quot;external&quot;).</param>
        /// <param name="customSipHeaders">A property list of SIP headers.</param>
        /// <param name="doNotNormalize">Use the original requested number instead of normalizing; otherwise try to apply the endpoint&#39;s dialplan to the requested number.</param>
        /// <param name="dynamicFlags">List of function names (or &#39;zone&#39;) that are called on the Call record to populate the &#39;flags&#39; array sent to the resource(s) for matching.</param>
        /// <param name="emitAccountId">Toggles whether to put the account id in the SIP packets.</param>
        /// <param name="formatFromUri">If true, puts the account realm in the From header.</param>
        /// <param name="fromUriRealm">Override the From realm in the SIP packets.</param>
        /// <param name="huntAccountId">When using local resources, use this account instead of the account making the call (useful for resellers).</param>
        /// <param name="ignoreEarlyMedia">Toggle whether to ignore early media (default to false).</param>
        /// <param name="outboundFlags">List of flags to use when matching resources to route the call.</param>
        /// <param name="resourceType">sets a custom resource type for the published amqp message.</param>
        /// <param name="ringback">Tone or file to play while waiting for the leg to be answered.</param>
        /// <param name="skipModule">When set to true this callflow action is skipped, advancing to the wildcard branch (if any).</param>
        /// <param name="timeout">How long, in seconds, to wait for the call to be answered.</param>
        /// <param name="toDid">Statically set the DID to dial.</param>
        /// <param name="useLocalResources">Toggle whether to use the account&#39;s (or hunt_account_id&#39;s) resources vs the system resources (default to true).</param>
        public CallflowsOffnet(bool? bypassE164 = default(bool?), string callerIdType = "external", Object customSipHeaders = default(Object), bool? doNotNormalize = default(bool?), List<string> dynamicFlags = default(List<string>), bool? emitAccountId = default(bool?), bool? formatFromUri = default(bool?), string fromUriRealm = default(string), string huntAccountId = default(string), bool? ignoreEarlyMedia = false, List<string> outboundFlags = default(List<string>), string resourceType = default(string), string ringback = default(string), bool? skipModule = default(bool?), int? timeout = default(int?), string toDid = default(string), bool? useLocalResources = true)
        {
            this.BypassE164 = bypassE164;
            // use default value if no "callerIdType" provided
            if (callerIdType == null)
            {
                this.CallerIdType = "external";
            }
            else
            {
                this.CallerIdType = callerIdType;
            }
            this.CustomSipHeaders = customSipHeaders;
            this.DoNotNormalize = doNotNormalize;
            this.DynamicFlags = dynamicFlags;
            this.EmitAccountId = emitAccountId;
            this.FormatFromUri = formatFromUri;
            this.FromUriRealm = fromUriRealm;
            this.HuntAccountId = huntAccountId;
            // use default value if no "ignoreEarlyMedia" provided
            if (ignoreEarlyMedia == null)
            {
                this.IgnoreEarlyMedia = false;
            }
            else
            {
                this.IgnoreEarlyMedia = ignoreEarlyMedia;
            }
            this.OutboundFlags = outboundFlags;
            this.ResourceType = resourceType;
            this.Ringback = ringback;
            this.SkipModule = skipModule;
            this.Timeout = timeout;
            this.ToDid = toDid;
            // use default value if no "useLocalResources" provided
            if (useLocalResources == null)
            {
                this.UseLocalResources = true;
            }
            else
            {
                this.UseLocalResources = useLocalResources;
            }
        }
        
        /// <summary>
        /// Use the original requested number instead of normalizing to E164
        /// </summary>
        /// <value>Use the original requested number instead of normalizing to E164</value>
        [DataMember(Name="bypass_e164", EmitDefaultValue=false)]
        public bool? BypassE164 { get; set; }

        /// <summary>
        /// Which configured caller-id to use (key in the &#39;caller_id&#39; object)
        /// </summary>
        /// <value>Which configured caller-id to use (key in the &#39;caller_id&#39; object)</value>
        [DataMember(Name="caller_id_type", EmitDefaultValue=false)]
        public string CallerIdType { get; set; }

        /// <summary>
        /// A property list of SIP headers
        /// </summary>
        /// <value>A property list of SIP headers</value>
        [DataMember(Name="custom_sip_headers", EmitDefaultValue=false)]
        public Object CustomSipHeaders { get; set; }

        /// <summary>
        /// Use the original requested number instead of normalizing; otherwise try to apply the endpoint&#39;s dialplan to the requested number
        /// </summary>
        /// <value>Use the original requested number instead of normalizing; otherwise try to apply the endpoint&#39;s dialplan to the requested number</value>
        [DataMember(Name="do_not_normalize", EmitDefaultValue=false)]
        public bool? DoNotNormalize { get; set; }

        /// <summary>
        /// List of function names (or &#39;zone&#39;) that are called on the Call record to populate the &#39;flags&#39; array sent to the resource(s) for matching
        /// </summary>
        /// <value>List of function names (or &#39;zone&#39;) that are called on the Call record to populate the &#39;flags&#39; array sent to the resource(s) for matching</value>
        [DataMember(Name="dynamic_flags", EmitDefaultValue=false)]
        public List<string> DynamicFlags { get; set; }

        /// <summary>
        /// Toggles whether to put the account id in the SIP packets
        /// </summary>
        /// <value>Toggles whether to put the account id in the SIP packets</value>
        [DataMember(Name="emit_account_id", EmitDefaultValue=false)]
        public bool? EmitAccountId { get; set; }

        /// <summary>
        /// If true, puts the account realm in the From header
        /// </summary>
        /// <value>If true, puts the account realm in the From header</value>
        [DataMember(Name="format_from_uri", EmitDefaultValue=false)]
        public bool? FormatFromUri { get; set; }

        /// <summary>
        /// Override the From realm in the SIP packets
        /// </summary>
        /// <value>Override the From realm in the SIP packets</value>
        [DataMember(Name="from_uri_realm", EmitDefaultValue=false)]
        public string FromUriRealm { get; set; }

        /// <summary>
        /// When using local resources, use this account instead of the account making the call (useful for resellers)
        /// </summary>
        /// <value>When using local resources, use this account instead of the account making the call (useful for resellers)</value>
        [DataMember(Name="hunt_account_id", EmitDefaultValue=false)]
        public string HuntAccountId { get; set; }

        /// <summary>
        /// Toggle whether to ignore early media
        /// </summary>
        /// <value>Toggle whether to ignore early media</value>
        [DataMember(Name="ignore_early_media", EmitDefaultValue=false)]
        public bool? IgnoreEarlyMedia { get; set; }

        /// <summary>
        /// List of flags to use when matching resources to route the call
        /// </summary>
        /// <value>List of flags to use when matching resources to route the call</value>
        [DataMember(Name="outbound_flags", EmitDefaultValue=false)]
        public List<string> OutboundFlags { get; set; }

        /// <summary>
        /// sets a custom resource type for the published amqp message
        /// </summary>
        /// <value>sets a custom resource type for the published amqp message</value>
        [DataMember(Name="resource_type", EmitDefaultValue=false)]
        public string ResourceType { get; set; }

        /// <summary>
        /// Tone or file to play while waiting for the leg to be answered
        /// </summary>
        /// <value>Tone or file to play while waiting for the leg to be answered</value>
        [DataMember(Name="ringback", EmitDefaultValue=false)]
        public string Ringback { get; set; }

        /// <summary>
        /// When set to true this callflow action is skipped, advancing to the wildcard branch (if any)
        /// </summary>
        /// <value>When set to true this callflow action is skipped, advancing to the wildcard branch (if any)</value>
        [DataMember(Name="skip_module", EmitDefaultValue=false)]
        public bool? SkipModule { get; set; }

        /// <summary>
        /// How long, in seconds, to wait for the call to be answered
        /// </summary>
        /// <value>How long, in seconds, to wait for the call to be answered</value>
        [DataMember(Name="timeout", EmitDefaultValue=false)]
        public int? Timeout { get; set; }

        /// <summary>
        /// Statically set the DID to dial
        /// </summary>
        /// <value>Statically set the DID to dial</value>
        [DataMember(Name="to_did", EmitDefaultValue=false)]
        public string ToDid { get; set; }

        /// <summary>
        /// Toggle whether to use the account&#39;s (or hunt_account_id&#39;s) resources vs the system resources
        /// </summary>
        /// <value>Toggle whether to use the account&#39;s (or hunt_account_id&#39;s) resources vs the system resources</value>
        [DataMember(Name="use_local_resources", EmitDefaultValue=false)]
        public bool? UseLocalResources { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallflowsOffnet {\n");
            sb.Append("  BypassE164: ").Append(BypassE164).Append("\n");
            sb.Append("  CallerIdType: ").Append(CallerIdType).Append("\n");
            sb.Append("  CustomSipHeaders: ").Append(CustomSipHeaders).Append("\n");
            sb.Append("  DoNotNormalize: ").Append(DoNotNormalize).Append("\n");
            sb.Append("  DynamicFlags: ").Append(DynamicFlags).Append("\n");
            sb.Append("  EmitAccountId: ").Append(EmitAccountId).Append("\n");
            sb.Append("  FormatFromUri: ").Append(FormatFromUri).Append("\n");
            sb.Append("  FromUriRealm: ").Append(FromUriRealm).Append("\n");
            sb.Append("  HuntAccountId: ").Append(HuntAccountId).Append("\n");
            sb.Append("  IgnoreEarlyMedia: ").Append(IgnoreEarlyMedia).Append("\n");
            sb.Append("  OutboundFlags: ").Append(OutboundFlags).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Ringback: ").Append(Ringback).Append("\n");
            sb.Append("  SkipModule: ").Append(SkipModule).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  ToDid: ").Append(ToDid).Append("\n");
            sb.Append("  UseLocalResources: ").Append(UseLocalResources).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallflowsOffnet);
        }

        /// <summary>
        /// Returns true if CallflowsOffnet instances are equal
        /// </summary>
        /// <param name="input">Instance of CallflowsOffnet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallflowsOffnet input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BypassE164 == input.BypassE164 ||
                    (this.BypassE164 != null &&
                    this.BypassE164.Equals(input.BypassE164))
                ) && 
                (
                    this.CallerIdType == input.CallerIdType ||
                    (this.CallerIdType != null &&
                    this.CallerIdType.Equals(input.CallerIdType))
                ) && 
                (
                    this.CustomSipHeaders == input.CustomSipHeaders ||
                    (this.CustomSipHeaders != null &&
                    this.CustomSipHeaders.Equals(input.CustomSipHeaders))
                ) && 
                (
                    this.DoNotNormalize == input.DoNotNormalize ||
                    (this.DoNotNormalize != null &&
                    this.DoNotNormalize.Equals(input.DoNotNormalize))
                ) && 
                (
                    this.DynamicFlags == input.DynamicFlags ||
                    this.DynamicFlags != null &&
                    this.DynamicFlags.SequenceEqual(input.DynamicFlags)
                ) && 
                (
                    this.EmitAccountId == input.EmitAccountId ||
                    (this.EmitAccountId != null &&
                    this.EmitAccountId.Equals(input.EmitAccountId))
                ) && 
                (
                    this.FormatFromUri == input.FormatFromUri ||
                    (this.FormatFromUri != null &&
                    this.FormatFromUri.Equals(input.FormatFromUri))
                ) && 
                (
                    this.FromUriRealm == input.FromUriRealm ||
                    (this.FromUriRealm != null &&
                    this.FromUriRealm.Equals(input.FromUriRealm))
                ) && 
                (
                    this.HuntAccountId == input.HuntAccountId ||
                    (this.HuntAccountId != null &&
                    this.HuntAccountId.Equals(input.HuntAccountId))
                ) && 
                (
                    this.IgnoreEarlyMedia == input.IgnoreEarlyMedia ||
                    (this.IgnoreEarlyMedia != null &&
                    this.IgnoreEarlyMedia.Equals(input.IgnoreEarlyMedia))
                ) && 
                (
                    this.OutboundFlags == input.OutboundFlags ||
                    this.OutboundFlags != null &&
                    this.OutboundFlags.SequenceEqual(input.OutboundFlags)
                ) && 
                (
                    this.ResourceType == input.ResourceType ||
                    (this.ResourceType != null &&
                    this.ResourceType.Equals(input.ResourceType))
                ) && 
                (
                    this.Ringback == input.Ringback ||
                    (this.Ringback != null &&
                    this.Ringback.Equals(input.Ringback))
                ) && 
                (
                    this.SkipModule == input.SkipModule ||
                    (this.SkipModule != null &&
                    this.SkipModule.Equals(input.SkipModule))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    (this.Timeout != null &&
                    this.Timeout.Equals(input.Timeout))
                ) && 
                (
                    this.ToDid == input.ToDid ||
                    (this.ToDid != null &&
                    this.ToDid.Equals(input.ToDid))
                ) && 
                (
                    this.UseLocalResources == input.UseLocalResources ||
                    (this.UseLocalResources != null &&
                    this.UseLocalResources.Equals(input.UseLocalResources))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BypassE164 != null)
                    hashCode = hashCode * 59 + this.BypassE164.GetHashCode();
                if (this.CallerIdType != null)
                    hashCode = hashCode * 59 + this.CallerIdType.GetHashCode();
                if (this.CustomSipHeaders != null)
                    hashCode = hashCode * 59 + this.CustomSipHeaders.GetHashCode();
                if (this.DoNotNormalize != null)
                    hashCode = hashCode * 59 + this.DoNotNormalize.GetHashCode();
                if (this.DynamicFlags != null)
                    hashCode = hashCode * 59 + this.DynamicFlags.GetHashCode();
                if (this.EmitAccountId != null)
                    hashCode = hashCode * 59 + this.EmitAccountId.GetHashCode();
                if (this.FormatFromUri != null)
                    hashCode = hashCode * 59 + this.FormatFromUri.GetHashCode();
                if (this.FromUriRealm != null)
                    hashCode = hashCode * 59 + this.FromUriRealm.GetHashCode();
                if (this.HuntAccountId != null)
                    hashCode = hashCode * 59 + this.HuntAccountId.GetHashCode();
                if (this.IgnoreEarlyMedia != null)
                    hashCode = hashCode * 59 + this.IgnoreEarlyMedia.GetHashCode();
                if (this.OutboundFlags != null)
                    hashCode = hashCode * 59 + this.OutboundFlags.GetHashCode();
                if (this.ResourceType != null)
                    hashCode = hashCode * 59 + this.ResourceType.GetHashCode();
                if (this.Ringback != null)
                    hashCode = hashCode * 59 + this.Ringback.GetHashCode();
                if (this.SkipModule != null)
                    hashCode = hashCode * 59 + this.SkipModule.GetHashCode();
                if (this.Timeout != null)
                    hashCode = hashCode * 59 + this.Timeout.GetHashCode();
                if (this.ToDid != null)
                    hashCode = hashCode * 59 + this.ToDid.GetHashCode();
                if (this.UseLocalResources != null)
                    hashCode = hashCode * 59 + this.UseLocalResources.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
