/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for auth system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigAuth :  IEquatable<SystemConfigAuth>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigAuth" /> class.
        /// </summary>
        /// <param name="defaultMultiFactorProvider">Default multi factor authentication provider name (default to &quot;duo&quot;).</param>
        /// <param name="secretForUserSignature">auth secret for user signature.</param>
        /// <param name="systemKey">auth system key.</param>
        public SystemConfigAuth(string defaultMultiFactorProvider = "duo", string secretForUserSignature = default(string), string systemKey = default(string))
        {
            // use default value if no "defaultMultiFactorProvider" provided
            if (defaultMultiFactorProvider == null)
            {
                this.DefaultMultiFactorProvider = "duo";
            }
            else
            {
                this.DefaultMultiFactorProvider = defaultMultiFactorProvider;
            }
            this.SecretForUserSignature = secretForUserSignature;
            this.SystemKey = systemKey;
        }
        
        /// <summary>
        /// Default multi factor authentication provider name
        /// </summary>
        /// <value>Default multi factor authentication provider name</value>
        [DataMember(Name="default_multi_factor_provider", EmitDefaultValue=false)]
        public string DefaultMultiFactorProvider { get; set; }

        /// <summary>
        /// auth secret for user signature
        /// </summary>
        /// <value>auth secret for user signature</value>
        [DataMember(Name="secret_for_user_signature", EmitDefaultValue=false)]
        public string SecretForUserSignature { get; set; }

        /// <summary>
        /// auth system key
        /// </summary>
        /// <value>auth system key</value>
        [DataMember(Name="system_key", EmitDefaultValue=false)]
        public string SystemKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigAuth {\n");
            sb.Append("  DefaultMultiFactorProvider: ").Append(DefaultMultiFactorProvider).Append("\n");
            sb.Append("  SecretForUserSignature: ").Append(SecretForUserSignature).Append("\n");
            sb.Append("  SystemKey: ").Append(SystemKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigAuth);
        }

        /// <summary>
        /// Returns true if SystemConfigAuth instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigAuth to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigAuth input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefaultMultiFactorProvider == input.DefaultMultiFactorProvider ||
                    (this.DefaultMultiFactorProvider != null &&
                    this.DefaultMultiFactorProvider.Equals(input.DefaultMultiFactorProvider))
                ) && 
                (
                    this.SecretForUserSignature == input.SecretForUserSignature ||
                    (this.SecretForUserSignature != null &&
                    this.SecretForUserSignature.Equals(input.SecretForUserSignature))
                ) && 
                (
                    this.SystemKey == input.SystemKey ||
                    (this.SystemKey != null &&
                    this.SystemKey.Equals(input.SystemKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultMultiFactorProvider != null)
                    hashCode = hashCode * 59 + this.DefaultMultiFactorProvider.GetHashCode();
                if (this.SecretForUserSignature != null)
                    hashCode = hashCode * 59 + this.SecretForUserSignature.GetHashCode();
                if (this.SystemKey != null)
                    hashCode = hashCode * 59 + this.SystemKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
