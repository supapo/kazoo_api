/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for conferences
    /// </summary>
    [DataContract]
    public partial class Conferences :  IEquatable<Conferences>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Conferences" /> class.
        /// </summary>
        /// <param name="bridgePassword">the password used for a conference bridge.</param>
        /// <param name="bridgeUsername">the username used for a conference bridge.</param>
        /// <param name="callerControls">caller controls (config settings).</param>
        /// <param name="conferenceNumbers">Defines conference numbers that can be used by members or moderators.</param>
        /// <param name="controls">controls.</param>
        /// <param name="domain">domain.</param>
        /// <param name="flags">Flags set by external applications.</param>
        /// <param name="focus">This is a read-only property indicating the media server hosting the conference.</param>
        /// <param name="language">Prompt language to play in the conference.</param>
        /// <param name="maxMembersMedia">Media to play when the conference is full.</param>
        /// <param name="maxParticipants">The maximum number of participants that can join.</param>
        /// <param name="member">member.</param>
        /// <param name="moderator">moderator.</param>
        /// <param name="moderatorControls">profile on the switch for controlling the conference as a moderator.</param>
        /// <param name="name">A friendly name for the conference.</param>
        /// <param name="ownerId">The user ID who manages this conference.</param>
        /// <param name="playEntryTone">Whether to play an entry tone, or the entry tone to play.</param>
        /// <param name="playExitTone">Whether to play an exit tone, or the exit tone to play.</param>
        /// <param name="playName">Do we need to announce new conference members? (default to false).</param>
        /// <param name="playWelcome">Whether to play the welcome prompt.</param>
        /// <param name="profile">Profile configuration.</param>
        /// <param name="profileName">conference profile name.</param>
        /// <param name="requireModerator">does the conference require a moderator.</param>
        /// <param name="waitForModerator">should members wait for a moderator before joining the conference.</param>
        public Conferences(string bridgePassword = default(string), string bridgeUsername = default(string), string callerControls = default(string), List<string> conferenceNumbers = default(List<string>), Object controls = default(Object), string domain = default(string), List<string> flags = default(List<string>), string focus = default(string), string language = default(string), string maxMembersMedia = default(string), int? maxParticipants = default(int?), ConferencesMember member = default(ConferencesMember), ConferencesModerator moderator = default(ConferencesModerator), string moderatorControls = default(string), string name = default(string), string ownerId = default(string), Object playEntryTone = default(Object), Object playExitTone = default(Object), bool? playName = false, bool? playWelcome = default(bool?), ConferencesProfile profile = default(ConferencesProfile), string profileName = default(string), bool? requireModerator = default(bool?), bool? waitForModerator = default(bool?))
        {
            this.BridgePassword = bridgePassword;
            this.BridgeUsername = bridgeUsername;
            this.CallerControls = callerControls;
            this.ConferenceNumbers = conferenceNumbers;
            this.Controls = controls;
            this.Domain = domain;
            this.Flags = flags;
            this.Focus = focus;
            this.Language = language;
            this.MaxMembersMedia = maxMembersMedia;
            this.MaxParticipants = maxParticipants;
            this.Member = member;
            this.Moderator = moderator;
            this.ModeratorControls = moderatorControls;
            this.Name = name;
            this.OwnerId = ownerId;
            this.PlayEntryTone = playEntryTone;
            this.PlayExitTone = playExitTone;
            // use default value if no "playName" provided
            if (playName == null)
            {
                this.PlayName = false;
            }
            else
            {
                this.PlayName = playName;
            }
            this.PlayWelcome = playWelcome;
            this.Profile = profile;
            this.ProfileName = profileName;
            this.RequireModerator = requireModerator;
            this.WaitForModerator = waitForModerator;
        }
        
        /// <summary>
        /// the password used for a conference bridge
        /// </summary>
        /// <value>the password used for a conference bridge</value>
        [DataMember(Name="bridge_password", EmitDefaultValue=false)]
        public string BridgePassword { get; set; }

        /// <summary>
        /// the username used for a conference bridge
        /// </summary>
        /// <value>the username used for a conference bridge</value>
        [DataMember(Name="bridge_username", EmitDefaultValue=false)]
        public string BridgeUsername { get; set; }

        /// <summary>
        /// caller controls (config settings)
        /// </summary>
        /// <value>caller controls (config settings)</value>
        [DataMember(Name="caller_controls", EmitDefaultValue=false)]
        public string CallerControls { get; set; }

        /// <summary>
        /// Defines conference numbers that can be used by members or moderators
        /// </summary>
        /// <value>Defines conference numbers that can be used by members or moderators</value>
        [DataMember(Name="conference_numbers", EmitDefaultValue=false)]
        public List<string> ConferenceNumbers { get; set; }

        /// <summary>
        /// controls
        /// </summary>
        /// <value>controls</value>
        [DataMember(Name="controls", EmitDefaultValue=false)]
        public Object Controls { get; set; }

        /// <summary>
        /// domain
        /// </summary>
        /// <value>domain</value>
        [DataMember(Name="domain", EmitDefaultValue=false)]
        public string Domain { get; set; }

        /// <summary>
        /// Flags set by external applications
        /// </summary>
        /// <value>Flags set by external applications</value>
        [DataMember(Name="flags", EmitDefaultValue=false)]
        public List<string> Flags { get; set; }

        /// <summary>
        /// This is a read-only property indicating the media server hosting the conference
        /// </summary>
        /// <value>This is a read-only property indicating the media server hosting the conference</value>
        [DataMember(Name="focus", EmitDefaultValue=false)]
        public string Focus { get; set; }

        /// <summary>
        /// Prompt language to play in the conference
        /// </summary>
        /// <value>Prompt language to play in the conference</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Media to play when the conference is full
        /// </summary>
        /// <value>Media to play when the conference is full</value>
        [DataMember(Name="max_members_media", EmitDefaultValue=false)]
        public string MaxMembersMedia { get; set; }

        /// <summary>
        /// The maximum number of participants that can join
        /// </summary>
        /// <value>The maximum number of participants that can join</value>
        [DataMember(Name="max_participants", EmitDefaultValue=false)]
        public int? MaxParticipants { get; set; }

        /// <summary>
        /// Gets or Sets Member
        /// </summary>
        [DataMember(Name="member", EmitDefaultValue=false)]
        public ConferencesMember Member { get; set; }

        /// <summary>
        /// Gets or Sets Moderator
        /// </summary>
        [DataMember(Name="moderator", EmitDefaultValue=false)]
        public ConferencesModerator Moderator { get; set; }

        /// <summary>
        /// profile on the switch for controlling the conference as a moderator
        /// </summary>
        /// <value>profile on the switch for controlling the conference as a moderator</value>
        [DataMember(Name="moderator_controls", EmitDefaultValue=false)]
        public string ModeratorControls { get; set; }

        /// <summary>
        /// A friendly name for the conference
        /// </summary>
        /// <value>A friendly name for the conference</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The user ID who manages this conference
        /// </summary>
        /// <value>The user ID who manages this conference</value>
        [DataMember(Name="owner_id", EmitDefaultValue=false)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Whether to play an entry tone, or the entry tone to play
        /// </summary>
        /// <value>Whether to play an entry tone, or the entry tone to play</value>
        [DataMember(Name="play_entry_tone", EmitDefaultValue=false)]
        public Object PlayEntryTone { get; set; }

        /// <summary>
        /// Whether to play an exit tone, or the exit tone to play
        /// </summary>
        /// <value>Whether to play an exit tone, or the exit tone to play</value>
        [DataMember(Name="play_exit_tone", EmitDefaultValue=false)]
        public Object PlayExitTone { get; set; }

        /// <summary>
        /// Do we need to announce new conference members?
        /// </summary>
        /// <value>Do we need to announce new conference members?</value>
        [DataMember(Name="play_name", EmitDefaultValue=false)]
        public bool? PlayName { get; set; }

        /// <summary>
        /// Whether to play the welcome prompt
        /// </summary>
        /// <value>Whether to play the welcome prompt</value>
        [DataMember(Name="play_welcome", EmitDefaultValue=false)]
        public bool? PlayWelcome { get; set; }

        /// <summary>
        /// Profile configuration
        /// </summary>
        /// <value>Profile configuration</value>
        [DataMember(Name="profile", EmitDefaultValue=false)]
        public ConferencesProfile Profile { get; set; }

        /// <summary>
        /// conference profile name
        /// </summary>
        /// <value>conference profile name</value>
        [DataMember(Name="profile_name", EmitDefaultValue=false)]
        public string ProfileName { get; set; }

        /// <summary>
        /// does the conference require a moderator
        /// </summary>
        /// <value>does the conference require a moderator</value>
        [DataMember(Name="require_moderator", EmitDefaultValue=false)]
        public bool? RequireModerator { get; set; }

        /// <summary>
        /// should members wait for a moderator before joining the conference
        /// </summary>
        /// <value>should members wait for a moderator before joining the conference</value>
        [DataMember(Name="wait_for_moderator", EmitDefaultValue=false)]
        public bool? WaitForModerator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Conferences {\n");
            sb.Append("  BridgePassword: ").Append(BridgePassword).Append("\n");
            sb.Append("  BridgeUsername: ").Append(BridgeUsername).Append("\n");
            sb.Append("  CallerControls: ").Append(CallerControls).Append("\n");
            sb.Append("  ConferenceNumbers: ").Append(ConferenceNumbers).Append("\n");
            sb.Append("  Controls: ").Append(Controls).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  Focus: ").Append(Focus).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  MaxMembersMedia: ").Append(MaxMembersMedia).Append("\n");
            sb.Append("  MaxParticipants: ").Append(MaxParticipants).Append("\n");
            sb.Append("  Member: ").Append(Member).Append("\n");
            sb.Append("  Moderator: ").Append(Moderator).Append("\n");
            sb.Append("  ModeratorControls: ").Append(ModeratorControls).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  PlayEntryTone: ").Append(PlayEntryTone).Append("\n");
            sb.Append("  PlayExitTone: ").Append(PlayExitTone).Append("\n");
            sb.Append("  PlayName: ").Append(PlayName).Append("\n");
            sb.Append("  PlayWelcome: ").Append(PlayWelcome).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  ProfileName: ").Append(ProfileName).Append("\n");
            sb.Append("  RequireModerator: ").Append(RequireModerator).Append("\n");
            sb.Append("  WaitForModerator: ").Append(WaitForModerator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Conferences);
        }

        /// <summary>
        /// Returns true if Conferences instances are equal
        /// </summary>
        /// <param name="input">Instance of Conferences to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Conferences input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BridgePassword == input.BridgePassword ||
                    (this.BridgePassword != null &&
                    this.BridgePassword.Equals(input.BridgePassword))
                ) && 
                (
                    this.BridgeUsername == input.BridgeUsername ||
                    (this.BridgeUsername != null &&
                    this.BridgeUsername.Equals(input.BridgeUsername))
                ) && 
                (
                    this.CallerControls == input.CallerControls ||
                    (this.CallerControls != null &&
                    this.CallerControls.Equals(input.CallerControls))
                ) && 
                (
                    this.ConferenceNumbers == input.ConferenceNumbers ||
                    this.ConferenceNumbers != null &&
                    this.ConferenceNumbers.SequenceEqual(input.ConferenceNumbers)
                ) && 
                (
                    this.Controls == input.Controls ||
                    (this.Controls != null &&
                    this.Controls.Equals(input.Controls))
                ) && 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.Flags == input.Flags ||
                    this.Flags != null &&
                    this.Flags.SequenceEqual(input.Flags)
                ) && 
                (
                    this.Focus == input.Focus ||
                    (this.Focus != null &&
                    this.Focus.Equals(input.Focus))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.MaxMembersMedia == input.MaxMembersMedia ||
                    (this.MaxMembersMedia != null &&
                    this.MaxMembersMedia.Equals(input.MaxMembersMedia))
                ) && 
                (
                    this.MaxParticipants == input.MaxParticipants ||
                    (this.MaxParticipants != null &&
                    this.MaxParticipants.Equals(input.MaxParticipants))
                ) && 
                (
                    this.Member == input.Member ||
                    (this.Member != null &&
                    this.Member.Equals(input.Member))
                ) && 
                (
                    this.Moderator == input.Moderator ||
                    (this.Moderator != null &&
                    this.Moderator.Equals(input.Moderator))
                ) && 
                (
                    this.ModeratorControls == input.ModeratorControls ||
                    (this.ModeratorControls != null &&
                    this.ModeratorControls.Equals(input.ModeratorControls))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                ) && 
                (
                    this.PlayEntryTone == input.PlayEntryTone ||
                    (this.PlayEntryTone != null &&
                    this.PlayEntryTone.Equals(input.PlayEntryTone))
                ) && 
                (
                    this.PlayExitTone == input.PlayExitTone ||
                    (this.PlayExitTone != null &&
                    this.PlayExitTone.Equals(input.PlayExitTone))
                ) && 
                (
                    this.PlayName == input.PlayName ||
                    (this.PlayName != null &&
                    this.PlayName.Equals(input.PlayName))
                ) && 
                (
                    this.PlayWelcome == input.PlayWelcome ||
                    (this.PlayWelcome != null &&
                    this.PlayWelcome.Equals(input.PlayWelcome))
                ) && 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                ) && 
                (
                    this.ProfileName == input.ProfileName ||
                    (this.ProfileName != null &&
                    this.ProfileName.Equals(input.ProfileName))
                ) && 
                (
                    this.RequireModerator == input.RequireModerator ||
                    (this.RequireModerator != null &&
                    this.RequireModerator.Equals(input.RequireModerator))
                ) && 
                (
                    this.WaitForModerator == input.WaitForModerator ||
                    (this.WaitForModerator != null &&
                    this.WaitForModerator.Equals(input.WaitForModerator))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BridgePassword != null)
                    hashCode = hashCode * 59 + this.BridgePassword.GetHashCode();
                if (this.BridgeUsername != null)
                    hashCode = hashCode * 59 + this.BridgeUsername.GetHashCode();
                if (this.CallerControls != null)
                    hashCode = hashCode * 59 + this.CallerControls.GetHashCode();
                if (this.ConferenceNumbers != null)
                    hashCode = hashCode * 59 + this.ConferenceNumbers.GetHashCode();
                if (this.Controls != null)
                    hashCode = hashCode * 59 + this.Controls.GetHashCode();
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                if (this.Flags != null)
                    hashCode = hashCode * 59 + this.Flags.GetHashCode();
                if (this.Focus != null)
                    hashCode = hashCode * 59 + this.Focus.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.MaxMembersMedia != null)
                    hashCode = hashCode * 59 + this.MaxMembersMedia.GetHashCode();
                if (this.MaxParticipants != null)
                    hashCode = hashCode * 59 + this.MaxParticipants.GetHashCode();
                if (this.Member != null)
                    hashCode = hashCode * 59 + this.Member.GetHashCode();
                if (this.Moderator != null)
                    hashCode = hashCode * 59 + this.Moderator.GetHashCode();
                if (this.ModeratorControls != null)
                    hashCode = hashCode * 59 + this.ModeratorControls.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OwnerId != null)
                    hashCode = hashCode * 59 + this.OwnerId.GetHashCode();
                if (this.PlayEntryTone != null)
                    hashCode = hashCode * 59 + this.PlayEntryTone.GetHashCode();
                if (this.PlayExitTone != null)
                    hashCode = hashCode * 59 + this.PlayExitTone.GetHashCode();
                if (this.PlayName != null)
                    hashCode = hashCode * 59 + this.PlayName.GetHashCode();
                if (this.PlayWelcome != null)
                    hashCode = hashCode * 59 + this.PlayWelcome.GetHashCode();
                if (this.Profile != null)
                    hashCode = hashCode * 59 + this.Profile.GetHashCode();
                if (this.ProfileName != null)
                    hashCode = hashCode * 59 + this.ProfileName.GetHashCode();
                if (this.RequireModerator != null)
                    hashCode = hashCode * 59 + this.RequireModerator.GetHashCode();
                if (this.WaitForModerator != null)
                    hashCode = hashCode * 59 + this.WaitForModerator.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // OwnerId (string) maxLength
            if(this.OwnerId != null && this.OwnerId.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OwnerId, length must be less than 32.", new [] { "OwnerId" });
            }

            // OwnerId (string) minLength
            if(this.OwnerId != null && this.OwnerId.Length < 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OwnerId, length must be greater than 32.", new [] { "OwnerId" });
            }

            yield break;
        }
    }

}
