/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// date-time at which to perform the porting
    /// </summary>
    [DataContract]
    public partial class PortRequestsToScheduledScheduleOn :  IEquatable<PortRequestsToScheduledScheduleOn>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PortRequestsToScheduledScheduleOn" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PortRequestsToScheduledScheduleOn() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PortRequestsToScheduledScheduleOn" /> class.
        /// </summary>
        /// <param name="dateTime">dateTime (required).</param>
        /// <param name="timezone">timezone (required).</param>
        public PortRequestsToScheduledScheduleOn(string dateTime = default(string), Object timezone = default(Object))
        {
            // to ensure "dateTime" is required (not null)
            if (dateTime == null)
            {
                throw new InvalidDataException("dateTime is a required property for PortRequestsToScheduledScheduleOn and cannot be null");
            }
            else
            {
                this.DateTime = dateTime;
            }
            // to ensure "timezone" is required (not null)
            if (timezone == null)
            {
                throw new InvalidDataException("timezone is a required property for PortRequestsToScheduledScheduleOn and cannot be null");
            }
            else
            {
                this.Timezone = timezone;
            }
        }
        
        /// <summary>
        /// Gets or Sets DateTime
        /// </summary>
        [DataMember(Name="date_time", EmitDefaultValue=false)]
        public string DateTime { get; set; }

        /// <summary>
        /// Gets or Sets Timezone
        /// </summary>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public Object Timezone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PortRequestsToScheduledScheduleOn {\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PortRequestsToScheduledScheduleOn);
        }

        /// <summary>
        /// Returns true if PortRequestsToScheduledScheduleOn instances are equal
        /// </summary>
        /// <param name="input">Instance of PortRequestsToScheduledScheduleOn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PortRequestsToScheduledScheduleOn input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DateTime == input.DateTime ||
                    (this.DateTime != null &&
                    this.DateTime.Equals(input.DateTime))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateTime != null)
                    hashCode = hashCode * 59 + this.DateTime.GetHashCode();
                if (this.Timezone != null)
                    hashCode = hashCode * 59 + this.Timezone.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DateTime (string) pattern
            Regex regexDateTime = new Regex(@"^2\\d\\d\\d-\\d\\d-\\d\\d \\d\\d:\\d\\d$", RegexOptions.CultureInvariant);
            if (false == regexDateTime.Match(this.DateTime).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DateTime, must match a pattern of " + regexDateTime, new [] { "DateTime" });
            }

            yield break;
        }
    }

}
