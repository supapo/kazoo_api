/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for tasks.notify_resend system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigTasksNotifyResend :  IEquatable<SystemConfigTasksNotifyResend>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigTasksNotifyResend" /> class.
        /// </summary>
        /// <param name="cycleDelayTimeMs">Timeout in milliseconds between each cycle.</param>
        /// <param name="maxDocRead">Max number of notifications to read from database for each cycle.</param>
        /// <param name="maxRetries">Default max retries to re-publish.</param>
        /// <param name="publishTimeoutMs">Timeout in milliseconds for publishing notification.</param>
        /// <param name="rescheduleRules">Re-schedule rules for each notification type to apply.</param>
        /// <param name="retryAfterFudgeS">Constant time in seconds which would be multiplied with attempts to set retry time.</param>
        public SystemConfigTasksNotifyResend(int? cycleDelayTimeMs = default(int?), int? maxDocRead = default(int?), int? maxRetries = default(int?), int? publishTimeoutMs = default(int?), Object rescheduleRules = default(Object), int? retryAfterFudgeS = default(int?))
        {
            this.CycleDelayTimeMs = cycleDelayTimeMs;
            this.MaxDocRead = maxDocRead;
            this.MaxRetries = maxRetries;
            this.PublishTimeoutMs = publishTimeoutMs;
            this.RescheduleRules = rescheduleRules;
            this.RetryAfterFudgeS = retryAfterFudgeS;
        }
        
        /// <summary>
        /// Timeout in milliseconds between each cycle
        /// </summary>
        /// <value>Timeout in milliseconds between each cycle</value>
        [DataMember(Name="cycle_delay_time_ms", EmitDefaultValue=false)]
        public int? CycleDelayTimeMs { get; set; }

        /// <summary>
        /// Max number of notifications to read from database for each cycle
        /// </summary>
        /// <value>Max number of notifications to read from database for each cycle</value>
        [DataMember(Name="max_doc_read", EmitDefaultValue=false)]
        public int? MaxDocRead { get; set; }

        /// <summary>
        /// Default max retries to re-publish
        /// </summary>
        /// <value>Default max retries to re-publish</value>
        [DataMember(Name="max_retries", EmitDefaultValue=false)]
        public int? MaxRetries { get; set; }

        /// <summary>
        /// Timeout in milliseconds for publishing notification
        /// </summary>
        /// <value>Timeout in milliseconds for publishing notification</value>
        [DataMember(Name="publish_timeout_ms", EmitDefaultValue=false)]
        public int? PublishTimeoutMs { get; set; }

        /// <summary>
        /// Re-schedule rules for each notification type to apply
        /// </summary>
        /// <value>Re-schedule rules for each notification type to apply</value>
        [DataMember(Name="reschedule_rules", EmitDefaultValue=false)]
        public Object RescheduleRules { get; set; }

        /// <summary>
        /// Constant time in seconds which would be multiplied with attempts to set retry time
        /// </summary>
        /// <value>Constant time in seconds which would be multiplied with attempts to set retry time</value>
        [DataMember(Name="retry_after_fudge_s", EmitDefaultValue=false)]
        public int? RetryAfterFudgeS { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigTasksNotifyResend {\n");
            sb.Append("  CycleDelayTimeMs: ").Append(CycleDelayTimeMs).Append("\n");
            sb.Append("  MaxDocRead: ").Append(MaxDocRead).Append("\n");
            sb.Append("  MaxRetries: ").Append(MaxRetries).Append("\n");
            sb.Append("  PublishTimeoutMs: ").Append(PublishTimeoutMs).Append("\n");
            sb.Append("  RescheduleRules: ").Append(RescheduleRules).Append("\n");
            sb.Append("  RetryAfterFudgeS: ").Append(RetryAfterFudgeS).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigTasksNotifyResend);
        }

        /// <summary>
        /// Returns true if SystemConfigTasksNotifyResend instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigTasksNotifyResend to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigTasksNotifyResend input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CycleDelayTimeMs == input.CycleDelayTimeMs ||
                    (this.CycleDelayTimeMs != null &&
                    this.CycleDelayTimeMs.Equals(input.CycleDelayTimeMs))
                ) && 
                (
                    this.MaxDocRead == input.MaxDocRead ||
                    (this.MaxDocRead != null &&
                    this.MaxDocRead.Equals(input.MaxDocRead))
                ) && 
                (
                    this.MaxRetries == input.MaxRetries ||
                    (this.MaxRetries != null &&
                    this.MaxRetries.Equals(input.MaxRetries))
                ) && 
                (
                    this.PublishTimeoutMs == input.PublishTimeoutMs ||
                    (this.PublishTimeoutMs != null &&
                    this.PublishTimeoutMs.Equals(input.PublishTimeoutMs))
                ) && 
                (
                    this.RescheduleRules == input.RescheduleRules ||
                    (this.RescheduleRules != null &&
                    this.RescheduleRules.Equals(input.RescheduleRules))
                ) && 
                (
                    this.RetryAfterFudgeS == input.RetryAfterFudgeS ||
                    (this.RetryAfterFudgeS != null &&
                    this.RetryAfterFudgeS.Equals(input.RetryAfterFudgeS))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CycleDelayTimeMs != null)
                    hashCode = hashCode * 59 + this.CycleDelayTimeMs.GetHashCode();
                if (this.MaxDocRead != null)
                    hashCode = hashCode * 59 + this.MaxDocRead.GetHashCode();
                if (this.MaxRetries != null)
                    hashCode = hashCode * 59 + this.MaxRetries.GetHashCode();
                if (this.PublishTimeoutMs != null)
                    hashCode = hashCode * 59 + this.PublishTimeoutMs.GetHashCode();
                if (this.RescheduleRules != null)
                    hashCode = hashCode * 59 + this.RescheduleRules.GetHashCode();
                if (this.RetryAfterFudgeS != null)
                    hashCode = hashCode * 59 + this.RetryAfterFudgeS.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PublishTimeoutMs (int?) minimum
            if(this.PublishTimeoutMs < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PublishTimeoutMs, must be a value greater than or equal to 1.", new [] { "PublishTimeoutMs" });
            }

            yield break;
        }
    }

}
