/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for media.req
    /// </summary>
    [DataContract]
    public partial class KapiMediaReq :  IEquatable<KapiMediaReq>, IValidatableObject
    {
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Media for value: media
            /// </summary>
            [EnumMember(Value = "media")]
            Media = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Mediareq for value: media_req
            /// </summary>
            [EnumMember(Value = "media_req")]
            Mediareq = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Defines Format
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormatEnum
        {
            
            /// <summary>
            /// Enum Mp3 for value: mp3
            /// </summary>
            [EnumMember(Value = "mp3")]
            Mp3 = 1,
            
            /// <summary>
            /// Enum Wav for value: wav
            /// </summary>
            [EnumMember(Value = "wav")]
            Wav = 2
        }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="Format", EmitDefaultValue=false)]
        public FormatEnum? Format { get; set; }
        /// <summary>
        /// Defines Protocol
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProtocolEnum
        {
            
            /// <summary>
            /// Enum Http for value: http
            /// </summary>
            [EnumMember(Value = "http")]
            Http = 1,
            
            /// <summary>
            /// Enum Https for value: https
            /// </summary>
            [EnumMember(Value = "https")]
            Https = 2,
            
            /// <summary>
            /// Enum Shout for value: shout
            /// </summary>
            [EnumMember(Value = "shout")]
            Shout = 3,
            
            /// <summary>
            /// Enum Vlc for value: vlc
            /// </summary>
            [EnumMember(Value = "vlc")]
            Vlc = 4
        }

        /// <summary>
        /// Gets or Sets Protocol
        /// </summary>
        [DataMember(Name="Protocol", EmitDefaultValue=false)]
        public ProtocolEnum? Protocol { get; set; }
        /// <summary>
        /// Defines StreamType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StreamTypeEnum
        {
            
            /// <summary>
            /// Enum New for value: new
            /// </summary>
            [EnumMember(Value = "new")]
            New = 1,
            
            /// <summary>
            /// Enum Extant for value: extant
            /// </summary>
            [EnumMember(Value = "extant")]
            Extant = 2
        }

        /// <summary>
        /// Gets or Sets StreamType
        /// </summary>
        [DataMember(Name="Stream-Type", EmitDefaultValue=false)]
        public StreamTypeEnum? StreamType { get; set; }
        /// <summary>
        /// Defines Voice
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VoiceEnum
        {
            
            /// <summary>
            /// Enum Male for value: male
            /// </summary>
            [EnumMember(Value = "male")]
            Male = 1,
            
            /// <summary>
            /// Enum Female for value: female
            /// </summary>
            [EnumMember(Value = "female")]
            Female = 2
        }

        /// <summary>
        /// Gets or Sets Voice
        /// </summary>
        [DataMember(Name="Voice", EmitDefaultValue=false)]
        public VoiceEnum? Voice { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiMediaReq" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiMediaReq() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiMediaReq" /> class.
        /// </summary>
        /// <param name="accountID">accountID.</param>
        /// <param name="callID">callID.</param>
        /// <param name="engine">engine.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="format">format.</param>
        /// <param name="language">language.</param>
        /// <param name="mediaName">mediaName (required).</param>
        /// <param name="protocol">protocol.</param>
        /// <param name="streamType">streamType.</param>
        /// <param name="text">text.</param>
        /// <param name="voice">voice.</param>
        public KapiMediaReq(string accountID = default(string), string callID = default(string), string engine = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), FormatEnum? format = default(FormatEnum?), string language = default(string), string mediaName = default(string), ProtocolEnum? protocol = default(ProtocolEnum?), StreamTypeEnum? streamType = default(StreamTypeEnum?), string text = default(string), VoiceEnum? voice = default(VoiceEnum?))
        {
            // to ensure "mediaName" is required (not null)
            if (mediaName == null)
            {
                throw new InvalidDataException("mediaName is a required property for KapiMediaReq and cannot be null");
            }
            else
            {
                this.MediaName = mediaName;
            }
            this.AccountID = accountID;
            this.CallID = callID;
            this.Engine = engine;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.Format = format;
            this.Language = language;
            this.Protocol = protocol;
            this.StreamType = streamType;
            this.Text = text;
            this.Voice = voice;
        }
        
        /// <summary>
        /// Gets or Sets AccountID
        /// </summary>
        [DataMember(Name="Account-ID", EmitDefaultValue=false)]
        public string AccountID { get; set; }

        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }

        /// <summary>
        /// Gets or Sets Engine
        /// </summary>
        [DataMember(Name="Engine", EmitDefaultValue=false)]
        public string Engine { get; set; }




        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name="Language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets MediaName
        /// </summary>
        [DataMember(Name="Media-Name", EmitDefaultValue=false)]
        public string MediaName { get; set; }



        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="Text", EmitDefaultValue=false)]
        public string Text { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiMediaReq {\n");
            sb.Append("  AccountID: ").Append(AccountID).Append("\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  Engine: ").Append(Engine).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  MediaName: ").Append(MediaName).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  StreamType: ").Append(StreamType).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Voice: ").Append(Voice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiMediaReq);
        }

        /// <summary>
        /// Returns true if KapiMediaReq instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiMediaReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiMediaReq input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountID == input.AccountID ||
                    (this.AccountID != null &&
                    this.AccountID.Equals(input.AccountID))
                ) && 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.Engine == input.Engine ||
                    (this.Engine != null &&
                    this.Engine.Equals(input.Engine))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.MediaName == input.MediaName ||
                    (this.MediaName != null &&
                    this.MediaName.Equals(input.MediaName))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                ) && 
                (
                    this.StreamType == input.StreamType ||
                    (this.StreamType != null &&
                    this.StreamType.Equals(input.StreamType))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Voice == input.Voice ||
                    (this.Voice != null &&
                    this.Voice.Equals(input.Voice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountID != null)
                    hashCode = hashCode * 59 + this.AccountID.GetHashCode();
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.Engine != null)
                    hashCode = hashCode * 59 + this.Engine.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.MediaName != null)
                    hashCode = hashCode * 59 + this.MediaName.GetHashCode();
                if (this.Protocol != null)
                    hashCode = hashCode * 59 + this.Protocol.GetHashCode();
                if (this.StreamType != null)
                    hashCode = hashCode * 59 + this.StreamType.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Voice != null)
                    hashCode = hashCode * 59 + this.Voice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
