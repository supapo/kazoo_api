/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for conference.add_participant
    /// </summary>
    [DataContract]
    public partial class KapiConferenceAddParticipant :  IEquatable<KapiConferenceAddParticipant>, IValidatableObject
    {
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Conference for value: conference
            /// </summary>
            [EnumMember(Value = "conference")]
            Conference = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Addparticipant for value: add_participant
            /// </summary>
            [EnumMember(Value = "add_participant")]
            Addparticipant = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiConferenceAddParticipant" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiConferenceAddParticipant() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiConferenceAddParticipant" /> class.
        /// </summary>
        /// <param name="accountID">accountID.</param>
        /// <param name="answered">answered.</param>
        /// <param name="authorizingID">authorizingID.</param>
        /// <param name="authorizingType">authorizingType.</param>
        /// <param name="bridgeID">bridgeID.</param>
        /// <param name="callDirection">callDirection.</param>
        /// <param name="callID">callID (required).</param>
        /// <param name="calleeIDName">calleeIDName.</param>
        /// <param name="calleeIDNumber">calleeIDNumber.</param>
        /// <param name="callerIDName">callerIDName.</param>
        /// <param name="callerIDNumber">callerIDNumber.</param>
        /// <param name="channelAuthorized">channelAuthorized.</param>
        /// <param name="channelCallState">channelCallState.</param>
        /// <param name="channelCreatedTime">channelCreatedTime.</param>
        /// <param name="channelIsLoopback">channelIsLoopback.</param>
        /// <param name="channelLoopbackBowout">channelLoopbackBowout.</param>
        /// <param name="channelLoopbackBowoutExecute">channelLoopbackBowoutExecute.</param>
        /// <param name="channelLoopbackLeg">channelLoopbackLeg.</param>
        /// <param name="channelLoopbackOtherLegID">channelLoopbackOtherLegID.</param>
        /// <param name="channelMoving">channelMoving.</param>
        /// <param name="channelName">channelName.</param>
        /// <param name="channelState">channelState.</param>
        /// <param name="conferenceID">conferenceID (required).</param>
        /// <param name="controlQueue">controlQueue (required).</param>
        /// <param name="customApplicationVars">customApplicationVars.</param>
        /// <param name="customChannelVars">customChannelVars.</param>
        /// <param name="customSIPHeaders">customSIPHeaders.</param>
        /// <param name="destination">destination.</param>
        /// <param name="disposition">disposition.</param>
        /// <param name="ecallmgrNode">ecallmgrNode.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="from">from.</param>
        /// <param name="fromTag">fromTag.</param>
        /// <param name="hangupCause">hangupCause.</param>
        /// <param name="hangupCode">hangupCode.</param>
        /// <param name="isLoopback">isLoopback.</param>
        /// <param name="isOnHold">isOnHold.</param>
        /// <param name="mediaNode">mediaNode.</param>
        /// <param name="mediaServer">mediaServer.</param>
        /// <param name="msgID">msgID.</param>
        /// <param name="node">node.</param>
        /// <param name="originationCallID">originationCallID.</param>
        /// <param name="otherLegCallID">otherLegCallID.</param>
        /// <param name="otherLegCallerIDName">otherLegCallerIDName.</param>
        /// <param name="otherLegCallerIDNumber">otherLegCallerIDNumber.</param>
        /// <param name="otherLegDestinationNumber">otherLegDestinationNumber.</param>
        /// <param name="otherLegDirection">otherLegDirection.</param>
        /// <param name="participantFlags">participantFlags.</param>
        /// <param name="presenceID">presenceID.</param>
        /// <param name="profileName">profileName.</param>
        /// <param name="rawApplicationData">rawApplicationData.</param>
        /// <param name="rawApplicationName">rawApplicationName.</param>
        /// <param name="realm">realm.</param>
        /// <param name="replacedBy">replacedBy.</param>
        /// <param name="request">request.</param>
        /// <param name="switchHostname">switchHostname.</param>
        /// <param name="switchNodename">switchNodename.</param>
        /// <param name="switchURI">switchURI.</param>
        /// <param name="switchURL">switchURL.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="to">to.</param>
        /// <param name="toTag">toTag.</param>
        /// <param name="transferHistory">transferHistory.</param>
        /// <param name="username">username.</param>
        public KapiConferenceAddParticipant(string accountID = default(string), string answered = default(string), string authorizingID = default(string), string authorizingType = default(string), string bridgeID = default(string), string callDirection = default(string), string callID = default(string), string calleeIDName = default(string), string calleeIDNumber = default(string), string callerIDName = default(string), string callerIDNumber = default(string), string channelAuthorized = default(string), string channelCallState = default(string), int? channelCreatedTime = default(int?), string channelIsLoopback = default(string), string channelLoopbackBowout = default(string), string channelLoopbackBowoutExecute = default(string), string channelLoopbackLeg = default(string), string channelLoopbackOtherLegID = default(string), string channelMoving = default(string), string channelName = default(string), string channelState = default(string), string conferenceID = default(string), string controlQueue = default(string), Object customApplicationVars = default(Object), Object customChannelVars = default(Object), Object customSIPHeaders = default(Object), string destination = default(string), string disposition = default(string), string ecallmgrNode = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string from = default(string), string fromTag = default(string), string hangupCause = default(string), string hangupCode = default(string), string isLoopback = default(string), string isOnHold = default(string), string mediaNode = default(string), string mediaServer = default(string), string msgID = default(string), string node = default(string), string originationCallID = default(string), string otherLegCallID = default(string), string otherLegCallerIDName = default(string), string otherLegCallerIDNumber = default(string), string otherLegDestinationNumber = default(string), string otherLegDirection = default(string), string participantFlags = default(string), string presenceID = default(string), string profileName = default(string), string rawApplicationData = default(string), string rawApplicationName = default(string), string realm = default(string), string replacedBy = default(string), string request = default(string), string switchHostname = default(string), string switchNodename = default(string), string switchURI = default(string), string switchURL = default(string), string timestamp = default(string), string to = default(string), string toTag = default(string), string transferHistory = default(string), string username = default(string))
        {
            // to ensure "callID" is required (not null)
            if (callID == null)
            {
                throw new InvalidDataException("callID is a required property for KapiConferenceAddParticipant and cannot be null");
            }
            else
            {
                this.CallID = callID;
            }
            // to ensure "conferenceID" is required (not null)
            if (conferenceID == null)
            {
                throw new InvalidDataException("conferenceID is a required property for KapiConferenceAddParticipant and cannot be null");
            }
            else
            {
                this.ConferenceID = conferenceID;
            }
            // to ensure "controlQueue" is required (not null)
            if (controlQueue == null)
            {
                throw new InvalidDataException("controlQueue is a required property for KapiConferenceAddParticipant and cannot be null");
            }
            else
            {
                this.ControlQueue = controlQueue;
            }
            this.AccountID = accountID;
            this.Answered = answered;
            this.AuthorizingID = authorizingID;
            this.AuthorizingType = authorizingType;
            this.BridgeID = bridgeID;
            this.CallDirection = callDirection;
            this.CalleeIDName = calleeIDName;
            this.CalleeIDNumber = calleeIDNumber;
            this.CallerIDName = callerIDName;
            this.CallerIDNumber = callerIDNumber;
            this.ChannelAuthorized = channelAuthorized;
            this.ChannelCallState = channelCallState;
            this.ChannelCreatedTime = channelCreatedTime;
            this.ChannelIsLoopback = channelIsLoopback;
            this.ChannelLoopbackBowout = channelLoopbackBowout;
            this.ChannelLoopbackBowoutExecute = channelLoopbackBowoutExecute;
            this.ChannelLoopbackLeg = channelLoopbackLeg;
            this.ChannelLoopbackOtherLegID = channelLoopbackOtherLegID;
            this.ChannelMoving = channelMoving;
            this.ChannelName = channelName;
            this.ChannelState = channelState;
            this.CustomApplicationVars = customApplicationVars;
            this.CustomChannelVars = customChannelVars;
            this.CustomSIPHeaders = customSIPHeaders;
            this.Destination = destination;
            this.Disposition = disposition;
            this.EcallmgrNode = ecallmgrNode;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.From = from;
            this.FromTag = fromTag;
            this.HangupCause = hangupCause;
            this.HangupCode = hangupCode;
            this.IsLoopback = isLoopback;
            this.IsOnHold = isOnHold;
            this.MediaNode = mediaNode;
            this.MediaServer = mediaServer;
            this.MsgID = msgID;
            this.Node = node;
            this.OriginationCallID = originationCallID;
            this.OtherLegCallID = otherLegCallID;
            this.OtherLegCallerIDName = otherLegCallerIDName;
            this.OtherLegCallerIDNumber = otherLegCallerIDNumber;
            this.OtherLegDestinationNumber = otherLegDestinationNumber;
            this.OtherLegDirection = otherLegDirection;
            this.ParticipantFlags = participantFlags;
            this.PresenceID = presenceID;
            this.ProfileName = profileName;
            this.RawApplicationData = rawApplicationData;
            this.RawApplicationName = rawApplicationName;
            this.Realm = realm;
            this.ReplacedBy = replacedBy;
            this.Request = request;
            this.SwitchHostname = switchHostname;
            this.SwitchNodename = switchNodename;
            this.SwitchURI = switchURI;
            this.SwitchURL = switchURL;
            this.Timestamp = timestamp;
            this.To = to;
            this.ToTag = toTag;
            this.TransferHistory = transferHistory;
            this.Username = username;
        }
        
        /// <summary>
        /// Gets or Sets AccountID
        /// </summary>
        [DataMember(Name="Account-ID", EmitDefaultValue=false)]
        public string AccountID { get; set; }

        /// <summary>
        /// Gets or Sets Answered
        /// </summary>
        [DataMember(Name="Answered", EmitDefaultValue=false)]
        public string Answered { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizingID
        /// </summary>
        [DataMember(Name="Authorizing-ID", EmitDefaultValue=false)]
        public string AuthorizingID { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizingType
        /// </summary>
        [DataMember(Name="Authorizing-Type", EmitDefaultValue=false)]
        public string AuthorizingType { get; set; }

        /// <summary>
        /// Gets or Sets BridgeID
        /// </summary>
        [DataMember(Name="Bridge-ID", EmitDefaultValue=false)]
        public string BridgeID { get; set; }

        /// <summary>
        /// Gets or Sets CallDirection
        /// </summary>
        [DataMember(Name="Call-Direction", EmitDefaultValue=false)]
        public string CallDirection { get; set; }

        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }

        /// <summary>
        /// Gets or Sets CalleeIDName
        /// </summary>
        [DataMember(Name="Callee-ID-Name", EmitDefaultValue=false)]
        public string CalleeIDName { get; set; }

        /// <summary>
        /// Gets or Sets CalleeIDNumber
        /// </summary>
        [DataMember(Name="Callee-ID-Number", EmitDefaultValue=false)]
        public string CalleeIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets CallerIDName
        /// </summary>
        [DataMember(Name="Caller-ID-Name", EmitDefaultValue=false)]
        public string CallerIDName { get; set; }

        /// <summary>
        /// Gets or Sets CallerIDNumber
        /// </summary>
        [DataMember(Name="Caller-ID-Number", EmitDefaultValue=false)]
        public string CallerIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets ChannelAuthorized
        /// </summary>
        [DataMember(Name="Channel-Authorized", EmitDefaultValue=false)]
        public string ChannelAuthorized { get; set; }

        /// <summary>
        /// Gets or Sets ChannelCallState
        /// </summary>
        [DataMember(Name="Channel-Call-State", EmitDefaultValue=false)]
        public string ChannelCallState { get; set; }

        /// <summary>
        /// Gets or Sets ChannelCreatedTime
        /// </summary>
        [DataMember(Name="Channel-Created-Time", EmitDefaultValue=false)]
        public int? ChannelCreatedTime { get; set; }

        /// <summary>
        /// Gets or Sets ChannelIsLoopback
        /// </summary>
        [DataMember(Name="Channel-Is-Loopback", EmitDefaultValue=false)]
        public string ChannelIsLoopback { get; set; }

        /// <summary>
        /// Gets or Sets ChannelLoopbackBowout
        /// </summary>
        [DataMember(Name="Channel-Loopback-Bowout", EmitDefaultValue=false)]
        public string ChannelLoopbackBowout { get; set; }

        /// <summary>
        /// Gets or Sets ChannelLoopbackBowoutExecute
        /// </summary>
        [DataMember(Name="Channel-Loopback-Bowout-Execute", EmitDefaultValue=false)]
        public string ChannelLoopbackBowoutExecute { get; set; }

        /// <summary>
        /// Gets or Sets ChannelLoopbackLeg
        /// </summary>
        [DataMember(Name="Channel-Loopback-Leg", EmitDefaultValue=false)]
        public string ChannelLoopbackLeg { get; set; }

        /// <summary>
        /// Gets or Sets ChannelLoopbackOtherLegID
        /// </summary>
        [DataMember(Name="Channel-Loopback-Other-Leg-ID", EmitDefaultValue=false)]
        public string ChannelLoopbackOtherLegID { get; set; }

        /// <summary>
        /// Gets or Sets ChannelMoving
        /// </summary>
        [DataMember(Name="Channel-Moving", EmitDefaultValue=false)]
        public string ChannelMoving { get; set; }

        /// <summary>
        /// Gets or Sets ChannelName
        /// </summary>
        [DataMember(Name="Channel-Name", EmitDefaultValue=false)]
        public string ChannelName { get; set; }

        /// <summary>
        /// Gets or Sets ChannelState
        /// </summary>
        [DataMember(Name="Channel-State", EmitDefaultValue=false)]
        public string ChannelState { get; set; }

        /// <summary>
        /// Gets or Sets ConferenceID
        /// </summary>
        [DataMember(Name="Conference-ID", EmitDefaultValue=false)]
        public string ConferenceID { get; set; }

        /// <summary>
        /// Gets or Sets ControlQueue
        /// </summary>
        [DataMember(Name="Control-Queue", EmitDefaultValue=false)]
        public string ControlQueue { get; set; }

        /// <summary>
        /// Gets or Sets CustomApplicationVars
        /// </summary>
        [DataMember(Name="Custom-Application-Vars", EmitDefaultValue=false)]
        public Object CustomApplicationVars { get; set; }

        /// <summary>
        /// Gets or Sets CustomChannelVars
        /// </summary>
        [DataMember(Name="Custom-Channel-Vars", EmitDefaultValue=false)]
        public Object CustomChannelVars { get; set; }

        /// <summary>
        /// Gets or Sets CustomSIPHeaders
        /// </summary>
        [DataMember(Name="Custom-SIP-Headers", EmitDefaultValue=false)]
        public Object CustomSIPHeaders { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name="Destination", EmitDefaultValue=false)]
        public string Destination { get; set; }

        /// <summary>
        /// Gets or Sets Disposition
        /// </summary>
        [DataMember(Name="Disposition", EmitDefaultValue=false)]
        public string Disposition { get; set; }

        /// <summary>
        /// Gets or Sets EcallmgrNode
        /// </summary>
        [DataMember(Name="Ecallmgr-Node", EmitDefaultValue=false)]
        public string EcallmgrNode { get; set; }



        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="From", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// Gets or Sets FromTag
        /// </summary>
        [DataMember(Name="From-Tag", EmitDefaultValue=false)]
        public string FromTag { get; set; }

        /// <summary>
        /// Gets or Sets HangupCause
        /// </summary>
        [DataMember(Name="Hangup-Cause", EmitDefaultValue=false)]
        public string HangupCause { get; set; }

        /// <summary>
        /// Gets or Sets HangupCode
        /// </summary>
        [DataMember(Name="Hangup-Code", EmitDefaultValue=false)]
        public string HangupCode { get; set; }

        /// <summary>
        /// Gets or Sets IsLoopback
        /// </summary>
        [DataMember(Name="Is-Loopback", EmitDefaultValue=false)]
        public string IsLoopback { get; set; }

        /// <summary>
        /// Gets or Sets IsOnHold
        /// </summary>
        [DataMember(Name="Is-On-Hold", EmitDefaultValue=false)]
        public string IsOnHold { get; set; }

        /// <summary>
        /// Gets or Sets MediaNode
        /// </summary>
        [DataMember(Name="Media-Node", EmitDefaultValue=false)]
        public string MediaNode { get; set; }

        /// <summary>
        /// Gets or Sets MediaServer
        /// </summary>
        [DataMember(Name="Media-Server", EmitDefaultValue=false)]
        public string MediaServer { get; set; }

        /// <summary>
        /// Gets or Sets MsgID
        /// </summary>
        [DataMember(Name="Msg-ID", EmitDefaultValue=false)]
        public string MsgID { get; set; }

        /// <summary>
        /// Gets or Sets Node
        /// </summary>
        [DataMember(Name="Node", EmitDefaultValue=false)]
        public string Node { get; set; }

        /// <summary>
        /// Gets or Sets OriginationCallID
        /// </summary>
        [DataMember(Name="Origination-Call-ID", EmitDefaultValue=false)]
        public string OriginationCallID { get; set; }

        /// <summary>
        /// Gets or Sets OtherLegCallID
        /// </summary>
        [DataMember(Name="Other-Leg-Call-ID", EmitDefaultValue=false)]
        public string OtherLegCallID { get; set; }

        /// <summary>
        /// Gets or Sets OtherLegCallerIDName
        /// </summary>
        [DataMember(Name="Other-Leg-Caller-ID-Name", EmitDefaultValue=false)]
        public string OtherLegCallerIDName { get; set; }

        /// <summary>
        /// Gets or Sets OtherLegCallerIDNumber
        /// </summary>
        [DataMember(Name="Other-Leg-Caller-ID-Number", EmitDefaultValue=false)]
        public string OtherLegCallerIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets OtherLegDestinationNumber
        /// </summary>
        [DataMember(Name="Other-Leg-Destination-Number", EmitDefaultValue=false)]
        public string OtherLegDestinationNumber { get; set; }

        /// <summary>
        /// Gets or Sets OtherLegDirection
        /// </summary>
        [DataMember(Name="Other-Leg-Direction", EmitDefaultValue=false)]
        public string OtherLegDirection { get; set; }

        /// <summary>
        /// Gets or Sets ParticipantFlags
        /// </summary>
        [DataMember(Name="Participant-Flags", EmitDefaultValue=false)]
        public string ParticipantFlags { get; set; }

        /// <summary>
        /// Gets or Sets PresenceID
        /// </summary>
        [DataMember(Name="Presence-ID", EmitDefaultValue=false)]
        public string PresenceID { get; set; }

        /// <summary>
        /// Gets or Sets ProfileName
        /// </summary>
        [DataMember(Name="Profile-Name", EmitDefaultValue=false)]
        public string ProfileName { get; set; }

        /// <summary>
        /// Gets or Sets RawApplicationData
        /// </summary>
        [DataMember(Name="Raw-Application-Data", EmitDefaultValue=false)]
        public string RawApplicationData { get; set; }

        /// <summary>
        /// Gets or Sets RawApplicationName
        /// </summary>
        [DataMember(Name="Raw-Application-Name", EmitDefaultValue=false)]
        public string RawApplicationName { get; set; }

        /// <summary>
        /// Gets or Sets Realm
        /// </summary>
        [DataMember(Name="Realm", EmitDefaultValue=false)]
        public string Realm { get; set; }

        /// <summary>
        /// Gets or Sets ReplacedBy
        /// </summary>
        [DataMember(Name="Replaced-By", EmitDefaultValue=false)]
        public string ReplacedBy { get; set; }

        /// <summary>
        /// Gets or Sets Request
        /// </summary>
        [DataMember(Name="Request", EmitDefaultValue=false)]
        public string Request { get; set; }

        /// <summary>
        /// Gets or Sets SwitchHostname
        /// </summary>
        [DataMember(Name="Switch-Hostname", EmitDefaultValue=false)]
        public string SwitchHostname { get; set; }

        /// <summary>
        /// Gets or Sets SwitchNodename
        /// </summary>
        [DataMember(Name="Switch-Nodename", EmitDefaultValue=false)]
        public string SwitchNodename { get; set; }

        /// <summary>
        /// Gets or Sets SwitchURI
        /// </summary>
        [DataMember(Name="Switch-URI", EmitDefaultValue=false)]
        public string SwitchURI { get; set; }

        /// <summary>
        /// Gets or Sets SwitchURL
        /// </summary>
        [DataMember(Name="Switch-URL", EmitDefaultValue=false)]
        public string SwitchURL { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="Timestamp", EmitDefaultValue=false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="To", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// Gets or Sets ToTag
        /// </summary>
        [DataMember(Name="To-Tag", EmitDefaultValue=false)]
        public string ToTag { get; set; }

        /// <summary>
        /// Gets or Sets TransferHistory
        /// </summary>
        [DataMember(Name="Transfer-History", EmitDefaultValue=false)]
        public string TransferHistory { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="Username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiConferenceAddParticipant {\n");
            sb.Append("  AccountID: ").Append(AccountID).Append("\n");
            sb.Append("  Answered: ").Append(Answered).Append("\n");
            sb.Append("  AuthorizingID: ").Append(AuthorizingID).Append("\n");
            sb.Append("  AuthorizingType: ").Append(AuthorizingType).Append("\n");
            sb.Append("  BridgeID: ").Append(BridgeID).Append("\n");
            sb.Append("  CallDirection: ").Append(CallDirection).Append("\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  CalleeIDName: ").Append(CalleeIDName).Append("\n");
            sb.Append("  CalleeIDNumber: ").Append(CalleeIDNumber).Append("\n");
            sb.Append("  CallerIDName: ").Append(CallerIDName).Append("\n");
            sb.Append("  CallerIDNumber: ").Append(CallerIDNumber).Append("\n");
            sb.Append("  ChannelAuthorized: ").Append(ChannelAuthorized).Append("\n");
            sb.Append("  ChannelCallState: ").Append(ChannelCallState).Append("\n");
            sb.Append("  ChannelCreatedTime: ").Append(ChannelCreatedTime).Append("\n");
            sb.Append("  ChannelIsLoopback: ").Append(ChannelIsLoopback).Append("\n");
            sb.Append("  ChannelLoopbackBowout: ").Append(ChannelLoopbackBowout).Append("\n");
            sb.Append("  ChannelLoopbackBowoutExecute: ").Append(ChannelLoopbackBowoutExecute).Append("\n");
            sb.Append("  ChannelLoopbackLeg: ").Append(ChannelLoopbackLeg).Append("\n");
            sb.Append("  ChannelLoopbackOtherLegID: ").Append(ChannelLoopbackOtherLegID).Append("\n");
            sb.Append("  ChannelMoving: ").Append(ChannelMoving).Append("\n");
            sb.Append("  ChannelName: ").Append(ChannelName).Append("\n");
            sb.Append("  ChannelState: ").Append(ChannelState).Append("\n");
            sb.Append("  ConferenceID: ").Append(ConferenceID).Append("\n");
            sb.Append("  ControlQueue: ").Append(ControlQueue).Append("\n");
            sb.Append("  CustomApplicationVars: ").Append(CustomApplicationVars).Append("\n");
            sb.Append("  CustomChannelVars: ").Append(CustomChannelVars).Append("\n");
            sb.Append("  CustomSIPHeaders: ").Append(CustomSIPHeaders).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  Disposition: ").Append(Disposition).Append("\n");
            sb.Append("  EcallmgrNode: ").Append(EcallmgrNode).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  FromTag: ").Append(FromTag).Append("\n");
            sb.Append("  HangupCause: ").Append(HangupCause).Append("\n");
            sb.Append("  HangupCode: ").Append(HangupCode).Append("\n");
            sb.Append("  IsLoopback: ").Append(IsLoopback).Append("\n");
            sb.Append("  IsOnHold: ").Append(IsOnHold).Append("\n");
            sb.Append("  MediaNode: ").Append(MediaNode).Append("\n");
            sb.Append("  MediaServer: ").Append(MediaServer).Append("\n");
            sb.Append("  MsgID: ").Append(MsgID).Append("\n");
            sb.Append("  Node: ").Append(Node).Append("\n");
            sb.Append("  OriginationCallID: ").Append(OriginationCallID).Append("\n");
            sb.Append("  OtherLegCallID: ").Append(OtherLegCallID).Append("\n");
            sb.Append("  OtherLegCallerIDName: ").Append(OtherLegCallerIDName).Append("\n");
            sb.Append("  OtherLegCallerIDNumber: ").Append(OtherLegCallerIDNumber).Append("\n");
            sb.Append("  OtherLegDestinationNumber: ").Append(OtherLegDestinationNumber).Append("\n");
            sb.Append("  OtherLegDirection: ").Append(OtherLegDirection).Append("\n");
            sb.Append("  ParticipantFlags: ").Append(ParticipantFlags).Append("\n");
            sb.Append("  PresenceID: ").Append(PresenceID).Append("\n");
            sb.Append("  ProfileName: ").Append(ProfileName).Append("\n");
            sb.Append("  RawApplicationData: ").Append(RawApplicationData).Append("\n");
            sb.Append("  RawApplicationName: ").Append(RawApplicationName).Append("\n");
            sb.Append("  Realm: ").Append(Realm).Append("\n");
            sb.Append("  ReplacedBy: ").Append(ReplacedBy).Append("\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("  SwitchHostname: ").Append(SwitchHostname).Append("\n");
            sb.Append("  SwitchNodename: ").Append(SwitchNodename).Append("\n");
            sb.Append("  SwitchURI: ").Append(SwitchURI).Append("\n");
            sb.Append("  SwitchURL: ").Append(SwitchURL).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  ToTag: ").Append(ToTag).Append("\n");
            sb.Append("  TransferHistory: ").Append(TransferHistory).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiConferenceAddParticipant);
        }

        /// <summary>
        /// Returns true if KapiConferenceAddParticipant instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiConferenceAddParticipant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiConferenceAddParticipant input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountID == input.AccountID ||
                    (this.AccountID != null &&
                    this.AccountID.Equals(input.AccountID))
                ) && 
                (
                    this.Answered == input.Answered ||
                    (this.Answered != null &&
                    this.Answered.Equals(input.Answered))
                ) && 
                (
                    this.AuthorizingID == input.AuthorizingID ||
                    (this.AuthorizingID != null &&
                    this.AuthorizingID.Equals(input.AuthorizingID))
                ) && 
                (
                    this.AuthorizingType == input.AuthorizingType ||
                    (this.AuthorizingType != null &&
                    this.AuthorizingType.Equals(input.AuthorizingType))
                ) && 
                (
                    this.BridgeID == input.BridgeID ||
                    (this.BridgeID != null &&
                    this.BridgeID.Equals(input.BridgeID))
                ) && 
                (
                    this.CallDirection == input.CallDirection ||
                    (this.CallDirection != null &&
                    this.CallDirection.Equals(input.CallDirection))
                ) && 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.CalleeIDName == input.CalleeIDName ||
                    (this.CalleeIDName != null &&
                    this.CalleeIDName.Equals(input.CalleeIDName))
                ) && 
                (
                    this.CalleeIDNumber == input.CalleeIDNumber ||
                    (this.CalleeIDNumber != null &&
                    this.CalleeIDNumber.Equals(input.CalleeIDNumber))
                ) && 
                (
                    this.CallerIDName == input.CallerIDName ||
                    (this.CallerIDName != null &&
                    this.CallerIDName.Equals(input.CallerIDName))
                ) && 
                (
                    this.CallerIDNumber == input.CallerIDNumber ||
                    (this.CallerIDNumber != null &&
                    this.CallerIDNumber.Equals(input.CallerIDNumber))
                ) && 
                (
                    this.ChannelAuthorized == input.ChannelAuthorized ||
                    (this.ChannelAuthorized != null &&
                    this.ChannelAuthorized.Equals(input.ChannelAuthorized))
                ) && 
                (
                    this.ChannelCallState == input.ChannelCallState ||
                    (this.ChannelCallState != null &&
                    this.ChannelCallState.Equals(input.ChannelCallState))
                ) && 
                (
                    this.ChannelCreatedTime == input.ChannelCreatedTime ||
                    (this.ChannelCreatedTime != null &&
                    this.ChannelCreatedTime.Equals(input.ChannelCreatedTime))
                ) && 
                (
                    this.ChannelIsLoopback == input.ChannelIsLoopback ||
                    (this.ChannelIsLoopback != null &&
                    this.ChannelIsLoopback.Equals(input.ChannelIsLoopback))
                ) && 
                (
                    this.ChannelLoopbackBowout == input.ChannelLoopbackBowout ||
                    (this.ChannelLoopbackBowout != null &&
                    this.ChannelLoopbackBowout.Equals(input.ChannelLoopbackBowout))
                ) && 
                (
                    this.ChannelLoopbackBowoutExecute == input.ChannelLoopbackBowoutExecute ||
                    (this.ChannelLoopbackBowoutExecute != null &&
                    this.ChannelLoopbackBowoutExecute.Equals(input.ChannelLoopbackBowoutExecute))
                ) && 
                (
                    this.ChannelLoopbackLeg == input.ChannelLoopbackLeg ||
                    (this.ChannelLoopbackLeg != null &&
                    this.ChannelLoopbackLeg.Equals(input.ChannelLoopbackLeg))
                ) && 
                (
                    this.ChannelLoopbackOtherLegID == input.ChannelLoopbackOtherLegID ||
                    (this.ChannelLoopbackOtherLegID != null &&
                    this.ChannelLoopbackOtherLegID.Equals(input.ChannelLoopbackOtherLegID))
                ) && 
                (
                    this.ChannelMoving == input.ChannelMoving ||
                    (this.ChannelMoving != null &&
                    this.ChannelMoving.Equals(input.ChannelMoving))
                ) && 
                (
                    this.ChannelName == input.ChannelName ||
                    (this.ChannelName != null &&
                    this.ChannelName.Equals(input.ChannelName))
                ) && 
                (
                    this.ChannelState == input.ChannelState ||
                    (this.ChannelState != null &&
                    this.ChannelState.Equals(input.ChannelState))
                ) && 
                (
                    this.ConferenceID == input.ConferenceID ||
                    (this.ConferenceID != null &&
                    this.ConferenceID.Equals(input.ConferenceID))
                ) && 
                (
                    this.ControlQueue == input.ControlQueue ||
                    (this.ControlQueue != null &&
                    this.ControlQueue.Equals(input.ControlQueue))
                ) && 
                (
                    this.CustomApplicationVars == input.CustomApplicationVars ||
                    (this.CustomApplicationVars != null &&
                    this.CustomApplicationVars.Equals(input.CustomApplicationVars))
                ) && 
                (
                    this.CustomChannelVars == input.CustomChannelVars ||
                    (this.CustomChannelVars != null &&
                    this.CustomChannelVars.Equals(input.CustomChannelVars))
                ) && 
                (
                    this.CustomSIPHeaders == input.CustomSIPHeaders ||
                    (this.CustomSIPHeaders != null &&
                    this.CustomSIPHeaders.Equals(input.CustomSIPHeaders))
                ) && 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                ) && 
                (
                    this.Disposition == input.Disposition ||
                    (this.Disposition != null &&
                    this.Disposition.Equals(input.Disposition))
                ) && 
                (
                    this.EcallmgrNode == input.EcallmgrNode ||
                    (this.EcallmgrNode != null &&
                    this.EcallmgrNode.Equals(input.EcallmgrNode))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.FromTag == input.FromTag ||
                    (this.FromTag != null &&
                    this.FromTag.Equals(input.FromTag))
                ) && 
                (
                    this.HangupCause == input.HangupCause ||
                    (this.HangupCause != null &&
                    this.HangupCause.Equals(input.HangupCause))
                ) && 
                (
                    this.HangupCode == input.HangupCode ||
                    (this.HangupCode != null &&
                    this.HangupCode.Equals(input.HangupCode))
                ) && 
                (
                    this.IsLoopback == input.IsLoopback ||
                    (this.IsLoopback != null &&
                    this.IsLoopback.Equals(input.IsLoopback))
                ) && 
                (
                    this.IsOnHold == input.IsOnHold ||
                    (this.IsOnHold != null &&
                    this.IsOnHold.Equals(input.IsOnHold))
                ) && 
                (
                    this.MediaNode == input.MediaNode ||
                    (this.MediaNode != null &&
                    this.MediaNode.Equals(input.MediaNode))
                ) && 
                (
                    this.MediaServer == input.MediaServer ||
                    (this.MediaServer != null &&
                    this.MediaServer.Equals(input.MediaServer))
                ) && 
                (
                    this.MsgID == input.MsgID ||
                    (this.MsgID != null &&
                    this.MsgID.Equals(input.MsgID))
                ) && 
                (
                    this.Node == input.Node ||
                    (this.Node != null &&
                    this.Node.Equals(input.Node))
                ) && 
                (
                    this.OriginationCallID == input.OriginationCallID ||
                    (this.OriginationCallID != null &&
                    this.OriginationCallID.Equals(input.OriginationCallID))
                ) && 
                (
                    this.OtherLegCallID == input.OtherLegCallID ||
                    (this.OtherLegCallID != null &&
                    this.OtherLegCallID.Equals(input.OtherLegCallID))
                ) && 
                (
                    this.OtherLegCallerIDName == input.OtherLegCallerIDName ||
                    (this.OtherLegCallerIDName != null &&
                    this.OtherLegCallerIDName.Equals(input.OtherLegCallerIDName))
                ) && 
                (
                    this.OtherLegCallerIDNumber == input.OtherLegCallerIDNumber ||
                    (this.OtherLegCallerIDNumber != null &&
                    this.OtherLegCallerIDNumber.Equals(input.OtherLegCallerIDNumber))
                ) && 
                (
                    this.OtherLegDestinationNumber == input.OtherLegDestinationNumber ||
                    (this.OtherLegDestinationNumber != null &&
                    this.OtherLegDestinationNumber.Equals(input.OtherLegDestinationNumber))
                ) && 
                (
                    this.OtherLegDirection == input.OtherLegDirection ||
                    (this.OtherLegDirection != null &&
                    this.OtherLegDirection.Equals(input.OtherLegDirection))
                ) && 
                (
                    this.ParticipantFlags == input.ParticipantFlags ||
                    (this.ParticipantFlags != null &&
                    this.ParticipantFlags.Equals(input.ParticipantFlags))
                ) && 
                (
                    this.PresenceID == input.PresenceID ||
                    (this.PresenceID != null &&
                    this.PresenceID.Equals(input.PresenceID))
                ) && 
                (
                    this.ProfileName == input.ProfileName ||
                    (this.ProfileName != null &&
                    this.ProfileName.Equals(input.ProfileName))
                ) && 
                (
                    this.RawApplicationData == input.RawApplicationData ||
                    (this.RawApplicationData != null &&
                    this.RawApplicationData.Equals(input.RawApplicationData))
                ) && 
                (
                    this.RawApplicationName == input.RawApplicationName ||
                    (this.RawApplicationName != null &&
                    this.RawApplicationName.Equals(input.RawApplicationName))
                ) && 
                (
                    this.Realm == input.Realm ||
                    (this.Realm != null &&
                    this.Realm.Equals(input.Realm))
                ) && 
                (
                    this.ReplacedBy == input.ReplacedBy ||
                    (this.ReplacedBy != null &&
                    this.ReplacedBy.Equals(input.ReplacedBy))
                ) && 
                (
                    this.Request == input.Request ||
                    (this.Request != null &&
                    this.Request.Equals(input.Request))
                ) && 
                (
                    this.SwitchHostname == input.SwitchHostname ||
                    (this.SwitchHostname != null &&
                    this.SwitchHostname.Equals(input.SwitchHostname))
                ) && 
                (
                    this.SwitchNodename == input.SwitchNodename ||
                    (this.SwitchNodename != null &&
                    this.SwitchNodename.Equals(input.SwitchNodename))
                ) && 
                (
                    this.SwitchURI == input.SwitchURI ||
                    (this.SwitchURI != null &&
                    this.SwitchURI.Equals(input.SwitchURI))
                ) && 
                (
                    this.SwitchURL == input.SwitchURL ||
                    (this.SwitchURL != null &&
                    this.SwitchURL.Equals(input.SwitchURL))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.ToTag == input.ToTag ||
                    (this.ToTag != null &&
                    this.ToTag.Equals(input.ToTag))
                ) && 
                (
                    this.TransferHistory == input.TransferHistory ||
                    (this.TransferHistory != null &&
                    this.TransferHistory.Equals(input.TransferHistory))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountID != null)
                    hashCode = hashCode * 59 + this.AccountID.GetHashCode();
                if (this.Answered != null)
                    hashCode = hashCode * 59 + this.Answered.GetHashCode();
                if (this.AuthorizingID != null)
                    hashCode = hashCode * 59 + this.AuthorizingID.GetHashCode();
                if (this.AuthorizingType != null)
                    hashCode = hashCode * 59 + this.AuthorizingType.GetHashCode();
                if (this.BridgeID != null)
                    hashCode = hashCode * 59 + this.BridgeID.GetHashCode();
                if (this.CallDirection != null)
                    hashCode = hashCode * 59 + this.CallDirection.GetHashCode();
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.CalleeIDName != null)
                    hashCode = hashCode * 59 + this.CalleeIDName.GetHashCode();
                if (this.CalleeIDNumber != null)
                    hashCode = hashCode * 59 + this.CalleeIDNumber.GetHashCode();
                if (this.CallerIDName != null)
                    hashCode = hashCode * 59 + this.CallerIDName.GetHashCode();
                if (this.CallerIDNumber != null)
                    hashCode = hashCode * 59 + this.CallerIDNumber.GetHashCode();
                if (this.ChannelAuthorized != null)
                    hashCode = hashCode * 59 + this.ChannelAuthorized.GetHashCode();
                if (this.ChannelCallState != null)
                    hashCode = hashCode * 59 + this.ChannelCallState.GetHashCode();
                if (this.ChannelCreatedTime != null)
                    hashCode = hashCode * 59 + this.ChannelCreatedTime.GetHashCode();
                if (this.ChannelIsLoopback != null)
                    hashCode = hashCode * 59 + this.ChannelIsLoopback.GetHashCode();
                if (this.ChannelLoopbackBowout != null)
                    hashCode = hashCode * 59 + this.ChannelLoopbackBowout.GetHashCode();
                if (this.ChannelLoopbackBowoutExecute != null)
                    hashCode = hashCode * 59 + this.ChannelLoopbackBowoutExecute.GetHashCode();
                if (this.ChannelLoopbackLeg != null)
                    hashCode = hashCode * 59 + this.ChannelLoopbackLeg.GetHashCode();
                if (this.ChannelLoopbackOtherLegID != null)
                    hashCode = hashCode * 59 + this.ChannelLoopbackOtherLegID.GetHashCode();
                if (this.ChannelMoving != null)
                    hashCode = hashCode * 59 + this.ChannelMoving.GetHashCode();
                if (this.ChannelName != null)
                    hashCode = hashCode * 59 + this.ChannelName.GetHashCode();
                if (this.ChannelState != null)
                    hashCode = hashCode * 59 + this.ChannelState.GetHashCode();
                if (this.ConferenceID != null)
                    hashCode = hashCode * 59 + this.ConferenceID.GetHashCode();
                if (this.ControlQueue != null)
                    hashCode = hashCode * 59 + this.ControlQueue.GetHashCode();
                if (this.CustomApplicationVars != null)
                    hashCode = hashCode * 59 + this.CustomApplicationVars.GetHashCode();
                if (this.CustomChannelVars != null)
                    hashCode = hashCode * 59 + this.CustomChannelVars.GetHashCode();
                if (this.CustomSIPHeaders != null)
                    hashCode = hashCode * 59 + this.CustomSIPHeaders.GetHashCode();
                if (this.Destination != null)
                    hashCode = hashCode * 59 + this.Destination.GetHashCode();
                if (this.Disposition != null)
                    hashCode = hashCode * 59 + this.Disposition.GetHashCode();
                if (this.EcallmgrNode != null)
                    hashCode = hashCode * 59 + this.EcallmgrNode.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.FromTag != null)
                    hashCode = hashCode * 59 + this.FromTag.GetHashCode();
                if (this.HangupCause != null)
                    hashCode = hashCode * 59 + this.HangupCause.GetHashCode();
                if (this.HangupCode != null)
                    hashCode = hashCode * 59 + this.HangupCode.GetHashCode();
                if (this.IsLoopback != null)
                    hashCode = hashCode * 59 + this.IsLoopback.GetHashCode();
                if (this.IsOnHold != null)
                    hashCode = hashCode * 59 + this.IsOnHold.GetHashCode();
                if (this.MediaNode != null)
                    hashCode = hashCode * 59 + this.MediaNode.GetHashCode();
                if (this.MediaServer != null)
                    hashCode = hashCode * 59 + this.MediaServer.GetHashCode();
                if (this.MsgID != null)
                    hashCode = hashCode * 59 + this.MsgID.GetHashCode();
                if (this.Node != null)
                    hashCode = hashCode * 59 + this.Node.GetHashCode();
                if (this.OriginationCallID != null)
                    hashCode = hashCode * 59 + this.OriginationCallID.GetHashCode();
                if (this.OtherLegCallID != null)
                    hashCode = hashCode * 59 + this.OtherLegCallID.GetHashCode();
                if (this.OtherLegCallerIDName != null)
                    hashCode = hashCode * 59 + this.OtherLegCallerIDName.GetHashCode();
                if (this.OtherLegCallerIDNumber != null)
                    hashCode = hashCode * 59 + this.OtherLegCallerIDNumber.GetHashCode();
                if (this.OtherLegDestinationNumber != null)
                    hashCode = hashCode * 59 + this.OtherLegDestinationNumber.GetHashCode();
                if (this.OtherLegDirection != null)
                    hashCode = hashCode * 59 + this.OtherLegDirection.GetHashCode();
                if (this.ParticipantFlags != null)
                    hashCode = hashCode * 59 + this.ParticipantFlags.GetHashCode();
                if (this.PresenceID != null)
                    hashCode = hashCode * 59 + this.PresenceID.GetHashCode();
                if (this.ProfileName != null)
                    hashCode = hashCode * 59 + this.ProfileName.GetHashCode();
                if (this.RawApplicationData != null)
                    hashCode = hashCode * 59 + this.RawApplicationData.GetHashCode();
                if (this.RawApplicationName != null)
                    hashCode = hashCode * 59 + this.RawApplicationName.GetHashCode();
                if (this.Realm != null)
                    hashCode = hashCode * 59 + this.Realm.GetHashCode();
                if (this.ReplacedBy != null)
                    hashCode = hashCode * 59 + this.ReplacedBy.GetHashCode();
                if (this.Request != null)
                    hashCode = hashCode * 59 + this.Request.GetHashCode();
                if (this.SwitchHostname != null)
                    hashCode = hashCode * 59 + this.SwitchHostname.GetHashCode();
                if (this.SwitchNodename != null)
                    hashCode = hashCode * 59 + this.SwitchNodename.GetHashCode();
                if (this.SwitchURI != null)
                    hashCode = hashCode * 59 + this.SwitchURI.GetHashCode();
                if (this.SwitchURL != null)
                    hashCode = hashCode * 59 + this.SwitchURL.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.ToTag != null)
                    hashCode = hashCode * 59 + this.ToTag.GetHashCode();
                if (this.TransferHistory != null)
                    hashCode = hashCode * 59 + this.TransferHistory.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
