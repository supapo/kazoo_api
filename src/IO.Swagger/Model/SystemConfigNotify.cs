/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for notify system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigNotify :  IEquatable<SystemConfigNotify>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigNotify" /> class.
        /// </summary>
        /// <param name="autoloadModules">teletype modules to start when teletype is started.</param>
        /// <param name="backoffFudgeMs">notify backoff fudge in milliseconds.</param>
        /// <param name="notificationApp">notify notification app (default to &quot;teletype&quot;).</param>
        /// <param name="notifyPersistEnabled">notify notify_persist_enabled (default to true).</param>
        /// <param name="notifyPersistExceptions">notify notify_persist_exceptions.</param>
        /// <param name="notifyPersistTemporaryForceExceptions">notify notify_persist_temporary_force_exceptions.</param>
        /// <param name="notifyPublisherTimeoutMs">Timeout in milliseconds when publishing notification using notify publisher.</param>
        /// <param name="searchRepEmail">notify search rep email (default to true).</param>
        /// <param name="shouldPersistForRetry">notify should_persist_for_retry (default to true).</param>
        /// <param name="useFederatedListener">notify use federated listener (default to false).</param>
        public SystemConfigNotify(List<string> autoloadModules = default(List<string>), int? backoffFudgeMs = default(int?), string notificationApp = "teletype", bool? notifyPersistEnabled = true, List<string> notifyPersistExceptions = default(List<string>), List<string> notifyPersistTemporaryForceExceptions = default(List<string>), int? notifyPublisherTimeoutMs = default(int?), bool? searchRepEmail = true, bool? shouldPersistForRetry = true, bool? useFederatedListener = false)
        {
            this.AutoloadModules = autoloadModules;
            this.BackoffFudgeMs = backoffFudgeMs;
            // use default value if no "notificationApp" provided
            if (notificationApp == null)
            {
                this.NotificationApp = "teletype";
            }
            else
            {
                this.NotificationApp = notificationApp;
            }
            // use default value if no "notifyPersistEnabled" provided
            if (notifyPersistEnabled == null)
            {
                this.NotifyPersistEnabled = true;
            }
            else
            {
                this.NotifyPersistEnabled = notifyPersistEnabled;
            }
            this.NotifyPersistExceptions = notifyPersistExceptions;
            this.NotifyPersistTemporaryForceExceptions = notifyPersistTemporaryForceExceptions;
            this.NotifyPublisherTimeoutMs = notifyPublisherTimeoutMs;
            // use default value if no "searchRepEmail" provided
            if (searchRepEmail == null)
            {
                this.SearchRepEmail = true;
            }
            else
            {
                this.SearchRepEmail = searchRepEmail;
            }
            // use default value if no "shouldPersistForRetry" provided
            if (shouldPersistForRetry == null)
            {
                this.ShouldPersistForRetry = true;
            }
            else
            {
                this.ShouldPersistForRetry = shouldPersistForRetry;
            }
            // use default value if no "useFederatedListener" provided
            if (useFederatedListener == null)
            {
                this.UseFederatedListener = false;
            }
            else
            {
                this.UseFederatedListener = useFederatedListener;
            }
        }
        
        /// <summary>
        /// teletype modules to start when teletype is started
        /// </summary>
        /// <value>teletype modules to start when teletype is started</value>
        [DataMember(Name="autoload_modules", EmitDefaultValue=false)]
        public List<string> AutoloadModules { get; set; }

        /// <summary>
        /// notify backoff fudge in milliseconds
        /// </summary>
        /// <value>notify backoff fudge in milliseconds</value>
        [DataMember(Name="backoff_fudge_ms", EmitDefaultValue=false)]
        public int? BackoffFudgeMs { get; set; }

        /// <summary>
        /// notify notification app
        /// </summary>
        /// <value>notify notification app</value>
        [DataMember(Name="notification_app", EmitDefaultValue=false)]
        public string NotificationApp { get; set; }

        /// <summary>
        /// notify notify_persist_enabled
        /// </summary>
        /// <value>notify notify_persist_enabled</value>
        [DataMember(Name="notify_persist_enabled", EmitDefaultValue=false)]
        public bool? NotifyPersistEnabled { get; set; }

        /// <summary>
        /// notify notify_persist_exceptions
        /// </summary>
        /// <value>notify notify_persist_exceptions</value>
        [DataMember(Name="notify_persist_exceptions", EmitDefaultValue=false)]
        public List<string> NotifyPersistExceptions { get; set; }

        /// <summary>
        /// notify notify_persist_temporary_force_exceptions
        /// </summary>
        /// <value>notify notify_persist_temporary_force_exceptions</value>
        [DataMember(Name="notify_persist_temporary_force_exceptions", EmitDefaultValue=false)]
        public List<string> NotifyPersistTemporaryForceExceptions { get; set; }

        /// <summary>
        /// Timeout in milliseconds when publishing notification using notify publisher
        /// </summary>
        /// <value>Timeout in milliseconds when publishing notification using notify publisher</value>
        [DataMember(Name="notify_publisher_timeout_ms", EmitDefaultValue=false)]
        public int? NotifyPublisherTimeoutMs { get; set; }

        /// <summary>
        /// notify search rep email
        /// </summary>
        /// <value>notify search rep email</value>
        [DataMember(Name="search_rep_email", EmitDefaultValue=false)]
        public bool? SearchRepEmail { get; set; }

        /// <summary>
        /// notify should_persist_for_retry
        /// </summary>
        /// <value>notify should_persist_for_retry</value>
        [DataMember(Name="should_persist_for_retry", EmitDefaultValue=false)]
        public bool? ShouldPersistForRetry { get; set; }

        /// <summary>
        /// notify use federated listener
        /// </summary>
        /// <value>notify use federated listener</value>
        [DataMember(Name="use_federated_listener", EmitDefaultValue=false)]
        public bool? UseFederatedListener { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigNotify {\n");
            sb.Append("  AutoloadModules: ").Append(AutoloadModules).Append("\n");
            sb.Append("  BackoffFudgeMs: ").Append(BackoffFudgeMs).Append("\n");
            sb.Append("  NotificationApp: ").Append(NotificationApp).Append("\n");
            sb.Append("  NotifyPersistEnabled: ").Append(NotifyPersistEnabled).Append("\n");
            sb.Append("  NotifyPersistExceptions: ").Append(NotifyPersistExceptions).Append("\n");
            sb.Append("  NotifyPersistTemporaryForceExceptions: ").Append(NotifyPersistTemporaryForceExceptions).Append("\n");
            sb.Append("  NotifyPublisherTimeoutMs: ").Append(NotifyPublisherTimeoutMs).Append("\n");
            sb.Append("  SearchRepEmail: ").Append(SearchRepEmail).Append("\n");
            sb.Append("  ShouldPersistForRetry: ").Append(ShouldPersistForRetry).Append("\n");
            sb.Append("  UseFederatedListener: ").Append(UseFederatedListener).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigNotify);
        }

        /// <summary>
        /// Returns true if SystemConfigNotify instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigNotify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigNotify input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AutoloadModules == input.AutoloadModules ||
                    this.AutoloadModules != null &&
                    this.AutoloadModules.SequenceEqual(input.AutoloadModules)
                ) && 
                (
                    this.BackoffFudgeMs == input.BackoffFudgeMs ||
                    (this.BackoffFudgeMs != null &&
                    this.BackoffFudgeMs.Equals(input.BackoffFudgeMs))
                ) && 
                (
                    this.NotificationApp == input.NotificationApp ||
                    (this.NotificationApp != null &&
                    this.NotificationApp.Equals(input.NotificationApp))
                ) && 
                (
                    this.NotifyPersistEnabled == input.NotifyPersistEnabled ||
                    (this.NotifyPersistEnabled != null &&
                    this.NotifyPersistEnabled.Equals(input.NotifyPersistEnabled))
                ) && 
                (
                    this.NotifyPersistExceptions == input.NotifyPersistExceptions ||
                    this.NotifyPersistExceptions != null &&
                    this.NotifyPersistExceptions.SequenceEqual(input.NotifyPersistExceptions)
                ) && 
                (
                    this.NotifyPersistTemporaryForceExceptions == input.NotifyPersistTemporaryForceExceptions ||
                    this.NotifyPersistTemporaryForceExceptions != null &&
                    this.NotifyPersistTemporaryForceExceptions.SequenceEqual(input.NotifyPersistTemporaryForceExceptions)
                ) && 
                (
                    this.NotifyPublisherTimeoutMs == input.NotifyPublisherTimeoutMs ||
                    (this.NotifyPublisherTimeoutMs != null &&
                    this.NotifyPublisherTimeoutMs.Equals(input.NotifyPublisherTimeoutMs))
                ) && 
                (
                    this.SearchRepEmail == input.SearchRepEmail ||
                    (this.SearchRepEmail != null &&
                    this.SearchRepEmail.Equals(input.SearchRepEmail))
                ) && 
                (
                    this.ShouldPersistForRetry == input.ShouldPersistForRetry ||
                    (this.ShouldPersistForRetry != null &&
                    this.ShouldPersistForRetry.Equals(input.ShouldPersistForRetry))
                ) && 
                (
                    this.UseFederatedListener == input.UseFederatedListener ||
                    (this.UseFederatedListener != null &&
                    this.UseFederatedListener.Equals(input.UseFederatedListener))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AutoloadModules != null)
                    hashCode = hashCode * 59 + this.AutoloadModules.GetHashCode();
                if (this.BackoffFudgeMs != null)
                    hashCode = hashCode * 59 + this.BackoffFudgeMs.GetHashCode();
                if (this.NotificationApp != null)
                    hashCode = hashCode * 59 + this.NotificationApp.GetHashCode();
                if (this.NotifyPersistEnabled != null)
                    hashCode = hashCode * 59 + this.NotifyPersistEnabled.GetHashCode();
                if (this.NotifyPersistExceptions != null)
                    hashCode = hashCode * 59 + this.NotifyPersistExceptions.GetHashCode();
                if (this.NotifyPersistTemporaryForceExceptions != null)
                    hashCode = hashCode * 59 + this.NotifyPersistTemporaryForceExceptions.GetHashCode();
                if (this.NotifyPublisherTimeoutMs != null)
                    hashCode = hashCode * 59 + this.NotifyPublisherTimeoutMs.GetHashCode();
                if (this.SearchRepEmail != null)
                    hashCode = hashCode * 59 + this.SearchRepEmail.GetHashCode();
                if (this.ShouldPersistForRetry != null)
                    hashCode = hashCode * 59 + this.ShouldPersistForRetry.GetHashCode();
                if (this.UseFederatedListener != null)
                    hashCode = hashCode * 59 + this.UseFederatedListener.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NotifyPublisherTimeoutMs (int?) minimum
            if(this.NotifyPublisherTimeoutMs < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NotifyPublisherTimeoutMs, must be a value greater than or equal to 1.", new [] { "NotifyPublisherTimeoutMs" });
            }

            yield break;
        }
    }

}
