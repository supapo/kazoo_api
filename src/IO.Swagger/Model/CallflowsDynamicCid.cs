/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Validator for the dynamic_cid callflow data object
    /// </summary>
    [DataContract]
    public partial class CallflowsDynamicCid :  IEquatable<CallflowsDynamicCid>, IValidatableObject
    {
        /// <summary>
        /// What action to perform
        /// </summary>
        /// <value>What action to perform</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            
            /// <summary>
            /// Enum List for value: list
            /// </summary>
            [EnumMember(Value = "list")]
            List = 1,
            
            /// <summary>
            /// Enum Lists for value: lists
            /// </summary>
            [EnumMember(Value = "lists")]
            Lists = 2,
            
            /// <summary>
            /// Enum Manual for value: manual
            /// </summary>
            [EnumMember(Value = "manual")]
            Manual = 3,
            
            /// <summary>
            /// Enum Static for value: static
            /// </summary>
            [EnumMember(Value = "static")]
            Static = 4
        }

        /// <summary>
        /// What action to perform
        /// </summary>
        /// <value>What action to perform</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsDynamicCid" /> class.
        /// </summary>
        /// <param name="action">What action to perform.</param>
        /// <param name="callerId">callerId.</param>
        /// <param name="enforceCallRestriction">Check classification restrictions against endpoint (default to true).</param>
        /// <param name="id">List ID for caller IDs when &#39;action&#39; is &#39;list&#39;.</param>
        /// <param name="idxName">Named capture group to use.</param>
        /// <param name="interdigitTimeout">How long, in seconds, to wait for keypresses.</param>
        /// <param name="maxDigits">Max number of digits allowed when collecting Caller ID Number.</param>
        /// <param name="mediaId">Prompt to play to caller to enter Caller ID Number.</param>
        /// <param name="minDigits">Minimum number of digits that must match the regex to collected DTMF.</param>
        /// <param name="permitCustomCallflow">Permit a custom callflow to be accepted instead of restricting to no_match only when looking up callflows (default to false).</param>
        /// <param name="skipModule">When set to true this callflow action is skipped, advancing to the wildcard branch (if any).</param>
        /// <param name="whitelistRegex">Regex to match collected Caller ID Number.</param>
        public CallflowsDynamicCid(ActionEnum? action = default(ActionEnum?), CallflowsDynamicCidCallerId callerId = default(CallflowsDynamicCidCallerId), bool? enforceCallRestriction = true, string id = default(string), string idxName = default(string), int? interdigitTimeout = default(int?), int? maxDigits = default(int?), string mediaId = default(string), int? minDigits = default(int?), bool? permitCustomCallflow = false, bool? skipModule = default(bool?), string whitelistRegex = default(string))
        {
            this.Action = action;
            this.CallerId = callerId;
            // use default value if no "enforceCallRestriction" provided
            if (enforceCallRestriction == null)
            {
                this.EnforceCallRestriction = true;
            }
            else
            {
                this.EnforceCallRestriction = enforceCallRestriction;
            }
            this.Id = id;
            this.IdxName = idxName;
            this.InterdigitTimeout = interdigitTimeout;
            this.MaxDigits = maxDigits;
            this.MediaId = mediaId;
            this.MinDigits = minDigits;
            // use default value if no "permitCustomCallflow" provided
            if (permitCustomCallflow == null)
            {
                this.PermitCustomCallflow = false;
            }
            else
            {
                this.PermitCustomCallflow = permitCustomCallflow;
            }
            this.SkipModule = skipModule;
            this.WhitelistRegex = whitelistRegex;
        }
        

        /// <summary>
        /// Gets or Sets CallerId
        /// </summary>
        [DataMember(Name="caller_id", EmitDefaultValue=false)]
        public CallflowsDynamicCidCallerId CallerId { get; set; }

        /// <summary>
        /// Check classification restrictions against endpoint
        /// </summary>
        /// <value>Check classification restrictions against endpoint</value>
        [DataMember(Name="enforce_call_restriction", EmitDefaultValue=false)]
        public bool? EnforceCallRestriction { get; set; }

        /// <summary>
        /// List ID for caller IDs when &#39;action&#39; is &#39;list&#39;
        /// </summary>
        /// <value>List ID for caller IDs when &#39;action&#39; is &#39;list&#39;</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Named capture group to use
        /// </summary>
        /// <value>Named capture group to use</value>
        [DataMember(Name="idx_name", EmitDefaultValue=false)]
        public string IdxName { get; set; }

        /// <summary>
        /// How long, in seconds, to wait for keypresses
        /// </summary>
        /// <value>How long, in seconds, to wait for keypresses</value>
        [DataMember(Name="interdigit_timeout", EmitDefaultValue=false)]
        public int? InterdigitTimeout { get; set; }

        /// <summary>
        /// Max number of digits allowed when collecting Caller ID Number
        /// </summary>
        /// <value>Max number of digits allowed when collecting Caller ID Number</value>
        [DataMember(Name="max_digits", EmitDefaultValue=false)]
        public int? MaxDigits { get; set; }

        /// <summary>
        /// Prompt to play to caller to enter Caller ID Number
        /// </summary>
        /// <value>Prompt to play to caller to enter Caller ID Number</value>
        [DataMember(Name="media_id", EmitDefaultValue=false)]
        public string MediaId { get; set; }

        /// <summary>
        /// Minimum number of digits that must match the regex to collected DTMF
        /// </summary>
        /// <value>Minimum number of digits that must match the regex to collected DTMF</value>
        [DataMember(Name="min_digits", EmitDefaultValue=false)]
        public int? MinDigits { get; set; }

        /// <summary>
        /// Permit a custom callflow to be accepted instead of restricting to no_match only when looking up callflows
        /// </summary>
        /// <value>Permit a custom callflow to be accepted instead of restricting to no_match only when looking up callflows</value>
        [DataMember(Name="permit_custom_callflow", EmitDefaultValue=false)]
        public bool? PermitCustomCallflow { get; set; }

        /// <summary>
        /// When set to true this callflow action is skipped, advancing to the wildcard branch (if any)
        /// </summary>
        /// <value>When set to true this callflow action is skipped, advancing to the wildcard branch (if any)</value>
        [DataMember(Name="skip_module", EmitDefaultValue=false)]
        public bool? SkipModule { get; set; }

        /// <summary>
        /// Regex to match collected Caller ID Number
        /// </summary>
        /// <value>Regex to match collected Caller ID Number</value>
        [DataMember(Name="whitelist_regex", EmitDefaultValue=false)]
        public string WhitelistRegex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallflowsDynamicCid {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  CallerId: ").Append(CallerId).Append("\n");
            sb.Append("  EnforceCallRestriction: ").Append(EnforceCallRestriction).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IdxName: ").Append(IdxName).Append("\n");
            sb.Append("  InterdigitTimeout: ").Append(InterdigitTimeout).Append("\n");
            sb.Append("  MaxDigits: ").Append(MaxDigits).Append("\n");
            sb.Append("  MediaId: ").Append(MediaId).Append("\n");
            sb.Append("  MinDigits: ").Append(MinDigits).Append("\n");
            sb.Append("  PermitCustomCallflow: ").Append(PermitCustomCallflow).Append("\n");
            sb.Append("  SkipModule: ").Append(SkipModule).Append("\n");
            sb.Append("  WhitelistRegex: ").Append(WhitelistRegex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallflowsDynamicCid);
        }

        /// <summary>
        /// Returns true if CallflowsDynamicCid instances are equal
        /// </summary>
        /// <param name="input">Instance of CallflowsDynamicCid to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallflowsDynamicCid input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.CallerId == input.CallerId ||
                    (this.CallerId != null &&
                    this.CallerId.Equals(input.CallerId))
                ) && 
                (
                    this.EnforceCallRestriction == input.EnforceCallRestriction ||
                    (this.EnforceCallRestriction != null &&
                    this.EnforceCallRestriction.Equals(input.EnforceCallRestriction))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IdxName == input.IdxName ||
                    (this.IdxName != null &&
                    this.IdxName.Equals(input.IdxName))
                ) && 
                (
                    this.InterdigitTimeout == input.InterdigitTimeout ||
                    (this.InterdigitTimeout != null &&
                    this.InterdigitTimeout.Equals(input.InterdigitTimeout))
                ) && 
                (
                    this.MaxDigits == input.MaxDigits ||
                    (this.MaxDigits != null &&
                    this.MaxDigits.Equals(input.MaxDigits))
                ) && 
                (
                    this.MediaId == input.MediaId ||
                    (this.MediaId != null &&
                    this.MediaId.Equals(input.MediaId))
                ) && 
                (
                    this.MinDigits == input.MinDigits ||
                    (this.MinDigits != null &&
                    this.MinDigits.Equals(input.MinDigits))
                ) && 
                (
                    this.PermitCustomCallflow == input.PermitCustomCallflow ||
                    (this.PermitCustomCallflow != null &&
                    this.PermitCustomCallflow.Equals(input.PermitCustomCallflow))
                ) && 
                (
                    this.SkipModule == input.SkipModule ||
                    (this.SkipModule != null &&
                    this.SkipModule.Equals(input.SkipModule))
                ) && 
                (
                    this.WhitelistRegex == input.WhitelistRegex ||
                    (this.WhitelistRegex != null &&
                    this.WhitelistRegex.Equals(input.WhitelistRegex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.CallerId != null)
                    hashCode = hashCode * 59 + this.CallerId.GetHashCode();
                if (this.EnforceCallRestriction != null)
                    hashCode = hashCode * 59 + this.EnforceCallRestriction.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IdxName != null)
                    hashCode = hashCode * 59 + this.IdxName.GetHashCode();
                if (this.InterdigitTimeout != null)
                    hashCode = hashCode * 59 + this.InterdigitTimeout.GetHashCode();
                if (this.MaxDigits != null)
                    hashCode = hashCode * 59 + this.MaxDigits.GetHashCode();
                if (this.MediaId != null)
                    hashCode = hashCode * 59 + this.MediaId.GetHashCode();
                if (this.MinDigits != null)
                    hashCode = hashCode * 59 + this.MinDigits.GetHashCode();
                if (this.PermitCustomCallflow != null)
                    hashCode = hashCode * 59 + this.PermitCustomCallflow.GetHashCode();
                if (this.SkipModule != null)
                    hashCode = hashCode * 59 + this.SkipModule.GetHashCode();
                if (this.WhitelistRegex != null)
                    hashCode = hashCode * 59 + this.WhitelistRegex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
