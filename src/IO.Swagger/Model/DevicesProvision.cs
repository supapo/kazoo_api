/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Provision data
    /// </summary>
    [DataContract]
    public partial class DevicesProvision :  IEquatable<DevicesProvision>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesProvision" /> class.
        /// </summary>
        /// <param name="comboKeys">comboKeys.</param>
        /// <param name="endpointBrand">Brand of the phone.</param>
        /// <param name="endpointFamily">Family name of the phone.</param>
        /// <param name="endpointModel">Model name of the phone.</param>
        /// <param name="featureKeys">featureKeys.</param>
        /// <param name="id">Provisioner Template ID.</param>
        public DevicesProvision(Object comboKeys = default(Object), string endpointBrand = default(string), string endpointFamily = default(string), Object endpointModel = default(Object), Object featureKeys = default(Object), string id = default(string))
        {
            this.ComboKeys = comboKeys;
            this.EndpointBrand = endpointBrand;
            this.EndpointFamily = endpointFamily;
            this.EndpointModel = endpointModel;
            this.FeatureKeys = featureKeys;
            this.Id = id;
        }
        
        /// <summary>
        /// Gets or Sets ComboKeys
        /// </summary>
        [DataMember(Name="combo_keys", EmitDefaultValue=false)]
        public Object ComboKeys { get; set; }

        /// <summary>
        /// Brand of the phone
        /// </summary>
        /// <value>Brand of the phone</value>
        [DataMember(Name="endpoint_brand", EmitDefaultValue=false)]
        public string EndpointBrand { get; set; }

        /// <summary>
        /// Family name of the phone
        /// </summary>
        /// <value>Family name of the phone</value>
        [DataMember(Name="endpoint_family", EmitDefaultValue=false)]
        public string EndpointFamily { get; set; }

        /// <summary>
        /// Model name of the phone
        /// </summary>
        /// <value>Model name of the phone</value>
        [DataMember(Name="endpoint_model", EmitDefaultValue=false)]
        public Object EndpointModel { get; set; }

        /// <summary>
        /// Gets or Sets FeatureKeys
        /// </summary>
        [DataMember(Name="feature_keys", EmitDefaultValue=false)]
        public Object FeatureKeys { get; set; }

        /// <summary>
        /// Provisioner Template ID
        /// </summary>
        /// <value>Provisioner Template ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DevicesProvision {\n");
            sb.Append("  ComboKeys: ").Append(ComboKeys).Append("\n");
            sb.Append("  EndpointBrand: ").Append(EndpointBrand).Append("\n");
            sb.Append("  EndpointFamily: ").Append(EndpointFamily).Append("\n");
            sb.Append("  EndpointModel: ").Append(EndpointModel).Append("\n");
            sb.Append("  FeatureKeys: ").Append(FeatureKeys).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DevicesProvision);
        }

        /// <summary>
        /// Returns true if DevicesProvision instances are equal
        /// </summary>
        /// <param name="input">Instance of DevicesProvision to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DevicesProvision input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ComboKeys == input.ComboKeys ||
                    (this.ComboKeys != null &&
                    this.ComboKeys.Equals(input.ComboKeys))
                ) && 
                (
                    this.EndpointBrand == input.EndpointBrand ||
                    (this.EndpointBrand != null &&
                    this.EndpointBrand.Equals(input.EndpointBrand))
                ) && 
                (
                    this.EndpointFamily == input.EndpointFamily ||
                    (this.EndpointFamily != null &&
                    this.EndpointFamily.Equals(input.EndpointFamily))
                ) && 
                (
                    this.EndpointModel == input.EndpointModel ||
                    (this.EndpointModel != null &&
                    this.EndpointModel.Equals(input.EndpointModel))
                ) && 
                (
                    this.FeatureKeys == input.FeatureKeys ||
                    (this.FeatureKeys != null &&
                    this.FeatureKeys.Equals(input.FeatureKeys))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ComboKeys != null)
                    hashCode = hashCode * 59 + this.ComboKeys.GetHashCode();
                if (this.EndpointBrand != null)
                    hashCode = hashCode * 59 + this.EndpointBrand.GetHashCode();
                if (this.EndpointFamily != null)
                    hashCode = hashCode * 59 + this.EndpointFamily.GetHashCode();
                if (this.EndpointModel != null)
                    hashCode = hashCode * 59 + this.EndpointModel.GetHashCode();
                if (this.FeatureKeys != null)
                    hashCode = hashCode * 59 + this.FeatureKeys.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
