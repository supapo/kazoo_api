/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for conference.participant_event
    /// </summary>
    [DataContract]
    public partial class KapiConferenceParticipantEvent :  IEquatable<KapiConferenceParticipantEvent>, IValidatableObject
    {
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Conference for value: conference
            /// </summary>
            [EnumMember(Value = "conference")]
            Conference = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Participantevent for value: participant_event
            /// </summary>
            [EnumMember(Value = "participant_event")]
            Participantevent = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiConferenceParticipantEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiConferenceParticipantEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiConferenceParticipantEvent" /> class.
        /// </summary>
        /// <param name="callID">callID (required).</param>
        /// <param name="callerIDName">callerIDName (required).</param>
        /// <param name="callerIDNumber">callerIDNumber (required).</param>
        /// <param name="channelPresenceID">channelPresenceID (required).</param>
        /// <param name="conferenceID">conferenceID (required).</param>
        /// <param name="currentEnergy">currentEnergy (required).</param>
        /// <param name="customChannelVars">customChannelVars (required).</param>
        /// <param name="energyLevel">energyLevel (required).</param>
        /// <param name="_event">_event (required).</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="floor">floor (required).</param>
        /// <param name="focus">focus (required).</param>
        /// <param name="hear">hear (required).</param>
        /// <param name="instanceID">instanceID (required).</param>
        /// <param name="muteDetect">muteDetect (required).</param>
        /// <param name="participantID">participantID (required).</param>
        /// <param name="speak">speak (required).</param>
        /// <param name="talking">talking (required).</param>
        /// <param name="video">video (required).</param>
        public KapiConferenceParticipantEvent(string callID = default(string), string callerIDName = default(string), string callerIDNumber = default(string), string channelPresenceID = default(string), string conferenceID = default(string), string currentEnergy = default(string), Object customChannelVars = default(Object), string energyLevel = default(string), string _event = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string floor = default(string), string focus = default(string), string hear = default(string), string instanceID = default(string), string muteDetect = default(string), string participantID = default(string), string speak = default(string), string talking = default(string), string video = default(string))
        {
            // to ensure "callID" is required (not null)
            if (callID == null)
            {
                throw new InvalidDataException("callID is a required property for KapiConferenceParticipantEvent and cannot be null");
            }
            else
            {
                this.CallID = callID;
            }
            // to ensure "callerIDName" is required (not null)
            if (callerIDName == null)
            {
                throw new InvalidDataException("callerIDName is a required property for KapiConferenceParticipantEvent and cannot be null");
            }
            else
            {
                this.CallerIDName = callerIDName;
            }
            // to ensure "callerIDNumber" is required (not null)
            if (callerIDNumber == null)
            {
                throw new InvalidDataException("callerIDNumber is a required property for KapiConferenceParticipantEvent and cannot be null");
            }
            else
            {
                this.CallerIDNumber = callerIDNumber;
            }
            // to ensure "channelPresenceID" is required (not null)
            if (channelPresenceID == null)
            {
                throw new InvalidDataException("channelPresenceID is a required property for KapiConferenceParticipantEvent and cannot be null");
            }
            else
            {
                this.ChannelPresenceID = channelPresenceID;
            }
            // to ensure "conferenceID" is required (not null)
            if (conferenceID == null)
            {
                throw new InvalidDataException("conferenceID is a required property for KapiConferenceParticipantEvent and cannot be null");
            }
            else
            {
                this.ConferenceID = conferenceID;
            }
            // to ensure "currentEnergy" is required (not null)
            if (currentEnergy == null)
            {
                throw new InvalidDataException("currentEnergy is a required property for KapiConferenceParticipantEvent and cannot be null");
            }
            else
            {
                this.CurrentEnergy = currentEnergy;
            }
            // to ensure "customChannelVars" is required (not null)
            if (customChannelVars == null)
            {
                throw new InvalidDataException("customChannelVars is a required property for KapiConferenceParticipantEvent and cannot be null");
            }
            else
            {
                this.CustomChannelVars = customChannelVars;
            }
            // to ensure "energyLevel" is required (not null)
            if (energyLevel == null)
            {
                throw new InvalidDataException("energyLevel is a required property for KapiConferenceParticipantEvent and cannot be null");
            }
            else
            {
                this.EnergyLevel = energyLevel;
            }
            // to ensure "_event" is required (not null)
            if (_event == null)
            {
                throw new InvalidDataException("_event is a required property for KapiConferenceParticipantEvent and cannot be null");
            }
            else
            {
                this.Event = _event;
            }
            // to ensure "floor" is required (not null)
            if (floor == null)
            {
                throw new InvalidDataException("floor is a required property for KapiConferenceParticipantEvent and cannot be null");
            }
            else
            {
                this.Floor = floor;
            }
            // to ensure "focus" is required (not null)
            if (focus == null)
            {
                throw new InvalidDataException("focus is a required property for KapiConferenceParticipantEvent and cannot be null");
            }
            else
            {
                this.Focus = focus;
            }
            // to ensure "hear" is required (not null)
            if (hear == null)
            {
                throw new InvalidDataException("hear is a required property for KapiConferenceParticipantEvent and cannot be null");
            }
            else
            {
                this.Hear = hear;
            }
            // to ensure "instanceID" is required (not null)
            if (instanceID == null)
            {
                throw new InvalidDataException("instanceID is a required property for KapiConferenceParticipantEvent and cannot be null");
            }
            else
            {
                this.InstanceID = instanceID;
            }
            // to ensure "muteDetect" is required (not null)
            if (muteDetect == null)
            {
                throw new InvalidDataException("muteDetect is a required property for KapiConferenceParticipantEvent and cannot be null");
            }
            else
            {
                this.MuteDetect = muteDetect;
            }
            // to ensure "participantID" is required (not null)
            if (participantID == null)
            {
                throw new InvalidDataException("participantID is a required property for KapiConferenceParticipantEvent and cannot be null");
            }
            else
            {
                this.ParticipantID = participantID;
            }
            // to ensure "speak" is required (not null)
            if (speak == null)
            {
                throw new InvalidDataException("speak is a required property for KapiConferenceParticipantEvent and cannot be null");
            }
            else
            {
                this.Speak = speak;
            }
            // to ensure "talking" is required (not null)
            if (talking == null)
            {
                throw new InvalidDataException("talking is a required property for KapiConferenceParticipantEvent and cannot be null");
            }
            else
            {
                this.Talking = talking;
            }
            // to ensure "video" is required (not null)
            if (video == null)
            {
                throw new InvalidDataException("video is a required property for KapiConferenceParticipantEvent and cannot be null");
            }
            else
            {
                this.Video = video;
            }
            this.EventCategory = eventCategory;
            this.EventName = eventName;
        }
        
        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }

        /// <summary>
        /// Gets or Sets CallerIDName
        /// </summary>
        [DataMember(Name="Caller-ID-Name", EmitDefaultValue=false)]
        public string CallerIDName { get; set; }

        /// <summary>
        /// Gets or Sets CallerIDNumber
        /// </summary>
        [DataMember(Name="Caller-ID-Number", EmitDefaultValue=false)]
        public string CallerIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets ChannelPresenceID
        /// </summary>
        [DataMember(Name="Channel-Presence-ID", EmitDefaultValue=false)]
        public string ChannelPresenceID { get; set; }

        /// <summary>
        /// Gets or Sets ConferenceID
        /// </summary>
        [DataMember(Name="Conference-ID", EmitDefaultValue=false)]
        public string ConferenceID { get; set; }

        /// <summary>
        /// Gets or Sets CurrentEnergy
        /// </summary>
        [DataMember(Name="Current-Energy", EmitDefaultValue=false)]
        public string CurrentEnergy { get; set; }

        /// <summary>
        /// Gets or Sets CustomChannelVars
        /// </summary>
        [DataMember(Name="Custom-Channel-Vars", EmitDefaultValue=false)]
        public Object CustomChannelVars { get; set; }

        /// <summary>
        /// Gets or Sets EnergyLevel
        /// </summary>
        [DataMember(Name="Energy-Level", EmitDefaultValue=false)]
        public string EnergyLevel { get; set; }

        /// <summary>
        /// Gets or Sets Event
        /// </summary>
        [DataMember(Name="Event", EmitDefaultValue=false)]
        public string Event { get; set; }



        /// <summary>
        /// Gets or Sets Floor
        /// </summary>
        [DataMember(Name="Floor", EmitDefaultValue=false)]
        public string Floor { get; set; }

        /// <summary>
        /// Gets or Sets Focus
        /// </summary>
        [DataMember(Name="Focus", EmitDefaultValue=false)]
        public string Focus { get; set; }

        /// <summary>
        /// Gets or Sets Hear
        /// </summary>
        [DataMember(Name="Hear", EmitDefaultValue=false)]
        public string Hear { get; set; }

        /// <summary>
        /// Gets or Sets InstanceID
        /// </summary>
        [DataMember(Name="Instance-ID", EmitDefaultValue=false)]
        public string InstanceID { get; set; }

        /// <summary>
        /// Gets or Sets MuteDetect
        /// </summary>
        [DataMember(Name="Mute-Detect", EmitDefaultValue=false)]
        public string MuteDetect { get; set; }

        /// <summary>
        /// Gets or Sets ParticipantID
        /// </summary>
        [DataMember(Name="Participant-ID", EmitDefaultValue=false)]
        public string ParticipantID { get; set; }

        /// <summary>
        /// Gets or Sets Speak
        /// </summary>
        [DataMember(Name="Speak", EmitDefaultValue=false)]
        public string Speak { get; set; }

        /// <summary>
        /// Gets or Sets Talking
        /// </summary>
        [DataMember(Name="Talking", EmitDefaultValue=false)]
        public string Talking { get; set; }

        /// <summary>
        /// Gets or Sets Video
        /// </summary>
        [DataMember(Name="Video", EmitDefaultValue=false)]
        public string Video { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiConferenceParticipantEvent {\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  CallerIDName: ").Append(CallerIDName).Append("\n");
            sb.Append("  CallerIDNumber: ").Append(CallerIDNumber).Append("\n");
            sb.Append("  ChannelPresenceID: ").Append(ChannelPresenceID).Append("\n");
            sb.Append("  ConferenceID: ").Append(ConferenceID).Append("\n");
            sb.Append("  CurrentEnergy: ").Append(CurrentEnergy).Append("\n");
            sb.Append("  CustomChannelVars: ").Append(CustomChannelVars).Append("\n");
            sb.Append("  EnergyLevel: ").Append(EnergyLevel).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  Floor: ").Append(Floor).Append("\n");
            sb.Append("  Focus: ").Append(Focus).Append("\n");
            sb.Append("  Hear: ").Append(Hear).Append("\n");
            sb.Append("  InstanceID: ").Append(InstanceID).Append("\n");
            sb.Append("  MuteDetect: ").Append(MuteDetect).Append("\n");
            sb.Append("  ParticipantID: ").Append(ParticipantID).Append("\n");
            sb.Append("  Speak: ").Append(Speak).Append("\n");
            sb.Append("  Talking: ").Append(Talking).Append("\n");
            sb.Append("  Video: ").Append(Video).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiConferenceParticipantEvent);
        }

        /// <summary>
        /// Returns true if KapiConferenceParticipantEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiConferenceParticipantEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiConferenceParticipantEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.CallerIDName == input.CallerIDName ||
                    (this.CallerIDName != null &&
                    this.CallerIDName.Equals(input.CallerIDName))
                ) && 
                (
                    this.CallerIDNumber == input.CallerIDNumber ||
                    (this.CallerIDNumber != null &&
                    this.CallerIDNumber.Equals(input.CallerIDNumber))
                ) && 
                (
                    this.ChannelPresenceID == input.ChannelPresenceID ||
                    (this.ChannelPresenceID != null &&
                    this.ChannelPresenceID.Equals(input.ChannelPresenceID))
                ) && 
                (
                    this.ConferenceID == input.ConferenceID ||
                    (this.ConferenceID != null &&
                    this.ConferenceID.Equals(input.ConferenceID))
                ) && 
                (
                    this.CurrentEnergy == input.CurrentEnergy ||
                    (this.CurrentEnergy != null &&
                    this.CurrentEnergy.Equals(input.CurrentEnergy))
                ) && 
                (
                    this.CustomChannelVars == input.CustomChannelVars ||
                    (this.CustomChannelVars != null &&
                    this.CustomChannelVars.Equals(input.CustomChannelVars))
                ) && 
                (
                    this.EnergyLevel == input.EnergyLevel ||
                    (this.EnergyLevel != null &&
                    this.EnergyLevel.Equals(input.EnergyLevel))
                ) && 
                (
                    this.Event == input.Event ||
                    (this.Event != null &&
                    this.Event.Equals(input.Event))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.Floor == input.Floor ||
                    (this.Floor != null &&
                    this.Floor.Equals(input.Floor))
                ) && 
                (
                    this.Focus == input.Focus ||
                    (this.Focus != null &&
                    this.Focus.Equals(input.Focus))
                ) && 
                (
                    this.Hear == input.Hear ||
                    (this.Hear != null &&
                    this.Hear.Equals(input.Hear))
                ) && 
                (
                    this.InstanceID == input.InstanceID ||
                    (this.InstanceID != null &&
                    this.InstanceID.Equals(input.InstanceID))
                ) && 
                (
                    this.MuteDetect == input.MuteDetect ||
                    (this.MuteDetect != null &&
                    this.MuteDetect.Equals(input.MuteDetect))
                ) && 
                (
                    this.ParticipantID == input.ParticipantID ||
                    (this.ParticipantID != null &&
                    this.ParticipantID.Equals(input.ParticipantID))
                ) && 
                (
                    this.Speak == input.Speak ||
                    (this.Speak != null &&
                    this.Speak.Equals(input.Speak))
                ) && 
                (
                    this.Talking == input.Talking ||
                    (this.Talking != null &&
                    this.Talking.Equals(input.Talking))
                ) && 
                (
                    this.Video == input.Video ||
                    (this.Video != null &&
                    this.Video.Equals(input.Video))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.CallerIDName != null)
                    hashCode = hashCode * 59 + this.CallerIDName.GetHashCode();
                if (this.CallerIDNumber != null)
                    hashCode = hashCode * 59 + this.CallerIDNumber.GetHashCode();
                if (this.ChannelPresenceID != null)
                    hashCode = hashCode * 59 + this.ChannelPresenceID.GetHashCode();
                if (this.ConferenceID != null)
                    hashCode = hashCode * 59 + this.ConferenceID.GetHashCode();
                if (this.CurrentEnergy != null)
                    hashCode = hashCode * 59 + this.CurrentEnergy.GetHashCode();
                if (this.CustomChannelVars != null)
                    hashCode = hashCode * 59 + this.CustomChannelVars.GetHashCode();
                if (this.EnergyLevel != null)
                    hashCode = hashCode * 59 + this.EnergyLevel.GetHashCode();
                if (this.Event != null)
                    hashCode = hashCode * 59 + this.Event.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.Floor != null)
                    hashCode = hashCode * 59 + this.Floor.GetHashCode();
                if (this.Focus != null)
                    hashCode = hashCode * 59 + this.Focus.GetHashCode();
                if (this.Hear != null)
                    hashCode = hashCode * 59 + this.Hear.GetHashCode();
                if (this.InstanceID != null)
                    hashCode = hashCode * 59 + this.InstanceID.GetHashCode();
                if (this.MuteDetect != null)
                    hashCode = hashCode * 59 + this.MuteDetect.GetHashCode();
                if (this.ParticipantID != null)
                    hashCode = hashCode * 59 + this.ParticipantID.GetHashCode();
                if (this.Speak != null)
                    hashCode = hashCode * 59 + this.Speak.GetHashCode();
                if (this.Talking != null)
                    hashCode = hashCode * 59 + this.Talking.GetHashCode();
                if (this.Video != null)
                    hashCode = hashCode * 59 + this.Video.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
