/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for rate.resp
    /// </summary>
    [DataContract]
    public partial class KapiRateResp :  IEquatable<KapiRateResp>, IValidatableObject
    {
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Rate for value: rate
            /// </summary>
            [EnumMember(Value = "rate")]
            Rate = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Resp for value: resp
            /// </summary>
            [EnumMember(Value = "resp")]
            Resp = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiRateResp" /> class.
        /// </summary>
        /// <param name="baseCost">baseCost.</param>
        /// <param name="callID">callID.</param>
        /// <param name="discountPercentage">discountPercentage.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="prefix">prefix.</param>
        /// <param name="pvtCost">pvtCost.</param>
        /// <param name="rate">rate.</param>
        /// <param name="rateDescription">rateDescription.</param>
        /// <param name="rateID">rateID.</param>
        /// <param name="rateIncrement">rateIncrement.</param>
        /// <param name="rateMinimum">rateMinimum.</param>
        /// <param name="rateName">rateName.</param>
        /// <param name="rateNoChargeTime">rateNoChargeTime.</param>
        /// <param name="rateVersion">rateVersion.</param>
        /// <param name="ratedeckID">ratedeckID.</param>
        /// <param name="surcharge">surcharge.</param>
        /// <param name="updateCalleeID">updateCalleeID.</param>
        public KapiRateResp(string baseCost = default(string), string callID = default(string), string discountPercentage = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string prefix = default(string), string pvtCost = default(string), string rate = default(string), string rateDescription = default(string), string rateID = default(string), int? rateIncrement = default(int?), string rateMinimum = default(string), string rateName = default(string), int? rateNoChargeTime = default(int?), string rateVersion = default(string), string ratedeckID = default(string), string surcharge = default(string), bool? updateCalleeID = default(bool?))
        {
            this.BaseCost = baseCost;
            this.CallID = callID;
            this.DiscountPercentage = discountPercentage;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.Prefix = prefix;
            this.PvtCost = pvtCost;
            this.Rate = rate;
            this.RateDescription = rateDescription;
            this.RateID = rateID;
            this.RateIncrement = rateIncrement;
            this.RateMinimum = rateMinimum;
            this.RateName = rateName;
            this.RateNoChargeTime = rateNoChargeTime;
            this.RateVersion = rateVersion;
            this.RatedeckID = ratedeckID;
            this.Surcharge = surcharge;
            this.UpdateCalleeID = updateCalleeID;
        }
        
        /// <summary>
        /// Gets or Sets BaseCost
        /// </summary>
        [DataMember(Name="Base-Cost", EmitDefaultValue=false)]
        public string BaseCost { get; set; }

        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }

        /// <summary>
        /// Gets or Sets DiscountPercentage
        /// </summary>
        [DataMember(Name="Discount-Percentage", EmitDefaultValue=false)]
        public string DiscountPercentage { get; set; }



        /// <summary>
        /// Gets or Sets Prefix
        /// </summary>
        [DataMember(Name="Prefix", EmitDefaultValue=false)]
        public string Prefix { get; set; }

        /// <summary>
        /// Gets or Sets PvtCost
        /// </summary>
        [DataMember(Name="Pvt-Cost", EmitDefaultValue=false)]
        public string PvtCost { get; set; }

        /// <summary>
        /// Gets or Sets Rate
        /// </summary>
        [DataMember(Name="Rate", EmitDefaultValue=false)]
        public string Rate { get; set; }

        /// <summary>
        /// Gets or Sets RateDescription
        /// </summary>
        [DataMember(Name="Rate-Description", EmitDefaultValue=false)]
        public string RateDescription { get; set; }

        /// <summary>
        /// Gets or Sets RateID
        /// </summary>
        [DataMember(Name="Rate-ID", EmitDefaultValue=false)]
        public string RateID { get; set; }

        /// <summary>
        /// Gets or Sets RateIncrement
        /// </summary>
        [DataMember(Name="Rate-Increment", EmitDefaultValue=false)]
        public int? RateIncrement { get; set; }

        /// <summary>
        /// Gets or Sets RateMinimum
        /// </summary>
        [DataMember(Name="Rate-Minimum", EmitDefaultValue=false)]
        public string RateMinimum { get; set; }

        /// <summary>
        /// Gets or Sets RateName
        /// </summary>
        [DataMember(Name="Rate-Name", EmitDefaultValue=false)]
        public string RateName { get; set; }

        /// <summary>
        /// Gets or Sets RateNoChargeTime
        /// </summary>
        [DataMember(Name="Rate-NoCharge-Time", EmitDefaultValue=false)]
        public int? RateNoChargeTime { get; set; }

        /// <summary>
        /// Gets or Sets RateVersion
        /// </summary>
        [DataMember(Name="Rate-Version", EmitDefaultValue=false)]
        public string RateVersion { get; set; }

        /// <summary>
        /// Gets or Sets RatedeckID
        /// </summary>
        [DataMember(Name="Ratedeck-ID", EmitDefaultValue=false)]
        public string RatedeckID { get; set; }

        /// <summary>
        /// Gets or Sets Surcharge
        /// </summary>
        [DataMember(Name="Surcharge", EmitDefaultValue=false)]
        public string Surcharge { get; set; }

        /// <summary>
        /// Gets or Sets UpdateCalleeID
        /// </summary>
        [DataMember(Name="Update-Callee-ID", EmitDefaultValue=false)]
        public bool? UpdateCalleeID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiRateResp {\n");
            sb.Append("  BaseCost: ").Append(BaseCost).Append("\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  DiscountPercentage: ").Append(DiscountPercentage).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  PvtCost: ").Append(PvtCost).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  RateDescription: ").Append(RateDescription).Append("\n");
            sb.Append("  RateID: ").Append(RateID).Append("\n");
            sb.Append("  RateIncrement: ").Append(RateIncrement).Append("\n");
            sb.Append("  RateMinimum: ").Append(RateMinimum).Append("\n");
            sb.Append("  RateName: ").Append(RateName).Append("\n");
            sb.Append("  RateNoChargeTime: ").Append(RateNoChargeTime).Append("\n");
            sb.Append("  RateVersion: ").Append(RateVersion).Append("\n");
            sb.Append("  RatedeckID: ").Append(RatedeckID).Append("\n");
            sb.Append("  Surcharge: ").Append(Surcharge).Append("\n");
            sb.Append("  UpdateCalleeID: ").Append(UpdateCalleeID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiRateResp);
        }

        /// <summary>
        /// Returns true if KapiRateResp instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiRateResp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiRateResp input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BaseCost == input.BaseCost ||
                    (this.BaseCost != null &&
                    this.BaseCost.Equals(input.BaseCost))
                ) && 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.DiscountPercentage == input.DiscountPercentage ||
                    (this.DiscountPercentage != null &&
                    this.DiscountPercentage.Equals(input.DiscountPercentage))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.Prefix == input.Prefix ||
                    (this.Prefix != null &&
                    this.Prefix.Equals(input.Prefix))
                ) && 
                (
                    this.PvtCost == input.PvtCost ||
                    (this.PvtCost != null &&
                    this.PvtCost.Equals(input.PvtCost))
                ) && 
                (
                    this.Rate == input.Rate ||
                    (this.Rate != null &&
                    this.Rate.Equals(input.Rate))
                ) && 
                (
                    this.RateDescription == input.RateDescription ||
                    (this.RateDescription != null &&
                    this.RateDescription.Equals(input.RateDescription))
                ) && 
                (
                    this.RateID == input.RateID ||
                    (this.RateID != null &&
                    this.RateID.Equals(input.RateID))
                ) && 
                (
                    this.RateIncrement == input.RateIncrement ||
                    (this.RateIncrement != null &&
                    this.RateIncrement.Equals(input.RateIncrement))
                ) && 
                (
                    this.RateMinimum == input.RateMinimum ||
                    (this.RateMinimum != null &&
                    this.RateMinimum.Equals(input.RateMinimum))
                ) && 
                (
                    this.RateName == input.RateName ||
                    (this.RateName != null &&
                    this.RateName.Equals(input.RateName))
                ) && 
                (
                    this.RateNoChargeTime == input.RateNoChargeTime ||
                    (this.RateNoChargeTime != null &&
                    this.RateNoChargeTime.Equals(input.RateNoChargeTime))
                ) && 
                (
                    this.RateVersion == input.RateVersion ||
                    (this.RateVersion != null &&
                    this.RateVersion.Equals(input.RateVersion))
                ) && 
                (
                    this.RatedeckID == input.RatedeckID ||
                    (this.RatedeckID != null &&
                    this.RatedeckID.Equals(input.RatedeckID))
                ) && 
                (
                    this.Surcharge == input.Surcharge ||
                    (this.Surcharge != null &&
                    this.Surcharge.Equals(input.Surcharge))
                ) && 
                (
                    this.UpdateCalleeID == input.UpdateCalleeID ||
                    (this.UpdateCalleeID != null &&
                    this.UpdateCalleeID.Equals(input.UpdateCalleeID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BaseCost != null)
                    hashCode = hashCode * 59 + this.BaseCost.GetHashCode();
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.DiscountPercentage != null)
                    hashCode = hashCode * 59 + this.DiscountPercentage.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.Prefix != null)
                    hashCode = hashCode * 59 + this.Prefix.GetHashCode();
                if (this.PvtCost != null)
                    hashCode = hashCode * 59 + this.PvtCost.GetHashCode();
                if (this.Rate != null)
                    hashCode = hashCode * 59 + this.Rate.GetHashCode();
                if (this.RateDescription != null)
                    hashCode = hashCode * 59 + this.RateDescription.GetHashCode();
                if (this.RateID != null)
                    hashCode = hashCode * 59 + this.RateID.GetHashCode();
                if (this.RateIncrement != null)
                    hashCode = hashCode * 59 + this.RateIncrement.GetHashCode();
                if (this.RateMinimum != null)
                    hashCode = hashCode * 59 + this.RateMinimum.GetHashCode();
                if (this.RateName != null)
                    hashCode = hashCode * 59 + this.RateName.GetHashCode();
                if (this.RateNoChargeTime != null)
                    hashCode = hashCode * 59 + this.RateNoChargeTime.GetHashCode();
                if (this.RateVersion != null)
                    hashCode = hashCode * 59 + this.RateVersion.GetHashCode();
                if (this.RatedeckID != null)
                    hashCode = hashCode * 59 + this.RatedeckID.GetHashCode();
                if (this.Surcharge != null)
                    hashCode = hashCode * 59 + this.Surcharge.GetHashCode();
                if (this.UpdateCalleeID != null)
                    hashCode = hashCode * 59 + this.UpdateCalleeID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
