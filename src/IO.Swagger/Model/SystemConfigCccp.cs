/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for cccp system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigCccp :  IEquatable<SystemConfigCccp>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigCccp" /> class.
        /// </summary>
        /// <param name="allowedCalleeRegex">cccp allowed callee regex (default to &quot;^\+?\d{7,}$&quot;).</param>
        /// <param name="callbackDelay">cccp callback delay.</param>
        /// <param name="cccpCbNumber">cccp cccp cb number.</param>
        /// <param name="cccpCcNumber">cccp cccp cc number.</param>
        /// <param name="lastNumberRedialCode">cccp last number redial code (default to &quot;*0&quot;).</param>
        /// <param name="promptDelay">cccp prompt delay.</param>
        public SystemConfigCccp(string allowedCalleeRegex = "^\+?\d{7,}$", int? callbackDelay = default(int?), string cccpCbNumber = default(string), string cccpCcNumber = default(string), string lastNumberRedialCode = "*0", int? promptDelay = default(int?))
        {
            // use default value if no "allowedCalleeRegex" provided
            if (allowedCalleeRegex == null)
            {
                this.AllowedCalleeRegex = "^\+?\d{7,}$";
            }
            else
            {
                this.AllowedCalleeRegex = allowedCalleeRegex;
            }
            this.CallbackDelay = callbackDelay;
            this.CccpCbNumber = cccpCbNumber;
            this.CccpCcNumber = cccpCcNumber;
            // use default value if no "lastNumberRedialCode" provided
            if (lastNumberRedialCode == null)
            {
                this.LastNumberRedialCode = "*0";
            }
            else
            {
                this.LastNumberRedialCode = lastNumberRedialCode;
            }
            this.PromptDelay = promptDelay;
        }
        
        /// <summary>
        /// cccp allowed callee regex
        /// </summary>
        /// <value>cccp allowed callee regex</value>
        [DataMember(Name="allowed_callee_regex", EmitDefaultValue=false)]
        public string AllowedCalleeRegex { get; set; }

        /// <summary>
        /// cccp callback delay
        /// </summary>
        /// <value>cccp callback delay</value>
        [DataMember(Name="callback_delay", EmitDefaultValue=false)]
        public int? CallbackDelay { get; set; }

        /// <summary>
        /// cccp cccp cb number
        /// </summary>
        /// <value>cccp cccp cb number</value>
        [DataMember(Name="cccp_cb_number", EmitDefaultValue=false)]
        public string CccpCbNumber { get; set; }

        /// <summary>
        /// cccp cccp cc number
        /// </summary>
        /// <value>cccp cccp cc number</value>
        [DataMember(Name="cccp_cc_number", EmitDefaultValue=false)]
        public string CccpCcNumber { get; set; }

        /// <summary>
        /// cccp last number redial code
        /// </summary>
        /// <value>cccp last number redial code</value>
        [DataMember(Name="last_number_redial_code", EmitDefaultValue=false)]
        public string LastNumberRedialCode { get; set; }

        /// <summary>
        /// cccp prompt delay
        /// </summary>
        /// <value>cccp prompt delay</value>
        [DataMember(Name="prompt_delay", EmitDefaultValue=false)]
        public int? PromptDelay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigCccp {\n");
            sb.Append("  AllowedCalleeRegex: ").Append(AllowedCalleeRegex).Append("\n");
            sb.Append("  CallbackDelay: ").Append(CallbackDelay).Append("\n");
            sb.Append("  CccpCbNumber: ").Append(CccpCbNumber).Append("\n");
            sb.Append("  CccpCcNumber: ").Append(CccpCcNumber).Append("\n");
            sb.Append("  LastNumberRedialCode: ").Append(LastNumberRedialCode).Append("\n");
            sb.Append("  PromptDelay: ").Append(PromptDelay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigCccp);
        }

        /// <summary>
        /// Returns true if SystemConfigCccp instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigCccp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigCccp input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowedCalleeRegex == input.AllowedCalleeRegex ||
                    (this.AllowedCalleeRegex != null &&
                    this.AllowedCalleeRegex.Equals(input.AllowedCalleeRegex))
                ) && 
                (
                    this.CallbackDelay == input.CallbackDelay ||
                    (this.CallbackDelay != null &&
                    this.CallbackDelay.Equals(input.CallbackDelay))
                ) && 
                (
                    this.CccpCbNumber == input.CccpCbNumber ||
                    (this.CccpCbNumber != null &&
                    this.CccpCbNumber.Equals(input.CccpCbNumber))
                ) && 
                (
                    this.CccpCcNumber == input.CccpCcNumber ||
                    (this.CccpCcNumber != null &&
                    this.CccpCcNumber.Equals(input.CccpCcNumber))
                ) && 
                (
                    this.LastNumberRedialCode == input.LastNumberRedialCode ||
                    (this.LastNumberRedialCode != null &&
                    this.LastNumberRedialCode.Equals(input.LastNumberRedialCode))
                ) && 
                (
                    this.PromptDelay == input.PromptDelay ||
                    (this.PromptDelay != null &&
                    this.PromptDelay.Equals(input.PromptDelay))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowedCalleeRegex != null)
                    hashCode = hashCode * 59 + this.AllowedCalleeRegex.GetHashCode();
                if (this.CallbackDelay != null)
                    hashCode = hashCode * 59 + this.CallbackDelay.GetHashCode();
                if (this.CccpCbNumber != null)
                    hashCode = hashCode * 59 + this.CccpCbNumber.GetHashCode();
                if (this.CccpCcNumber != null)
                    hashCode = hashCode * 59 + this.CccpCcNumber.GetHashCode();
                if (this.LastNumberRedialCode != null)
                    hashCode = hashCode * 59 + this.LastNumberRedialCode.GetHashCode();
                if (this.PromptDelay != null)
                    hashCode = hashCode * 59 + this.PromptDelay.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
