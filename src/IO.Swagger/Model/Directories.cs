/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Allow a caller to search for a user/device by name instead of extension/DID
    /// </summary>
    [DataContract]
    public partial class Directories :  IEquatable<Directories>, IValidatableObject
    {
        /// <summary>
        /// What field to sort on in matching documents when a caller enters characters
        /// </summary>
        /// <value>What field to sort on in matching documents when a caller enters characters</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortByEnum
        {
            
            /// <summary>
            /// Enum Firstname for value: first_name
            /// </summary>
            [EnumMember(Value = "first_name")]
            Firstname = 1,
            
            /// <summary>
            /// Enum Lastname for value: last_name
            /// </summary>
            [EnumMember(Value = "last_name")]
            Lastname = 2
        }

        /// <summary>
        /// What field to sort on in matching documents when a caller enters characters
        /// </summary>
        /// <value>What field to sort on in matching documents when a caller enters characters</value>
        [DataMember(Name="sort_by", EmitDefaultValue=false)]
        public SortByEnum? SortBy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Directories" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Directories() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Directories" /> class.
        /// </summary>
        /// <param name="confirmMatch">When one match is found, require caller to confirm the match before connecting (default to true).</param>
        /// <param name="flags">Flags set by external applications.</param>
        /// <param name="maxDtmf">Cap the number of DTMF characters collected from a caller, 0 for unlimited.</param>
        /// <param name="minDtmf">How many DTMF characters to collect from a caller before processing the directory.</param>
        /// <param name="name">The name of the directory (required).</param>
        /// <param name="sortBy">What field to sort on in matching documents when a caller enters characters (default to SortByEnum.Lastname).</param>
        /// <param name="users">The list of users associated with this directory.</param>
        public Directories(bool? confirmMatch = true, List<string> flags = default(List<string>), int? maxDtmf = default(int?), int? minDtmf = default(int?), string name = default(string), SortByEnum? sortBy = SortByEnum.Lastname, List<string> users = default(List<string>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Directories and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // use default value if no "confirmMatch" provided
            if (confirmMatch == null)
            {
                this.ConfirmMatch = true;
            }
            else
            {
                this.ConfirmMatch = confirmMatch;
            }
            this.Flags = flags;
            this.MaxDtmf = maxDtmf;
            this.MinDtmf = minDtmf;
            // use default value if no "sortBy" provided
            if (sortBy == null)
            {
                this.SortBy = SortByEnum.Lastname;
            }
            else
            {
                this.SortBy = sortBy;
            }
            this.Users = users;
        }
        
        /// <summary>
        /// When one match is found, require caller to confirm the match before connecting
        /// </summary>
        /// <value>When one match is found, require caller to confirm the match before connecting</value>
        [DataMember(Name="confirm_match", EmitDefaultValue=false)]
        public bool? ConfirmMatch { get; set; }

        /// <summary>
        /// Flags set by external applications
        /// </summary>
        /// <value>Flags set by external applications</value>
        [DataMember(Name="flags", EmitDefaultValue=false)]
        public List<string> Flags { get; set; }

        /// <summary>
        /// Cap the number of DTMF characters collected from a caller, 0 for unlimited
        /// </summary>
        /// <value>Cap the number of DTMF characters collected from a caller, 0 for unlimited</value>
        [DataMember(Name="max_dtmf", EmitDefaultValue=false)]
        public int? MaxDtmf { get; set; }

        /// <summary>
        /// How many DTMF characters to collect from a caller before processing the directory
        /// </summary>
        /// <value>How many DTMF characters to collect from a caller before processing the directory</value>
        [DataMember(Name="min_dtmf", EmitDefaultValue=false)]
        public int? MinDtmf { get; set; }

        /// <summary>
        /// The name of the directory
        /// </summary>
        /// <value>The name of the directory</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// The list of users associated with this directory
        /// </summary>
        /// <value>The list of users associated with this directory</value>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<string> Users { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Directories {\n");
            sb.Append("  ConfirmMatch: ").Append(ConfirmMatch).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  MaxDtmf: ").Append(MaxDtmf).Append("\n");
            sb.Append("  MinDtmf: ").Append(MinDtmf).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SortBy: ").Append(SortBy).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Directories);
        }

        /// <summary>
        /// Returns true if Directories instances are equal
        /// </summary>
        /// <param name="input">Instance of Directories to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Directories input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConfirmMatch == input.ConfirmMatch ||
                    (this.ConfirmMatch != null &&
                    this.ConfirmMatch.Equals(input.ConfirmMatch))
                ) && 
                (
                    this.Flags == input.Flags ||
                    this.Flags != null &&
                    this.Flags.SequenceEqual(input.Flags)
                ) && 
                (
                    this.MaxDtmf == input.MaxDtmf ||
                    (this.MaxDtmf != null &&
                    this.MaxDtmf.Equals(input.MaxDtmf))
                ) && 
                (
                    this.MinDtmf == input.MinDtmf ||
                    (this.MinDtmf != null &&
                    this.MinDtmf.Equals(input.MinDtmf))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SortBy == input.SortBy ||
                    (this.SortBy != null &&
                    this.SortBy.Equals(input.SortBy))
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConfirmMatch != null)
                    hashCode = hashCode * 59 + this.ConfirmMatch.GetHashCode();
                if (this.Flags != null)
                    hashCode = hashCode * 59 + this.Flags.GetHashCode();
                if (this.MaxDtmf != null)
                    hashCode = hashCode * 59 + this.MaxDtmf.GetHashCode();
                if (this.MinDtmf != null)
                    hashCode = hashCode * 59 + this.MinDtmf.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.SortBy != null)
                    hashCode = hashCode * 59 + this.SortBy.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MaxDtmf (int?) minimum
            if(this.MaxDtmf < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxDtmf, must be a value greater than or equal to 0.", new [] { "MaxDtmf" });
            }

            // MinDtmf (int?) minimum
            if(this.MinDtmf < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinDtmf, must be a value greater than or equal to 1.", new [] { "MinDtmf" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            yield break;
        }
    }

}
