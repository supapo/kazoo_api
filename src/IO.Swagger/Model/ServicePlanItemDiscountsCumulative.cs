/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ServicePlanItemDiscountsCumulative
    /// </summary>
    [DataContract]
    public partial class ServicePlanItemDiscountsCumulative :  IEquatable<ServicePlanItemDiscountsCumulative>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServicePlanItemDiscountsCumulative" /> class.
        /// </summary>
        /// <param name="maximum">The most number of Items to apply discount to.</param>
        /// <param name="rate">The discount to apply, up to maximum Items (if applicable).</param>
        /// <param name="rates">Takes precedence over rate, sets the discount based on the billable quantity.</param>
        public ServicePlanItemDiscountsCumulative(int? maximum = default(int?), decimal? rate = default(decimal?), Object rates = default(Object))
        {
            this.Maximum = maximum;
            this.Rate = rate;
            this.Rates = rates;
        }
        
        /// <summary>
        /// The most number of Items to apply discount to
        /// </summary>
        /// <value>The most number of Items to apply discount to</value>
        [DataMember(Name="maximum", EmitDefaultValue=false)]
        public int? Maximum { get; set; }

        /// <summary>
        /// The discount to apply, up to maximum Items (if applicable)
        /// </summary>
        /// <value>The discount to apply, up to maximum Items (if applicable)</value>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public decimal? Rate { get; set; }

        /// <summary>
        /// Takes precedence over rate, sets the discount based on the billable quantity
        /// </summary>
        /// <value>Takes precedence over rate, sets the discount based on the billable quantity</value>
        [DataMember(Name="rates", EmitDefaultValue=false)]
        public Object Rates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServicePlanItemDiscountsCumulative {\n");
            sb.Append("  Maximum: ").Append(Maximum).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  Rates: ").Append(Rates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServicePlanItemDiscountsCumulative);
        }

        /// <summary>
        /// Returns true if ServicePlanItemDiscountsCumulative instances are equal
        /// </summary>
        /// <param name="input">Instance of ServicePlanItemDiscountsCumulative to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServicePlanItemDiscountsCumulative input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Maximum == input.Maximum ||
                    (this.Maximum != null &&
                    this.Maximum.Equals(input.Maximum))
                ) && 
                (
                    this.Rate == input.Rate ||
                    (this.Rate != null &&
                    this.Rate.Equals(input.Rate))
                ) && 
                (
                    this.Rates == input.Rates ||
                    (this.Rates != null &&
                    this.Rates.Equals(input.Rates))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Maximum != null)
                    hashCode = hashCode * 59 + this.Maximum.GetHashCode();
                if (this.Rate != null)
                    hashCode = hashCode * 59 + this.Rate.GetHashCode();
                if (this.Rates != null)
                    hashCode = hashCode * 59 + this.Rates.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
