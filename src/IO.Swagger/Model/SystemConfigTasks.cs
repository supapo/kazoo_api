/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for tasks system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigTasks :  IEquatable<SystemConfigTasks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigTasks" /> class.
        /// </summary>
        /// <param name="agingExpiryD">tasks aging expiry in days.</param>
        /// <param name="attemptUploadOutputTimes">how many times will the upload of the resulting CSV be attempted, cannot be zero.</param>
        /// <param name="browseDbsIntervalS">tasks browse dbs interval in seconds.</param>
        /// <param name="crawlerDelayTimeMs">tasks crawler delay time in milliseconds.</param>
        /// <param name="crawlerTimerMs">tasks crawler timer in milliseconds.</param>
        /// <param name="cycleDelayTimeMs">tasks cycle delay time in milliseconds.</param>
        /// <param name="discoveryExpiryD">tasks discovery expiry in days.</param>
        /// <param name="interaccountDelayMs">tasks interaccount delay in milliseconds.</param>
        /// <param name="lowBalanceRepeatS">tasks low balance repeat in seconds.</param>
        /// <param name="pauseBetweenUploadOutputAttemptsS">the amount of time to pause between attempts to upload resulting CSV in seconds.</param>
        /// <param name="scanRate">tasks scan_rate.</param>
        /// <param name="sendProgressAfterProcessed">tasks send progress after processed.</param>
        /// <param name="shouldArchiveModbs">tasks should archive modbs (default to false).</param>
        /// <param name="shouldCrawlForFirstOccurrence">tasks should crawl for first occurrence (default to true).</param>
        /// <param name="shouldCrawlForLowBalance">tasks should crawl for low balance (default to true).</param>
        /// <param name="softDeletePauseMs">tasks soft delete pause in milliseconds.</param>
        /// <param name="supportBillingId">tasks support_billing_id (default to true).</param>
        /// <param name="syncBufferPeriod">tasks sync_buffer_period.</param>
        /// <param name="syncServices">tasks sync_services (default to false).</param>
        /// <param name="unfinishedPortRequestLifetimeS">tasks unfinished port request lifetime in seconds.</param>
        /// <param name="waitAfterRowMs">tasks wait after row in milliseconds.</param>
        public SystemConfigTasks(int? agingExpiryD = default(int?), int? attemptUploadOutputTimes = default(int?), int? browseDbsIntervalS = default(int?), int? crawlerDelayTimeMs = default(int?), int? crawlerTimerMs = default(int?), int? cycleDelayTimeMs = default(int?), int? discoveryExpiryD = default(int?), int? interaccountDelayMs = default(int?), int? lowBalanceRepeatS = default(int?), int? pauseBetweenUploadOutputAttemptsS = default(int?), int? scanRate = default(int?), int? sendProgressAfterProcessed = default(int?), bool? shouldArchiveModbs = false, bool? shouldCrawlForFirstOccurrence = true, bool? shouldCrawlForLowBalance = true, int? softDeletePauseMs = default(int?), bool? supportBillingId = true, int? syncBufferPeriod = default(int?), bool? syncServices = false, int? unfinishedPortRequestLifetimeS = default(int?), int? waitAfterRowMs = default(int?))
        {
            this.AgingExpiryD = agingExpiryD;
            this.AttemptUploadOutputTimes = attemptUploadOutputTimes;
            this.BrowseDbsIntervalS = browseDbsIntervalS;
            this.CrawlerDelayTimeMs = crawlerDelayTimeMs;
            this.CrawlerTimerMs = crawlerTimerMs;
            this.CycleDelayTimeMs = cycleDelayTimeMs;
            this.DiscoveryExpiryD = discoveryExpiryD;
            this.InteraccountDelayMs = interaccountDelayMs;
            this.LowBalanceRepeatS = lowBalanceRepeatS;
            this.PauseBetweenUploadOutputAttemptsS = pauseBetweenUploadOutputAttemptsS;
            this.ScanRate = scanRate;
            this.SendProgressAfterProcessed = sendProgressAfterProcessed;
            // use default value if no "shouldArchiveModbs" provided
            if (shouldArchiveModbs == null)
            {
                this.ShouldArchiveModbs = false;
            }
            else
            {
                this.ShouldArchiveModbs = shouldArchiveModbs;
            }
            // use default value if no "shouldCrawlForFirstOccurrence" provided
            if (shouldCrawlForFirstOccurrence == null)
            {
                this.ShouldCrawlForFirstOccurrence = true;
            }
            else
            {
                this.ShouldCrawlForFirstOccurrence = shouldCrawlForFirstOccurrence;
            }
            // use default value if no "shouldCrawlForLowBalance" provided
            if (shouldCrawlForLowBalance == null)
            {
                this.ShouldCrawlForLowBalance = true;
            }
            else
            {
                this.ShouldCrawlForLowBalance = shouldCrawlForLowBalance;
            }
            this.SoftDeletePauseMs = softDeletePauseMs;
            // use default value if no "supportBillingId" provided
            if (supportBillingId == null)
            {
                this.SupportBillingId = true;
            }
            else
            {
                this.SupportBillingId = supportBillingId;
            }
            this.SyncBufferPeriod = syncBufferPeriod;
            // use default value if no "syncServices" provided
            if (syncServices == null)
            {
                this.SyncServices = false;
            }
            else
            {
                this.SyncServices = syncServices;
            }
            this.UnfinishedPortRequestLifetimeS = unfinishedPortRequestLifetimeS;
            this.WaitAfterRowMs = waitAfterRowMs;
        }
        
        /// <summary>
        /// tasks aging expiry in days
        /// </summary>
        /// <value>tasks aging expiry in days</value>
        [DataMember(Name="aging_expiry_d", EmitDefaultValue=false)]
        public int? AgingExpiryD { get; set; }

        /// <summary>
        /// how many times will the upload of the resulting CSV be attempted, cannot be zero
        /// </summary>
        /// <value>how many times will the upload of the resulting CSV be attempted, cannot be zero</value>
        [DataMember(Name="attempt_upload_output_times", EmitDefaultValue=false)]
        public int? AttemptUploadOutputTimes { get; set; }

        /// <summary>
        /// tasks browse dbs interval in seconds
        /// </summary>
        /// <value>tasks browse dbs interval in seconds</value>
        [DataMember(Name="browse_dbs_interval_s", EmitDefaultValue=false)]
        public int? BrowseDbsIntervalS { get; set; }

        /// <summary>
        /// tasks crawler delay time in milliseconds
        /// </summary>
        /// <value>tasks crawler delay time in milliseconds</value>
        [DataMember(Name="crawler_delay_time_ms", EmitDefaultValue=false)]
        public int? CrawlerDelayTimeMs { get; set; }

        /// <summary>
        /// tasks crawler timer in milliseconds
        /// </summary>
        /// <value>tasks crawler timer in milliseconds</value>
        [DataMember(Name="crawler_timer_ms", EmitDefaultValue=false)]
        public int? CrawlerTimerMs { get; set; }

        /// <summary>
        /// tasks cycle delay time in milliseconds
        /// </summary>
        /// <value>tasks cycle delay time in milliseconds</value>
        [DataMember(Name="cycle_delay_time_ms", EmitDefaultValue=false)]
        public int? CycleDelayTimeMs { get; set; }

        /// <summary>
        /// tasks discovery expiry in days
        /// </summary>
        /// <value>tasks discovery expiry in days</value>
        [DataMember(Name="discovery_expiry_d", EmitDefaultValue=false)]
        public int? DiscoveryExpiryD { get; set; }

        /// <summary>
        /// tasks interaccount delay in milliseconds
        /// </summary>
        /// <value>tasks interaccount delay in milliseconds</value>
        [DataMember(Name="interaccount_delay_ms", EmitDefaultValue=false)]
        public int? InteraccountDelayMs { get; set; }

        /// <summary>
        /// tasks low balance repeat in seconds
        /// </summary>
        /// <value>tasks low balance repeat in seconds</value>
        [DataMember(Name="low_balance_repeat_s", EmitDefaultValue=false)]
        public int? LowBalanceRepeatS { get; set; }

        /// <summary>
        /// the amount of time to pause between attempts to upload resulting CSV in seconds
        /// </summary>
        /// <value>the amount of time to pause between attempts to upload resulting CSV in seconds</value>
        [DataMember(Name="pause_between_upload_output_attempts_s", EmitDefaultValue=false)]
        public int? PauseBetweenUploadOutputAttemptsS { get; set; }

        /// <summary>
        /// tasks scan_rate
        /// </summary>
        /// <value>tasks scan_rate</value>
        [DataMember(Name="scan_rate", EmitDefaultValue=false)]
        public int? ScanRate { get; set; }

        /// <summary>
        /// tasks send progress after processed
        /// </summary>
        /// <value>tasks send progress after processed</value>
        [DataMember(Name="send_progress_after_processed", EmitDefaultValue=false)]
        public int? SendProgressAfterProcessed { get; set; }

        /// <summary>
        /// tasks should archive modbs
        /// </summary>
        /// <value>tasks should archive modbs</value>
        [DataMember(Name="should_archive_modbs", EmitDefaultValue=false)]
        public bool? ShouldArchiveModbs { get; set; }

        /// <summary>
        /// tasks should crawl for first occurrence
        /// </summary>
        /// <value>tasks should crawl for first occurrence</value>
        [DataMember(Name="should_crawl_for_first_occurrence", EmitDefaultValue=false)]
        public bool? ShouldCrawlForFirstOccurrence { get; set; }

        /// <summary>
        /// tasks should crawl for low balance
        /// </summary>
        /// <value>tasks should crawl for low balance</value>
        [DataMember(Name="should_crawl_for_low_balance", EmitDefaultValue=false)]
        public bool? ShouldCrawlForLowBalance { get; set; }

        /// <summary>
        /// tasks soft delete pause in milliseconds
        /// </summary>
        /// <value>tasks soft delete pause in milliseconds</value>
        [DataMember(Name="soft_delete_pause_ms", EmitDefaultValue=false)]
        public int? SoftDeletePauseMs { get; set; }

        /// <summary>
        /// tasks support_billing_id
        /// </summary>
        /// <value>tasks support_billing_id</value>
        [DataMember(Name="support_billing_id", EmitDefaultValue=false)]
        public bool? SupportBillingId { get; set; }

        /// <summary>
        /// tasks sync_buffer_period
        /// </summary>
        /// <value>tasks sync_buffer_period</value>
        [DataMember(Name="sync_buffer_period", EmitDefaultValue=false)]
        public int? SyncBufferPeriod { get; set; }

        /// <summary>
        /// tasks sync_services
        /// </summary>
        /// <value>tasks sync_services</value>
        [DataMember(Name="sync_services", EmitDefaultValue=false)]
        public bool? SyncServices { get; set; }

        /// <summary>
        /// tasks unfinished port request lifetime in seconds
        /// </summary>
        /// <value>tasks unfinished port request lifetime in seconds</value>
        [DataMember(Name="unfinished_port_request_lifetime_s", EmitDefaultValue=false)]
        public int? UnfinishedPortRequestLifetimeS { get; set; }

        /// <summary>
        /// tasks wait after row in milliseconds
        /// </summary>
        /// <value>tasks wait after row in milliseconds</value>
        [DataMember(Name="wait_after_row_ms", EmitDefaultValue=false)]
        public int? WaitAfterRowMs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigTasks {\n");
            sb.Append("  AgingExpiryD: ").Append(AgingExpiryD).Append("\n");
            sb.Append("  AttemptUploadOutputTimes: ").Append(AttemptUploadOutputTimes).Append("\n");
            sb.Append("  BrowseDbsIntervalS: ").Append(BrowseDbsIntervalS).Append("\n");
            sb.Append("  CrawlerDelayTimeMs: ").Append(CrawlerDelayTimeMs).Append("\n");
            sb.Append("  CrawlerTimerMs: ").Append(CrawlerTimerMs).Append("\n");
            sb.Append("  CycleDelayTimeMs: ").Append(CycleDelayTimeMs).Append("\n");
            sb.Append("  DiscoveryExpiryD: ").Append(DiscoveryExpiryD).Append("\n");
            sb.Append("  InteraccountDelayMs: ").Append(InteraccountDelayMs).Append("\n");
            sb.Append("  LowBalanceRepeatS: ").Append(LowBalanceRepeatS).Append("\n");
            sb.Append("  PauseBetweenUploadOutputAttemptsS: ").Append(PauseBetweenUploadOutputAttemptsS).Append("\n");
            sb.Append("  ScanRate: ").Append(ScanRate).Append("\n");
            sb.Append("  SendProgressAfterProcessed: ").Append(SendProgressAfterProcessed).Append("\n");
            sb.Append("  ShouldArchiveModbs: ").Append(ShouldArchiveModbs).Append("\n");
            sb.Append("  ShouldCrawlForFirstOccurrence: ").Append(ShouldCrawlForFirstOccurrence).Append("\n");
            sb.Append("  ShouldCrawlForLowBalance: ").Append(ShouldCrawlForLowBalance).Append("\n");
            sb.Append("  SoftDeletePauseMs: ").Append(SoftDeletePauseMs).Append("\n");
            sb.Append("  SupportBillingId: ").Append(SupportBillingId).Append("\n");
            sb.Append("  SyncBufferPeriod: ").Append(SyncBufferPeriod).Append("\n");
            sb.Append("  SyncServices: ").Append(SyncServices).Append("\n");
            sb.Append("  UnfinishedPortRequestLifetimeS: ").Append(UnfinishedPortRequestLifetimeS).Append("\n");
            sb.Append("  WaitAfterRowMs: ").Append(WaitAfterRowMs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigTasks);
        }

        /// <summary>
        /// Returns true if SystemConfigTasks instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigTasks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigTasks input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AgingExpiryD == input.AgingExpiryD ||
                    (this.AgingExpiryD != null &&
                    this.AgingExpiryD.Equals(input.AgingExpiryD))
                ) && 
                (
                    this.AttemptUploadOutputTimes == input.AttemptUploadOutputTimes ||
                    (this.AttemptUploadOutputTimes != null &&
                    this.AttemptUploadOutputTimes.Equals(input.AttemptUploadOutputTimes))
                ) && 
                (
                    this.BrowseDbsIntervalS == input.BrowseDbsIntervalS ||
                    (this.BrowseDbsIntervalS != null &&
                    this.BrowseDbsIntervalS.Equals(input.BrowseDbsIntervalS))
                ) && 
                (
                    this.CrawlerDelayTimeMs == input.CrawlerDelayTimeMs ||
                    (this.CrawlerDelayTimeMs != null &&
                    this.CrawlerDelayTimeMs.Equals(input.CrawlerDelayTimeMs))
                ) && 
                (
                    this.CrawlerTimerMs == input.CrawlerTimerMs ||
                    (this.CrawlerTimerMs != null &&
                    this.CrawlerTimerMs.Equals(input.CrawlerTimerMs))
                ) && 
                (
                    this.CycleDelayTimeMs == input.CycleDelayTimeMs ||
                    (this.CycleDelayTimeMs != null &&
                    this.CycleDelayTimeMs.Equals(input.CycleDelayTimeMs))
                ) && 
                (
                    this.DiscoveryExpiryD == input.DiscoveryExpiryD ||
                    (this.DiscoveryExpiryD != null &&
                    this.DiscoveryExpiryD.Equals(input.DiscoveryExpiryD))
                ) && 
                (
                    this.InteraccountDelayMs == input.InteraccountDelayMs ||
                    (this.InteraccountDelayMs != null &&
                    this.InteraccountDelayMs.Equals(input.InteraccountDelayMs))
                ) && 
                (
                    this.LowBalanceRepeatS == input.LowBalanceRepeatS ||
                    (this.LowBalanceRepeatS != null &&
                    this.LowBalanceRepeatS.Equals(input.LowBalanceRepeatS))
                ) && 
                (
                    this.PauseBetweenUploadOutputAttemptsS == input.PauseBetweenUploadOutputAttemptsS ||
                    (this.PauseBetweenUploadOutputAttemptsS != null &&
                    this.PauseBetweenUploadOutputAttemptsS.Equals(input.PauseBetweenUploadOutputAttemptsS))
                ) && 
                (
                    this.ScanRate == input.ScanRate ||
                    (this.ScanRate != null &&
                    this.ScanRate.Equals(input.ScanRate))
                ) && 
                (
                    this.SendProgressAfterProcessed == input.SendProgressAfterProcessed ||
                    (this.SendProgressAfterProcessed != null &&
                    this.SendProgressAfterProcessed.Equals(input.SendProgressAfterProcessed))
                ) && 
                (
                    this.ShouldArchiveModbs == input.ShouldArchiveModbs ||
                    (this.ShouldArchiveModbs != null &&
                    this.ShouldArchiveModbs.Equals(input.ShouldArchiveModbs))
                ) && 
                (
                    this.ShouldCrawlForFirstOccurrence == input.ShouldCrawlForFirstOccurrence ||
                    (this.ShouldCrawlForFirstOccurrence != null &&
                    this.ShouldCrawlForFirstOccurrence.Equals(input.ShouldCrawlForFirstOccurrence))
                ) && 
                (
                    this.ShouldCrawlForLowBalance == input.ShouldCrawlForLowBalance ||
                    (this.ShouldCrawlForLowBalance != null &&
                    this.ShouldCrawlForLowBalance.Equals(input.ShouldCrawlForLowBalance))
                ) && 
                (
                    this.SoftDeletePauseMs == input.SoftDeletePauseMs ||
                    (this.SoftDeletePauseMs != null &&
                    this.SoftDeletePauseMs.Equals(input.SoftDeletePauseMs))
                ) && 
                (
                    this.SupportBillingId == input.SupportBillingId ||
                    (this.SupportBillingId != null &&
                    this.SupportBillingId.Equals(input.SupportBillingId))
                ) && 
                (
                    this.SyncBufferPeriod == input.SyncBufferPeriod ||
                    (this.SyncBufferPeriod != null &&
                    this.SyncBufferPeriod.Equals(input.SyncBufferPeriod))
                ) && 
                (
                    this.SyncServices == input.SyncServices ||
                    (this.SyncServices != null &&
                    this.SyncServices.Equals(input.SyncServices))
                ) && 
                (
                    this.UnfinishedPortRequestLifetimeS == input.UnfinishedPortRequestLifetimeS ||
                    (this.UnfinishedPortRequestLifetimeS != null &&
                    this.UnfinishedPortRequestLifetimeS.Equals(input.UnfinishedPortRequestLifetimeS))
                ) && 
                (
                    this.WaitAfterRowMs == input.WaitAfterRowMs ||
                    (this.WaitAfterRowMs != null &&
                    this.WaitAfterRowMs.Equals(input.WaitAfterRowMs))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AgingExpiryD != null)
                    hashCode = hashCode * 59 + this.AgingExpiryD.GetHashCode();
                if (this.AttemptUploadOutputTimes != null)
                    hashCode = hashCode * 59 + this.AttemptUploadOutputTimes.GetHashCode();
                if (this.BrowseDbsIntervalS != null)
                    hashCode = hashCode * 59 + this.BrowseDbsIntervalS.GetHashCode();
                if (this.CrawlerDelayTimeMs != null)
                    hashCode = hashCode * 59 + this.CrawlerDelayTimeMs.GetHashCode();
                if (this.CrawlerTimerMs != null)
                    hashCode = hashCode * 59 + this.CrawlerTimerMs.GetHashCode();
                if (this.CycleDelayTimeMs != null)
                    hashCode = hashCode * 59 + this.CycleDelayTimeMs.GetHashCode();
                if (this.DiscoveryExpiryD != null)
                    hashCode = hashCode * 59 + this.DiscoveryExpiryD.GetHashCode();
                if (this.InteraccountDelayMs != null)
                    hashCode = hashCode * 59 + this.InteraccountDelayMs.GetHashCode();
                if (this.LowBalanceRepeatS != null)
                    hashCode = hashCode * 59 + this.LowBalanceRepeatS.GetHashCode();
                if (this.PauseBetweenUploadOutputAttemptsS != null)
                    hashCode = hashCode * 59 + this.PauseBetweenUploadOutputAttemptsS.GetHashCode();
                if (this.ScanRate != null)
                    hashCode = hashCode * 59 + this.ScanRate.GetHashCode();
                if (this.SendProgressAfterProcessed != null)
                    hashCode = hashCode * 59 + this.SendProgressAfterProcessed.GetHashCode();
                if (this.ShouldArchiveModbs != null)
                    hashCode = hashCode * 59 + this.ShouldArchiveModbs.GetHashCode();
                if (this.ShouldCrawlForFirstOccurrence != null)
                    hashCode = hashCode * 59 + this.ShouldCrawlForFirstOccurrence.GetHashCode();
                if (this.ShouldCrawlForLowBalance != null)
                    hashCode = hashCode * 59 + this.ShouldCrawlForLowBalance.GetHashCode();
                if (this.SoftDeletePauseMs != null)
                    hashCode = hashCode * 59 + this.SoftDeletePauseMs.GetHashCode();
                if (this.SupportBillingId != null)
                    hashCode = hashCode * 59 + this.SupportBillingId.GetHashCode();
                if (this.SyncBufferPeriod != null)
                    hashCode = hashCode * 59 + this.SyncBufferPeriod.GetHashCode();
                if (this.SyncServices != null)
                    hashCode = hashCode * 59 + this.SyncServices.GetHashCode();
                if (this.UnfinishedPortRequestLifetimeS != null)
                    hashCode = hashCode * 59 + this.UnfinishedPortRequestLifetimeS.GetHashCode();
                if (this.WaitAfterRowMs != null)
                    hashCode = hashCode * 59 + this.WaitAfterRowMs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AgingExpiryD (int?) minimum
            if(this.AgingExpiryD < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AgingExpiryD, must be a value greater than or equal to 0.", new [] { "AgingExpiryD" });
            }

            // AttemptUploadOutputTimes (int?) minimum
            if(this.AttemptUploadOutputTimes < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AttemptUploadOutputTimes, must be a value greater than or equal to 1.", new [] { "AttemptUploadOutputTimes" });
            }

            // BrowseDbsIntervalS (int?) minimum
            if(this.BrowseDbsIntervalS < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BrowseDbsIntervalS, must be a value greater than or equal to 1.", new [] { "BrowseDbsIntervalS" });
            }

            // CrawlerTimerMs (int?) minimum
            if(this.CrawlerTimerMs < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CrawlerTimerMs, must be a value greater than or equal to 0.", new [] { "CrawlerTimerMs" });
            }

            // DiscoveryExpiryD (int?) minimum
            if(this.DiscoveryExpiryD < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DiscoveryExpiryD, must be a value greater than or equal to 0.", new [] { "DiscoveryExpiryD" });
            }

            // PauseBetweenUploadOutputAttemptsS (int?) minimum
            if(this.PauseBetweenUploadOutputAttemptsS < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PauseBetweenUploadOutputAttemptsS, must be a value greater than or equal to 0.", new [] { "PauseBetweenUploadOutputAttemptsS" });
            }

            // ScanRate (int?) minimum
            if(this.ScanRate < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ScanRate, must be a value greater than or equal to 0.", new [] { "ScanRate" });
            }

            // SendProgressAfterProcessed (int?) minimum
            if(this.SendProgressAfterProcessed < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SendProgressAfterProcessed, must be a value greater than or equal to 1.", new [] { "SendProgressAfterProcessed" });
            }

            // SyncBufferPeriod (int?) minimum
            if(this.SyncBufferPeriod < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SyncBufferPeriod, must be a value greater than or equal to 0.", new [] { "SyncBufferPeriod" });
            }

            // WaitAfterRowMs (int?) minimum
            if(this.WaitAfterRowMs < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WaitAfterRowMs, must be a value greater than or equal to 0.", new [] { "WaitAfterRowMs" });
            }

            yield break;
        }
    }

}
