/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for dialplan.bridge
    /// </summary>
    [DataContract]
    public partial class KapiDialplanBridge :  IEquatable<KapiDialplanBridge>, IValidatableObject
    {
        /// <summary>
        /// Defines ApplicationName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApplicationNameEnum
        {
            
            /// <summary>
            /// Enum Bridge for value: bridge
            /// </summary>
            [EnumMember(Value = "bridge")]
            Bridge = 1
        }

        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name="Application-Name", EmitDefaultValue=false)]
        public ApplicationNameEnum ApplicationName { get; set; }
        /// <summary>
        /// Defines BLegEvents
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BLegEventsEnum
        {
            
            /// <summary>
            /// Enum CALLSECURE for value: CALL_SECURE
            /// </summary>
            [EnumMember(Value = "CALL_SECURE")]
            CALLSECURE = 1,
            
            /// <summary>
            /// Enum CALLUPDATE for value: CALL_UPDATE
            /// </summary>
            [EnumMember(Value = "CALL_UPDATE")]
            CALLUPDATE = 2,
            
            /// <summary>
            /// Enum CHANNELANSWER for value: CHANNEL_ANSWER
            /// </summary>
            [EnumMember(Value = "CHANNEL_ANSWER")]
            CHANNELANSWER = 3,
            
            /// <summary>
            /// Enum CHANNELCREATE for value: CHANNEL_CREATE
            /// </summary>
            [EnumMember(Value = "CHANNEL_CREATE")]
            CHANNELCREATE = 4,
            
            /// <summary>
            /// Enum CHANNELDESTROY for value: CHANNEL_DESTROY
            /// </summary>
            [EnumMember(Value = "CHANNEL_DESTROY")]
            CHANNELDESTROY = 5,
            
            /// <summary>
            /// Enum CHANNELEXECUTE for value: CHANNEL_EXECUTE
            /// </summary>
            [EnumMember(Value = "CHANNEL_EXECUTE")]
            CHANNELEXECUTE = 6,
            
            /// <summary>
            /// Enum CHANNELEXECUTECOMPLETE for value: CHANNEL_EXECUTE_COMPLETE
            /// </summary>
            [EnumMember(Value = "CHANNEL_EXECUTE_COMPLETE")]
            CHANNELEXECUTECOMPLETE = 7,
            
            /// <summary>
            /// Enum CHANNELEXECUTEERROR for value: CHANNEL_EXECUTE_ERROR
            /// </summary>
            [EnumMember(Value = "CHANNEL_EXECUTE_ERROR")]
            CHANNELEXECUTEERROR = 8,
            
            /// <summary>
            /// Enum CHANNELFAXSTATUS for value: CHANNEL_FAX_STATUS
            /// </summary>
            [EnumMember(Value = "CHANNEL_FAX_STATUS")]
            CHANNELFAXSTATUS = 9,
            
            /// <summary>
            /// Enum CHANNELINTERCEPTED for value: CHANNEL_INTERCEPTED
            /// </summary>
            [EnumMember(Value = "CHANNEL_INTERCEPTED")]
            CHANNELINTERCEPTED = 10,
            
            /// <summary>
            /// Enum CHANNELPROGRESSMEDIA for value: CHANNEL_PROGRESS_MEDIA
            /// </summary>
            [EnumMember(Value = "CHANNEL_PROGRESS_MEDIA")]
            CHANNELPROGRESSMEDIA = 11,
            
            /// <summary>
            /// Enum CHANNELREPLACED for value: CHANNEL_REPLACED
            /// </summary>
            [EnumMember(Value = "CHANNEL_REPLACED")]
            CHANNELREPLACED = 12,
            
            /// <summary>
            /// Enum CHANNELTRANSFEREE for value: CHANNEL_TRANSFEREE
            /// </summary>
            [EnumMember(Value = "CHANNEL_TRANSFEREE")]
            CHANNELTRANSFEREE = 13,
            
            /// <summary>
            /// Enum CHANNELTRANSFEROR for value: CHANNEL_TRANSFEROR
            /// </summary>
            [EnumMember(Value = "CHANNEL_TRANSFEROR")]
            CHANNELTRANSFEROR = 14,
            
            /// <summary>
            /// Enum CHANNELBRIDGE for value: CHANNEL_BRIDGE
            /// </summary>
            [EnumMember(Value = "CHANNEL_BRIDGE")]
            CHANNELBRIDGE = 15,
            
            /// <summary>
            /// Enum CHANNELUNBRIDGE for value: CHANNEL_UNBRIDGE
            /// </summary>
            [EnumMember(Value = "CHANNEL_UNBRIDGE")]
            CHANNELUNBRIDGE = 16,
            
            /// <summary>
            /// Enum CHANNELHOLD for value: CHANNEL_HOLD
            /// </summary>
            [EnumMember(Value = "CHANNEL_HOLD")]
            CHANNELHOLD = 17,
            
            /// <summary>
            /// Enum CHANNELUNHOLD for value: CHANNEL_UNHOLD
            /// </summary>
            [EnumMember(Value = "CHANNEL_UNHOLD")]
            CHANNELUNHOLD = 18,
            
            /// <summary>
            /// Enum DETECTEDTONE for value: DETECTED_TONE
            /// </summary>
            [EnumMember(Value = "DETECTED_TONE")]
            DETECTEDTONE = 19,
            
            /// <summary>
            /// Enum DTMF for value: DTMF
            /// </summary>
            [EnumMember(Value = "DTMF")]
            DTMF = 20,
            
            /// <summary>
            /// Enum LEGCREATED for value: LEG_CREATED
            /// </summary>
            [EnumMember(Value = "LEG_CREATED")]
            LEGCREATED = 21,
            
            /// <summary>
            /// Enum LEGDESTROYED for value: LEG_DESTROYED
            /// </summary>
            [EnumMember(Value = "LEG_DESTROYED")]
            LEGDESTROYED = 22,
            
            /// <summary>
            /// Enum RECORDSTART for value: RECORD_START
            /// </summary>
            [EnumMember(Value = "RECORD_START")]
            RECORDSTART = 23,
            
            /// <summary>
            /// Enum RECORDSTOP for value: RECORD_STOP
            /// </summary>
            [EnumMember(Value = "RECORD_STOP")]
            RECORDSTOP = 24,
            
            /// <summary>
            /// Enum Dialplan for value: dialplan
            /// </summary>
            [EnumMember(Value = "dialplan")]
            Dialplan = 25
        }


        /// <summary>
        /// Gets or Sets BLegEvents
        /// </summary>
        [DataMember(Name="B-Leg-Events", EmitDefaultValue=false)]
        public List<BLegEventsEnum> BLegEvents { get; set; }
        /// <summary>
        /// Defines DialEndpointMethod
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DialEndpointMethodEnum
        {
            
            /// <summary>
            /// Enum Single for value: single
            /// </summary>
            [EnumMember(Value = "single")]
            Single = 1,
            
            /// <summary>
            /// Enum Simultaneous for value: simultaneous
            /// </summary>
            [EnumMember(Value = "simultaneous")]
            Simultaneous = 2
        }

        /// <summary>
        /// Gets or Sets DialEndpointMethod
        /// </summary>
        [DataMember(Name="Dial-Endpoint-Method", EmitDefaultValue=false)]
        public DialEndpointMethodEnum? DialEndpointMethod { get; set; }
        /// <summary>
        /// Defines EnableT38Gateway
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EnableT38GatewayEnum
        {
            
            /// <summary>
            /// Enum Self for value: self
            /// </summary>
            [EnumMember(Value = "self")]
            Self = 1,
            
            /// <summary>
            /// Enum Peer for value: peer
            /// </summary>
            [EnumMember(Value = "peer")]
            Peer = 2
        }

        /// <summary>
        /// Gets or Sets EnableT38Gateway
        /// </summary>
        [DataMember(Name="Enable-T38-Gateway", EmitDefaultValue=false)]
        public EnableT38GatewayEnum? EnableT38Gateway { get; set; }
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Call for value: call
            /// </summary>
            [EnumMember(Value = "call")]
            Call = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Command for value: command
            /// </summary>
            [EnumMember(Value = "command")]
            Command = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Defines InsertAt
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InsertAtEnum
        {
            
            /// <summary>
            /// Enum Head for value: head
            /// </summary>
            [EnumMember(Value = "head")]
            Head = 1,
            
            /// <summary>
            /// Enum Tail for value: tail
            /// </summary>
            [EnumMember(Value = "tail")]
            Tail = 2,
            
            /// <summary>
            /// Enum Flush for value: flush
            /// </summary>
            [EnumMember(Value = "flush")]
            Flush = 3,
            
            /// <summary>
            /// Enum Now for value: now
            /// </summary>
            [EnumMember(Value = "now")]
            Now = 4
        }

        /// <summary>
        /// Gets or Sets InsertAt
        /// </summary>
        [DataMember(Name="Insert-At", EmitDefaultValue=false)]
        public InsertAtEnum? InsertAt { get; set; }
        /// <summary>
        /// Defines Media
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MediaEnum
        {
            
            /// <summary>
            /// Enum Process for value: process
            /// </summary>
            [EnumMember(Value = "process")]
            Process = 1,
            
            /// <summary>
            /// Enum Bypass for value: bypass
            /// </summary>
            [EnumMember(Value = "bypass")]
            Bypass = 2,
            
            /// <summary>
            /// Enum Auto for value: auto
            /// </summary>
            [EnumMember(Value = "auto")]
            Auto = 3
        }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name="Media", EmitDefaultValue=false)]
        public MediaEnum? Media { get; set; }
        /// <summary>
        /// Defines SIPTransport
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SIPTransportEnum
        {
            
            /// <summary>
            /// Enum Udp for value: udp
            /// </summary>
            [EnumMember(Value = "udp")]
            Udp = 1,
            
            /// <summary>
            /// Enum Tcp for value: tcp
            /// </summary>
            [EnumMember(Value = "tcp")]
            Tcp = 2,
            
            /// <summary>
            /// Enum Tls for value: tls
            /// </summary>
            [EnumMember(Value = "tls")]
            Tls = 3
        }

        /// <summary>
        /// Gets or Sets SIPTransport
        /// </summary>
        [DataMember(Name="SIP-Transport", EmitDefaultValue=false)]
        public SIPTransportEnum? SIPTransport { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanBridge" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiDialplanBridge() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanBridge" /> class.
        /// </summary>
        /// <param name="applicationName">applicationName (required).</param>
        /// <param name="assertedIdentityName">assertedIdentityName.</param>
        /// <param name="assertedIdentityNumber">assertedIdentityNumber.</param>
        /// <param name="assertedIdentityRealm">assertedIdentityRealm.</param>
        /// <param name="bLegEvents">bLegEvents.</param>
        /// <param name="bridgeActions">bridgeActions.</param>
        /// <param name="callID">callID (required).</param>
        /// <param name="calleeIDName">calleeIDName.</param>
        /// <param name="calleeIDNumber">calleeIDNumber.</param>
        /// <param name="callerIDName">callerIDName.</param>
        /// <param name="callerIDNumber">callerIDNumber.</param>
        /// <param name="confirmCancelTimeout">confirmCancelTimeout.</param>
        /// <param name="confirmFile">confirmFile.</param>
        /// <param name="confirmKey">confirmKey.</param>
        /// <param name="continueAfter">continueAfter.</param>
        /// <param name="continueOnFail">continueOnFail.</param>
        /// <param name="customApplicationVars">customApplicationVars.</param>
        /// <param name="customChannelVars">customChannelVars.</param>
        /// <param name="customSIPHeaders">customSIPHeaders.</param>
        /// <param name="dialEndpointMethod">dialEndpointMethod.</param>
        /// <param name="enableT38Fax">enableT38Fax.</param>
        /// <param name="enableT38FaxRequest">enableT38FaxRequest.</param>
        /// <param name="enableT38Gateway">enableT38Gateway.</param>
        /// <param name="enableT38Passthrough">enableT38Passthrough.</param>
        /// <param name="endpoints">endpoints (required).</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="exportBridgeVariables">exportBridgeVariables.</param>
        /// <param name="exportVariables">exportVariables.</param>
        /// <param name="failOnSingleReject">failOnSingleReject.</param>
        /// <param name="forceFax">forceFax.</param>
        /// <param name="holdMedia">holdMedia.</param>
        /// <param name="ignoreCompletedElsewhere">ignoreCompletedElsewhere.</param>
        /// <param name="ignoreEarlyMedia">ignoreEarlyMedia.</param>
        /// <param name="ignoreForward">ignoreForward.</param>
        /// <param name="insertAt">insertAt.</param>
        /// <param name="loopbackBowout">loopbackBowout.</param>
        /// <param name="media">media.</param>
        /// <param name="outboundCalleeIDName">outboundCalleeIDName.</param>
        /// <param name="outboundCalleeIDNumber">outboundCalleeIDNumber.</param>
        /// <param name="outboundCallerIDName">outboundCallerIDName.</param>
        /// <param name="outboundCallerIDNumber">outboundCallerIDNumber.</param>
        /// <param name="privacyHideName">privacyHideName.</param>
        /// <param name="privacyHideNumber">privacyHideNumber.</param>
        /// <param name="privacyMethod">privacyMethod.</param>
        /// <param name="ringback">ringback.</param>
        /// <param name="sIPInviteParameters">sIPInviteParameters.</param>
        /// <param name="sIPTransport">sIPTransport.</param>
        /// <param name="secureRTP">secureRTP.</param>
        /// <param name="simplifyLoopback">simplifyLoopback.</param>
        /// <param name="timeout">timeout.</param>
        public KapiDialplanBridge(ApplicationNameEnum applicationName = default(ApplicationNameEnum), string assertedIdentityName = default(string), string assertedIdentityNumber = default(string), string assertedIdentityRealm = default(string), List<BLegEventsEnum> bLegEvents = default(List<BLegEventsEnum>), Object bridgeActions = default(Object), string callID = default(string), string calleeIDName = default(string), string calleeIDNumber = default(string), string callerIDName = default(string), string callerIDNumber = default(string), int? confirmCancelTimeout = default(int?), string confirmFile = default(string), string confirmKey = default(string), bool? continueAfter = default(bool?), bool? continueOnFail = default(bool?), Object customApplicationVars = default(Object), Object customChannelVars = default(Object), Object customSIPHeaders = default(Object), DialEndpointMethodEnum? dialEndpointMethod = default(DialEndpointMethodEnum?), string enableT38Fax = default(string), string enableT38FaxRequest = default(string), EnableT38GatewayEnum? enableT38Gateway = default(EnableT38GatewayEnum?), string enableT38Passthrough = default(string), List<KapiDialplanBridgeEndpoint> endpoints = default(List<KapiDialplanBridgeEndpoint>), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string exportBridgeVariables = default(string), string exportVariables = default(string), string failOnSingleReject = default(string), string forceFax = default(string), string holdMedia = default(string), string ignoreCompletedElsewhere = default(string), string ignoreEarlyMedia = default(string), string ignoreForward = default(string), InsertAtEnum? insertAt = default(InsertAtEnum?), string loopbackBowout = default(string), MediaEnum? media = default(MediaEnum?), string outboundCalleeIDName = default(string), string outboundCalleeIDNumber = default(string), string outboundCallerIDName = default(string), string outboundCallerIDNumber = default(string), string privacyHideName = default(string), string privacyHideNumber = default(string), string privacyMethod = default(string), string ringback = default(string), List<string> sIPInviteParameters = default(List<string>), SIPTransportEnum? sIPTransport = default(SIPTransportEnum?), bool? secureRTP = default(bool?), string simplifyLoopback = default(string), string timeout = default(string))
        {
            // to ensure "applicationName" is required (not null)
            if (applicationName == null)
            {
                throw new InvalidDataException("applicationName is a required property for KapiDialplanBridge and cannot be null");
            }
            else
            {
                this.ApplicationName = applicationName;
            }
            // to ensure "callID" is required (not null)
            if (callID == null)
            {
                throw new InvalidDataException("callID is a required property for KapiDialplanBridge and cannot be null");
            }
            else
            {
                this.CallID = callID;
            }
            // to ensure "endpoints" is required (not null)
            if (endpoints == null)
            {
                throw new InvalidDataException("endpoints is a required property for KapiDialplanBridge and cannot be null");
            }
            else
            {
                this.Endpoints = endpoints;
            }
            this.AssertedIdentityName = assertedIdentityName;
            this.AssertedIdentityNumber = assertedIdentityNumber;
            this.AssertedIdentityRealm = assertedIdentityRealm;
            this.BLegEvents = bLegEvents;
            this.BridgeActions = bridgeActions;
            this.CalleeIDName = calleeIDName;
            this.CalleeIDNumber = calleeIDNumber;
            this.CallerIDName = callerIDName;
            this.CallerIDNumber = callerIDNumber;
            this.ConfirmCancelTimeout = confirmCancelTimeout;
            this.ConfirmFile = confirmFile;
            this.ConfirmKey = confirmKey;
            this.ContinueAfter = continueAfter;
            this.ContinueOnFail = continueOnFail;
            this.CustomApplicationVars = customApplicationVars;
            this.CustomChannelVars = customChannelVars;
            this.CustomSIPHeaders = customSIPHeaders;
            this.DialEndpointMethod = dialEndpointMethod;
            this.EnableT38Fax = enableT38Fax;
            this.EnableT38FaxRequest = enableT38FaxRequest;
            this.EnableT38Gateway = enableT38Gateway;
            this.EnableT38Passthrough = enableT38Passthrough;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.ExportBridgeVariables = exportBridgeVariables;
            this.ExportVariables = exportVariables;
            this.FailOnSingleReject = failOnSingleReject;
            this.ForceFax = forceFax;
            this.HoldMedia = holdMedia;
            this.IgnoreCompletedElsewhere = ignoreCompletedElsewhere;
            this.IgnoreEarlyMedia = ignoreEarlyMedia;
            this.IgnoreForward = ignoreForward;
            this.InsertAt = insertAt;
            this.LoopbackBowout = loopbackBowout;
            this.Media = media;
            this.OutboundCalleeIDName = outboundCalleeIDName;
            this.OutboundCalleeIDNumber = outboundCalleeIDNumber;
            this.OutboundCallerIDName = outboundCallerIDName;
            this.OutboundCallerIDNumber = outboundCallerIDNumber;
            this.PrivacyHideName = privacyHideName;
            this.PrivacyHideNumber = privacyHideNumber;
            this.PrivacyMethod = privacyMethod;
            this.Ringback = ringback;
            this.SIPInviteParameters = sIPInviteParameters;
            this.SIPTransport = sIPTransport;
            this.SecureRTP = secureRTP;
            this.SimplifyLoopback = simplifyLoopback;
            this.Timeout = timeout;
        }
        

        /// <summary>
        /// Gets or Sets AssertedIdentityName
        /// </summary>
        [DataMember(Name="Asserted-Identity-Name", EmitDefaultValue=false)]
        public string AssertedIdentityName { get; set; }

        /// <summary>
        /// Gets or Sets AssertedIdentityNumber
        /// </summary>
        [DataMember(Name="Asserted-Identity-Number", EmitDefaultValue=false)]
        public string AssertedIdentityNumber { get; set; }

        /// <summary>
        /// Gets or Sets AssertedIdentityRealm
        /// </summary>
        [DataMember(Name="Asserted-Identity-Realm", EmitDefaultValue=false)]
        public string AssertedIdentityRealm { get; set; }


        /// <summary>
        /// Gets or Sets BridgeActions
        /// </summary>
        [DataMember(Name="Bridge-Actions", EmitDefaultValue=false)]
        public Object BridgeActions { get; set; }

        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }

        /// <summary>
        /// Gets or Sets CalleeIDName
        /// </summary>
        [DataMember(Name="Callee-ID-Name", EmitDefaultValue=false)]
        public string CalleeIDName { get; set; }

        /// <summary>
        /// Gets or Sets CalleeIDNumber
        /// </summary>
        [DataMember(Name="Callee-ID-Number", EmitDefaultValue=false)]
        public string CalleeIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets CallerIDName
        /// </summary>
        [DataMember(Name="Caller-ID-Name", EmitDefaultValue=false)]
        public string CallerIDName { get; set; }

        /// <summary>
        /// Gets or Sets CallerIDNumber
        /// </summary>
        [DataMember(Name="Caller-ID-Number", EmitDefaultValue=false)]
        public string CallerIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets ConfirmCancelTimeout
        /// </summary>
        [DataMember(Name="Confirm-Cancel-Timeout", EmitDefaultValue=false)]
        public int? ConfirmCancelTimeout { get; set; }

        /// <summary>
        /// Gets or Sets ConfirmFile
        /// </summary>
        [DataMember(Name="Confirm-File", EmitDefaultValue=false)]
        public string ConfirmFile { get; set; }

        /// <summary>
        /// Gets or Sets ConfirmKey
        /// </summary>
        [DataMember(Name="Confirm-Key", EmitDefaultValue=false)]
        public string ConfirmKey { get; set; }

        /// <summary>
        /// Gets or Sets ContinueAfter
        /// </summary>
        [DataMember(Name="Continue-After", EmitDefaultValue=false)]
        public bool? ContinueAfter { get; set; }

        /// <summary>
        /// Gets or Sets ContinueOnFail
        /// </summary>
        [DataMember(Name="Continue-On-Fail", EmitDefaultValue=false)]
        public bool? ContinueOnFail { get; set; }

        /// <summary>
        /// Gets or Sets CustomApplicationVars
        /// </summary>
        [DataMember(Name="Custom-Application-Vars", EmitDefaultValue=false)]
        public Object CustomApplicationVars { get; set; }

        /// <summary>
        /// Gets or Sets CustomChannelVars
        /// </summary>
        [DataMember(Name="Custom-Channel-Vars", EmitDefaultValue=false)]
        public Object CustomChannelVars { get; set; }

        /// <summary>
        /// Gets or Sets CustomSIPHeaders
        /// </summary>
        [DataMember(Name="Custom-SIP-Headers", EmitDefaultValue=false)]
        public Object CustomSIPHeaders { get; set; }


        /// <summary>
        /// Gets or Sets EnableT38Fax
        /// </summary>
        [DataMember(Name="Enable-T38-Fax", EmitDefaultValue=false)]
        public string EnableT38Fax { get; set; }

        /// <summary>
        /// Gets or Sets EnableT38FaxRequest
        /// </summary>
        [DataMember(Name="Enable-T38-Fax-Request", EmitDefaultValue=false)]
        public string EnableT38FaxRequest { get; set; }


        /// <summary>
        /// Gets or Sets EnableT38Passthrough
        /// </summary>
        [DataMember(Name="Enable-T38-Passthrough", EmitDefaultValue=false)]
        public string EnableT38Passthrough { get; set; }

        /// <summary>
        /// Gets or Sets Endpoints
        /// </summary>
        [DataMember(Name="Endpoints", EmitDefaultValue=false)]
        public List<KapiDialplanBridgeEndpoint> Endpoints { get; set; }



        /// <summary>
        /// Gets or Sets ExportBridgeVariables
        /// </summary>
        [DataMember(Name="Export-Bridge-Variables", EmitDefaultValue=false)]
        public string ExportBridgeVariables { get; set; }

        /// <summary>
        /// Gets or Sets ExportVariables
        /// </summary>
        [DataMember(Name="Export-Variables", EmitDefaultValue=false)]
        public string ExportVariables { get; set; }

        /// <summary>
        /// Gets or Sets FailOnSingleReject
        /// </summary>
        [DataMember(Name="Fail-On-Single-Reject", EmitDefaultValue=false)]
        public string FailOnSingleReject { get; set; }

        /// <summary>
        /// Gets or Sets ForceFax
        /// </summary>
        [DataMember(Name="Force-Fax", EmitDefaultValue=false)]
        public string ForceFax { get; set; }

        /// <summary>
        /// Gets or Sets HoldMedia
        /// </summary>
        [DataMember(Name="Hold-Media", EmitDefaultValue=false)]
        public string HoldMedia { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreCompletedElsewhere
        /// </summary>
        [DataMember(Name="Ignore-Completed-Elsewhere", EmitDefaultValue=false)]
        public string IgnoreCompletedElsewhere { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreEarlyMedia
        /// </summary>
        [DataMember(Name="Ignore-Early-Media", EmitDefaultValue=false)]
        public string IgnoreEarlyMedia { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreForward
        /// </summary>
        [DataMember(Name="Ignore-Forward", EmitDefaultValue=false)]
        public string IgnoreForward { get; set; }


        /// <summary>
        /// Gets or Sets LoopbackBowout
        /// </summary>
        [DataMember(Name="Loopback-Bowout", EmitDefaultValue=false)]
        public string LoopbackBowout { get; set; }


        /// <summary>
        /// Gets or Sets OutboundCalleeIDName
        /// </summary>
        [DataMember(Name="Outbound-Callee-ID-Name", EmitDefaultValue=false)]
        public string OutboundCalleeIDName { get; set; }

        /// <summary>
        /// Gets or Sets OutboundCalleeIDNumber
        /// </summary>
        [DataMember(Name="Outbound-Callee-ID-Number", EmitDefaultValue=false)]
        public string OutboundCalleeIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets OutboundCallerIDName
        /// </summary>
        [DataMember(Name="Outbound-Caller-ID-Name", EmitDefaultValue=false)]
        public string OutboundCallerIDName { get; set; }

        /// <summary>
        /// Gets or Sets OutboundCallerIDNumber
        /// </summary>
        [DataMember(Name="Outbound-Caller-ID-Number", EmitDefaultValue=false)]
        public string OutboundCallerIDNumber { get; set; }

        /// <summary>
        /// Gets or Sets PrivacyHideName
        /// </summary>
        [DataMember(Name="Privacy-Hide-Name", EmitDefaultValue=false)]
        public string PrivacyHideName { get; set; }

        /// <summary>
        /// Gets or Sets PrivacyHideNumber
        /// </summary>
        [DataMember(Name="Privacy-Hide-Number", EmitDefaultValue=false)]
        public string PrivacyHideNumber { get; set; }

        /// <summary>
        /// Gets or Sets PrivacyMethod
        /// </summary>
        [DataMember(Name="Privacy-Method", EmitDefaultValue=false)]
        public string PrivacyMethod { get; set; }

        /// <summary>
        /// Gets or Sets Ringback
        /// </summary>
        [DataMember(Name="Ringback", EmitDefaultValue=false)]
        public string Ringback { get; set; }

        /// <summary>
        /// Gets or Sets SIPInviteParameters
        /// </summary>
        [DataMember(Name="SIP-Invite-Parameters", EmitDefaultValue=false)]
        public List<string> SIPInviteParameters { get; set; }


        /// <summary>
        /// Gets or Sets SecureRTP
        /// </summary>
        [DataMember(Name="Secure-RTP", EmitDefaultValue=false)]
        public bool? SecureRTP { get; set; }

        /// <summary>
        /// Gets or Sets SimplifyLoopback
        /// </summary>
        [DataMember(Name="Simplify-Loopback", EmitDefaultValue=false)]
        public string SimplifyLoopback { get; set; }

        /// <summary>
        /// Gets or Sets Timeout
        /// </summary>
        [DataMember(Name="Timeout", EmitDefaultValue=false)]
        public string Timeout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiDialplanBridge {\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  AssertedIdentityName: ").Append(AssertedIdentityName).Append("\n");
            sb.Append("  AssertedIdentityNumber: ").Append(AssertedIdentityNumber).Append("\n");
            sb.Append("  AssertedIdentityRealm: ").Append(AssertedIdentityRealm).Append("\n");
            sb.Append("  BLegEvents: ").Append(BLegEvents).Append("\n");
            sb.Append("  BridgeActions: ").Append(BridgeActions).Append("\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  CalleeIDName: ").Append(CalleeIDName).Append("\n");
            sb.Append("  CalleeIDNumber: ").Append(CalleeIDNumber).Append("\n");
            sb.Append("  CallerIDName: ").Append(CallerIDName).Append("\n");
            sb.Append("  CallerIDNumber: ").Append(CallerIDNumber).Append("\n");
            sb.Append("  ConfirmCancelTimeout: ").Append(ConfirmCancelTimeout).Append("\n");
            sb.Append("  ConfirmFile: ").Append(ConfirmFile).Append("\n");
            sb.Append("  ConfirmKey: ").Append(ConfirmKey).Append("\n");
            sb.Append("  ContinueAfter: ").Append(ContinueAfter).Append("\n");
            sb.Append("  ContinueOnFail: ").Append(ContinueOnFail).Append("\n");
            sb.Append("  CustomApplicationVars: ").Append(CustomApplicationVars).Append("\n");
            sb.Append("  CustomChannelVars: ").Append(CustomChannelVars).Append("\n");
            sb.Append("  CustomSIPHeaders: ").Append(CustomSIPHeaders).Append("\n");
            sb.Append("  DialEndpointMethod: ").Append(DialEndpointMethod).Append("\n");
            sb.Append("  EnableT38Fax: ").Append(EnableT38Fax).Append("\n");
            sb.Append("  EnableT38FaxRequest: ").Append(EnableT38FaxRequest).Append("\n");
            sb.Append("  EnableT38Gateway: ").Append(EnableT38Gateway).Append("\n");
            sb.Append("  EnableT38Passthrough: ").Append(EnableT38Passthrough).Append("\n");
            sb.Append("  Endpoints: ").Append(Endpoints).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  ExportBridgeVariables: ").Append(ExportBridgeVariables).Append("\n");
            sb.Append("  ExportVariables: ").Append(ExportVariables).Append("\n");
            sb.Append("  FailOnSingleReject: ").Append(FailOnSingleReject).Append("\n");
            sb.Append("  ForceFax: ").Append(ForceFax).Append("\n");
            sb.Append("  HoldMedia: ").Append(HoldMedia).Append("\n");
            sb.Append("  IgnoreCompletedElsewhere: ").Append(IgnoreCompletedElsewhere).Append("\n");
            sb.Append("  IgnoreEarlyMedia: ").Append(IgnoreEarlyMedia).Append("\n");
            sb.Append("  IgnoreForward: ").Append(IgnoreForward).Append("\n");
            sb.Append("  InsertAt: ").Append(InsertAt).Append("\n");
            sb.Append("  LoopbackBowout: ").Append(LoopbackBowout).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  OutboundCalleeIDName: ").Append(OutboundCalleeIDName).Append("\n");
            sb.Append("  OutboundCalleeIDNumber: ").Append(OutboundCalleeIDNumber).Append("\n");
            sb.Append("  OutboundCallerIDName: ").Append(OutboundCallerIDName).Append("\n");
            sb.Append("  OutboundCallerIDNumber: ").Append(OutboundCallerIDNumber).Append("\n");
            sb.Append("  PrivacyHideName: ").Append(PrivacyHideName).Append("\n");
            sb.Append("  PrivacyHideNumber: ").Append(PrivacyHideNumber).Append("\n");
            sb.Append("  PrivacyMethod: ").Append(PrivacyMethod).Append("\n");
            sb.Append("  Ringback: ").Append(Ringback).Append("\n");
            sb.Append("  SIPInviteParameters: ").Append(SIPInviteParameters).Append("\n");
            sb.Append("  SIPTransport: ").Append(SIPTransport).Append("\n");
            sb.Append("  SecureRTP: ").Append(SecureRTP).Append("\n");
            sb.Append("  SimplifyLoopback: ").Append(SimplifyLoopback).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiDialplanBridge);
        }

        /// <summary>
        /// Returns true if KapiDialplanBridge instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiDialplanBridge to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiDialplanBridge input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.AssertedIdentityName == input.AssertedIdentityName ||
                    (this.AssertedIdentityName != null &&
                    this.AssertedIdentityName.Equals(input.AssertedIdentityName))
                ) && 
                (
                    this.AssertedIdentityNumber == input.AssertedIdentityNumber ||
                    (this.AssertedIdentityNumber != null &&
                    this.AssertedIdentityNumber.Equals(input.AssertedIdentityNumber))
                ) && 
                (
                    this.AssertedIdentityRealm == input.AssertedIdentityRealm ||
                    (this.AssertedIdentityRealm != null &&
                    this.AssertedIdentityRealm.Equals(input.AssertedIdentityRealm))
                ) && 
                (
                    this.BLegEvents == input.BLegEvents ||
                    this.BLegEvents != null &&
                    this.BLegEvents.SequenceEqual(input.BLegEvents)
                ) && 
                (
                    this.BridgeActions == input.BridgeActions ||
                    (this.BridgeActions != null &&
                    this.BridgeActions.Equals(input.BridgeActions))
                ) && 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.CalleeIDName == input.CalleeIDName ||
                    (this.CalleeIDName != null &&
                    this.CalleeIDName.Equals(input.CalleeIDName))
                ) && 
                (
                    this.CalleeIDNumber == input.CalleeIDNumber ||
                    (this.CalleeIDNumber != null &&
                    this.CalleeIDNumber.Equals(input.CalleeIDNumber))
                ) && 
                (
                    this.CallerIDName == input.CallerIDName ||
                    (this.CallerIDName != null &&
                    this.CallerIDName.Equals(input.CallerIDName))
                ) && 
                (
                    this.CallerIDNumber == input.CallerIDNumber ||
                    (this.CallerIDNumber != null &&
                    this.CallerIDNumber.Equals(input.CallerIDNumber))
                ) && 
                (
                    this.ConfirmCancelTimeout == input.ConfirmCancelTimeout ||
                    (this.ConfirmCancelTimeout != null &&
                    this.ConfirmCancelTimeout.Equals(input.ConfirmCancelTimeout))
                ) && 
                (
                    this.ConfirmFile == input.ConfirmFile ||
                    (this.ConfirmFile != null &&
                    this.ConfirmFile.Equals(input.ConfirmFile))
                ) && 
                (
                    this.ConfirmKey == input.ConfirmKey ||
                    (this.ConfirmKey != null &&
                    this.ConfirmKey.Equals(input.ConfirmKey))
                ) && 
                (
                    this.ContinueAfter == input.ContinueAfter ||
                    (this.ContinueAfter != null &&
                    this.ContinueAfter.Equals(input.ContinueAfter))
                ) && 
                (
                    this.ContinueOnFail == input.ContinueOnFail ||
                    (this.ContinueOnFail != null &&
                    this.ContinueOnFail.Equals(input.ContinueOnFail))
                ) && 
                (
                    this.CustomApplicationVars == input.CustomApplicationVars ||
                    (this.CustomApplicationVars != null &&
                    this.CustomApplicationVars.Equals(input.CustomApplicationVars))
                ) && 
                (
                    this.CustomChannelVars == input.CustomChannelVars ||
                    (this.CustomChannelVars != null &&
                    this.CustomChannelVars.Equals(input.CustomChannelVars))
                ) && 
                (
                    this.CustomSIPHeaders == input.CustomSIPHeaders ||
                    (this.CustomSIPHeaders != null &&
                    this.CustomSIPHeaders.Equals(input.CustomSIPHeaders))
                ) && 
                (
                    this.DialEndpointMethod == input.DialEndpointMethod ||
                    (this.DialEndpointMethod != null &&
                    this.DialEndpointMethod.Equals(input.DialEndpointMethod))
                ) && 
                (
                    this.EnableT38Fax == input.EnableT38Fax ||
                    (this.EnableT38Fax != null &&
                    this.EnableT38Fax.Equals(input.EnableT38Fax))
                ) && 
                (
                    this.EnableT38FaxRequest == input.EnableT38FaxRequest ||
                    (this.EnableT38FaxRequest != null &&
                    this.EnableT38FaxRequest.Equals(input.EnableT38FaxRequest))
                ) && 
                (
                    this.EnableT38Gateway == input.EnableT38Gateway ||
                    (this.EnableT38Gateway != null &&
                    this.EnableT38Gateway.Equals(input.EnableT38Gateway))
                ) && 
                (
                    this.EnableT38Passthrough == input.EnableT38Passthrough ||
                    (this.EnableT38Passthrough != null &&
                    this.EnableT38Passthrough.Equals(input.EnableT38Passthrough))
                ) && 
                (
                    this.Endpoints == input.Endpoints ||
                    this.Endpoints != null &&
                    this.Endpoints.SequenceEqual(input.Endpoints)
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.ExportBridgeVariables == input.ExportBridgeVariables ||
                    (this.ExportBridgeVariables != null &&
                    this.ExportBridgeVariables.Equals(input.ExportBridgeVariables))
                ) && 
                (
                    this.ExportVariables == input.ExportVariables ||
                    (this.ExportVariables != null &&
                    this.ExportVariables.Equals(input.ExportVariables))
                ) && 
                (
                    this.FailOnSingleReject == input.FailOnSingleReject ||
                    (this.FailOnSingleReject != null &&
                    this.FailOnSingleReject.Equals(input.FailOnSingleReject))
                ) && 
                (
                    this.ForceFax == input.ForceFax ||
                    (this.ForceFax != null &&
                    this.ForceFax.Equals(input.ForceFax))
                ) && 
                (
                    this.HoldMedia == input.HoldMedia ||
                    (this.HoldMedia != null &&
                    this.HoldMedia.Equals(input.HoldMedia))
                ) && 
                (
                    this.IgnoreCompletedElsewhere == input.IgnoreCompletedElsewhere ||
                    (this.IgnoreCompletedElsewhere != null &&
                    this.IgnoreCompletedElsewhere.Equals(input.IgnoreCompletedElsewhere))
                ) && 
                (
                    this.IgnoreEarlyMedia == input.IgnoreEarlyMedia ||
                    (this.IgnoreEarlyMedia != null &&
                    this.IgnoreEarlyMedia.Equals(input.IgnoreEarlyMedia))
                ) && 
                (
                    this.IgnoreForward == input.IgnoreForward ||
                    (this.IgnoreForward != null &&
                    this.IgnoreForward.Equals(input.IgnoreForward))
                ) && 
                (
                    this.InsertAt == input.InsertAt ||
                    (this.InsertAt != null &&
                    this.InsertAt.Equals(input.InsertAt))
                ) && 
                (
                    this.LoopbackBowout == input.LoopbackBowout ||
                    (this.LoopbackBowout != null &&
                    this.LoopbackBowout.Equals(input.LoopbackBowout))
                ) && 
                (
                    this.Media == input.Media ||
                    (this.Media != null &&
                    this.Media.Equals(input.Media))
                ) && 
                (
                    this.OutboundCalleeIDName == input.OutboundCalleeIDName ||
                    (this.OutboundCalleeIDName != null &&
                    this.OutboundCalleeIDName.Equals(input.OutboundCalleeIDName))
                ) && 
                (
                    this.OutboundCalleeIDNumber == input.OutboundCalleeIDNumber ||
                    (this.OutboundCalleeIDNumber != null &&
                    this.OutboundCalleeIDNumber.Equals(input.OutboundCalleeIDNumber))
                ) && 
                (
                    this.OutboundCallerIDName == input.OutboundCallerIDName ||
                    (this.OutboundCallerIDName != null &&
                    this.OutboundCallerIDName.Equals(input.OutboundCallerIDName))
                ) && 
                (
                    this.OutboundCallerIDNumber == input.OutboundCallerIDNumber ||
                    (this.OutboundCallerIDNumber != null &&
                    this.OutboundCallerIDNumber.Equals(input.OutboundCallerIDNumber))
                ) && 
                (
                    this.PrivacyHideName == input.PrivacyHideName ||
                    (this.PrivacyHideName != null &&
                    this.PrivacyHideName.Equals(input.PrivacyHideName))
                ) && 
                (
                    this.PrivacyHideNumber == input.PrivacyHideNumber ||
                    (this.PrivacyHideNumber != null &&
                    this.PrivacyHideNumber.Equals(input.PrivacyHideNumber))
                ) && 
                (
                    this.PrivacyMethod == input.PrivacyMethod ||
                    (this.PrivacyMethod != null &&
                    this.PrivacyMethod.Equals(input.PrivacyMethod))
                ) && 
                (
                    this.Ringback == input.Ringback ||
                    (this.Ringback != null &&
                    this.Ringback.Equals(input.Ringback))
                ) && 
                (
                    this.SIPInviteParameters == input.SIPInviteParameters ||
                    this.SIPInviteParameters != null &&
                    this.SIPInviteParameters.SequenceEqual(input.SIPInviteParameters)
                ) && 
                (
                    this.SIPTransport == input.SIPTransport ||
                    (this.SIPTransport != null &&
                    this.SIPTransport.Equals(input.SIPTransport))
                ) && 
                (
                    this.SecureRTP == input.SecureRTP ||
                    (this.SecureRTP != null &&
                    this.SecureRTP.Equals(input.SecureRTP))
                ) && 
                (
                    this.SimplifyLoopback == input.SimplifyLoopback ||
                    (this.SimplifyLoopback != null &&
                    this.SimplifyLoopback.Equals(input.SimplifyLoopback))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    (this.Timeout != null &&
                    this.Timeout.Equals(input.Timeout))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationName != null)
                    hashCode = hashCode * 59 + this.ApplicationName.GetHashCode();
                if (this.AssertedIdentityName != null)
                    hashCode = hashCode * 59 + this.AssertedIdentityName.GetHashCode();
                if (this.AssertedIdentityNumber != null)
                    hashCode = hashCode * 59 + this.AssertedIdentityNumber.GetHashCode();
                if (this.AssertedIdentityRealm != null)
                    hashCode = hashCode * 59 + this.AssertedIdentityRealm.GetHashCode();
                if (this.BLegEvents != null)
                    hashCode = hashCode * 59 + this.BLegEvents.GetHashCode();
                if (this.BridgeActions != null)
                    hashCode = hashCode * 59 + this.BridgeActions.GetHashCode();
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.CalleeIDName != null)
                    hashCode = hashCode * 59 + this.CalleeIDName.GetHashCode();
                if (this.CalleeIDNumber != null)
                    hashCode = hashCode * 59 + this.CalleeIDNumber.GetHashCode();
                if (this.CallerIDName != null)
                    hashCode = hashCode * 59 + this.CallerIDName.GetHashCode();
                if (this.CallerIDNumber != null)
                    hashCode = hashCode * 59 + this.CallerIDNumber.GetHashCode();
                if (this.ConfirmCancelTimeout != null)
                    hashCode = hashCode * 59 + this.ConfirmCancelTimeout.GetHashCode();
                if (this.ConfirmFile != null)
                    hashCode = hashCode * 59 + this.ConfirmFile.GetHashCode();
                if (this.ConfirmKey != null)
                    hashCode = hashCode * 59 + this.ConfirmKey.GetHashCode();
                if (this.ContinueAfter != null)
                    hashCode = hashCode * 59 + this.ContinueAfter.GetHashCode();
                if (this.ContinueOnFail != null)
                    hashCode = hashCode * 59 + this.ContinueOnFail.GetHashCode();
                if (this.CustomApplicationVars != null)
                    hashCode = hashCode * 59 + this.CustomApplicationVars.GetHashCode();
                if (this.CustomChannelVars != null)
                    hashCode = hashCode * 59 + this.CustomChannelVars.GetHashCode();
                if (this.CustomSIPHeaders != null)
                    hashCode = hashCode * 59 + this.CustomSIPHeaders.GetHashCode();
                if (this.DialEndpointMethod != null)
                    hashCode = hashCode * 59 + this.DialEndpointMethod.GetHashCode();
                if (this.EnableT38Fax != null)
                    hashCode = hashCode * 59 + this.EnableT38Fax.GetHashCode();
                if (this.EnableT38FaxRequest != null)
                    hashCode = hashCode * 59 + this.EnableT38FaxRequest.GetHashCode();
                if (this.EnableT38Gateway != null)
                    hashCode = hashCode * 59 + this.EnableT38Gateway.GetHashCode();
                if (this.EnableT38Passthrough != null)
                    hashCode = hashCode * 59 + this.EnableT38Passthrough.GetHashCode();
                if (this.Endpoints != null)
                    hashCode = hashCode * 59 + this.Endpoints.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.ExportBridgeVariables != null)
                    hashCode = hashCode * 59 + this.ExportBridgeVariables.GetHashCode();
                if (this.ExportVariables != null)
                    hashCode = hashCode * 59 + this.ExportVariables.GetHashCode();
                if (this.FailOnSingleReject != null)
                    hashCode = hashCode * 59 + this.FailOnSingleReject.GetHashCode();
                if (this.ForceFax != null)
                    hashCode = hashCode * 59 + this.ForceFax.GetHashCode();
                if (this.HoldMedia != null)
                    hashCode = hashCode * 59 + this.HoldMedia.GetHashCode();
                if (this.IgnoreCompletedElsewhere != null)
                    hashCode = hashCode * 59 + this.IgnoreCompletedElsewhere.GetHashCode();
                if (this.IgnoreEarlyMedia != null)
                    hashCode = hashCode * 59 + this.IgnoreEarlyMedia.GetHashCode();
                if (this.IgnoreForward != null)
                    hashCode = hashCode * 59 + this.IgnoreForward.GetHashCode();
                if (this.InsertAt != null)
                    hashCode = hashCode * 59 + this.InsertAt.GetHashCode();
                if (this.LoopbackBowout != null)
                    hashCode = hashCode * 59 + this.LoopbackBowout.GetHashCode();
                if (this.Media != null)
                    hashCode = hashCode * 59 + this.Media.GetHashCode();
                if (this.OutboundCalleeIDName != null)
                    hashCode = hashCode * 59 + this.OutboundCalleeIDName.GetHashCode();
                if (this.OutboundCalleeIDNumber != null)
                    hashCode = hashCode * 59 + this.OutboundCalleeIDNumber.GetHashCode();
                if (this.OutboundCallerIDName != null)
                    hashCode = hashCode * 59 + this.OutboundCallerIDName.GetHashCode();
                if (this.OutboundCallerIDNumber != null)
                    hashCode = hashCode * 59 + this.OutboundCallerIDNumber.GetHashCode();
                if (this.PrivacyHideName != null)
                    hashCode = hashCode * 59 + this.PrivacyHideName.GetHashCode();
                if (this.PrivacyHideNumber != null)
                    hashCode = hashCode * 59 + this.PrivacyHideNumber.GetHashCode();
                if (this.PrivacyMethod != null)
                    hashCode = hashCode * 59 + this.PrivacyMethod.GetHashCode();
                if (this.Ringback != null)
                    hashCode = hashCode * 59 + this.Ringback.GetHashCode();
                if (this.SIPInviteParameters != null)
                    hashCode = hashCode * 59 + this.SIPInviteParameters.GetHashCode();
                if (this.SIPTransport != null)
                    hashCode = hashCode * 59 + this.SIPTransport.GetHashCode();
                if (this.SecureRTP != null)
                    hashCode = hashCode * 59 + this.SecureRTP.GetHashCode();
                if (this.SimplifyLoopback != null)
                    hashCode = hashCode * 59 + this.SimplifyLoopback.GetHashCode();
                if (this.Timeout != null)
                    hashCode = hashCode * 59 + this.Timeout.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
