/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CallRecordingSource
    /// </summary>
    [DataContract]
    public partial class CallRecordingSource :  IEquatable<CallRecordingSource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallRecordingSource" /> class.
        /// </summary>
        /// <param name="any">settings for calls from any network.</param>
        /// <param name="offnet">settings for calls from offnet networks.</param>
        /// <param name="onnet">settings for calls from onnet networks.</param>
        public CallRecordingSource(CallRecordingParameters any = default(CallRecordingParameters), CallRecordingParameters offnet = default(CallRecordingParameters), CallRecordingParameters onnet = default(CallRecordingParameters))
        {
            this.Any = any;
            this.Offnet = offnet;
            this.Onnet = onnet;
        }
        
        /// <summary>
        /// settings for calls from any network
        /// </summary>
        /// <value>settings for calls from any network</value>
        [DataMember(Name="any", EmitDefaultValue=false)]
        public CallRecordingParameters Any { get; set; }

        /// <summary>
        /// settings for calls from offnet networks
        /// </summary>
        /// <value>settings for calls from offnet networks</value>
        [DataMember(Name="offnet", EmitDefaultValue=false)]
        public CallRecordingParameters Offnet { get; set; }

        /// <summary>
        /// settings for calls from onnet networks
        /// </summary>
        /// <value>settings for calls from onnet networks</value>
        [DataMember(Name="onnet", EmitDefaultValue=false)]
        public CallRecordingParameters Onnet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallRecordingSource {\n");
            sb.Append("  Any: ").Append(Any).Append("\n");
            sb.Append("  Offnet: ").Append(Offnet).Append("\n");
            sb.Append("  Onnet: ").Append(Onnet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallRecordingSource);
        }

        /// <summary>
        /// Returns true if CallRecordingSource instances are equal
        /// </summary>
        /// <param name="input">Instance of CallRecordingSource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallRecordingSource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Any == input.Any ||
                    (this.Any != null &&
                    this.Any.Equals(input.Any))
                ) && 
                (
                    this.Offnet == input.Offnet ||
                    (this.Offnet != null &&
                    this.Offnet.Equals(input.Offnet))
                ) && 
                (
                    this.Onnet == input.Onnet ||
                    (this.Onnet != null &&
                    this.Onnet.Equals(input.Onnet))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Any != null)
                    hashCode = hashCode * 59 + this.Any.GetHashCode();
                if (this.Offnet != null)
                    hashCode = hashCode * 59 + this.Offnet.GetHashCode();
                if (this.Onnet != null)
                    hashCode = hashCode * 59 + this.Onnet.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
