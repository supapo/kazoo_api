/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SIP Parameters
    /// </summary>
    [DataContract]
    public partial class DevicesSip :  IEquatable<DevicesSip>, IValidatableObject
    {
        /// <summary>
        /// The SIP request URI invite format
        /// </summary>
        /// <value>The SIP request URI invite format</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InviteFormatEnum
        {
            
            /// <summary>
            /// Enum Username for value: username
            /// </summary>
            [EnumMember(Value = "username")]
            Username = 1,
            
            /// <summary>
            /// Enum Npan for value: npan
            /// </summary>
            [EnumMember(Value = "npan")]
            Npan = 2,
            
            /// <summary>
            /// Enum _1npan for value: 1npan
            /// </summary>
            [EnumMember(Value = "1npan")]
            _1npan = 3,
            
            /// <summary>
            /// Enum E164 for value: e164
            /// </summary>
            [EnumMember(Value = "e164")]
            E164 = 4,
            
            /// <summary>
            /// Enum Route for value: route
            /// </summary>
            [EnumMember(Value = "route")]
            Route = 5,
            
            /// <summary>
            /// Enum Contact for value: contact
            /// </summary>
            [EnumMember(Value = "contact")]
            Contact = 6
        }

        /// <summary>
        /// The SIP request URI invite format
        /// </summary>
        /// <value>The SIP request URI invite format</value>
        [DataMember(Name="invite_format", EmitDefaultValue=false)]
        public InviteFormatEnum? InviteFormat { get; set; }
        /// <summary>
        /// Method of authentication
        /// </summary>
        /// <value>Method of authentication</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodEnum
        {
            
            /// <summary>
            /// Enum Password for value: password
            /// </summary>
            [EnumMember(Value = "password")]
            Password = 1,
            
            /// <summary>
            /// Enum Ip for value: ip
            /// </summary>
            [EnumMember(Value = "ip")]
            Ip = 2
        }

        /// <summary>
        /// Method of authentication
        /// </summary>
        /// <value>Method of authentication</value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public MethodEnum? Method { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesSip" /> class.
        /// </summary>
        /// <param name="customSipHeaders">A property list of SIP headers.</param>
        /// <param name="expireSeconds">The time, in seconds, sent to the provisioner for the registration period that the device should be configured with..</param>
        /// <param name="ignoreCompletedElsewhere">When set to false the phone should not consider ring group calls answered elsewhere as missed.</param>
        /// <param name="inviteFormat">The SIP request URI invite format (default to InviteFormatEnum.Contact).</param>
        /// <param name="ip">IP address for this device.</param>
        /// <param name="method">Method of authentication (default to MethodEnum.Password).</param>
        /// <param name="number">The number used if the invite format is 1npan, npan, or e164 (if not set the dialed number is used).</param>
        /// <param name="password">SIP authentication password.</param>
        /// <param name="realm">The realm this device should use, overriding the account realm. Should rarely be necessary..</param>
        /// <param name="route">The SIP URL used if the invite format is &#39;route&#39;.</param>
        /// <param name="staticRoute">Sends all inbound calls to this string (instead of dialed number or username).</param>
        /// <param name="username">SIP authentication username.</param>
        public DevicesSip(Object customSipHeaders = default(Object), int? expireSeconds = default(int?), bool? ignoreCompletedElsewhere = default(bool?), InviteFormatEnum? inviteFormat = InviteFormatEnum.Contact, string ip = default(string), MethodEnum? method = MethodEnum.Password, string number = default(string), string password = default(string), string realm = default(string), string route = default(string), string staticRoute = default(string), string username = default(string))
        {
            this.CustomSipHeaders = customSipHeaders;
            this.ExpireSeconds = expireSeconds;
            this.IgnoreCompletedElsewhere = ignoreCompletedElsewhere;
            // use default value if no "inviteFormat" provided
            if (inviteFormat == null)
            {
                this.InviteFormat = InviteFormatEnum.Contact;
            }
            else
            {
                this.InviteFormat = inviteFormat;
            }
            this.Ip = ip;
            // use default value if no "method" provided
            if (method == null)
            {
                this.Method = MethodEnum.Password;
            }
            else
            {
                this.Method = method;
            }
            this.Number = number;
            this.Password = password;
            this.Realm = realm;
            this.Route = route;
            this.StaticRoute = staticRoute;
            this.Username = username;
        }
        
        /// <summary>
        /// A property list of SIP headers
        /// </summary>
        /// <value>A property list of SIP headers</value>
        [DataMember(Name="custom_sip_headers", EmitDefaultValue=false)]
        public Object CustomSipHeaders { get; set; }

        /// <summary>
        /// The time, in seconds, sent to the provisioner for the registration period that the device should be configured with.
        /// </summary>
        /// <value>The time, in seconds, sent to the provisioner for the registration period that the device should be configured with.</value>
        [DataMember(Name="expire_seconds", EmitDefaultValue=false)]
        public int? ExpireSeconds { get; set; }

        /// <summary>
        /// When set to false the phone should not consider ring group calls answered elsewhere as missed
        /// </summary>
        /// <value>When set to false the phone should not consider ring group calls answered elsewhere as missed</value>
        [DataMember(Name="ignore_completed_elsewhere", EmitDefaultValue=false)]
        public bool? IgnoreCompletedElsewhere { get; set; }


        /// <summary>
        /// IP address for this device
        /// </summary>
        /// <value>IP address for this device</value>
        [DataMember(Name="ip", EmitDefaultValue=false)]
        public string Ip { get; set; }


        /// <summary>
        /// The number used if the invite format is 1npan, npan, or e164 (if not set the dialed number is used)
        /// </summary>
        /// <value>The number used if the invite format is 1npan, npan, or e164 (if not set the dialed number is used)</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// SIP authentication password
        /// </summary>
        /// <value>SIP authentication password</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// The realm this device should use, overriding the account realm. Should rarely be necessary.
        /// </summary>
        /// <value>The realm this device should use, overriding the account realm. Should rarely be necessary.</value>
        [DataMember(Name="realm", EmitDefaultValue=false)]
        public string Realm { get; set; }

        /// <summary>
        /// The SIP URL used if the invite format is &#39;route&#39;
        /// </summary>
        /// <value>The SIP URL used if the invite format is &#39;route&#39;</value>
        [DataMember(Name="route", EmitDefaultValue=false)]
        public string Route { get; set; }

        /// <summary>
        /// Sends all inbound calls to this string (instead of dialed number or username)
        /// </summary>
        /// <value>Sends all inbound calls to this string (instead of dialed number or username)</value>
        [DataMember(Name="static_route", EmitDefaultValue=false)]
        public string StaticRoute { get; set; }

        /// <summary>
        /// SIP authentication username
        /// </summary>
        /// <value>SIP authentication username</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DevicesSip {\n");
            sb.Append("  CustomSipHeaders: ").Append(CustomSipHeaders).Append("\n");
            sb.Append("  ExpireSeconds: ").Append(ExpireSeconds).Append("\n");
            sb.Append("  IgnoreCompletedElsewhere: ").Append(IgnoreCompletedElsewhere).Append("\n");
            sb.Append("  InviteFormat: ").Append(InviteFormat).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Realm: ").Append(Realm).Append("\n");
            sb.Append("  Route: ").Append(Route).Append("\n");
            sb.Append("  StaticRoute: ").Append(StaticRoute).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DevicesSip);
        }

        /// <summary>
        /// Returns true if DevicesSip instances are equal
        /// </summary>
        /// <param name="input">Instance of DevicesSip to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DevicesSip input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomSipHeaders == input.CustomSipHeaders ||
                    (this.CustomSipHeaders != null &&
                    this.CustomSipHeaders.Equals(input.CustomSipHeaders))
                ) && 
                (
                    this.ExpireSeconds == input.ExpireSeconds ||
                    (this.ExpireSeconds != null &&
                    this.ExpireSeconds.Equals(input.ExpireSeconds))
                ) && 
                (
                    this.IgnoreCompletedElsewhere == input.IgnoreCompletedElsewhere ||
                    (this.IgnoreCompletedElsewhere != null &&
                    this.IgnoreCompletedElsewhere.Equals(input.IgnoreCompletedElsewhere))
                ) && 
                (
                    this.InviteFormat == input.InviteFormat ||
                    (this.InviteFormat != null &&
                    this.InviteFormat.Equals(input.InviteFormat))
                ) && 
                (
                    this.Ip == input.Ip ||
                    (this.Ip != null &&
                    this.Ip.Equals(input.Ip))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Realm == input.Realm ||
                    (this.Realm != null &&
                    this.Realm.Equals(input.Realm))
                ) && 
                (
                    this.Route == input.Route ||
                    (this.Route != null &&
                    this.Route.Equals(input.Route))
                ) && 
                (
                    this.StaticRoute == input.StaticRoute ||
                    (this.StaticRoute != null &&
                    this.StaticRoute.Equals(input.StaticRoute))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomSipHeaders != null)
                    hashCode = hashCode * 59 + this.CustomSipHeaders.GetHashCode();
                if (this.ExpireSeconds != null)
                    hashCode = hashCode * 59 + this.ExpireSeconds.GetHashCode();
                if (this.IgnoreCompletedElsewhere != null)
                    hashCode = hashCode * 59 + this.IgnoreCompletedElsewhere.GetHashCode();
                if (this.InviteFormat != null)
                    hashCode = hashCode * 59 + this.InviteFormat.GetHashCode();
                if (this.Ip != null)
                    hashCode = hashCode * 59 + this.Ip.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Realm != null)
                    hashCode = hashCode * 59 + this.Realm.GetHashCode();
                if (this.Route != null)
                    hashCode = hashCode * 59 + this.Route.GetHashCode();
                if (this.StaticRoute != null)
                    hashCode = hashCode * 59 + this.StaticRoute.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Password (string) maxLength
            if(this.Password != null && this.Password.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Password, length must be less than 32.", new [] { "Password" });
            }

            // Password (string) minLength
            if(this.Password != null && this.Password.Length < 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Password, length must be greater than 5.", new [] { "Password" });
            }

            // Realm (string) maxLength
            if(this.Realm != null && this.Realm.Length > 253)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Realm, length must be less than 253.", new [] { "Realm" });
            }

            // Realm (string) minLength
            if(this.Realm != null && this.Realm.Length < 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Realm, length must be greater than 4.", new [] { "Realm" });
            }

            // Realm (string) pattern
            Regex regexRealm = new Regex(@"^[.\\w_-]+$", RegexOptions.CultureInvariant);
            if (false == regexRealm.Match(this.Realm).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Realm, must match a pattern of " + regexRealm, new [] { "Realm" });
            }

            // Username (string) maxLength
            if(this.Username != null && this.Username.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Username, length must be less than 32.", new [] { "Username" });
            }

            // Username (string) minLength
            if(this.Username != null && this.Username.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Username, length must be greater than 2.", new [] { "Username" });
            }

            yield break;
        }
    }

}
