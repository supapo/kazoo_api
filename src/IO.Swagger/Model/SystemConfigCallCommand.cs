/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for call_command system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigCallCommand :  IEquatable<SystemConfigCallCommand>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigCallCommand" /> class.
        /// </summary>
        /// <param name="applicationTimeout">call_command application timeout.</param>
        /// <param name="bridgeTimeoutExtendedMs">call_command extended bridge timeout in ms.</param>
        /// <param name="collectTimeout">call_command collect timeout.</param>
        /// <param name="digitTimeout">call_command digit timeout.</param>
        /// <param name="exportBridgeVariables">call_command export_bridge_variables.</param>
        /// <param name="interdigitTimeout">call_command interdigit timeout.</param>
        /// <param name="messageTimeout">call_command message timeout.</param>
        /// <param name="reservedCcvKeys">call_command reserved_ccv_keys.</param>
        /// <param name="unknownCidName">the value to use when a caller ID name is required but unknown (default to &quot;unknown&quot;).</param>
        public SystemConfigCallCommand(int? applicationTimeout = default(int?), int? bridgeTimeoutExtendedMs = default(int?), int? collectTimeout = default(int?), int? digitTimeout = default(int?), List<string> exportBridgeVariables = default(List<string>), int? interdigitTimeout = default(int?), int? messageTimeout = default(int?), List<string> reservedCcvKeys = default(List<string>), string unknownCidName = "unknown")
        {
            this.ApplicationTimeout = applicationTimeout;
            this.BridgeTimeoutExtendedMs = bridgeTimeoutExtendedMs;
            this.CollectTimeout = collectTimeout;
            this.DigitTimeout = digitTimeout;
            this.ExportBridgeVariables = exportBridgeVariables;
            this.InterdigitTimeout = interdigitTimeout;
            this.MessageTimeout = messageTimeout;
            this.ReservedCcvKeys = reservedCcvKeys;
            // use default value if no "unknownCidName" provided
            if (unknownCidName == null)
            {
                this.UnknownCidName = "unknown";
            }
            else
            {
                this.UnknownCidName = unknownCidName;
            }
        }
        
        /// <summary>
        /// call_command application timeout
        /// </summary>
        /// <value>call_command application timeout</value>
        [DataMember(Name="application_timeout", EmitDefaultValue=false)]
        public int? ApplicationTimeout { get; set; }

        /// <summary>
        /// call_command extended bridge timeout in ms
        /// </summary>
        /// <value>call_command extended bridge timeout in ms</value>
        [DataMember(Name="bridge_timeout_extended_ms", EmitDefaultValue=false)]
        public int? BridgeTimeoutExtendedMs { get; set; }

        /// <summary>
        /// call_command collect timeout
        /// </summary>
        /// <value>call_command collect timeout</value>
        [DataMember(Name="collect_timeout", EmitDefaultValue=false)]
        public int? CollectTimeout { get; set; }

        /// <summary>
        /// call_command digit timeout
        /// </summary>
        /// <value>call_command digit timeout</value>
        [DataMember(Name="digit_timeout", EmitDefaultValue=false)]
        public int? DigitTimeout { get; set; }

        /// <summary>
        /// call_command export_bridge_variables
        /// </summary>
        /// <value>call_command export_bridge_variables</value>
        [DataMember(Name="export_bridge_variables", EmitDefaultValue=false)]
        public List<string> ExportBridgeVariables { get; set; }

        /// <summary>
        /// call_command interdigit timeout
        /// </summary>
        /// <value>call_command interdigit timeout</value>
        [DataMember(Name="interdigit_timeout", EmitDefaultValue=false)]
        public int? InterdigitTimeout { get; set; }

        /// <summary>
        /// call_command message timeout
        /// </summary>
        /// <value>call_command message timeout</value>
        [DataMember(Name="message_timeout", EmitDefaultValue=false)]
        public int? MessageTimeout { get; set; }

        /// <summary>
        /// call_command reserved_ccv_keys
        /// </summary>
        /// <value>call_command reserved_ccv_keys</value>
        [DataMember(Name="reserved_ccv_keys", EmitDefaultValue=false)]
        public List<string> ReservedCcvKeys { get; set; }

        /// <summary>
        /// the value to use when a caller ID name is required but unknown
        /// </summary>
        /// <value>the value to use when a caller ID name is required but unknown</value>
        [DataMember(Name="unknown_cid_name", EmitDefaultValue=false)]
        public string UnknownCidName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigCallCommand {\n");
            sb.Append("  ApplicationTimeout: ").Append(ApplicationTimeout).Append("\n");
            sb.Append("  BridgeTimeoutExtendedMs: ").Append(BridgeTimeoutExtendedMs).Append("\n");
            sb.Append("  CollectTimeout: ").Append(CollectTimeout).Append("\n");
            sb.Append("  DigitTimeout: ").Append(DigitTimeout).Append("\n");
            sb.Append("  ExportBridgeVariables: ").Append(ExportBridgeVariables).Append("\n");
            sb.Append("  InterdigitTimeout: ").Append(InterdigitTimeout).Append("\n");
            sb.Append("  MessageTimeout: ").Append(MessageTimeout).Append("\n");
            sb.Append("  ReservedCcvKeys: ").Append(ReservedCcvKeys).Append("\n");
            sb.Append("  UnknownCidName: ").Append(UnknownCidName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigCallCommand);
        }

        /// <summary>
        /// Returns true if SystemConfigCallCommand instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigCallCommand to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigCallCommand input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationTimeout == input.ApplicationTimeout ||
                    (this.ApplicationTimeout != null &&
                    this.ApplicationTimeout.Equals(input.ApplicationTimeout))
                ) && 
                (
                    this.BridgeTimeoutExtendedMs == input.BridgeTimeoutExtendedMs ||
                    (this.BridgeTimeoutExtendedMs != null &&
                    this.BridgeTimeoutExtendedMs.Equals(input.BridgeTimeoutExtendedMs))
                ) && 
                (
                    this.CollectTimeout == input.CollectTimeout ||
                    (this.CollectTimeout != null &&
                    this.CollectTimeout.Equals(input.CollectTimeout))
                ) && 
                (
                    this.DigitTimeout == input.DigitTimeout ||
                    (this.DigitTimeout != null &&
                    this.DigitTimeout.Equals(input.DigitTimeout))
                ) && 
                (
                    this.ExportBridgeVariables == input.ExportBridgeVariables ||
                    this.ExportBridgeVariables != null &&
                    this.ExportBridgeVariables.SequenceEqual(input.ExportBridgeVariables)
                ) && 
                (
                    this.InterdigitTimeout == input.InterdigitTimeout ||
                    (this.InterdigitTimeout != null &&
                    this.InterdigitTimeout.Equals(input.InterdigitTimeout))
                ) && 
                (
                    this.MessageTimeout == input.MessageTimeout ||
                    (this.MessageTimeout != null &&
                    this.MessageTimeout.Equals(input.MessageTimeout))
                ) && 
                (
                    this.ReservedCcvKeys == input.ReservedCcvKeys ||
                    this.ReservedCcvKeys != null &&
                    this.ReservedCcvKeys.SequenceEqual(input.ReservedCcvKeys)
                ) && 
                (
                    this.UnknownCidName == input.UnknownCidName ||
                    (this.UnknownCidName != null &&
                    this.UnknownCidName.Equals(input.UnknownCidName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationTimeout != null)
                    hashCode = hashCode * 59 + this.ApplicationTimeout.GetHashCode();
                if (this.BridgeTimeoutExtendedMs != null)
                    hashCode = hashCode * 59 + this.BridgeTimeoutExtendedMs.GetHashCode();
                if (this.CollectTimeout != null)
                    hashCode = hashCode * 59 + this.CollectTimeout.GetHashCode();
                if (this.DigitTimeout != null)
                    hashCode = hashCode * 59 + this.DigitTimeout.GetHashCode();
                if (this.ExportBridgeVariables != null)
                    hashCode = hashCode * 59 + this.ExportBridgeVariables.GetHashCode();
                if (this.InterdigitTimeout != null)
                    hashCode = hashCode * 59 + this.InterdigitTimeout.GetHashCode();
                if (this.MessageTimeout != null)
                    hashCode = hashCode * 59 + this.MessageTimeout.GetHashCode();
                if (this.ReservedCcvKeys != null)
                    hashCode = hashCode * 59 + this.ReservedCcvKeys.GetHashCode();
                if (this.UnknownCidName != null)
                    hashCode = hashCode * 59 + this.UnknownCidName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
