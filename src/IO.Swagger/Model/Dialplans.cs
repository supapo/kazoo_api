/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Permit local dialing by converting the dialed number to a routable form
    /// </summary>
    [DataContract]
    public partial class Dialplans : Dictionary<String, Object>,  IEquatable<Dialplans>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Dialplans" /> class.
        /// </summary>
        /// <param name="system">List of system dial plans.</param>
        public Dialplans(List<string> system = default(List<string>)) : base()
        {
            this.System = system;
        }
        
        /// <summary>
        /// List of system dial plans
        /// </summary>
        /// <value>List of system dial plans</value>
        [DataMember(Name="system", EmitDefaultValue=false)]
        public List<string> System { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Dialplans {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  System: ").Append(System).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Dialplans);
        }

        /// <summary>
        /// Returns true if Dialplans instances are equal
        /// </summary>
        /// <param name="input">Instance of Dialplans to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Dialplans input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.System == input.System ||
                    this.System != null &&
                    this.System.SequenceEqual(input.System)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.System != null)
                    hashCode = hashCode * 59 + this.System.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
