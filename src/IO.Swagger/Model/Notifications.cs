/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Notifications templates
    /// </summary>
    [DataContract]
    public partial class Notifications :  IEquatable<Notifications>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Notifications" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Notifications() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Notifications" /> class.
        /// </summary>
        /// <param name="bcc">bcc.</param>
        /// <param name="category">Category of the template, for grouping purposes.</param>
        /// <param name="cc">cc.</param>
        /// <param name="enabled">Enable notification (default to true).</param>
        /// <param name="friendlyName">Friendly name of the template.</param>
        /// <param name="from">From: email address (required).</param>
        /// <param name="macros">macros.</param>
        /// <param name="replyTo">Reply-To: email address.</param>
        /// <param name="subject">Email subject (required).</param>
        /// <param name="templateCharset">templateCharset (default to &quot;utf-8&quot;).</param>
        /// <param name="to">to (required).</param>
        public Notifications(NotificationsBcc bcc = default(NotificationsBcc), string category = default(string), NotificationsCc cc = default(NotificationsCc), bool? enabled = true, string friendlyName = default(string), string from = default(string), Object macros = default(Object), string replyTo = default(string), string subject = default(string), string templateCharset = "utf-8", NotificationsTo to = default(NotificationsTo))
        {
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new InvalidDataException("from is a required property for Notifications and cannot be null");
            }
            else
            {
                this.From = from;
            }
            // to ensure "subject" is required (not null)
            if (subject == null)
            {
                throw new InvalidDataException("subject is a required property for Notifications and cannot be null");
            }
            else
            {
                this.Subject = subject;
            }
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new InvalidDataException("to is a required property for Notifications and cannot be null");
            }
            else
            {
                this.To = to;
            }
            this.Bcc = bcc;
            this.Category = category;
            this.Cc = cc;
            // use default value if no "enabled" provided
            if (enabled == null)
            {
                this.Enabled = true;
            }
            else
            {
                this.Enabled = enabled;
            }
            this.FriendlyName = friendlyName;
            this.Macros = macros;
            this.ReplyTo = replyTo;
            // use default value if no "templateCharset" provided
            if (templateCharset == null)
            {
                this.TemplateCharset = "utf-8";
            }
            else
            {
                this.TemplateCharset = templateCharset;
            }
        }
        
        /// <summary>
        /// Gets or Sets Bcc
        /// </summary>
        [DataMember(Name="bcc", EmitDefaultValue=false)]
        public NotificationsBcc Bcc { get; set; }

        /// <summary>
        /// Category of the template, for grouping purposes
        /// </summary>
        /// <value>Category of the template, for grouping purposes</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets Cc
        /// </summary>
        [DataMember(Name="cc", EmitDefaultValue=false)]
        public NotificationsCc Cc { get; set; }

        /// <summary>
        /// Enable notification
        /// </summary>
        /// <value>Enable notification</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Friendly name of the template
        /// </summary>
        /// <value>Friendly name of the template</value>
        [DataMember(Name="friendly_name", EmitDefaultValue=false)]
        public string FriendlyName { get; set; }

        /// <summary>
        /// From: email address
        /// </summary>
        /// <value>From: email address</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// Gets or Sets Macros
        /// </summary>
        [DataMember(Name="macros", EmitDefaultValue=false)]
        public Object Macros { get; set; }

        /// <summary>
        /// Reply-To: email address
        /// </summary>
        /// <value>Reply-To: email address</value>
        [DataMember(Name="reply_to", EmitDefaultValue=false)]
        public string ReplyTo { get; set; }

        /// <summary>
        /// Email subject
        /// </summary>
        /// <value>Email subject</value>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or Sets TemplateCharset
        /// </summary>
        [DataMember(Name="template_charset", EmitDefaultValue=false)]
        public string TemplateCharset { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public NotificationsTo To { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Notifications {\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  FriendlyName: ").Append(FriendlyName).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Macros: ").Append(Macros).Append("\n");
            sb.Append("  ReplyTo: ").Append(ReplyTo).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  TemplateCharset: ").Append(TemplateCharset).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Notifications);
        }

        /// <summary>
        /// Returns true if Notifications instances are equal
        /// </summary>
        /// <param name="input">Instance of Notifications to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Notifications input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bcc == input.Bcc ||
                    (this.Bcc != null &&
                    this.Bcc.Equals(input.Bcc))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Cc == input.Cc ||
                    (this.Cc != null &&
                    this.Cc.Equals(input.Cc))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.FriendlyName == input.FriendlyName ||
                    (this.FriendlyName != null &&
                    this.FriendlyName.Equals(input.FriendlyName))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.Macros == input.Macros ||
                    (this.Macros != null &&
                    this.Macros.Equals(input.Macros))
                ) && 
                (
                    this.ReplyTo == input.ReplyTo ||
                    (this.ReplyTo != null &&
                    this.ReplyTo.Equals(input.ReplyTo))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.TemplateCharset == input.TemplateCharset ||
                    (this.TemplateCharset != null &&
                    this.TemplateCharset.Equals(input.TemplateCharset))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bcc != null)
                    hashCode = hashCode * 59 + this.Bcc.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Cc != null)
                    hashCode = hashCode * 59 + this.Cc.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.FriendlyName != null)
                    hashCode = hashCode * 59 + this.FriendlyName.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.Macros != null)
                    hashCode = hashCode * 59 + this.Macros.GetHashCode();
                if (this.ReplyTo != null)
                    hashCode = hashCode * 59 + this.ReplyTo.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.TemplateCharset != null)
                    hashCode = hashCode * 59 + this.TemplateCharset.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Category (string) minLength
            if(this.Category != null && this.Category.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Category, length must be greater than 1.", new [] { "Category" });
            }

            // FriendlyName (string) minLength
            if(this.FriendlyName != null && this.FriendlyName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FriendlyName, length must be greater than 1.", new [] { "FriendlyName" });
            }

            // Subject (string) maxLength
            if(this.Subject != null && this.Subject.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Subject, length must be less than 200.", new [] { "Subject" });
            }

            // Subject (string) minLength
            if(this.Subject != null && this.Subject.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Subject, length must be greater than 1.", new [] { "Subject" });
            }

            // TemplateCharset (string) minLength
            if(this.TemplateCharset != null && this.TemplateCharset.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TemplateCharset, length must be greater than 1.", new [] { "TemplateCharset" });
            }

            yield break;
        }
    }

}
