/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for crossbar.freeswitch system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigCrossbarFreeswitch :  IEquatable<SystemConfigCrossbarFreeswitch>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigCrossbarFreeswitch" /> class.
        /// </summary>
        /// <param name="filesToInclude">crossbar.freeswitch files to include.</param>
        /// <param name="offlineConfigurationKey">crossbar.freeswitch offline configuration key.</param>
        /// <param name="realmTemplatesToProcess">crossbar.freeswitch realm templates to process.</param>
        /// <param name="templatesToProcess">crossbar.freeswitch templates to process.</param>
        /// <param name="workDir">crossbar.freeswitch work dir (default to &quot;/tmp/&quot;).</param>
        public SystemConfigCrossbarFreeswitch(List<string> filesToInclude = default(List<string>), string offlineConfigurationKey = default(string), List<string> realmTemplatesToProcess = default(List<string>), List<string> templatesToProcess = default(List<string>), string workDir = "/tmp/")
        {
            this.FilesToInclude = filesToInclude;
            this.OfflineConfigurationKey = offlineConfigurationKey;
            this.RealmTemplatesToProcess = realmTemplatesToProcess;
            this.TemplatesToProcess = templatesToProcess;
            // use default value if no "workDir" provided
            if (workDir == null)
            {
                this.WorkDir = "/tmp/";
            }
            else
            {
                this.WorkDir = workDir;
            }
        }
        
        /// <summary>
        /// crossbar.freeswitch files to include
        /// </summary>
        /// <value>crossbar.freeswitch files to include</value>
        [DataMember(Name="files_to_include", EmitDefaultValue=false)]
        public List<string> FilesToInclude { get; set; }

        /// <summary>
        /// crossbar.freeswitch offline configuration key
        /// </summary>
        /// <value>crossbar.freeswitch offline configuration key</value>
        [DataMember(Name="offline_configuration_key", EmitDefaultValue=false)]
        public string OfflineConfigurationKey { get; set; }

        /// <summary>
        /// crossbar.freeswitch realm templates to process
        /// </summary>
        /// <value>crossbar.freeswitch realm templates to process</value>
        [DataMember(Name="realm_templates_to_process", EmitDefaultValue=false)]
        public List<string> RealmTemplatesToProcess { get; set; }

        /// <summary>
        /// crossbar.freeswitch templates to process
        /// </summary>
        /// <value>crossbar.freeswitch templates to process</value>
        [DataMember(Name="templates_to_process", EmitDefaultValue=false)]
        public List<string> TemplatesToProcess { get; set; }

        /// <summary>
        /// crossbar.freeswitch work dir
        /// </summary>
        /// <value>crossbar.freeswitch work dir</value>
        [DataMember(Name="work_dir", EmitDefaultValue=false)]
        public string WorkDir { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigCrossbarFreeswitch {\n");
            sb.Append("  FilesToInclude: ").Append(FilesToInclude).Append("\n");
            sb.Append("  OfflineConfigurationKey: ").Append(OfflineConfigurationKey).Append("\n");
            sb.Append("  RealmTemplatesToProcess: ").Append(RealmTemplatesToProcess).Append("\n");
            sb.Append("  TemplatesToProcess: ").Append(TemplatesToProcess).Append("\n");
            sb.Append("  WorkDir: ").Append(WorkDir).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigCrossbarFreeswitch);
        }

        /// <summary>
        /// Returns true if SystemConfigCrossbarFreeswitch instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigCrossbarFreeswitch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigCrossbarFreeswitch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FilesToInclude == input.FilesToInclude ||
                    this.FilesToInclude != null &&
                    this.FilesToInclude.SequenceEqual(input.FilesToInclude)
                ) && 
                (
                    this.OfflineConfigurationKey == input.OfflineConfigurationKey ||
                    (this.OfflineConfigurationKey != null &&
                    this.OfflineConfigurationKey.Equals(input.OfflineConfigurationKey))
                ) && 
                (
                    this.RealmTemplatesToProcess == input.RealmTemplatesToProcess ||
                    this.RealmTemplatesToProcess != null &&
                    this.RealmTemplatesToProcess.SequenceEqual(input.RealmTemplatesToProcess)
                ) && 
                (
                    this.TemplatesToProcess == input.TemplatesToProcess ||
                    this.TemplatesToProcess != null &&
                    this.TemplatesToProcess.SequenceEqual(input.TemplatesToProcess)
                ) && 
                (
                    this.WorkDir == input.WorkDir ||
                    (this.WorkDir != null &&
                    this.WorkDir.Equals(input.WorkDir))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FilesToInclude != null)
                    hashCode = hashCode * 59 + this.FilesToInclude.GetHashCode();
                if (this.OfflineConfigurationKey != null)
                    hashCode = hashCode * 59 + this.OfflineConfigurationKey.GetHashCode();
                if (this.RealmTemplatesToProcess != null)
                    hashCode = hashCode * 59 + this.RealmTemplatesToProcess.GetHashCode();
                if (this.TemplatesToProcess != null)
                    hashCode = hashCode * 59 + this.TemplatesToProcess.GetHashCode();
                if (this.WorkDir != null)
                    hashCode = hashCode * 59 + this.WorkDir.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
