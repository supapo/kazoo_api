/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DTMF keys for voicemail callflow module
    /// </summary>
    [DataContract]
    public partial class VoicemailKeys :  IEquatable<VoicemailKeys>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VoicemailKeys" /> class.
        /// </summary>
        /// <param name="configure">DTMF key which will enter the config menu when pressed at the main menu.</param>
        /// <param name="_continue">DTMF key which will continue to the next callflow element when pressed at the greeting or instructions menu.</param>
        /// <param name="delete">DTMF key which will delete the voicemail message when pressed at the post playback menu.</param>
        /// <param name="exit">DTMF key which will exit the main menu when pressed.</param>
        /// <param name="fastforward">DTMF key which will seek the playback forward for seek_duration_ms ms.</param>
        /// <param name="hearNew">DTMF key which will play new voicemail messages when pressed at the main menu.</param>
        /// <param name="hearSaved">DTMF key which will play saved voicemail messages when pressed at the main menu.</param>
        /// <param name="keep">DTMF key which will keep the voicemail message when pressed at the post playback menu.</param>
        /// <param name="listen">DTMF key which will listen to the recording when pressed at the recording review menu.</param>
        /// <param name="login">DTMF key which will log into the voicemail box when pressed at the compose voicemail menu.</param>
        /// <param name="next">DTMF key which will go to the next voicemail message when pressed at the post playback menu.</param>
        /// <param name="_operator">DTMF key which will call the operator when pressed.</param>
        /// <param name="prev">DTMF key which will go to the previous voicemail message when pressed at the post playback menu.</param>
        /// <param name="recName">DTMF key which will enter the record the voicemail box name when pressed at the config menu.</param>
        /// <param name="recUnavailable">DTMF key which will enter the record the unavailable greeting when pressed at the config menu.</param>
        /// <param name="record">DTMF key which will record when pressed at the recording review menu.</param>
        /// <param name="replay">DTMF key which will replay the voicemail message when pressed at the post playback menu.</param>
        /// <param name="returnMain">DTMF key which will return to the main menu when pressed at the config menu.</param>
        /// <param name="rewind">DTMF key which will seek the playback backward for seek_duration_ms ms.</param>
        /// <param name="save">DTMF key which will save when pressed at the recording review menu.</param>
        /// <param name="setPin">DTMF key which will allow the user to set their pin when pressed at the config menu.</param>
        public VoicemailKeys(VoicemailKeysDtmfKey configure = default(VoicemailKeysDtmfKey), VoicemailKeysDtmfKey _continue = default(VoicemailKeysDtmfKey), VoicemailKeysDtmfKey delete = default(VoicemailKeysDtmfKey), VoicemailKeysDtmfKey exit = default(VoicemailKeysDtmfKey), VoicemailKeysDtmfKey fastforward = default(VoicemailKeysDtmfKey), VoicemailKeysDtmfKey hearNew = default(VoicemailKeysDtmfKey), VoicemailKeysDtmfKey hearSaved = default(VoicemailKeysDtmfKey), VoicemailKeysDtmfKey keep = default(VoicemailKeysDtmfKey), VoicemailKeysDtmfKey listen = default(VoicemailKeysDtmfKey), VoicemailKeysDtmfKey login = default(VoicemailKeysDtmfKey), VoicemailKeysDtmfKey next = default(VoicemailKeysDtmfKey), VoicemailKeysDtmfKey _operator = default(VoicemailKeysDtmfKey), VoicemailKeysDtmfKey prev = default(VoicemailKeysDtmfKey), VoicemailKeysDtmfKey recName = default(VoicemailKeysDtmfKey), VoicemailKeysDtmfKey recUnavailable = default(VoicemailKeysDtmfKey), VoicemailKeysDtmfKey record = default(VoicemailKeysDtmfKey), VoicemailKeysDtmfKey replay = default(VoicemailKeysDtmfKey), VoicemailKeysDtmfKey returnMain = default(VoicemailKeysDtmfKey), VoicemailKeysDtmfKey rewind = default(VoicemailKeysDtmfKey), VoicemailKeysDtmfKey save = default(VoicemailKeysDtmfKey), VoicemailKeysDtmfKey setPin = default(VoicemailKeysDtmfKey))
        {
            this.Configure = configure;
            this.Continue = _continue;
            this.Delete = delete;
            this.Exit = exit;
            this.Fastforward = fastforward;
            this.HearNew = hearNew;
            this.HearSaved = hearSaved;
            this.Keep = keep;
            this.Listen = listen;
            this.Login = login;
            this.Next = next;
            this.Operator = _operator;
            this.Prev = prev;
            this.RecName = recName;
            this.RecUnavailable = recUnavailable;
            this.Record = record;
            this.Replay = replay;
            this.ReturnMain = returnMain;
            this.Rewind = rewind;
            this.Save = save;
            this.SetPin = setPin;
        }
        
        /// <summary>
        /// DTMF key which will enter the config menu when pressed at the main menu
        /// </summary>
        /// <value>DTMF key which will enter the config menu when pressed at the main menu</value>
        [DataMember(Name="configure", EmitDefaultValue=false)]
        public VoicemailKeysDtmfKey Configure { get; set; }

        /// <summary>
        /// DTMF key which will continue to the next callflow element when pressed at the greeting or instructions menu
        /// </summary>
        /// <value>DTMF key which will continue to the next callflow element when pressed at the greeting or instructions menu</value>
        [DataMember(Name="continue", EmitDefaultValue=false)]
        public VoicemailKeysDtmfKey Continue { get; set; }

        /// <summary>
        /// DTMF key which will delete the voicemail message when pressed at the post playback menu
        /// </summary>
        /// <value>DTMF key which will delete the voicemail message when pressed at the post playback menu</value>
        [DataMember(Name="delete", EmitDefaultValue=false)]
        public VoicemailKeysDtmfKey Delete { get; set; }

        /// <summary>
        /// DTMF key which will exit the main menu when pressed
        /// </summary>
        /// <value>DTMF key which will exit the main menu when pressed</value>
        [DataMember(Name="exit", EmitDefaultValue=false)]
        public VoicemailKeysDtmfKey Exit { get; set; }

        /// <summary>
        /// DTMF key which will seek the playback forward for seek_duration_ms ms
        /// </summary>
        /// <value>DTMF key which will seek the playback forward for seek_duration_ms ms</value>
        [DataMember(Name="fastforward", EmitDefaultValue=false)]
        public VoicemailKeysDtmfKey Fastforward { get; set; }

        /// <summary>
        /// DTMF key which will play new voicemail messages when pressed at the main menu
        /// </summary>
        /// <value>DTMF key which will play new voicemail messages when pressed at the main menu</value>
        [DataMember(Name="hear_new", EmitDefaultValue=false)]
        public VoicemailKeysDtmfKey HearNew { get; set; }

        /// <summary>
        /// DTMF key which will play saved voicemail messages when pressed at the main menu
        /// </summary>
        /// <value>DTMF key which will play saved voicemail messages when pressed at the main menu</value>
        [DataMember(Name="hear_saved", EmitDefaultValue=false)]
        public VoicemailKeysDtmfKey HearSaved { get; set; }

        /// <summary>
        /// DTMF key which will keep the voicemail message when pressed at the post playback menu
        /// </summary>
        /// <value>DTMF key which will keep the voicemail message when pressed at the post playback menu</value>
        [DataMember(Name="keep", EmitDefaultValue=false)]
        public VoicemailKeysDtmfKey Keep { get; set; }

        /// <summary>
        /// DTMF key which will listen to the recording when pressed at the recording review menu
        /// </summary>
        /// <value>DTMF key which will listen to the recording when pressed at the recording review menu</value>
        [DataMember(Name="listen", EmitDefaultValue=false)]
        public VoicemailKeysDtmfKey Listen { get; set; }

        /// <summary>
        /// DTMF key which will log into the voicemail box when pressed at the compose voicemail menu
        /// </summary>
        /// <value>DTMF key which will log into the voicemail box when pressed at the compose voicemail menu</value>
        [DataMember(Name="login", EmitDefaultValue=false)]
        public VoicemailKeysDtmfKey Login { get; set; }

        /// <summary>
        /// DTMF key which will go to the next voicemail message when pressed at the post playback menu
        /// </summary>
        /// <value>DTMF key which will go to the next voicemail message when pressed at the post playback menu</value>
        [DataMember(Name="next", EmitDefaultValue=false)]
        public VoicemailKeysDtmfKey Next { get; set; }

        /// <summary>
        /// DTMF key which will call the operator when pressed
        /// </summary>
        /// <value>DTMF key which will call the operator when pressed</value>
        [DataMember(Name="operator", EmitDefaultValue=false)]
        public VoicemailKeysDtmfKey Operator { get; set; }

        /// <summary>
        /// DTMF key which will go to the previous voicemail message when pressed at the post playback menu
        /// </summary>
        /// <value>DTMF key which will go to the previous voicemail message when pressed at the post playback menu</value>
        [DataMember(Name="prev", EmitDefaultValue=false)]
        public VoicemailKeysDtmfKey Prev { get; set; }

        /// <summary>
        /// DTMF key which will enter the record the voicemail box name when pressed at the config menu
        /// </summary>
        /// <value>DTMF key which will enter the record the voicemail box name when pressed at the config menu</value>
        [DataMember(Name="rec_name", EmitDefaultValue=false)]
        public VoicemailKeysDtmfKey RecName { get; set; }

        /// <summary>
        /// DTMF key which will enter the record the unavailable greeting when pressed at the config menu
        /// </summary>
        /// <value>DTMF key which will enter the record the unavailable greeting when pressed at the config menu</value>
        [DataMember(Name="rec_unavailable", EmitDefaultValue=false)]
        public VoicemailKeysDtmfKey RecUnavailable { get; set; }

        /// <summary>
        /// DTMF key which will record when pressed at the recording review menu
        /// </summary>
        /// <value>DTMF key which will record when pressed at the recording review menu</value>
        [DataMember(Name="record", EmitDefaultValue=false)]
        public VoicemailKeysDtmfKey Record { get; set; }

        /// <summary>
        /// DTMF key which will replay the voicemail message when pressed at the post playback menu
        /// </summary>
        /// <value>DTMF key which will replay the voicemail message when pressed at the post playback menu</value>
        [DataMember(Name="replay", EmitDefaultValue=false)]
        public VoicemailKeysDtmfKey Replay { get; set; }

        /// <summary>
        /// DTMF key which will return to the main menu when pressed at the config menu
        /// </summary>
        /// <value>DTMF key which will return to the main menu when pressed at the config menu</value>
        [DataMember(Name="return_main", EmitDefaultValue=false)]
        public VoicemailKeysDtmfKey ReturnMain { get; set; }

        /// <summary>
        /// DTMF key which will seek the playback backward for seek_duration_ms ms
        /// </summary>
        /// <value>DTMF key which will seek the playback backward for seek_duration_ms ms</value>
        [DataMember(Name="rewind", EmitDefaultValue=false)]
        public VoicemailKeysDtmfKey Rewind { get; set; }

        /// <summary>
        /// DTMF key which will save when pressed at the recording review menu
        /// </summary>
        /// <value>DTMF key which will save when pressed at the recording review menu</value>
        [DataMember(Name="save", EmitDefaultValue=false)]
        public VoicemailKeysDtmfKey Save { get; set; }

        /// <summary>
        /// DTMF key which will allow the user to set their pin when pressed at the config menu
        /// </summary>
        /// <value>DTMF key which will allow the user to set their pin when pressed at the config menu</value>
        [DataMember(Name="set_pin", EmitDefaultValue=false)]
        public VoicemailKeysDtmfKey SetPin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VoicemailKeys {\n");
            sb.Append("  Configure: ").Append(Configure).Append("\n");
            sb.Append("  Continue: ").Append(Continue).Append("\n");
            sb.Append("  Delete: ").Append(Delete).Append("\n");
            sb.Append("  Exit: ").Append(Exit).Append("\n");
            sb.Append("  Fastforward: ").Append(Fastforward).Append("\n");
            sb.Append("  HearNew: ").Append(HearNew).Append("\n");
            sb.Append("  HearSaved: ").Append(HearSaved).Append("\n");
            sb.Append("  Keep: ").Append(Keep).Append("\n");
            sb.Append("  Listen: ").Append(Listen).Append("\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  Prev: ").Append(Prev).Append("\n");
            sb.Append("  RecName: ").Append(RecName).Append("\n");
            sb.Append("  RecUnavailable: ").Append(RecUnavailable).Append("\n");
            sb.Append("  Record: ").Append(Record).Append("\n");
            sb.Append("  Replay: ").Append(Replay).Append("\n");
            sb.Append("  ReturnMain: ").Append(ReturnMain).Append("\n");
            sb.Append("  Rewind: ").Append(Rewind).Append("\n");
            sb.Append("  Save: ").Append(Save).Append("\n");
            sb.Append("  SetPin: ").Append(SetPin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VoicemailKeys);
        }

        /// <summary>
        /// Returns true if VoicemailKeys instances are equal
        /// </summary>
        /// <param name="input">Instance of VoicemailKeys to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VoicemailKeys input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Configure == input.Configure ||
                    (this.Configure != null &&
                    this.Configure.Equals(input.Configure))
                ) && 
                (
                    this.Continue == input.Continue ||
                    (this.Continue != null &&
                    this.Continue.Equals(input.Continue))
                ) && 
                (
                    this.Delete == input.Delete ||
                    (this.Delete != null &&
                    this.Delete.Equals(input.Delete))
                ) && 
                (
                    this.Exit == input.Exit ||
                    (this.Exit != null &&
                    this.Exit.Equals(input.Exit))
                ) && 
                (
                    this.Fastforward == input.Fastforward ||
                    (this.Fastforward != null &&
                    this.Fastforward.Equals(input.Fastforward))
                ) && 
                (
                    this.HearNew == input.HearNew ||
                    (this.HearNew != null &&
                    this.HearNew.Equals(input.HearNew))
                ) && 
                (
                    this.HearSaved == input.HearSaved ||
                    (this.HearSaved != null &&
                    this.HearSaved.Equals(input.HearSaved))
                ) && 
                (
                    this.Keep == input.Keep ||
                    (this.Keep != null &&
                    this.Keep.Equals(input.Keep))
                ) && 
                (
                    this.Listen == input.Listen ||
                    (this.Listen != null &&
                    this.Listen.Equals(input.Listen))
                ) && 
                (
                    this.Login == input.Login ||
                    (this.Login != null &&
                    this.Login.Equals(input.Login))
                ) && 
                (
                    this.Next == input.Next ||
                    (this.Next != null &&
                    this.Next.Equals(input.Next))
                ) && 
                (
                    this.Operator == input.Operator ||
                    (this.Operator != null &&
                    this.Operator.Equals(input.Operator))
                ) && 
                (
                    this.Prev == input.Prev ||
                    (this.Prev != null &&
                    this.Prev.Equals(input.Prev))
                ) && 
                (
                    this.RecName == input.RecName ||
                    (this.RecName != null &&
                    this.RecName.Equals(input.RecName))
                ) && 
                (
                    this.RecUnavailable == input.RecUnavailable ||
                    (this.RecUnavailable != null &&
                    this.RecUnavailable.Equals(input.RecUnavailable))
                ) && 
                (
                    this.Record == input.Record ||
                    (this.Record != null &&
                    this.Record.Equals(input.Record))
                ) && 
                (
                    this.Replay == input.Replay ||
                    (this.Replay != null &&
                    this.Replay.Equals(input.Replay))
                ) && 
                (
                    this.ReturnMain == input.ReturnMain ||
                    (this.ReturnMain != null &&
                    this.ReturnMain.Equals(input.ReturnMain))
                ) && 
                (
                    this.Rewind == input.Rewind ||
                    (this.Rewind != null &&
                    this.Rewind.Equals(input.Rewind))
                ) && 
                (
                    this.Save == input.Save ||
                    (this.Save != null &&
                    this.Save.Equals(input.Save))
                ) && 
                (
                    this.SetPin == input.SetPin ||
                    (this.SetPin != null &&
                    this.SetPin.Equals(input.SetPin))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Configure != null)
                    hashCode = hashCode * 59 + this.Configure.GetHashCode();
                if (this.Continue != null)
                    hashCode = hashCode * 59 + this.Continue.GetHashCode();
                if (this.Delete != null)
                    hashCode = hashCode * 59 + this.Delete.GetHashCode();
                if (this.Exit != null)
                    hashCode = hashCode * 59 + this.Exit.GetHashCode();
                if (this.Fastforward != null)
                    hashCode = hashCode * 59 + this.Fastforward.GetHashCode();
                if (this.HearNew != null)
                    hashCode = hashCode * 59 + this.HearNew.GetHashCode();
                if (this.HearSaved != null)
                    hashCode = hashCode * 59 + this.HearSaved.GetHashCode();
                if (this.Keep != null)
                    hashCode = hashCode * 59 + this.Keep.GetHashCode();
                if (this.Listen != null)
                    hashCode = hashCode * 59 + this.Listen.GetHashCode();
                if (this.Login != null)
                    hashCode = hashCode * 59 + this.Login.GetHashCode();
                if (this.Next != null)
                    hashCode = hashCode * 59 + this.Next.GetHashCode();
                if (this.Operator != null)
                    hashCode = hashCode * 59 + this.Operator.GetHashCode();
                if (this.Prev != null)
                    hashCode = hashCode * 59 + this.Prev.GetHashCode();
                if (this.RecName != null)
                    hashCode = hashCode * 59 + this.RecName.GetHashCode();
                if (this.RecUnavailable != null)
                    hashCode = hashCode * 59 + this.RecUnavailable.GetHashCode();
                if (this.Record != null)
                    hashCode = hashCode * 59 + this.Record.GetHashCode();
                if (this.Replay != null)
                    hashCode = hashCode * 59 + this.Replay.GetHashCode();
                if (this.ReturnMain != null)
                    hashCode = hashCode * 59 + this.ReturnMain.GetHashCode();
                if (this.Rewind != null)
                    hashCode = hashCode * 59 + this.Rewind.GetHashCode();
                if (this.Save != null)
                    hashCode = hashCode * 59 + this.Save.GetHashCode();
                if (this.SetPin != null)
                    hashCode = hashCode * 59 + this.SetPin.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
