/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FaxBoxes allow configuration of individual fax virtual machines
    /// </summary>
    [DataContract]
    public partial class Faxbox :  IEquatable<Faxbox>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Faxbox" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Faxbox() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Faxbox" /> class.
        /// </summary>
        /// <param name="attempts">The number of attempts made, this will be set by the system and reset automatically on put/post.</param>
        /// <param name="callerId">The Caller-ID-Number.</param>
        /// <param name="callerName">The Caller-ID-Name (default to &quot;Kazoo Fax Printer&quot;).</param>
        /// <param name="customSmtpEmailAddress">custom smtp address.</param>
        /// <param name="faxHeader">The name printed at the top of the fax (default to &quot;Kazoo Fax Printer&quot;).</param>
        /// <param name="faxIdentity">The number printed at the top of the fax.</param>
        /// <param name="faxTimezone">The timezone announced.</param>
        /// <param name="flags">Flags set by external applications.</param>
        /// <param name="media">media.</param>
        /// <param name="name">A friendly name for the faxbox (required).</param>
        /// <param name="notifications">notifications.</param>
        /// <param name="retries">The number of times to retry.</param>
        /// <param name="smtpPermissionList">smtp permission list. accepts regular expressions.</param>
        public Faxbox(int? attempts = default(int?), string callerId = default(string), string callerName = "Kazoo Fax Printer", string customSmtpEmailAddress = default(string), string faxHeader = "Kazoo Fax Printer", string faxIdentity = default(string), string faxTimezone = default(string), List<string> flags = default(List<string>), FaxboxMedia media = default(FaxboxMedia), string name = default(string), FaxboxNotifications notifications = default(FaxboxNotifications), int? retries = default(int?), List<string> smtpPermissionList = default(List<string>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Faxbox and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.Attempts = attempts;
            this.CallerId = callerId;
            // use default value if no "callerName" provided
            if (callerName == null)
            {
                this.CallerName = "Kazoo Fax Printer";
            }
            else
            {
                this.CallerName = callerName;
            }
            this.CustomSmtpEmailAddress = customSmtpEmailAddress;
            // use default value if no "faxHeader" provided
            if (faxHeader == null)
            {
                this.FaxHeader = "Kazoo Fax Printer";
            }
            else
            {
                this.FaxHeader = faxHeader;
            }
            this.FaxIdentity = faxIdentity;
            this.FaxTimezone = faxTimezone;
            this.Flags = flags;
            this.Media = media;
            this.Notifications = notifications;
            this.Retries = retries;
            this.SmtpPermissionList = smtpPermissionList;
        }
        
        /// <summary>
        /// The number of attempts made, this will be set by the system and reset automatically on put/post
        /// </summary>
        /// <value>The number of attempts made, this will be set by the system and reset automatically on put/post</value>
        [DataMember(Name="attempts", EmitDefaultValue=false)]
        public int? Attempts { get; set; }

        /// <summary>
        /// The Caller-ID-Number
        /// </summary>
        /// <value>The Caller-ID-Number</value>
        [DataMember(Name="caller_id", EmitDefaultValue=false)]
        public string CallerId { get; set; }

        /// <summary>
        /// The Caller-ID-Name
        /// </summary>
        /// <value>The Caller-ID-Name</value>
        [DataMember(Name="caller_name", EmitDefaultValue=false)]
        public string CallerName { get; set; }

        /// <summary>
        /// custom smtp address
        /// </summary>
        /// <value>custom smtp address</value>
        [DataMember(Name="custom_smtp_email_address", EmitDefaultValue=false)]
        public string CustomSmtpEmailAddress { get; set; }

        /// <summary>
        /// The name printed at the top of the fax
        /// </summary>
        /// <value>The name printed at the top of the fax</value>
        [DataMember(Name="fax_header", EmitDefaultValue=false)]
        public string FaxHeader { get; set; }

        /// <summary>
        /// The number printed at the top of the fax
        /// </summary>
        /// <value>The number printed at the top of the fax</value>
        [DataMember(Name="fax_identity", EmitDefaultValue=false)]
        public string FaxIdentity { get; set; }

        /// <summary>
        /// The timezone announced
        /// </summary>
        /// <value>The timezone announced</value>
        [DataMember(Name="fax_timezone", EmitDefaultValue=false)]
        public string FaxTimezone { get; set; }

        /// <summary>
        /// Flags set by external applications
        /// </summary>
        /// <value>Flags set by external applications</value>
        [DataMember(Name="flags", EmitDefaultValue=false)]
        public List<string> Flags { get; set; }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name="media", EmitDefaultValue=false)]
        public FaxboxMedia Media { get; set; }

        /// <summary>
        /// A friendly name for the faxbox
        /// </summary>
        /// <value>A friendly name for the faxbox</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Notifications
        /// </summary>
        [DataMember(Name="notifications", EmitDefaultValue=false)]
        public FaxboxNotifications Notifications { get; set; }

        /// <summary>
        /// The number of times to retry
        /// </summary>
        /// <value>The number of times to retry</value>
        [DataMember(Name="retries", EmitDefaultValue=false)]
        public int? Retries { get; set; }

        /// <summary>
        /// smtp permission list. accepts regular expressions
        /// </summary>
        /// <value>smtp permission list. accepts regular expressions</value>
        [DataMember(Name="smtp_permission_list", EmitDefaultValue=false)]
        public List<string> SmtpPermissionList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Faxbox {\n");
            sb.Append("  Attempts: ").Append(Attempts).Append("\n");
            sb.Append("  CallerId: ").Append(CallerId).Append("\n");
            sb.Append("  CallerName: ").Append(CallerName).Append("\n");
            sb.Append("  CustomSmtpEmailAddress: ").Append(CustomSmtpEmailAddress).Append("\n");
            sb.Append("  FaxHeader: ").Append(FaxHeader).Append("\n");
            sb.Append("  FaxIdentity: ").Append(FaxIdentity).Append("\n");
            sb.Append("  FaxTimezone: ").Append(FaxTimezone).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  Retries: ").Append(Retries).Append("\n");
            sb.Append("  SmtpPermissionList: ").Append(SmtpPermissionList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Faxbox);
        }

        /// <summary>
        /// Returns true if Faxbox instances are equal
        /// </summary>
        /// <param name="input">Instance of Faxbox to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Faxbox input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Attempts == input.Attempts ||
                    (this.Attempts != null &&
                    this.Attempts.Equals(input.Attempts))
                ) && 
                (
                    this.CallerId == input.CallerId ||
                    (this.CallerId != null &&
                    this.CallerId.Equals(input.CallerId))
                ) && 
                (
                    this.CallerName == input.CallerName ||
                    (this.CallerName != null &&
                    this.CallerName.Equals(input.CallerName))
                ) && 
                (
                    this.CustomSmtpEmailAddress == input.CustomSmtpEmailAddress ||
                    (this.CustomSmtpEmailAddress != null &&
                    this.CustomSmtpEmailAddress.Equals(input.CustomSmtpEmailAddress))
                ) && 
                (
                    this.FaxHeader == input.FaxHeader ||
                    (this.FaxHeader != null &&
                    this.FaxHeader.Equals(input.FaxHeader))
                ) && 
                (
                    this.FaxIdentity == input.FaxIdentity ||
                    (this.FaxIdentity != null &&
                    this.FaxIdentity.Equals(input.FaxIdentity))
                ) && 
                (
                    this.FaxTimezone == input.FaxTimezone ||
                    (this.FaxTimezone != null &&
                    this.FaxTimezone.Equals(input.FaxTimezone))
                ) && 
                (
                    this.Flags == input.Flags ||
                    this.Flags != null &&
                    this.Flags.SequenceEqual(input.Flags)
                ) && 
                (
                    this.Media == input.Media ||
                    (this.Media != null &&
                    this.Media.Equals(input.Media))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Notifications == input.Notifications ||
                    (this.Notifications != null &&
                    this.Notifications.Equals(input.Notifications))
                ) && 
                (
                    this.Retries == input.Retries ||
                    (this.Retries != null &&
                    this.Retries.Equals(input.Retries))
                ) && 
                (
                    this.SmtpPermissionList == input.SmtpPermissionList ||
                    this.SmtpPermissionList != null &&
                    this.SmtpPermissionList.SequenceEqual(input.SmtpPermissionList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attempts != null)
                    hashCode = hashCode * 59 + this.Attempts.GetHashCode();
                if (this.CallerId != null)
                    hashCode = hashCode * 59 + this.CallerId.GetHashCode();
                if (this.CallerName != null)
                    hashCode = hashCode * 59 + this.CallerName.GetHashCode();
                if (this.CustomSmtpEmailAddress != null)
                    hashCode = hashCode * 59 + this.CustomSmtpEmailAddress.GetHashCode();
                if (this.FaxHeader != null)
                    hashCode = hashCode * 59 + this.FaxHeader.GetHashCode();
                if (this.FaxIdentity != null)
                    hashCode = hashCode * 59 + this.FaxIdentity.GetHashCode();
                if (this.FaxTimezone != null)
                    hashCode = hashCode * 59 + this.FaxTimezone.GetHashCode();
                if (this.Flags != null)
                    hashCode = hashCode * 59 + this.Flags.GetHashCode();
                if (this.Media != null)
                    hashCode = hashCode * 59 + this.Media.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Notifications != null)
                    hashCode = hashCode * 59 + this.Notifications.GetHashCode();
                if (this.Retries != null)
                    hashCode = hashCode * 59 + this.Retries.GetHashCode();
                if (this.SmtpPermissionList != null)
                    hashCode = hashCode * 59 + this.SmtpPermissionList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Attempts (int?) maximum
            if(this.Attempts > (int?)4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Attempts, must be a value less than or equal to 4.", new [] { "Attempts" });
            }

            // Attempts (int?) minimum
            if(this.Attempts < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Attempts, must be a value greater than or equal to 0.", new [] { "Attempts" });
            }

            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // Retries (int?) maximum
            if(this.Retries > (int?)4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Retries, must be a value less than or equal to 4.", new [] { "Retries" });
            }

            // Retries (int?) minimum
            if(this.Retries < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Retries, must be a value greater than or equal to 0.", new [] { "Retries" });
            }

            yield break;
        }
    }

}
