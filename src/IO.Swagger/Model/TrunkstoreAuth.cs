/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TrunkstoreAuth
    /// </summary>
    [DataContract]
    public partial class TrunkstoreAuth :  IEquatable<TrunkstoreAuth>, IValidatableObject
    {
        /// <summary>
        /// What type of auth mechanism to use
        /// </summary>
        /// <value>What type of auth mechanism to use</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AuthMethodEnum
        {
            
            /// <summary>
            /// Enum Password for value: password
            /// </summary>
            [EnumMember(Value = "password")]
            Password = 1
        }

        /// <summary>
        /// What type of auth mechanism to use
        /// </summary>
        /// <value>What type of auth mechanism to use</value>
        [DataMember(Name="auth_method", EmitDefaultValue=false)]
        public AuthMethodEnum AuthMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrunkstoreAuth" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TrunkstoreAuth() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrunkstoreAuth" /> class.
        /// </summary>
        /// <param name="authMethod">What type of auth mechanism to use (required).</param>
        /// <param name="authPassword">Password of the user@auth_realm (required).</param>
        /// <param name="authUser">Username for authentication (required).</param>
        public TrunkstoreAuth(AuthMethodEnum authMethod = default(AuthMethodEnum), string authPassword = default(string), string authUser = default(string))
        {
            // to ensure "authMethod" is required (not null)
            if (authMethod == null)
            {
                throw new InvalidDataException("authMethod is a required property for TrunkstoreAuth and cannot be null");
            }
            else
            {
                this.AuthMethod = authMethod;
            }
            // to ensure "authPassword" is required (not null)
            if (authPassword == null)
            {
                throw new InvalidDataException("authPassword is a required property for TrunkstoreAuth and cannot be null");
            }
            else
            {
                this.AuthPassword = authPassword;
            }
            // to ensure "authUser" is required (not null)
            if (authUser == null)
            {
                throw new InvalidDataException("authUser is a required property for TrunkstoreAuth and cannot be null");
            }
            else
            {
                this.AuthUser = authUser;
            }
        }
        

        /// <summary>
        /// Password of the user@auth_realm
        /// </summary>
        /// <value>Password of the user@auth_realm</value>
        [DataMember(Name="auth_password", EmitDefaultValue=false)]
        public string AuthPassword { get; set; }

        /// <summary>
        /// Username for authentication
        /// </summary>
        /// <value>Username for authentication</value>
        [DataMember(Name="auth_user", EmitDefaultValue=false)]
        public string AuthUser { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrunkstoreAuth {\n");
            sb.Append("  AuthMethod: ").Append(AuthMethod).Append("\n");
            sb.Append("  AuthPassword: ").Append(AuthPassword).Append("\n");
            sb.Append("  AuthUser: ").Append(AuthUser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrunkstoreAuth);
        }

        /// <summary>
        /// Returns true if TrunkstoreAuth instances are equal
        /// </summary>
        /// <param name="input">Instance of TrunkstoreAuth to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrunkstoreAuth input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthMethod == input.AuthMethod ||
                    (this.AuthMethod != null &&
                    this.AuthMethod.Equals(input.AuthMethod))
                ) && 
                (
                    this.AuthPassword == input.AuthPassword ||
                    (this.AuthPassword != null &&
                    this.AuthPassword.Equals(input.AuthPassword))
                ) && 
                (
                    this.AuthUser == input.AuthUser ||
                    (this.AuthUser != null &&
                    this.AuthUser.Equals(input.AuthUser))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthMethod != null)
                    hashCode = hashCode * 59 + this.AuthMethod.GetHashCode();
                if (this.AuthPassword != null)
                    hashCode = hashCode * 59 + this.AuthPassword.GetHashCode();
                if (this.AuthUser != null)
                    hashCode = hashCode * 59 + this.AuthUser.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AuthPassword (string) minLength
            if(this.AuthPassword != null && this.AuthPassword.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthPassword, length must be greater than 1.", new [] { "AuthPassword" });
            }

            // AuthUser (string) minLength
            if(this.AuthUser != null && this.AuthUser.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthUser, length must be greater than 1.", new [] { "AuthUser" });
            }

            yield break;
        }
    }

}
