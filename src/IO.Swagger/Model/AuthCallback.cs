/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// callback for authentication providers
    /// </summary>
    [DataContract]
    public partial class AuthCallback :  IEquatable<AuthCallback>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthCallback" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthCallback() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthCallback" /> class.
        /// </summary>
        /// <param name="clientId">client id, usually application id for OAuth providers (required).</param>
        /// <param name="code">access code emitted by provider (required).</param>
        /// <param name="provider">provider (required).</param>
        /// <param name="redirectUri">redirect URI (required).</param>
        /// <param name="state">state.</param>
        public AuthCallback(string clientId = default(string), string code = default(string), string provider = default(string), string redirectUri = default(string), string state = default(string))
        {
            // to ensure "clientId" is required (not null)
            if (clientId == null)
            {
                throw new InvalidDataException("clientId is a required property for AuthCallback and cannot be null");
            }
            else
            {
                this.ClientId = clientId;
            }
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new InvalidDataException("code is a required property for AuthCallback and cannot be null");
            }
            else
            {
                this.Code = code;
            }
            // to ensure "provider" is required (not null)
            if (provider == null)
            {
                throw new InvalidDataException("provider is a required property for AuthCallback and cannot be null");
            }
            else
            {
                this.Provider = provider;
            }
            // to ensure "redirectUri" is required (not null)
            if (redirectUri == null)
            {
                throw new InvalidDataException("redirectUri is a required property for AuthCallback and cannot be null");
            }
            else
            {
                this.RedirectUri = redirectUri;
            }
            this.State = state;
        }
        
        /// <summary>
        /// client id, usually application id for OAuth providers
        /// </summary>
        /// <value>client id, usually application id for OAuth providers</value>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public string ClientId { get; set; }

        /// <summary>
        /// access code emitted by provider
        /// </summary>
        /// <value>access code emitted by provider</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// provider
        /// </summary>
        /// <value>provider</value>
        [DataMember(Name="provider", EmitDefaultValue=false)]
        public string Provider { get; set; }

        /// <summary>
        /// redirect URI
        /// </summary>
        /// <value>redirect URI</value>
        [DataMember(Name="redirect_uri", EmitDefaultValue=false)]
        public string RedirectUri { get; set; }

        /// <summary>
        /// state
        /// </summary>
        /// <value>state</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthCallback {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  RedirectUri: ").Append(RedirectUri).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthCallback);
        }

        /// <summary>
        /// Returns true if AuthCallback instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthCallback to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthCallback input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.RedirectUri == input.RedirectUri ||
                    (this.RedirectUri != null &&
                    this.RedirectUri.Equals(input.RedirectUri))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Provider != null)
                    hashCode = hashCode * 59 + this.Provider.GetHashCode();
                if (this.RedirectUri != null)
                    hashCode = hashCode * 59 + this.RedirectUri.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
