/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for teletype system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigTeletype :  IEquatable<SystemConfigTeletype>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigTeletype" /> class.
        /// </summary>
        /// <param name="iterateOverBcc">teletype iterate over bcc (default to true).</param>
        /// <param name="noticeEnabledByDefault">Specify if template is considered enabled by default when teletype tries to process that notification (default to true).</param>
        /// <param name="renderFarmWorkers">teletype render farm workers.</param>
        public SystemConfigTeletype(bool? iterateOverBcc = true, bool? noticeEnabledByDefault = true, int? renderFarmWorkers = default(int?))
        {
            // use default value if no "iterateOverBcc" provided
            if (iterateOverBcc == null)
            {
                this.IterateOverBcc = true;
            }
            else
            {
                this.IterateOverBcc = iterateOverBcc;
            }
            // use default value if no "noticeEnabledByDefault" provided
            if (noticeEnabledByDefault == null)
            {
                this.NoticeEnabledByDefault = true;
            }
            else
            {
                this.NoticeEnabledByDefault = noticeEnabledByDefault;
            }
            this.RenderFarmWorkers = renderFarmWorkers;
        }
        
        /// <summary>
        /// teletype iterate over bcc
        /// </summary>
        /// <value>teletype iterate over bcc</value>
        [DataMember(Name="iterate_over_bcc", EmitDefaultValue=false)]
        public bool? IterateOverBcc { get; set; }

        /// <summary>
        /// Specify if template is considered enabled by default when teletype tries to process that notification
        /// </summary>
        /// <value>Specify if template is considered enabled by default when teletype tries to process that notification</value>
        [DataMember(Name="notice_enabled_by_default", EmitDefaultValue=false)]
        public bool? NoticeEnabledByDefault { get; set; }

        /// <summary>
        /// teletype render farm workers
        /// </summary>
        /// <value>teletype render farm workers</value>
        [DataMember(Name="render_farm_workers", EmitDefaultValue=false)]
        public int? RenderFarmWorkers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigTeletype {\n");
            sb.Append("  IterateOverBcc: ").Append(IterateOverBcc).Append("\n");
            sb.Append("  NoticeEnabledByDefault: ").Append(NoticeEnabledByDefault).Append("\n");
            sb.Append("  RenderFarmWorkers: ").Append(RenderFarmWorkers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigTeletype);
        }

        /// <summary>
        /// Returns true if SystemConfigTeletype instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigTeletype to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigTeletype input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IterateOverBcc == input.IterateOverBcc ||
                    (this.IterateOverBcc != null &&
                    this.IterateOverBcc.Equals(input.IterateOverBcc))
                ) && 
                (
                    this.NoticeEnabledByDefault == input.NoticeEnabledByDefault ||
                    (this.NoticeEnabledByDefault != null &&
                    this.NoticeEnabledByDefault.Equals(input.NoticeEnabledByDefault))
                ) && 
                (
                    this.RenderFarmWorkers == input.RenderFarmWorkers ||
                    (this.RenderFarmWorkers != null &&
                    this.RenderFarmWorkers.Equals(input.RenderFarmWorkers))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IterateOverBcc != null)
                    hashCode = hashCode * 59 + this.IterateOverBcc.GetHashCode();
                if (this.NoticeEnabledByDefault != null)
                    hashCode = hashCode * 59 + this.NoticeEnabledByDefault.GetHashCode();
                if (this.RenderFarmWorkers != null)
                    hashCode = hashCode * 59 + this.RenderFarmWorkers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
