/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Validator for the park callflow data object
    /// </summary>
    [DataContract]
    public partial class CallflowsPark :  IEquatable<CallflowsPark>, IValidatableObject
    {
        /// <summary>
        /// Action to take for the caller
        /// </summary>
        /// <value>Action to take for the caller</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            
            /// <summary>
            /// Enum Directpark for value: direct_park
            /// </summary>
            [EnumMember(Value = "direct_park")]
            Directpark = 1,
            
            /// <summary>
            /// Enum Park for value: park
            /// </summary>
            [EnumMember(Value = "park")]
            Park = 2,
            
            /// <summary>
            /// Enum Retrieve for value: retrieve
            /// </summary>
            [EnumMember(Value = "retrieve")]
            Retrieve = 3,
            
            /// <summary>
            /// Enum Auto for value: auto
            /// </summary>
            [EnumMember(Value = "auto")]
            Auto = 4
        }

        /// <summary>
        /// Action to take for the caller
        /// </summary>
        /// <value>Action to take for the caller</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Type of presence to update
        /// </summary>
        /// <value>Type of presence to update</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DefaultPresenceTypeEnum
        {
            
            /// <summary>
            /// Enum Early for value: early
            /// </summary>
            [EnumMember(Value = "early")]
            Early = 1,
            
            /// <summary>
            /// Enum Terminated for value: terminated
            /// </summary>
            [EnumMember(Value = "terminated")]
            Terminated = 2,
            
            /// <summary>
            /// Enum Confirmed for value: confirmed
            /// </summary>
            [EnumMember(Value = "confirmed")]
            Confirmed = 3
        }

        /// <summary>
        /// Type of presence to update
        /// </summary>
        /// <value>Type of presence to update</value>
        [DataMember(Name="default_presence_type", EmitDefaultValue=false)]
        public DefaultPresenceTypeEnum? DefaultPresenceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsPark" /> class.
        /// </summary>
        /// <param name="action">Action to take for the caller (default to ActionEnum.Park).</param>
        /// <param name="customPresenceId">use configured presence_id and fallback to request (default to false).</param>
        /// <param name="defaultCallbackTimeout">How long, in seconds, to wait before calling back the parker.</param>
        /// <param name="defaultPresenceType">Type of presence to update.</param>
        /// <param name="defaultRingbackTimeout">How long, in milliseconds, before ringing back.</param>
        /// <param name="maxSlotNumber">Continue past this module if the selected slot number exceeds this number. Used to restrict the max number of auto-generated slot numbers.</param>
        /// <param name="presenceId">use this presence_id.</param>
        /// <param name="skipModule">When set to true this callflow action is skipped, advancing to the wildcard branch (if any).</param>
        /// <param name="slot">Static slot number to use.</param>
        /// <param name="slots">Statically define slots and their configuration.</param>
        public CallflowsPark(ActionEnum? action = ActionEnum.Park, bool? customPresenceId = false, int? defaultCallbackTimeout = default(int?), DefaultPresenceTypeEnum? defaultPresenceType = default(DefaultPresenceTypeEnum?), int? defaultRingbackTimeout = default(int?), int? maxSlotNumber = default(int?), string presenceId = default(string), bool? skipModule = default(bool?), string slot = default(string), Object slots = default(Object))
        {
            // use default value if no "action" provided
            if (action == null)
            {
                this.Action = ActionEnum.Park;
            }
            else
            {
                this.Action = action;
            }
            // use default value if no "customPresenceId" provided
            if (customPresenceId == null)
            {
                this.CustomPresenceId = false;
            }
            else
            {
                this.CustomPresenceId = customPresenceId;
            }
            this.DefaultCallbackTimeout = defaultCallbackTimeout;
            this.DefaultPresenceType = defaultPresenceType;
            this.DefaultRingbackTimeout = defaultRingbackTimeout;
            this.MaxSlotNumber = maxSlotNumber;
            this.PresenceId = presenceId;
            this.SkipModule = skipModule;
            this.Slot = slot;
            this.Slots = slots;
        }
        

        /// <summary>
        /// use configured presence_id and fallback to request
        /// </summary>
        /// <value>use configured presence_id and fallback to request</value>
        [DataMember(Name="custom_presence_id", EmitDefaultValue=false)]
        public bool? CustomPresenceId { get; set; }

        /// <summary>
        /// How long, in seconds, to wait before calling back the parker
        /// </summary>
        /// <value>How long, in seconds, to wait before calling back the parker</value>
        [DataMember(Name="default_callback_timeout", EmitDefaultValue=false)]
        public int? DefaultCallbackTimeout { get; set; }


        /// <summary>
        /// How long, in milliseconds, before ringing back
        /// </summary>
        /// <value>How long, in milliseconds, before ringing back</value>
        [DataMember(Name="default_ringback_timeout", EmitDefaultValue=false)]
        public int? DefaultRingbackTimeout { get; set; }

        /// <summary>
        /// Continue past this module if the selected slot number exceeds this number. Used to restrict the max number of auto-generated slot numbers
        /// </summary>
        /// <value>Continue past this module if the selected slot number exceeds this number. Used to restrict the max number of auto-generated slot numbers</value>
        [DataMember(Name="max_slot_number", EmitDefaultValue=false)]
        public int? MaxSlotNumber { get; set; }

        /// <summary>
        /// use this presence_id
        /// </summary>
        /// <value>use this presence_id</value>
        [DataMember(Name="presence_id", EmitDefaultValue=false)]
        public string PresenceId { get; set; }

        /// <summary>
        /// When set to true this callflow action is skipped, advancing to the wildcard branch (if any)
        /// </summary>
        /// <value>When set to true this callflow action is skipped, advancing to the wildcard branch (if any)</value>
        [DataMember(Name="skip_module", EmitDefaultValue=false)]
        public bool? SkipModule { get; set; }

        /// <summary>
        /// Static slot number to use
        /// </summary>
        /// <value>Static slot number to use</value>
        [DataMember(Name="slot", EmitDefaultValue=false)]
        public string Slot { get; set; }

        /// <summary>
        /// Statically define slots and their configuration
        /// </summary>
        /// <value>Statically define slots and their configuration</value>
        [DataMember(Name="slots", EmitDefaultValue=false)]
        public Object Slots { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallflowsPark {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  CustomPresenceId: ").Append(CustomPresenceId).Append("\n");
            sb.Append("  DefaultCallbackTimeout: ").Append(DefaultCallbackTimeout).Append("\n");
            sb.Append("  DefaultPresenceType: ").Append(DefaultPresenceType).Append("\n");
            sb.Append("  DefaultRingbackTimeout: ").Append(DefaultRingbackTimeout).Append("\n");
            sb.Append("  MaxSlotNumber: ").Append(MaxSlotNumber).Append("\n");
            sb.Append("  PresenceId: ").Append(PresenceId).Append("\n");
            sb.Append("  SkipModule: ").Append(SkipModule).Append("\n");
            sb.Append("  Slot: ").Append(Slot).Append("\n");
            sb.Append("  Slots: ").Append(Slots).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallflowsPark);
        }

        /// <summary>
        /// Returns true if CallflowsPark instances are equal
        /// </summary>
        /// <param name="input">Instance of CallflowsPark to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallflowsPark input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.CustomPresenceId == input.CustomPresenceId ||
                    (this.CustomPresenceId != null &&
                    this.CustomPresenceId.Equals(input.CustomPresenceId))
                ) && 
                (
                    this.DefaultCallbackTimeout == input.DefaultCallbackTimeout ||
                    (this.DefaultCallbackTimeout != null &&
                    this.DefaultCallbackTimeout.Equals(input.DefaultCallbackTimeout))
                ) && 
                (
                    this.DefaultPresenceType == input.DefaultPresenceType ||
                    (this.DefaultPresenceType != null &&
                    this.DefaultPresenceType.Equals(input.DefaultPresenceType))
                ) && 
                (
                    this.DefaultRingbackTimeout == input.DefaultRingbackTimeout ||
                    (this.DefaultRingbackTimeout != null &&
                    this.DefaultRingbackTimeout.Equals(input.DefaultRingbackTimeout))
                ) && 
                (
                    this.MaxSlotNumber == input.MaxSlotNumber ||
                    (this.MaxSlotNumber != null &&
                    this.MaxSlotNumber.Equals(input.MaxSlotNumber))
                ) && 
                (
                    this.PresenceId == input.PresenceId ||
                    (this.PresenceId != null &&
                    this.PresenceId.Equals(input.PresenceId))
                ) && 
                (
                    this.SkipModule == input.SkipModule ||
                    (this.SkipModule != null &&
                    this.SkipModule.Equals(input.SkipModule))
                ) && 
                (
                    this.Slot == input.Slot ||
                    (this.Slot != null &&
                    this.Slot.Equals(input.Slot))
                ) && 
                (
                    this.Slots == input.Slots ||
                    (this.Slots != null &&
                    this.Slots.Equals(input.Slots))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.CustomPresenceId != null)
                    hashCode = hashCode * 59 + this.CustomPresenceId.GetHashCode();
                if (this.DefaultCallbackTimeout != null)
                    hashCode = hashCode * 59 + this.DefaultCallbackTimeout.GetHashCode();
                if (this.DefaultPresenceType != null)
                    hashCode = hashCode * 59 + this.DefaultPresenceType.GetHashCode();
                if (this.DefaultRingbackTimeout != null)
                    hashCode = hashCode * 59 + this.DefaultRingbackTimeout.GetHashCode();
                if (this.MaxSlotNumber != null)
                    hashCode = hashCode * 59 + this.MaxSlotNumber.GetHashCode();
                if (this.PresenceId != null)
                    hashCode = hashCode * 59 + this.PresenceId.GetHashCode();
                if (this.SkipModule != null)
                    hashCode = hashCode * 59 + this.SkipModule.GetHashCode();
                if (this.Slot != null)
                    hashCode = hashCode * 59 + this.Slot.GetHashCode();
                if (this.Slots != null)
                    hashCode = hashCode * 59 + this.Slots.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
