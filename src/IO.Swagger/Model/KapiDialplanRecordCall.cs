/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for dialplan.record_call
    /// </summary>
    [DataContract]
    public partial class KapiDialplanRecordCall :  IEquatable<KapiDialplanRecordCall>, IValidatableObject
    {
        /// <summary>
        /// Defines ApplicationName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApplicationNameEnum
        {
            
            /// <summary>
            /// Enum Recordcall for value: record_call
            /// </summary>
            [EnumMember(Value = "record_call")]
            Recordcall = 1
        }

        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name="Application-Name", EmitDefaultValue=false)]
        public ApplicationNameEnum ApplicationName { get; set; }
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Call for value: call
            /// </summary>
            [EnumMember(Value = "call")]
            Call = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Command for value: command
            /// </summary>
            [EnumMember(Value = "command")]
            Command = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Defines InsertAt
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InsertAtEnum
        {
            
            /// <summary>
            /// Enum Head for value: head
            /// </summary>
            [EnumMember(Value = "head")]
            Head = 1,
            
            /// <summary>
            /// Enum Tail for value: tail
            /// </summary>
            [EnumMember(Value = "tail")]
            Tail = 2,
            
            /// <summary>
            /// Enum Flush for value: flush
            /// </summary>
            [EnumMember(Value = "flush")]
            Flush = 3,
            
            /// <summary>
            /// Enum Now for value: now
            /// </summary>
            [EnumMember(Value = "now")]
            Now = 4
        }

        /// <summary>
        /// Gets or Sets InsertAt
        /// </summary>
        [DataMember(Name="Insert-At", EmitDefaultValue=false)]
        public InsertAtEnum? InsertAt { get; set; }
        /// <summary>
        /// Defines RecordAction
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RecordActionEnum
        {
            
            /// <summary>
            /// Enum Mask for value: mask
            /// </summary>
            [EnumMember(Value = "mask")]
            Mask = 1,
            
            /// <summary>
            /// Enum Unmask for value: unmask
            /// </summary>
            [EnumMember(Value = "unmask")]
            Unmask = 2,
            
            /// <summary>
            /// Enum Start for value: start
            /// </summary>
            [EnumMember(Value = "start")]
            Start = 3,
            
            /// <summary>
            /// Enum Stop for value: stop
            /// </summary>
            [EnumMember(Value = "stop")]
            Stop = 4
        }

        /// <summary>
        /// Gets or Sets RecordAction
        /// </summary>
        [DataMember(Name="Record-Action", EmitDefaultValue=false)]
        public RecordActionEnum RecordAction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanRecordCall" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiDialplanRecordCall() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanRecordCall" /> class.
        /// </summary>
        /// <param name="additionalHeaders">additionalHeaders.</param>
        /// <param name="applicationName">applicationName (required).</param>
        /// <param name="callID">callID (required).</param>
        /// <param name="channelsAsStereo">channelsAsStereo.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="followTransfer">followTransfer.</param>
        /// <param name="insertAt">insertAt.</param>
        /// <param name="mediaName">mediaName.</param>
        /// <param name="mediaRecorder">mediaRecorder.</param>
        /// <param name="mediaRecordingEndpointID">mediaRecordingEndpointID.</param>
        /// <param name="mediaRecordingID">mediaRecordingID.</param>
        /// <param name="mediaRecordingOrigin">mediaRecordingOrigin.</param>
        /// <param name="mediaTransferDestination">mediaTransferDestination.</param>
        /// <param name="mediaTransferMethod">mediaTransferMethod.</param>
        /// <param name="recordAction">recordAction (required).</param>
        /// <param name="recordMinSec">recordMinSec.</param>
        /// <param name="recordSampleRate">recordSampleRate.</param>
        /// <param name="recordingVariables">recordingVariables.</param>
        /// <param name="timeLimit">timeLimit.</param>
        public KapiDialplanRecordCall(List<Object> additionalHeaders = default(List<Object>), ApplicationNameEnum applicationName = default(ApplicationNameEnum), string callID = default(string), string channelsAsStereo = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string followTransfer = default(string), InsertAtEnum? insertAt = default(InsertAtEnum?), string mediaName = default(string), string mediaRecorder = default(string), string mediaRecordingEndpointID = default(string), string mediaRecordingID = default(string), string mediaRecordingOrigin = default(string), string mediaTransferDestination = default(string), string mediaTransferMethod = default(string), RecordActionEnum recordAction = default(RecordActionEnum), string recordMinSec = default(string), int? recordSampleRate = default(int?), string recordingVariables = default(string), int? timeLimit = default(int?))
        {
            // to ensure "applicationName" is required (not null)
            if (applicationName == null)
            {
                throw new InvalidDataException("applicationName is a required property for KapiDialplanRecordCall and cannot be null");
            }
            else
            {
                this.ApplicationName = applicationName;
            }
            // to ensure "callID" is required (not null)
            if (callID == null)
            {
                throw new InvalidDataException("callID is a required property for KapiDialplanRecordCall and cannot be null");
            }
            else
            {
                this.CallID = callID;
            }
            // to ensure "recordAction" is required (not null)
            if (recordAction == null)
            {
                throw new InvalidDataException("recordAction is a required property for KapiDialplanRecordCall and cannot be null");
            }
            else
            {
                this.RecordAction = recordAction;
            }
            this.AdditionalHeaders = additionalHeaders;
            this.ChannelsAsStereo = channelsAsStereo;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.FollowTransfer = followTransfer;
            this.InsertAt = insertAt;
            this.MediaName = mediaName;
            this.MediaRecorder = mediaRecorder;
            this.MediaRecordingEndpointID = mediaRecordingEndpointID;
            this.MediaRecordingID = mediaRecordingID;
            this.MediaRecordingOrigin = mediaRecordingOrigin;
            this.MediaTransferDestination = mediaTransferDestination;
            this.MediaTransferMethod = mediaTransferMethod;
            this.RecordMinSec = recordMinSec;
            this.RecordSampleRate = recordSampleRate;
            this.RecordingVariables = recordingVariables;
            this.TimeLimit = timeLimit;
        }
        
        /// <summary>
        /// Gets or Sets AdditionalHeaders
        /// </summary>
        [DataMember(Name="Additional-Headers", EmitDefaultValue=false)]
        public List<Object> AdditionalHeaders { get; set; }


        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }

        /// <summary>
        /// Gets or Sets ChannelsAsStereo
        /// </summary>
        [DataMember(Name="Channels-As-Stereo", EmitDefaultValue=false)]
        public string ChannelsAsStereo { get; set; }



        /// <summary>
        /// Gets or Sets FollowTransfer
        /// </summary>
        [DataMember(Name="Follow-Transfer", EmitDefaultValue=false)]
        public string FollowTransfer { get; set; }


        /// <summary>
        /// Gets or Sets MediaName
        /// </summary>
        [DataMember(Name="Media-Name", EmitDefaultValue=false)]
        public string MediaName { get; set; }

        /// <summary>
        /// Gets or Sets MediaRecorder
        /// </summary>
        [DataMember(Name="Media-Recorder", EmitDefaultValue=false)]
        public string MediaRecorder { get; set; }

        /// <summary>
        /// Gets or Sets MediaRecordingEndpointID
        /// </summary>
        [DataMember(Name="Media-Recording-Endpoint-ID", EmitDefaultValue=false)]
        public string MediaRecordingEndpointID { get; set; }

        /// <summary>
        /// Gets or Sets MediaRecordingID
        /// </summary>
        [DataMember(Name="Media-Recording-ID", EmitDefaultValue=false)]
        public string MediaRecordingID { get; set; }

        /// <summary>
        /// Gets or Sets MediaRecordingOrigin
        /// </summary>
        [DataMember(Name="Media-Recording-Origin", EmitDefaultValue=false)]
        public string MediaRecordingOrigin { get; set; }

        /// <summary>
        /// Gets or Sets MediaTransferDestination
        /// </summary>
        [DataMember(Name="Media-Transfer-Destination", EmitDefaultValue=false)]
        public string MediaTransferDestination { get; set; }

        /// <summary>
        /// Gets or Sets MediaTransferMethod
        /// </summary>
        [DataMember(Name="Media-Transfer-Method", EmitDefaultValue=false)]
        public string MediaTransferMethod { get; set; }


        /// <summary>
        /// Gets or Sets RecordMinSec
        /// </summary>
        [DataMember(Name="Record-Min-Sec", EmitDefaultValue=false)]
        public string RecordMinSec { get; set; }

        /// <summary>
        /// Gets or Sets RecordSampleRate
        /// </summary>
        [DataMember(Name="Record-Sample-Rate", EmitDefaultValue=false)]
        public int? RecordSampleRate { get; set; }

        /// <summary>
        /// Gets or Sets RecordingVariables
        /// </summary>
        [DataMember(Name="Recording-Variables", EmitDefaultValue=false)]
        public string RecordingVariables { get; set; }

        /// <summary>
        /// Gets or Sets TimeLimit
        /// </summary>
        [DataMember(Name="Time-Limit", EmitDefaultValue=false)]
        public int? TimeLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiDialplanRecordCall {\n");
            sb.Append("  AdditionalHeaders: ").Append(AdditionalHeaders).Append("\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  ChannelsAsStereo: ").Append(ChannelsAsStereo).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  FollowTransfer: ").Append(FollowTransfer).Append("\n");
            sb.Append("  InsertAt: ").Append(InsertAt).Append("\n");
            sb.Append("  MediaName: ").Append(MediaName).Append("\n");
            sb.Append("  MediaRecorder: ").Append(MediaRecorder).Append("\n");
            sb.Append("  MediaRecordingEndpointID: ").Append(MediaRecordingEndpointID).Append("\n");
            sb.Append("  MediaRecordingID: ").Append(MediaRecordingID).Append("\n");
            sb.Append("  MediaRecordingOrigin: ").Append(MediaRecordingOrigin).Append("\n");
            sb.Append("  MediaTransferDestination: ").Append(MediaTransferDestination).Append("\n");
            sb.Append("  MediaTransferMethod: ").Append(MediaTransferMethod).Append("\n");
            sb.Append("  RecordAction: ").Append(RecordAction).Append("\n");
            sb.Append("  RecordMinSec: ").Append(RecordMinSec).Append("\n");
            sb.Append("  RecordSampleRate: ").Append(RecordSampleRate).Append("\n");
            sb.Append("  RecordingVariables: ").Append(RecordingVariables).Append("\n");
            sb.Append("  TimeLimit: ").Append(TimeLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiDialplanRecordCall);
        }

        /// <summary>
        /// Returns true if KapiDialplanRecordCall instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiDialplanRecordCall to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiDialplanRecordCall input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdditionalHeaders == input.AdditionalHeaders ||
                    this.AdditionalHeaders != null &&
                    this.AdditionalHeaders.SequenceEqual(input.AdditionalHeaders)
                ) && 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.ChannelsAsStereo == input.ChannelsAsStereo ||
                    (this.ChannelsAsStereo != null &&
                    this.ChannelsAsStereo.Equals(input.ChannelsAsStereo))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.FollowTransfer == input.FollowTransfer ||
                    (this.FollowTransfer != null &&
                    this.FollowTransfer.Equals(input.FollowTransfer))
                ) && 
                (
                    this.InsertAt == input.InsertAt ||
                    (this.InsertAt != null &&
                    this.InsertAt.Equals(input.InsertAt))
                ) && 
                (
                    this.MediaName == input.MediaName ||
                    (this.MediaName != null &&
                    this.MediaName.Equals(input.MediaName))
                ) && 
                (
                    this.MediaRecorder == input.MediaRecorder ||
                    (this.MediaRecorder != null &&
                    this.MediaRecorder.Equals(input.MediaRecorder))
                ) && 
                (
                    this.MediaRecordingEndpointID == input.MediaRecordingEndpointID ||
                    (this.MediaRecordingEndpointID != null &&
                    this.MediaRecordingEndpointID.Equals(input.MediaRecordingEndpointID))
                ) && 
                (
                    this.MediaRecordingID == input.MediaRecordingID ||
                    (this.MediaRecordingID != null &&
                    this.MediaRecordingID.Equals(input.MediaRecordingID))
                ) && 
                (
                    this.MediaRecordingOrigin == input.MediaRecordingOrigin ||
                    (this.MediaRecordingOrigin != null &&
                    this.MediaRecordingOrigin.Equals(input.MediaRecordingOrigin))
                ) && 
                (
                    this.MediaTransferDestination == input.MediaTransferDestination ||
                    (this.MediaTransferDestination != null &&
                    this.MediaTransferDestination.Equals(input.MediaTransferDestination))
                ) && 
                (
                    this.MediaTransferMethod == input.MediaTransferMethod ||
                    (this.MediaTransferMethod != null &&
                    this.MediaTransferMethod.Equals(input.MediaTransferMethod))
                ) && 
                (
                    this.RecordAction == input.RecordAction ||
                    (this.RecordAction != null &&
                    this.RecordAction.Equals(input.RecordAction))
                ) && 
                (
                    this.RecordMinSec == input.RecordMinSec ||
                    (this.RecordMinSec != null &&
                    this.RecordMinSec.Equals(input.RecordMinSec))
                ) && 
                (
                    this.RecordSampleRate == input.RecordSampleRate ||
                    (this.RecordSampleRate != null &&
                    this.RecordSampleRate.Equals(input.RecordSampleRate))
                ) && 
                (
                    this.RecordingVariables == input.RecordingVariables ||
                    (this.RecordingVariables != null &&
                    this.RecordingVariables.Equals(input.RecordingVariables))
                ) && 
                (
                    this.TimeLimit == input.TimeLimit ||
                    (this.TimeLimit != null &&
                    this.TimeLimit.Equals(input.TimeLimit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalHeaders != null)
                    hashCode = hashCode * 59 + this.AdditionalHeaders.GetHashCode();
                if (this.ApplicationName != null)
                    hashCode = hashCode * 59 + this.ApplicationName.GetHashCode();
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.ChannelsAsStereo != null)
                    hashCode = hashCode * 59 + this.ChannelsAsStereo.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.FollowTransfer != null)
                    hashCode = hashCode * 59 + this.FollowTransfer.GetHashCode();
                if (this.InsertAt != null)
                    hashCode = hashCode * 59 + this.InsertAt.GetHashCode();
                if (this.MediaName != null)
                    hashCode = hashCode * 59 + this.MediaName.GetHashCode();
                if (this.MediaRecorder != null)
                    hashCode = hashCode * 59 + this.MediaRecorder.GetHashCode();
                if (this.MediaRecordingEndpointID != null)
                    hashCode = hashCode * 59 + this.MediaRecordingEndpointID.GetHashCode();
                if (this.MediaRecordingID != null)
                    hashCode = hashCode * 59 + this.MediaRecordingID.GetHashCode();
                if (this.MediaRecordingOrigin != null)
                    hashCode = hashCode * 59 + this.MediaRecordingOrigin.GetHashCode();
                if (this.MediaTransferDestination != null)
                    hashCode = hashCode * 59 + this.MediaTransferDestination.GetHashCode();
                if (this.MediaTransferMethod != null)
                    hashCode = hashCode * 59 + this.MediaTransferMethod.GetHashCode();
                if (this.RecordAction != null)
                    hashCode = hashCode * 59 + this.RecordAction.GetHashCode();
                if (this.RecordMinSec != null)
                    hashCode = hashCode * 59 + this.RecordMinSec.GetHashCode();
                if (this.RecordSampleRate != null)
                    hashCode = hashCode * 59 + this.RecordSampleRate.GetHashCode();
                if (this.RecordingVariables != null)
                    hashCode = hashCode * 59 + this.RecordingVariables.GetHashCode();
                if (this.TimeLimit != null)
                    hashCode = hashCode * 59 + this.TimeLimit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
