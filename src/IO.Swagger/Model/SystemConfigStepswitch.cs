/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for stepswitch system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigStepswitch :  IEquatable<SystemConfigStepswitch>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigStepswitch" /> class.
        /// </summary>
        /// <param name="assumeInboundE164">stepswitch assume inbound destination DID is e164 format (default to false).</param>
        /// <param name="assumeInboundOriginationE164">stepswitch assume inbound origination DID is e164 format (default to false).</param>
        /// <param name="cidRulesHonorDiversions">stepswitch cid rules honor diversions (default to false).</param>
        /// <param name="defaultAudioCodecs">stepswitch default audio codecs.</param>
        /// <param name="defaultBypassMedia">stepswitch default bypass media (default to false).</param>
        /// <param name="defaultCallerIdType">stepswitch default caller id type (default to &quot;external&quot;).</param>
        /// <param name="defaultCodecs">stepswitch default codecs.</param>
        /// <param name="defaultEmergencyCidNumber">stepswitch default emergency cid number.</param>
        /// <param name="defaultFormatters">stepswitch default formatters.</param>
        /// <param name="defaultPrefix">stepswitch default prefix (default to &quot;&quot;).</param>
        /// <param name="defaultProgressTimeout">stepswitch default progress timeout.</param>
        /// <param name="defaultRoute">stepswitch default route.</param>
        /// <param name="defaultRtcpMux">RTCP protocol messages mixed with RTP data.</param>
        /// <param name="defaultSuffix">stepswitch default suffix (default to &quot;&quot;).</param>
        /// <param name="defaultVideoCodecs">stepswitch default video codecs.</param>
        /// <param name="defaultWeight">stepswitch default weight.</param>
        /// <param name="denyEmergencyBridgeCause">stepswitch deny emergency bridge cause (default to &quot;Emergency service not configured&quot;).</param>
        /// <param name="denyEmergencyBridgeCode">stepswitch deny emergency bridge code.</param>
        /// <param name="denyEmergencyBridgeMedia">stepswitch deny emergency bridge media (default to &quot;prompt://system_media/stepswitch-emergency_not_configured/&quot;).</param>
        /// <param name="denyInvalidEmergencyCid">stepswitch deny invalid emergency cid (default to false).</param>
        /// <param name="ensureValidEmergencyCid">stepswitch ensure valid emergency cid (default to false).</param>
        /// <param name="fixedLengthShortdialCorrection">stepswitch fixed_length_shortdial_correction.</param>
        /// <param name="formatFromUri">stepswitch format from uri (default to false).</param>
        /// <param name="inboundUserField">stepswitch inbound destination user field (default to &quot;Request&quot;).</param>
        /// <param name="inboundUserOriginationField">stepswitch inbound origination user field (default to &quot;From&quot;).</param>
        /// <param name="maxShortdialCorrection">stepswitch maximum shortdial correction.</param>
        /// <param name="minShortdialCorrection">stepswitch minimum shortdial correction.</param>
        /// <param name="routeBy">stepswitch route by (default to &quot;stepswitch_resources&quot;).</param>
        /// <param name="useFirstDedicatedProxyOnly">If gateways are generated for assigned dedicated IPs, only generate one for the first IP (usually local to the call). (default to true).</param>
        public SystemConfigStepswitch(bool? assumeInboundE164 = false, bool? assumeInboundOriginationE164 = false, bool? cidRulesHonorDiversions = false, List<string> defaultAudioCodecs = default(List<string>), bool? defaultBypassMedia = false, string defaultCallerIdType = "external", List<string> defaultCodecs = default(List<string>), string defaultEmergencyCidNumber = default(string), List<Formatters> defaultFormatters = default(List<Formatters>), string defaultPrefix = "", int? defaultProgressTimeout = default(int?), string defaultRoute = default(string), string defaultRtcpMux = default(string), string defaultSuffix = "", List<string> defaultVideoCodecs = default(List<string>), int? defaultWeight = default(int?), string denyEmergencyBridgeCause = "Emergency service not configured", int? denyEmergencyBridgeCode = default(int?), string denyEmergencyBridgeMedia = "prompt://system_media/stepswitch-emergency_not_configured/", bool? denyInvalidEmergencyCid = false, bool? ensureValidEmergencyCid = false, int? fixedLengthShortdialCorrection = default(int?), bool? formatFromUri = false, string inboundUserField = "Request", string inboundUserOriginationField = "From", int? maxShortdialCorrection = default(int?), int? minShortdialCorrection = default(int?), string routeBy = "stepswitch_resources", bool? useFirstDedicatedProxyOnly = true)
        {
            // use default value if no "assumeInboundE164" provided
            if (assumeInboundE164 == null)
            {
                this.AssumeInboundE164 = false;
            }
            else
            {
                this.AssumeInboundE164 = assumeInboundE164;
            }
            // use default value if no "assumeInboundOriginationE164" provided
            if (assumeInboundOriginationE164 == null)
            {
                this.AssumeInboundOriginationE164 = false;
            }
            else
            {
                this.AssumeInboundOriginationE164 = assumeInboundOriginationE164;
            }
            // use default value if no "cidRulesHonorDiversions" provided
            if (cidRulesHonorDiversions == null)
            {
                this.CidRulesHonorDiversions = false;
            }
            else
            {
                this.CidRulesHonorDiversions = cidRulesHonorDiversions;
            }
            this.DefaultAudioCodecs = defaultAudioCodecs;
            // use default value if no "defaultBypassMedia" provided
            if (defaultBypassMedia == null)
            {
                this.DefaultBypassMedia = false;
            }
            else
            {
                this.DefaultBypassMedia = defaultBypassMedia;
            }
            // use default value if no "defaultCallerIdType" provided
            if (defaultCallerIdType == null)
            {
                this.DefaultCallerIdType = "external";
            }
            else
            {
                this.DefaultCallerIdType = defaultCallerIdType;
            }
            this.DefaultCodecs = defaultCodecs;
            this.DefaultEmergencyCidNumber = defaultEmergencyCidNumber;
            this.DefaultFormatters = defaultFormatters;
            // use default value if no "defaultPrefix" provided
            if (defaultPrefix == null)
            {
                this.DefaultPrefix = "";
            }
            else
            {
                this.DefaultPrefix = defaultPrefix;
            }
            this.DefaultProgressTimeout = defaultProgressTimeout;
            this.DefaultRoute = defaultRoute;
            this.DefaultRtcpMux = defaultRtcpMux;
            // use default value if no "defaultSuffix" provided
            if (defaultSuffix == null)
            {
                this.DefaultSuffix = "";
            }
            else
            {
                this.DefaultSuffix = defaultSuffix;
            }
            this.DefaultVideoCodecs = defaultVideoCodecs;
            this.DefaultWeight = defaultWeight;
            // use default value if no "denyEmergencyBridgeCause" provided
            if (denyEmergencyBridgeCause == null)
            {
                this.DenyEmergencyBridgeCause = "Emergency service not configured";
            }
            else
            {
                this.DenyEmergencyBridgeCause = denyEmergencyBridgeCause;
            }
            this.DenyEmergencyBridgeCode = denyEmergencyBridgeCode;
            // use default value if no "denyEmergencyBridgeMedia" provided
            if (denyEmergencyBridgeMedia == null)
            {
                this.DenyEmergencyBridgeMedia = "prompt://system_media/stepswitch-emergency_not_configured/";
            }
            else
            {
                this.DenyEmergencyBridgeMedia = denyEmergencyBridgeMedia;
            }
            // use default value if no "denyInvalidEmergencyCid" provided
            if (denyInvalidEmergencyCid == null)
            {
                this.DenyInvalidEmergencyCid = false;
            }
            else
            {
                this.DenyInvalidEmergencyCid = denyInvalidEmergencyCid;
            }
            // use default value if no "ensureValidEmergencyCid" provided
            if (ensureValidEmergencyCid == null)
            {
                this.EnsureValidEmergencyCid = false;
            }
            else
            {
                this.EnsureValidEmergencyCid = ensureValidEmergencyCid;
            }
            this.FixedLengthShortdialCorrection = fixedLengthShortdialCorrection;
            // use default value if no "formatFromUri" provided
            if (formatFromUri == null)
            {
                this.FormatFromUri = false;
            }
            else
            {
                this.FormatFromUri = formatFromUri;
            }
            // use default value if no "inboundUserField" provided
            if (inboundUserField == null)
            {
                this.InboundUserField = "Request";
            }
            else
            {
                this.InboundUserField = inboundUserField;
            }
            // use default value if no "inboundUserOriginationField" provided
            if (inboundUserOriginationField == null)
            {
                this.InboundUserOriginationField = "From";
            }
            else
            {
                this.InboundUserOriginationField = inboundUserOriginationField;
            }
            this.MaxShortdialCorrection = maxShortdialCorrection;
            this.MinShortdialCorrection = minShortdialCorrection;
            // use default value if no "routeBy" provided
            if (routeBy == null)
            {
                this.RouteBy = "stepswitch_resources";
            }
            else
            {
                this.RouteBy = routeBy;
            }
            // use default value if no "useFirstDedicatedProxyOnly" provided
            if (useFirstDedicatedProxyOnly == null)
            {
                this.UseFirstDedicatedProxyOnly = true;
            }
            else
            {
                this.UseFirstDedicatedProxyOnly = useFirstDedicatedProxyOnly;
            }
        }
        
        /// <summary>
        /// stepswitch assume inbound destination DID is e164 format
        /// </summary>
        /// <value>stepswitch assume inbound destination DID is e164 format</value>
        [DataMember(Name="assume_inbound_e164", EmitDefaultValue=false)]
        public bool? AssumeInboundE164 { get; set; }

        /// <summary>
        /// stepswitch assume inbound origination DID is e164 format
        /// </summary>
        /// <value>stepswitch assume inbound origination DID is e164 format</value>
        [DataMember(Name="assume_inbound_origination_e164", EmitDefaultValue=false)]
        public bool? AssumeInboundOriginationE164 { get; set; }

        /// <summary>
        /// stepswitch cid rules honor diversions
        /// </summary>
        /// <value>stepswitch cid rules honor diversions</value>
        [DataMember(Name="cid_rules_honor_diversions", EmitDefaultValue=false)]
        public bool? CidRulesHonorDiversions { get; set; }

        /// <summary>
        /// stepswitch default audio codecs
        /// </summary>
        /// <value>stepswitch default audio codecs</value>
        [DataMember(Name="default_audio_codecs", EmitDefaultValue=false)]
        public List<string> DefaultAudioCodecs { get; set; }

        /// <summary>
        /// stepswitch default bypass media
        /// </summary>
        /// <value>stepswitch default bypass media</value>
        [DataMember(Name="default_bypass_media", EmitDefaultValue=false)]
        public bool? DefaultBypassMedia { get; set; }

        /// <summary>
        /// stepswitch default caller id type
        /// </summary>
        /// <value>stepswitch default caller id type</value>
        [DataMember(Name="default_caller_id_type", EmitDefaultValue=false)]
        public string DefaultCallerIdType { get; set; }

        /// <summary>
        /// stepswitch default codecs
        /// </summary>
        /// <value>stepswitch default codecs</value>
        [DataMember(Name="default_codecs", EmitDefaultValue=false)]
        public List<string> DefaultCodecs { get; set; }

        /// <summary>
        /// stepswitch default emergency cid number
        /// </summary>
        /// <value>stepswitch default emergency cid number</value>
        [DataMember(Name="default_emergency_cid_number", EmitDefaultValue=false)]
        public string DefaultEmergencyCidNumber { get; set; }

        /// <summary>
        /// stepswitch default formatters
        /// </summary>
        /// <value>stepswitch default formatters</value>
        [DataMember(Name="default_formatters", EmitDefaultValue=false)]
        public List<Formatters> DefaultFormatters { get; set; }

        /// <summary>
        /// stepswitch default prefix
        /// </summary>
        /// <value>stepswitch default prefix</value>
        [DataMember(Name="default_prefix", EmitDefaultValue=false)]
        public string DefaultPrefix { get; set; }

        /// <summary>
        /// stepswitch default progress timeout
        /// </summary>
        /// <value>stepswitch default progress timeout</value>
        [DataMember(Name="default_progress_timeout", EmitDefaultValue=false)]
        public int? DefaultProgressTimeout { get; set; }

        /// <summary>
        /// stepswitch default route
        /// </summary>
        /// <value>stepswitch default route</value>
        [DataMember(Name="default_route", EmitDefaultValue=false)]
        public string DefaultRoute { get; set; }

        /// <summary>
        /// RTCP protocol messages mixed with RTP data
        /// </summary>
        /// <value>RTCP protocol messages mixed with RTP data</value>
        [DataMember(Name="default_rtcp_mux", EmitDefaultValue=false)]
        public string DefaultRtcpMux { get; set; }

        /// <summary>
        /// stepswitch default suffix
        /// </summary>
        /// <value>stepswitch default suffix</value>
        [DataMember(Name="default_suffix", EmitDefaultValue=false)]
        public string DefaultSuffix { get; set; }

        /// <summary>
        /// stepswitch default video codecs
        /// </summary>
        /// <value>stepswitch default video codecs</value>
        [DataMember(Name="default_video_codecs", EmitDefaultValue=false)]
        public List<string> DefaultVideoCodecs { get; set; }

        /// <summary>
        /// stepswitch default weight
        /// </summary>
        /// <value>stepswitch default weight</value>
        [DataMember(Name="default_weight", EmitDefaultValue=false)]
        public int? DefaultWeight { get; set; }

        /// <summary>
        /// stepswitch deny emergency bridge cause
        /// </summary>
        /// <value>stepswitch deny emergency bridge cause</value>
        [DataMember(Name="deny_emergency_bridge_cause", EmitDefaultValue=false)]
        public string DenyEmergencyBridgeCause { get; set; }

        /// <summary>
        /// stepswitch deny emergency bridge code
        /// </summary>
        /// <value>stepswitch deny emergency bridge code</value>
        [DataMember(Name="deny_emergency_bridge_code", EmitDefaultValue=false)]
        public int? DenyEmergencyBridgeCode { get; set; }

        /// <summary>
        /// stepswitch deny emergency bridge media
        /// </summary>
        /// <value>stepswitch deny emergency bridge media</value>
        [DataMember(Name="deny_emergency_bridge_media", EmitDefaultValue=false)]
        public string DenyEmergencyBridgeMedia { get; set; }

        /// <summary>
        /// stepswitch deny invalid emergency cid
        /// </summary>
        /// <value>stepswitch deny invalid emergency cid</value>
        [DataMember(Name="deny_invalid_emergency_cid", EmitDefaultValue=false)]
        public bool? DenyInvalidEmergencyCid { get; set; }

        /// <summary>
        /// stepswitch ensure valid emergency cid
        /// </summary>
        /// <value>stepswitch ensure valid emergency cid</value>
        [DataMember(Name="ensure_valid_emergency_cid", EmitDefaultValue=false)]
        public bool? EnsureValidEmergencyCid { get; set; }

        /// <summary>
        /// stepswitch fixed_length_shortdial_correction
        /// </summary>
        /// <value>stepswitch fixed_length_shortdial_correction</value>
        [DataMember(Name="fixed_length_shortdial_correction", EmitDefaultValue=false)]
        public int? FixedLengthShortdialCorrection { get; set; }

        /// <summary>
        /// stepswitch format from uri
        /// </summary>
        /// <value>stepswitch format from uri</value>
        [DataMember(Name="format_from_uri", EmitDefaultValue=false)]
        public bool? FormatFromUri { get; set; }

        /// <summary>
        /// stepswitch inbound destination user field
        /// </summary>
        /// <value>stepswitch inbound destination user field</value>
        [DataMember(Name="inbound_user_field", EmitDefaultValue=false)]
        public string InboundUserField { get; set; }

        /// <summary>
        /// stepswitch inbound origination user field
        /// </summary>
        /// <value>stepswitch inbound origination user field</value>
        [DataMember(Name="inbound_user_origination_field", EmitDefaultValue=false)]
        public string InboundUserOriginationField { get; set; }

        /// <summary>
        /// stepswitch maximum shortdial correction
        /// </summary>
        /// <value>stepswitch maximum shortdial correction</value>
        [DataMember(Name="max_shortdial_correction", EmitDefaultValue=false)]
        public int? MaxShortdialCorrection { get; set; }

        /// <summary>
        /// stepswitch minimum shortdial correction
        /// </summary>
        /// <value>stepswitch minimum shortdial correction</value>
        [DataMember(Name="min_shortdial_correction", EmitDefaultValue=false)]
        public int? MinShortdialCorrection { get; set; }

        /// <summary>
        /// stepswitch route by
        /// </summary>
        /// <value>stepswitch route by</value>
        [DataMember(Name="route_by", EmitDefaultValue=false)]
        public string RouteBy { get; set; }

        /// <summary>
        /// If gateways are generated for assigned dedicated IPs, only generate one for the first IP (usually local to the call).
        /// </summary>
        /// <value>If gateways are generated for assigned dedicated IPs, only generate one for the first IP (usually local to the call).</value>
        [DataMember(Name="use_first_dedicated_proxy_only", EmitDefaultValue=false)]
        public bool? UseFirstDedicatedProxyOnly { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigStepswitch {\n");
            sb.Append("  AssumeInboundE164: ").Append(AssumeInboundE164).Append("\n");
            sb.Append("  AssumeInboundOriginationE164: ").Append(AssumeInboundOriginationE164).Append("\n");
            sb.Append("  CidRulesHonorDiversions: ").Append(CidRulesHonorDiversions).Append("\n");
            sb.Append("  DefaultAudioCodecs: ").Append(DefaultAudioCodecs).Append("\n");
            sb.Append("  DefaultBypassMedia: ").Append(DefaultBypassMedia).Append("\n");
            sb.Append("  DefaultCallerIdType: ").Append(DefaultCallerIdType).Append("\n");
            sb.Append("  DefaultCodecs: ").Append(DefaultCodecs).Append("\n");
            sb.Append("  DefaultEmergencyCidNumber: ").Append(DefaultEmergencyCidNumber).Append("\n");
            sb.Append("  DefaultFormatters: ").Append(DefaultFormatters).Append("\n");
            sb.Append("  DefaultPrefix: ").Append(DefaultPrefix).Append("\n");
            sb.Append("  DefaultProgressTimeout: ").Append(DefaultProgressTimeout).Append("\n");
            sb.Append("  DefaultRoute: ").Append(DefaultRoute).Append("\n");
            sb.Append("  DefaultRtcpMux: ").Append(DefaultRtcpMux).Append("\n");
            sb.Append("  DefaultSuffix: ").Append(DefaultSuffix).Append("\n");
            sb.Append("  DefaultVideoCodecs: ").Append(DefaultVideoCodecs).Append("\n");
            sb.Append("  DefaultWeight: ").Append(DefaultWeight).Append("\n");
            sb.Append("  DenyEmergencyBridgeCause: ").Append(DenyEmergencyBridgeCause).Append("\n");
            sb.Append("  DenyEmergencyBridgeCode: ").Append(DenyEmergencyBridgeCode).Append("\n");
            sb.Append("  DenyEmergencyBridgeMedia: ").Append(DenyEmergencyBridgeMedia).Append("\n");
            sb.Append("  DenyInvalidEmergencyCid: ").Append(DenyInvalidEmergencyCid).Append("\n");
            sb.Append("  EnsureValidEmergencyCid: ").Append(EnsureValidEmergencyCid).Append("\n");
            sb.Append("  FixedLengthShortdialCorrection: ").Append(FixedLengthShortdialCorrection).Append("\n");
            sb.Append("  FormatFromUri: ").Append(FormatFromUri).Append("\n");
            sb.Append("  InboundUserField: ").Append(InboundUserField).Append("\n");
            sb.Append("  InboundUserOriginationField: ").Append(InboundUserOriginationField).Append("\n");
            sb.Append("  MaxShortdialCorrection: ").Append(MaxShortdialCorrection).Append("\n");
            sb.Append("  MinShortdialCorrection: ").Append(MinShortdialCorrection).Append("\n");
            sb.Append("  RouteBy: ").Append(RouteBy).Append("\n");
            sb.Append("  UseFirstDedicatedProxyOnly: ").Append(UseFirstDedicatedProxyOnly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigStepswitch);
        }

        /// <summary>
        /// Returns true if SystemConfigStepswitch instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigStepswitch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigStepswitch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssumeInboundE164 == input.AssumeInboundE164 ||
                    (this.AssumeInboundE164 != null &&
                    this.AssumeInboundE164.Equals(input.AssumeInboundE164))
                ) && 
                (
                    this.AssumeInboundOriginationE164 == input.AssumeInboundOriginationE164 ||
                    (this.AssumeInboundOriginationE164 != null &&
                    this.AssumeInboundOriginationE164.Equals(input.AssumeInboundOriginationE164))
                ) && 
                (
                    this.CidRulesHonorDiversions == input.CidRulesHonorDiversions ||
                    (this.CidRulesHonorDiversions != null &&
                    this.CidRulesHonorDiversions.Equals(input.CidRulesHonorDiversions))
                ) && 
                (
                    this.DefaultAudioCodecs == input.DefaultAudioCodecs ||
                    this.DefaultAudioCodecs != null &&
                    this.DefaultAudioCodecs.SequenceEqual(input.DefaultAudioCodecs)
                ) && 
                (
                    this.DefaultBypassMedia == input.DefaultBypassMedia ||
                    (this.DefaultBypassMedia != null &&
                    this.DefaultBypassMedia.Equals(input.DefaultBypassMedia))
                ) && 
                (
                    this.DefaultCallerIdType == input.DefaultCallerIdType ||
                    (this.DefaultCallerIdType != null &&
                    this.DefaultCallerIdType.Equals(input.DefaultCallerIdType))
                ) && 
                (
                    this.DefaultCodecs == input.DefaultCodecs ||
                    this.DefaultCodecs != null &&
                    this.DefaultCodecs.SequenceEqual(input.DefaultCodecs)
                ) && 
                (
                    this.DefaultEmergencyCidNumber == input.DefaultEmergencyCidNumber ||
                    (this.DefaultEmergencyCidNumber != null &&
                    this.DefaultEmergencyCidNumber.Equals(input.DefaultEmergencyCidNumber))
                ) && 
                (
                    this.DefaultFormatters == input.DefaultFormatters ||
                    this.DefaultFormatters != null &&
                    this.DefaultFormatters.SequenceEqual(input.DefaultFormatters)
                ) && 
                (
                    this.DefaultPrefix == input.DefaultPrefix ||
                    (this.DefaultPrefix != null &&
                    this.DefaultPrefix.Equals(input.DefaultPrefix))
                ) && 
                (
                    this.DefaultProgressTimeout == input.DefaultProgressTimeout ||
                    (this.DefaultProgressTimeout != null &&
                    this.DefaultProgressTimeout.Equals(input.DefaultProgressTimeout))
                ) && 
                (
                    this.DefaultRoute == input.DefaultRoute ||
                    (this.DefaultRoute != null &&
                    this.DefaultRoute.Equals(input.DefaultRoute))
                ) && 
                (
                    this.DefaultRtcpMux == input.DefaultRtcpMux ||
                    (this.DefaultRtcpMux != null &&
                    this.DefaultRtcpMux.Equals(input.DefaultRtcpMux))
                ) && 
                (
                    this.DefaultSuffix == input.DefaultSuffix ||
                    (this.DefaultSuffix != null &&
                    this.DefaultSuffix.Equals(input.DefaultSuffix))
                ) && 
                (
                    this.DefaultVideoCodecs == input.DefaultVideoCodecs ||
                    this.DefaultVideoCodecs != null &&
                    this.DefaultVideoCodecs.SequenceEqual(input.DefaultVideoCodecs)
                ) && 
                (
                    this.DefaultWeight == input.DefaultWeight ||
                    (this.DefaultWeight != null &&
                    this.DefaultWeight.Equals(input.DefaultWeight))
                ) && 
                (
                    this.DenyEmergencyBridgeCause == input.DenyEmergencyBridgeCause ||
                    (this.DenyEmergencyBridgeCause != null &&
                    this.DenyEmergencyBridgeCause.Equals(input.DenyEmergencyBridgeCause))
                ) && 
                (
                    this.DenyEmergencyBridgeCode == input.DenyEmergencyBridgeCode ||
                    (this.DenyEmergencyBridgeCode != null &&
                    this.DenyEmergencyBridgeCode.Equals(input.DenyEmergencyBridgeCode))
                ) && 
                (
                    this.DenyEmergencyBridgeMedia == input.DenyEmergencyBridgeMedia ||
                    (this.DenyEmergencyBridgeMedia != null &&
                    this.DenyEmergencyBridgeMedia.Equals(input.DenyEmergencyBridgeMedia))
                ) && 
                (
                    this.DenyInvalidEmergencyCid == input.DenyInvalidEmergencyCid ||
                    (this.DenyInvalidEmergencyCid != null &&
                    this.DenyInvalidEmergencyCid.Equals(input.DenyInvalidEmergencyCid))
                ) && 
                (
                    this.EnsureValidEmergencyCid == input.EnsureValidEmergencyCid ||
                    (this.EnsureValidEmergencyCid != null &&
                    this.EnsureValidEmergencyCid.Equals(input.EnsureValidEmergencyCid))
                ) && 
                (
                    this.FixedLengthShortdialCorrection == input.FixedLengthShortdialCorrection ||
                    (this.FixedLengthShortdialCorrection != null &&
                    this.FixedLengthShortdialCorrection.Equals(input.FixedLengthShortdialCorrection))
                ) && 
                (
                    this.FormatFromUri == input.FormatFromUri ||
                    (this.FormatFromUri != null &&
                    this.FormatFromUri.Equals(input.FormatFromUri))
                ) && 
                (
                    this.InboundUserField == input.InboundUserField ||
                    (this.InboundUserField != null &&
                    this.InboundUserField.Equals(input.InboundUserField))
                ) && 
                (
                    this.InboundUserOriginationField == input.InboundUserOriginationField ||
                    (this.InboundUserOriginationField != null &&
                    this.InboundUserOriginationField.Equals(input.InboundUserOriginationField))
                ) && 
                (
                    this.MaxShortdialCorrection == input.MaxShortdialCorrection ||
                    (this.MaxShortdialCorrection != null &&
                    this.MaxShortdialCorrection.Equals(input.MaxShortdialCorrection))
                ) && 
                (
                    this.MinShortdialCorrection == input.MinShortdialCorrection ||
                    (this.MinShortdialCorrection != null &&
                    this.MinShortdialCorrection.Equals(input.MinShortdialCorrection))
                ) && 
                (
                    this.RouteBy == input.RouteBy ||
                    (this.RouteBy != null &&
                    this.RouteBy.Equals(input.RouteBy))
                ) && 
                (
                    this.UseFirstDedicatedProxyOnly == input.UseFirstDedicatedProxyOnly ||
                    (this.UseFirstDedicatedProxyOnly != null &&
                    this.UseFirstDedicatedProxyOnly.Equals(input.UseFirstDedicatedProxyOnly))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssumeInboundE164 != null)
                    hashCode = hashCode * 59 + this.AssumeInboundE164.GetHashCode();
                if (this.AssumeInboundOriginationE164 != null)
                    hashCode = hashCode * 59 + this.AssumeInboundOriginationE164.GetHashCode();
                if (this.CidRulesHonorDiversions != null)
                    hashCode = hashCode * 59 + this.CidRulesHonorDiversions.GetHashCode();
                if (this.DefaultAudioCodecs != null)
                    hashCode = hashCode * 59 + this.DefaultAudioCodecs.GetHashCode();
                if (this.DefaultBypassMedia != null)
                    hashCode = hashCode * 59 + this.DefaultBypassMedia.GetHashCode();
                if (this.DefaultCallerIdType != null)
                    hashCode = hashCode * 59 + this.DefaultCallerIdType.GetHashCode();
                if (this.DefaultCodecs != null)
                    hashCode = hashCode * 59 + this.DefaultCodecs.GetHashCode();
                if (this.DefaultEmergencyCidNumber != null)
                    hashCode = hashCode * 59 + this.DefaultEmergencyCidNumber.GetHashCode();
                if (this.DefaultFormatters != null)
                    hashCode = hashCode * 59 + this.DefaultFormatters.GetHashCode();
                if (this.DefaultPrefix != null)
                    hashCode = hashCode * 59 + this.DefaultPrefix.GetHashCode();
                if (this.DefaultProgressTimeout != null)
                    hashCode = hashCode * 59 + this.DefaultProgressTimeout.GetHashCode();
                if (this.DefaultRoute != null)
                    hashCode = hashCode * 59 + this.DefaultRoute.GetHashCode();
                if (this.DefaultRtcpMux != null)
                    hashCode = hashCode * 59 + this.DefaultRtcpMux.GetHashCode();
                if (this.DefaultSuffix != null)
                    hashCode = hashCode * 59 + this.DefaultSuffix.GetHashCode();
                if (this.DefaultVideoCodecs != null)
                    hashCode = hashCode * 59 + this.DefaultVideoCodecs.GetHashCode();
                if (this.DefaultWeight != null)
                    hashCode = hashCode * 59 + this.DefaultWeight.GetHashCode();
                if (this.DenyEmergencyBridgeCause != null)
                    hashCode = hashCode * 59 + this.DenyEmergencyBridgeCause.GetHashCode();
                if (this.DenyEmergencyBridgeCode != null)
                    hashCode = hashCode * 59 + this.DenyEmergencyBridgeCode.GetHashCode();
                if (this.DenyEmergencyBridgeMedia != null)
                    hashCode = hashCode * 59 + this.DenyEmergencyBridgeMedia.GetHashCode();
                if (this.DenyInvalidEmergencyCid != null)
                    hashCode = hashCode * 59 + this.DenyInvalidEmergencyCid.GetHashCode();
                if (this.EnsureValidEmergencyCid != null)
                    hashCode = hashCode * 59 + this.EnsureValidEmergencyCid.GetHashCode();
                if (this.FixedLengthShortdialCorrection != null)
                    hashCode = hashCode * 59 + this.FixedLengthShortdialCorrection.GetHashCode();
                if (this.FormatFromUri != null)
                    hashCode = hashCode * 59 + this.FormatFromUri.GetHashCode();
                if (this.InboundUserField != null)
                    hashCode = hashCode * 59 + this.InboundUserField.GetHashCode();
                if (this.InboundUserOriginationField != null)
                    hashCode = hashCode * 59 + this.InboundUserOriginationField.GetHashCode();
                if (this.MaxShortdialCorrection != null)
                    hashCode = hashCode * 59 + this.MaxShortdialCorrection.GetHashCode();
                if (this.MinShortdialCorrection != null)
                    hashCode = hashCode * 59 + this.MinShortdialCorrection.GetHashCode();
                if (this.RouteBy != null)
                    hashCode = hashCode * 59 + this.RouteBy.GetHashCode();
                if (this.UseFirstDedicatedProxyOnly != null)
                    hashCode = hashCode * 59 + this.UseFirstDedicatedProxyOnly.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FixedLengthShortdialCorrection (int?) minimum
            if(this.FixedLengthShortdialCorrection < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FixedLengthShortdialCorrection, must be a value greater than or equal to 1.", new [] { "FixedLengthShortdialCorrection" });
            }

            // MaxShortdialCorrection (int?) minimum
            if(this.MaxShortdialCorrection < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxShortdialCorrection, must be a value greater than or equal to 1.", new [] { "MaxShortdialCorrection" });
            }

            // MinShortdialCorrection (int?) minimum
            if(this.MinShortdialCorrection < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinShortdialCorrection, must be a value greater than or equal to 1.", new [] { "MinShortdialCorrection" });
            }

            yield break;
        }
    }

}
