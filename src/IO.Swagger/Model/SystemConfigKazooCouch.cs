/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for kazoo_couch system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigKazooCouch :  IEquatable<SystemConfigKazooCouch>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigKazooCouch" /> class.
        /// </summary>
        /// <param name="adminPort">The CouchDB API port, typically 5986.</param>
        /// <param name="allowMaintenanceDbDelete">kazoo_couch allow maintenance db delete (default to false).</param>
        /// <param name="apiPort">The CouchDB API port, typically 5984.</param>
        /// <param name="compactAutomatically">kazoo_couch compact automatically (default to false).</param>
        /// <param name="defaultChunkSize">kazoo_couch default chunk size.</param>
        /// <param name="maxCompactingShards">kazoo_couch maximum compacting shards.</param>
        /// <param name="maxCompactingViews">kazoo_couch maximum compacting views.</param>
        /// <param name="maxConcurrentDocsToArchive">kazoo_couch maximum concurrent docs to archive.</param>
        /// <param name="maxWaitForCompactionPids">kazoo_couch maximum wait for compaction pids.</param>
        /// <param name="minDataSize">kazoo_couch minimum data size.</param>
        /// <param name="minRatio">kazoo_couch minimum ratio.</param>
        /// <param name="sleepBetweenPoll">kazoo_couch sleep between poll.</param>
        /// <param name="useBigcouchDirect">kazoo_couch use bigcouch direct (default to true).</param>
        public SystemConfigKazooCouch(int? adminPort = default(int?), bool? allowMaintenanceDbDelete = false, int? apiPort = default(int?), bool? compactAutomatically = false, int? defaultChunkSize = default(int?), int? maxCompactingShards = default(int?), int? maxCompactingViews = default(int?), int? maxConcurrentDocsToArchive = default(int?), int? maxWaitForCompactionPids = default(int?), int? minDataSize = default(int?), decimal? minRatio = default(decimal?), int? sleepBetweenPoll = default(int?), bool? useBigcouchDirect = true)
        {
            this.AdminPort = adminPort;
            // use default value if no "allowMaintenanceDbDelete" provided
            if (allowMaintenanceDbDelete == null)
            {
                this.AllowMaintenanceDbDelete = false;
            }
            else
            {
                this.AllowMaintenanceDbDelete = allowMaintenanceDbDelete;
            }
            this.ApiPort = apiPort;
            // use default value if no "compactAutomatically" provided
            if (compactAutomatically == null)
            {
                this.CompactAutomatically = false;
            }
            else
            {
                this.CompactAutomatically = compactAutomatically;
            }
            this.DefaultChunkSize = defaultChunkSize;
            this.MaxCompactingShards = maxCompactingShards;
            this.MaxCompactingViews = maxCompactingViews;
            this.MaxConcurrentDocsToArchive = maxConcurrentDocsToArchive;
            this.MaxWaitForCompactionPids = maxWaitForCompactionPids;
            this.MinDataSize = minDataSize;
            this.MinRatio = minRatio;
            this.SleepBetweenPoll = sleepBetweenPoll;
            // use default value if no "useBigcouchDirect" provided
            if (useBigcouchDirect == null)
            {
                this.UseBigcouchDirect = true;
            }
            else
            {
                this.UseBigcouchDirect = useBigcouchDirect;
            }
        }
        
        /// <summary>
        /// The CouchDB API port, typically 5986
        /// </summary>
        /// <value>The CouchDB API port, typically 5986</value>
        [DataMember(Name="admin_port", EmitDefaultValue=false)]
        public int? AdminPort { get; set; }

        /// <summary>
        /// kazoo_couch allow maintenance db delete
        /// </summary>
        /// <value>kazoo_couch allow maintenance db delete</value>
        [DataMember(Name="allow_maintenance_db_delete", EmitDefaultValue=false)]
        public bool? AllowMaintenanceDbDelete { get; set; }

        /// <summary>
        /// The CouchDB API port, typically 5984
        /// </summary>
        /// <value>The CouchDB API port, typically 5984</value>
        [DataMember(Name="api_port", EmitDefaultValue=false)]
        public int? ApiPort { get; set; }

        /// <summary>
        /// kazoo_couch compact automatically
        /// </summary>
        /// <value>kazoo_couch compact automatically</value>
        [DataMember(Name="compact_automatically", EmitDefaultValue=false)]
        public bool? CompactAutomatically { get; set; }

        /// <summary>
        /// kazoo_couch default chunk size
        /// </summary>
        /// <value>kazoo_couch default chunk size</value>
        [DataMember(Name="default_chunk_size", EmitDefaultValue=false)]
        public int? DefaultChunkSize { get; set; }

        /// <summary>
        /// kazoo_couch maximum compacting shards
        /// </summary>
        /// <value>kazoo_couch maximum compacting shards</value>
        [DataMember(Name="max_compacting_shards", EmitDefaultValue=false)]
        public int? MaxCompactingShards { get; set; }

        /// <summary>
        /// kazoo_couch maximum compacting views
        /// </summary>
        /// <value>kazoo_couch maximum compacting views</value>
        [DataMember(Name="max_compacting_views", EmitDefaultValue=false)]
        public int? MaxCompactingViews { get; set; }

        /// <summary>
        /// kazoo_couch maximum concurrent docs to archive
        /// </summary>
        /// <value>kazoo_couch maximum concurrent docs to archive</value>
        [DataMember(Name="max_concurrent_docs_to_archive", EmitDefaultValue=false)]
        public int? MaxConcurrentDocsToArchive { get; set; }

        /// <summary>
        /// kazoo_couch maximum wait for compaction pids
        /// </summary>
        /// <value>kazoo_couch maximum wait for compaction pids</value>
        [DataMember(Name="max_wait_for_compaction_pids", EmitDefaultValue=false)]
        public int? MaxWaitForCompactionPids { get; set; }

        /// <summary>
        /// kazoo_couch minimum data size
        /// </summary>
        /// <value>kazoo_couch minimum data size</value>
        [DataMember(Name="min_data_size", EmitDefaultValue=false)]
        public int? MinDataSize { get; set; }

        /// <summary>
        /// kazoo_couch minimum ratio
        /// </summary>
        /// <value>kazoo_couch minimum ratio</value>
        [DataMember(Name="min_ratio", EmitDefaultValue=false)]
        public decimal? MinRatio { get; set; }

        /// <summary>
        /// kazoo_couch sleep between poll
        /// </summary>
        /// <value>kazoo_couch sleep between poll</value>
        [DataMember(Name="sleep_between_poll", EmitDefaultValue=false)]
        public int? SleepBetweenPoll { get; set; }

        /// <summary>
        /// kazoo_couch use bigcouch direct
        /// </summary>
        /// <value>kazoo_couch use bigcouch direct</value>
        [DataMember(Name="use_bigcouch_direct", EmitDefaultValue=false)]
        public bool? UseBigcouchDirect { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigKazooCouch {\n");
            sb.Append("  AdminPort: ").Append(AdminPort).Append("\n");
            sb.Append("  AllowMaintenanceDbDelete: ").Append(AllowMaintenanceDbDelete).Append("\n");
            sb.Append("  ApiPort: ").Append(ApiPort).Append("\n");
            sb.Append("  CompactAutomatically: ").Append(CompactAutomatically).Append("\n");
            sb.Append("  DefaultChunkSize: ").Append(DefaultChunkSize).Append("\n");
            sb.Append("  MaxCompactingShards: ").Append(MaxCompactingShards).Append("\n");
            sb.Append("  MaxCompactingViews: ").Append(MaxCompactingViews).Append("\n");
            sb.Append("  MaxConcurrentDocsToArchive: ").Append(MaxConcurrentDocsToArchive).Append("\n");
            sb.Append("  MaxWaitForCompactionPids: ").Append(MaxWaitForCompactionPids).Append("\n");
            sb.Append("  MinDataSize: ").Append(MinDataSize).Append("\n");
            sb.Append("  MinRatio: ").Append(MinRatio).Append("\n");
            sb.Append("  SleepBetweenPoll: ").Append(SleepBetweenPoll).Append("\n");
            sb.Append("  UseBigcouchDirect: ").Append(UseBigcouchDirect).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigKazooCouch);
        }

        /// <summary>
        /// Returns true if SystemConfigKazooCouch instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigKazooCouch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigKazooCouch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdminPort == input.AdminPort ||
                    (this.AdminPort != null &&
                    this.AdminPort.Equals(input.AdminPort))
                ) && 
                (
                    this.AllowMaintenanceDbDelete == input.AllowMaintenanceDbDelete ||
                    (this.AllowMaintenanceDbDelete != null &&
                    this.AllowMaintenanceDbDelete.Equals(input.AllowMaintenanceDbDelete))
                ) && 
                (
                    this.ApiPort == input.ApiPort ||
                    (this.ApiPort != null &&
                    this.ApiPort.Equals(input.ApiPort))
                ) && 
                (
                    this.CompactAutomatically == input.CompactAutomatically ||
                    (this.CompactAutomatically != null &&
                    this.CompactAutomatically.Equals(input.CompactAutomatically))
                ) && 
                (
                    this.DefaultChunkSize == input.DefaultChunkSize ||
                    (this.DefaultChunkSize != null &&
                    this.DefaultChunkSize.Equals(input.DefaultChunkSize))
                ) && 
                (
                    this.MaxCompactingShards == input.MaxCompactingShards ||
                    (this.MaxCompactingShards != null &&
                    this.MaxCompactingShards.Equals(input.MaxCompactingShards))
                ) && 
                (
                    this.MaxCompactingViews == input.MaxCompactingViews ||
                    (this.MaxCompactingViews != null &&
                    this.MaxCompactingViews.Equals(input.MaxCompactingViews))
                ) && 
                (
                    this.MaxConcurrentDocsToArchive == input.MaxConcurrentDocsToArchive ||
                    (this.MaxConcurrentDocsToArchive != null &&
                    this.MaxConcurrentDocsToArchive.Equals(input.MaxConcurrentDocsToArchive))
                ) && 
                (
                    this.MaxWaitForCompactionPids == input.MaxWaitForCompactionPids ||
                    (this.MaxWaitForCompactionPids != null &&
                    this.MaxWaitForCompactionPids.Equals(input.MaxWaitForCompactionPids))
                ) && 
                (
                    this.MinDataSize == input.MinDataSize ||
                    (this.MinDataSize != null &&
                    this.MinDataSize.Equals(input.MinDataSize))
                ) && 
                (
                    this.MinRatio == input.MinRatio ||
                    (this.MinRatio != null &&
                    this.MinRatio.Equals(input.MinRatio))
                ) && 
                (
                    this.SleepBetweenPoll == input.SleepBetweenPoll ||
                    (this.SleepBetweenPoll != null &&
                    this.SleepBetweenPoll.Equals(input.SleepBetweenPoll))
                ) && 
                (
                    this.UseBigcouchDirect == input.UseBigcouchDirect ||
                    (this.UseBigcouchDirect != null &&
                    this.UseBigcouchDirect.Equals(input.UseBigcouchDirect))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdminPort != null)
                    hashCode = hashCode * 59 + this.AdminPort.GetHashCode();
                if (this.AllowMaintenanceDbDelete != null)
                    hashCode = hashCode * 59 + this.AllowMaintenanceDbDelete.GetHashCode();
                if (this.ApiPort != null)
                    hashCode = hashCode * 59 + this.ApiPort.GetHashCode();
                if (this.CompactAutomatically != null)
                    hashCode = hashCode * 59 + this.CompactAutomatically.GetHashCode();
                if (this.DefaultChunkSize != null)
                    hashCode = hashCode * 59 + this.DefaultChunkSize.GetHashCode();
                if (this.MaxCompactingShards != null)
                    hashCode = hashCode * 59 + this.MaxCompactingShards.GetHashCode();
                if (this.MaxCompactingViews != null)
                    hashCode = hashCode * 59 + this.MaxCompactingViews.GetHashCode();
                if (this.MaxConcurrentDocsToArchive != null)
                    hashCode = hashCode * 59 + this.MaxConcurrentDocsToArchive.GetHashCode();
                if (this.MaxWaitForCompactionPids != null)
                    hashCode = hashCode * 59 + this.MaxWaitForCompactionPids.GetHashCode();
                if (this.MinDataSize != null)
                    hashCode = hashCode * 59 + this.MinDataSize.GetHashCode();
                if (this.MinRatio != null)
                    hashCode = hashCode * 59 + this.MinRatio.GetHashCode();
                if (this.SleepBetweenPoll != null)
                    hashCode = hashCode * 59 + this.SleepBetweenPoll.GetHashCode();
                if (this.UseBigcouchDirect != null)
                    hashCode = hashCode * 59 + this.UseBigcouchDirect.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
