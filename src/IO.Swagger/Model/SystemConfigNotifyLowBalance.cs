/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for notify.low_balance system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigNotifyLowBalance :  IEquatable<SystemConfigNotifyLowBalance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigNotifyLowBalance" /> class.
        /// </summary>
        /// <param name="defaultEnabled">notify.low_balance default enabled (default to false).</param>
        /// <param name="threshold">default threshold that will trigger a low balance notification.</param>
        public SystemConfigNotifyLowBalance(bool? defaultEnabled = false, decimal? threshold = default(decimal?))
        {
            // use default value if no "defaultEnabled" provided
            if (defaultEnabled == null)
            {
                this.DefaultEnabled = false;
            }
            else
            {
                this.DefaultEnabled = defaultEnabled;
            }
            this.Threshold = threshold;
        }
        
        /// <summary>
        /// notify.low_balance default enabled
        /// </summary>
        /// <value>notify.low_balance default enabled</value>
        [DataMember(Name="default_enabled", EmitDefaultValue=false)]
        public bool? DefaultEnabled { get; set; }

        /// <summary>
        /// default threshold that will trigger a low balance notification
        /// </summary>
        /// <value>default threshold that will trigger a low balance notification</value>
        [DataMember(Name="threshold", EmitDefaultValue=false)]
        public decimal? Threshold { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigNotifyLowBalance {\n");
            sb.Append("  DefaultEnabled: ").Append(DefaultEnabled).Append("\n");
            sb.Append("  Threshold: ").Append(Threshold).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigNotifyLowBalance);
        }

        /// <summary>
        /// Returns true if SystemConfigNotifyLowBalance instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigNotifyLowBalance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigNotifyLowBalance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefaultEnabled == input.DefaultEnabled ||
                    (this.DefaultEnabled != null &&
                    this.DefaultEnabled.Equals(input.DefaultEnabled))
                ) && 
                (
                    this.Threshold == input.Threshold ||
                    (this.Threshold != null &&
                    this.Threshold.Equals(input.Threshold))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultEnabled != null)
                    hashCode = hashCode * 59 + this.DefaultEnabled.GetHashCode();
                if (this.Threshold != null)
                    hashCode = hashCode * 59 + this.Threshold.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
