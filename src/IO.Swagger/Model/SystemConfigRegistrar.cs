/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for registrar system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigRegistrar :  IEquatable<SystemConfigRegistrar>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigRegistrar" /> class.
        /// </summary>
        /// <param name="deviceEnabledDefault">registrar device enabled default (default to true).</param>
        /// <param name="listeners">registrar listeners.</param>
        /// <param name="ownerEnabledDefault">registrar owner enabled default (default to true).</param>
        /// <param name="useAggregate">registrar use aggregate (default to true).</param>
        public SystemConfigRegistrar(bool? deviceEnabledDefault = true, int? listeners = default(int?), bool? ownerEnabledDefault = true, bool? useAggregate = true)
        {
            // use default value if no "deviceEnabledDefault" provided
            if (deviceEnabledDefault == null)
            {
                this.DeviceEnabledDefault = true;
            }
            else
            {
                this.DeviceEnabledDefault = deviceEnabledDefault;
            }
            this.Listeners = listeners;
            // use default value if no "ownerEnabledDefault" provided
            if (ownerEnabledDefault == null)
            {
                this.OwnerEnabledDefault = true;
            }
            else
            {
                this.OwnerEnabledDefault = ownerEnabledDefault;
            }
            // use default value if no "useAggregate" provided
            if (useAggregate == null)
            {
                this.UseAggregate = true;
            }
            else
            {
                this.UseAggregate = useAggregate;
            }
        }
        
        /// <summary>
        /// registrar device enabled default
        /// </summary>
        /// <value>registrar device enabled default</value>
        [DataMember(Name="device_enabled_default", EmitDefaultValue=false)]
        public bool? DeviceEnabledDefault { get; set; }

        /// <summary>
        /// registrar listeners
        /// </summary>
        /// <value>registrar listeners</value>
        [DataMember(Name="listeners", EmitDefaultValue=false)]
        public int? Listeners { get; set; }

        /// <summary>
        /// registrar owner enabled default
        /// </summary>
        /// <value>registrar owner enabled default</value>
        [DataMember(Name="owner_enabled_default", EmitDefaultValue=false)]
        public bool? OwnerEnabledDefault { get; set; }

        /// <summary>
        /// registrar use aggregate
        /// </summary>
        /// <value>registrar use aggregate</value>
        [DataMember(Name="use_aggregate", EmitDefaultValue=false)]
        public bool? UseAggregate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigRegistrar {\n");
            sb.Append("  DeviceEnabledDefault: ").Append(DeviceEnabledDefault).Append("\n");
            sb.Append("  Listeners: ").Append(Listeners).Append("\n");
            sb.Append("  OwnerEnabledDefault: ").Append(OwnerEnabledDefault).Append("\n");
            sb.Append("  UseAggregate: ").Append(UseAggregate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigRegistrar);
        }

        /// <summary>
        /// Returns true if SystemConfigRegistrar instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigRegistrar to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigRegistrar input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeviceEnabledDefault == input.DeviceEnabledDefault ||
                    (this.DeviceEnabledDefault != null &&
                    this.DeviceEnabledDefault.Equals(input.DeviceEnabledDefault))
                ) && 
                (
                    this.Listeners == input.Listeners ||
                    (this.Listeners != null &&
                    this.Listeners.Equals(input.Listeners))
                ) && 
                (
                    this.OwnerEnabledDefault == input.OwnerEnabledDefault ||
                    (this.OwnerEnabledDefault != null &&
                    this.OwnerEnabledDefault.Equals(input.OwnerEnabledDefault))
                ) && 
                (
                    this.UseAggregate == input.UseAggregate ||
                    (this.UseAggregate != null &&
                    this.UseAggregate.Equals(input.UseAggregate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeviceEnabledDefault != null)
                    hashCode = hashCode * 59 + this.DeviceEnabledDefault.GetHashCode();
                if (this.Listeners != null)
                    hashCode = hashCode * 59 + this.Listeners.GetHashCode();
                if (this.OwnerEnabledDefault != null)
                    hashCode = hashCode * 59 + this.OwnerEnabledDefault.GetHashCode();
                if (this.UseAggregate != null)
                    hashCode = hashCode * 59 + this.UseAggregate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
