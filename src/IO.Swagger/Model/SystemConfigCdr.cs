/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for cdr system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigCdr :  IEquatable<SystemConfigCdr>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigCdr" /> class.
        /// </summary>
        /// <param name="ignoreApps">cdr ignore apps.</param>
        /// <param name="ignoreLoopbackBowout">cdr ignore loopback bowout (default to true).</param>
        /// <param name="refreshViewEnabled">enable or disable the view refresh feature (default to false).</param>
        /// <param name="refreshViewThreshold">number of cdrs to trigger view refresh.</param>
        /// <param name="refreshViewTimeout">time in seconds to to trigger cdrs view refresh.</param>
        /// <param name="storeAnonymous">cdr store anonymous (default to false).</param>
        /// <param name="v3MigrateNumMonths">cdr v3 migrate num months.</param>
        public SystemConfigCdr(List<string> ignoreApps = default(List<string>), bool? ignoreLoopbackBowout = true, bool? refreshViewEnabled = false, int? refreshViewThreshold = default(int?), int? refreshViewTimeout = default(int?), bool? storeAnonymous = false, int? v3MigrateNumMonths = default(int?))
        {
            this.IgnoreApps = ignoreApps;
            // use default value if no "ignoreLoopbackBowout" provided
            if (ignoreLoopbackBowout == null)
            {
                this.IgnoreLoopbackBowout = true;
            }
            else
            {
                this.IgnoreLoopbackBowout = ignoreLoopbackBowout;
            }
            // use default value if no "refreshViewEnabled" provided
            if (refreshViewEnabled == null)
            {
                this.RefreshViewEnabled = false;
            }
            else
            {
                this.RefreshViewEnabled = refreshViewEnabled;
            }
            this.RefreshViewThreshold = refreshViewThreshold;
            this.RefreshViewTimeout = refreshViewTimeout;
            // use default value if no "storeAnonymous" provided
            if (storeAnonymous == null)
            {
                this.StoreAnonymous = false;
            }
            else
            {
                this.StoreAnonymous = storeAnonymous;
            }
            this.V3MigrateNumMonths = v3MigrateNumMonths;
        }
        
        /// <summary>
        /// cdr ignore apps
        /// </summary>
        /// <value>cdr ignore apps</value>
        [DataMember(Name="ignore_apps", EmitDefaultValue=false)]
        public List<string> IgnoreApps { get; set; }

        /// <summary>
        /// cdr ignore loopback bowout
        /// </summary>
        /// <value>cdr ignore loopback bowout</value>
        [DataMember(Name="ignore_loopback_bowout", EmitDefaultValue=false)]
        public bool? IgnoreLoopbackBowout { get; set; }

        /// <summary>
        /// enable or disable the view refresh feature
        /// </summary>
        /// <value>enable or disable the view refresh feature</value>
        [DataMember(Name="refresh_view_enabled", EmitDefaultValue=false)]
        public bool? RefreshViewEnabled { get; set; }

        /// <summary>
        /// number of cdrs to trigger view refresh
        /// </summary>
        /// <value>number of cdrs to trigger view refresh</value>
        [DataMember(Name="refresh_view_threshold", EmitDefaultValue=false)]
        public int? RefreshViewThreshold { get; set; }

        /// <summary>
        /// time in seconds to to trigger cdrs view refresh
        /// </summary>
        /// <value>time in seconds to to trigger cdrs view refresh</value>
        [DataMember(Name="refresh_view_timeout", EmitDefaultValue=false)]
        public int? RefreshViewTimeout { get; set; }

        /// <summary>
        /// cdr store anonymous
        /// </summary>
        /// <value>cdr store anonymous</value>
        [DataMember(Name="store_anonymous", EmitDefaultValue=false)]
        public bool? StoreAnonymous { get; set; }

        /// <summary>
        /// cdr v3 migrate num months
        /// </summary>
        /// <value>cdr v3 migrate num months</value>
        [DataMember(Name="v3_migrate_num_months", EmitDefaultValue=false)]
        public int? V3MigrateNumMonths { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigCdr {\n");
            sb.Append("  IgnoreApps: ").Append(IgnoreApps).Append("\n");
            sb.Append("  IgnoreLoopbackBowout: ").Append(IgnoreLoopbackBowout).Append("\n");
            sb.Append("  RefreshViewEnabled: ").Append(RefreshViewEnabled).Append("\n");
            sb.Append("  RefreshViewThreshold: ").Append(RefreshViewThreshold).Append("\n");
            sb.Append("  RefreshViewTimeout: ").Append(RefreshViewTimeout).Append("\n");
            sb.Append("  StoreAnonymous: ").Append(StoreAnonymous).Append("\n");
            sb.Append("  V3MigrateNumMonths: ").Append(V3MigrateNumMonths).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigCdr);
        }

        /// <summary>
        /// Returns true if SystemConfigCdr instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigCdr to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigCdr input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IgnoreApps == input.IgnoreApps ||
                    this.IgnoreApps != null &&
                    this.IgnoreApps.SequenceEqual(input.IgnoreApps)
                ) && 
                (
                    this.IgnoreLoopbackBowout == input.IgnoreLoopbackBowout ||
                    (this.IgnoreLoopbackBowout != null &&
                    this.IgnoreLoopbackBowout.Equals(input.IgnoreLoopbackBowout))
                ) && 
                (
                    this.RefreshViewEnabled == input.RefreshViewEnabled ||
                    (this.RefreshViewEnabled != null &&
                    this.RefreshViewEnabled.Equals(input.RefreshViewEnabled))
                ) && 
                (
                    this.RefreshViewThreshold == input.RefreshViewThreshold ||
                    (this.RefreshViewThreshold != null &&
                    this.RefreshViewThreshold.Equals(input.RefreshViewThreshold))
                ) && 
                (
                    this.RefreshViewTimeout == input.RefreshViewTimeout ||
                    (this.RefreshViewTimeout != null &&
                    this.RefreshViewTimeout.Equals(input.RefreshViewTimeout))
                ) && 
                (
                    this.StoreAnonymous == input.StoreAnonymous ||
                    (this.StoreAnonymous != null &&
                    this.StoreAnonymous.Equals(input.StoreAnonymous))
                ) && 
                (
                    this.V3MigrateNumMonths == input.V3MigrateNumMonths ||
                    (this.V3MigrateNumMonths != null &&
                    this.V3MigrateNumMonths.Equals(input.V3MigrateNumMonths))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IgnoreApps != null)
                    hashCode = hashCode * 59 + this.IgnoreApps.GetHashCode();
                if (this.IgnoreLoopbackBowout != null)
                    hashCode = hashCode * 59 + this.IgnoreLoopbackBowout.GetHashCode();
                if (this.RefreshViewEnabled != null)
                    hashCode = hashCode * 59 + this.RefreshViewEnabled.GetHashCode();
                if (this.RefreshViewThreshold != null)
                    hashCode = hashCode * 59 + this.RefreshViewThreshold.GetHashCode();
                if (this.RefreshViewTimeout != null)
                    hashCode = hashCode * 59 + this.RefreshViewTimeout.GetHashCode();
                if (this.StoreAnonymous != null)
                    hashCode = hashCode * 59 + this.StoreAnonymous.GetHashCode();
                if (this.V3MigrateNumMonths != null)
                    hashCode = hashCode * 59 + this.V3MigrateNumMonths.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
