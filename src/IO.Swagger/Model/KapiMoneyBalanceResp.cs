/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for money.balance_resp
    /// </summary>
    [DataContract]
    public partial class KapiMoneyBalanceResp :  IEquatable<KapiMoneyBalanceResp>, IValidatableObject
    {
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Transaction for value: transaction
            /// </summary>
            [EnumMember(Value = "transaction")]
            Transaction = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Balanceresp for value: balance_resp
            /// </summary>
            [EnumMember(Value = "balance_resp")]
            Balanceresp = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiMoneyBalanceResp" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiMoneyBalanceResp() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiMoneyBalanceResp" /> class.
        /// </summary>
        /// <param name="accountID">accountID (required).</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="inbound">inbound.</param>
        /// <param name="maxInbound">maxInbound.</param>
        /// <param name="maxTwoWay">maxTwoWay.</param>
        /// <param name="node">node.</param>
        /// <param name="prepay">prepay.</param>
        /// <param name="trunks">trunks.</param>
        /// <param name="twoWay">twoWay.</param>
        public KapiMoneyBalanceResp(string accountID = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string inbound = default(string), string maxInbound = default(string), string maxTwoWay = default(string), string node = default(string), string prepay = default(string), string trunks = default(string), string twoWay = default(string))
        {
            // to ensure "accountID" is required (not null)
            if (accountID == null)
            {
                throw new InvalidDataException("accountID is a required property for KapiMoneyBalanceResp and cannot be null");
            }
            else
            {
                this.AccountID = accountID;
            }
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.Inbound = inbound;
            this.MaxInbound = maxInbound;
            this.MaxTwoWay = maxTwoWay;
            this.Node = node;
            this.Prepay = prepay;
            this.Trunks = trunks;
            this.TwoWay = twoWay;
        }
        
        /// <summary>
        /// Gets or Sets AccountID
        /// </summary>
        [DataMember(Name="Account-ID", EmitDefaultValue=false)]
        public string AccountID { get; set; }



        /// <summary>
        /// Gets or Sets Inbound
        /// </summary>
        [DataMember(Name="Inbound", EmitDefaultValue=false)]
        public string Inbound { get; set; }

        /// <summary>
        /// Gets or Sets MaxInbound
        /// </summary>
        [DataMember(Name="Max-Inbound", EmitDefaultValue=false)]
        public string MaxInbound { get; set; }

        /// <summary>
        /// Gets or Sets MaxTwoWay
        /// </summary>
        [DataMember(Name="Max-Two-Way", EmitDefaultValue=false)]
        public string MaxTwoWay { get; set; }

        /// <summary>
        /// Gets or Sets Node
        /// </summary>
        [DataMember(Name="Node", EmitDefaultValue=false)]
        public string Node { get; set; }

        /// <summary>
        /// Gets or Sets Prepay
        /// </summary>
        [DataMember(Name="Prepay", EmitDefaultValue=false)]
        public string Prepay { get; set; }

        /// <summary>
        /// Gets or Sets Trunks
        /// </summary>
        [DataMember(Name="Trunks", EmitDefaultValue=false)]
        public string Trunks { get; set; }

        /// <summary>
        /// Gets or Sets TwoWay
        /// </summary>
        [DataMember(Name="Two-Way", EmitDefaultValue=false)]
        public string TwoWay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiMoneyBalanceResp {\n");
            sb.Append("  AccountID: ").Append(AccountID).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  Inbound: ").Append(Inbound).Append("\n");
            sb.Append("  MaxInbound: ").Append(MaxInbound).Append("\n");
            sb.Append("  MaxTwoWay: ").Append(MaxTwoWay).Append("\n");
            sb.Append("  Node: ").Append(Node).Append("\n");
            sb.Append("  Prepay: ").Append(Prepay).Append("\n");
            sb.Append("  Trunks: ").Append(Trunks).Append("\n");
            sb.Append("  TwoWay: ").Append(TwoWay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiMoneyBalanceResp);
        }

        /// <summary>
        /// Returns true if KapiMoneyBalanceResp instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiMoneyBalanceResp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiMoneyBalanceResp input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountID == input.AccountID ||
                    (this.AccountID != null &&
                    this.AccountID.Equals(input.AccountID))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.Inbound == input.Inbound ||
                    (this.Inbound != null &&
                    this.Inbound.Equals(input.Inbound))
                ) && 
                (
                    this.MaxInbound == input.MaxInbound ||
                    (this.MaxInbound != null &&
                    this.MaxInbound.Equals(input.MaxInbound))
                ) && 
                (
                    this.MaxTwoWay == input.MaxTwoWay ||
                    (this.MaxTwoWay != null &&
                    this.MaxTwoWay.Equals(input.MaxTwoWay))
                ) && 
                (
                    this.Node == input.Node ||
                    (this.Node != null &&
                    this.Node.Equals(input.Node))
                ) && 
                (
                    this.Prepay == input.Prepay ||
                    (this.Prepay != null &&
                    this.Prepay.Equals(input.Prepay))
                ) && 
                (
                    this.Trunks == input.Trunks ||
                    (this.Trunks != null &&
                    this.Trunks.Equals(input.Trunks))
                ) && 
                (
                    this.TwoWay == input.TwoWay ||
                    (this.TwoWay != null &&
                    this.TwoWay.Equals(input.TwoWay))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountID != null)
                    hashCode = hashCode * 59 + this.AccountID.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.Inbound != null)
                    hashCode = hashCode * 59 + this.Inbound.GetHashCode();
                if (this.MaxInbound != null)
                    hashCode = hashCode * 59 + this.MaxInbound.GetHashCode();
                if (this.MaxTwoWay != null)
                    hashCode = hashCode * 59 + this.MaxTwoWay.GetHashCode();
                if (this.Node != null)
                    hashCode = hashCode * 59 + this.Node.GetHashCode();
                if (this.Prepay != null)
                    hashCode = hashCode * 59 + this.Prepay.GetHashCode();
                if (this.Trunks != null)
                    hashCode = hashCode * 59 + this.Trunks.GetHashCode();
                if (this.TwoWay != null)
                    hashCode = hashCode * 59 + this.TwoWay.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
