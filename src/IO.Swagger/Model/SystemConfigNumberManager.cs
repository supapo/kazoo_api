/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for number_manager system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigNumberManager :  IEquatable<SystemConfigNumberManager>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigNumberManager" /> class.
        /// </summary>
        /// <param name="allowPortTransitionFromSubmittedToScheduled">should number ports be allowed to transition from submitted to scheduled? (default to false).</param>
        /// <param name="availableModuleName">default carrier module name to use when creating a number (default to &quot;knm_local&quot;).</param>
        /// <param name="carrierModules">carrier modules to perform number search &amp; ordering from.</param>
        /// <param name="classifiers">regular expressions &amp; billing names for numbers.</param>
        /// <param name="converters">suffix for the KNM module to use for E164, NPAN and 1NPAN normalization of numbers.</param>
        /// <param name="defaultForceOutbound">should we &#39;force_outbound&#39; when this feature is not set on the number? (default to false).</param>
        /// <param name="e164Converters">regular expressions to convert numbers to E164 format.</param>
        /// <param name="features">features.</param>
        /// <param name="fetchAccountFromPorts">should we also search ports when trying to &#x60;/identify&#x60; a number? (default to true).</param>
        /// <param name="forceLocalOutbound">default value for &#39;force_outbound&#39; for local numbers only (default to true).</param>
        /// <param name="forcePortInOutbound">default value for &#39;force_outbound&#39; for port_in numbers only (default to true).</param>
        /// <param name="forcePortOutOutbound">default value for &#39;force_outbound&#39; for port_out numbers only (default to true).</param>
        /// <param name="localFeatureOverride">overrides the filtering of external features for local numbers (default to false).</param>
        /// <param name="maximumSearchQuantity">maximum number of returned DIDs in a search query.</param>
        /// <param name="numberSearchTimeoutMs">number manager number search timeout in milliseconds.</param>
        /// <param name="parallelJobsCount">number of concurrent workers that can process a migration at the same time (1&#x3D;non parallel behavior, MUST be &gt;0).</param>
        /// <param name="portInModuleName">completed port requests will create numbers with this carrier module name (default to &quot;knm_local&quot;).</param>
        /// <param name="providers">legacy value for number_manager.features.allow.</param>
        /// <param name="reconcileRegex">if a number matches this regular expression then it is reconcilable (default to &quot;^(\+?1)?\d{10}$|^\+[2-9]\d{7,}$|^011\d*$|^00\d*$&quot;).</param>
        /// <param name="releasedState">state to put numbers in when they are being released and their reserve history is empty (default to &quot;available&quot;).</param>
        /// <param name="shouldAge">Should numbers go through an aging period before being available? (default to false).</param>
        /// <param name="shouldPermanentlyDelete">when disconnecting numbers, if this flag is true they will be deleted otherwise they will go back to a pool. Local numbers are not affected by this flag (default to false).</param>
        /// <param name="timeBetweenAccountsMs">time to pause in between the processing of accounts in milliseconds.</param>
        /// <param name="timeBetweenDbMs">number_manager time_between_db_ms.</param>
        /// <param name="timeBetweenNumbersMs">time to pause in between the processing of numbers in milliseconds.</param>
        /// <param name="unauthorizedNumbersLookup">should number search be allowed for unauthenticated API requests? (default to false).</param>
        public SystemConfigNumberManager(bool? allowPortTransitionFromSubmittedToScheduled = false, string availableModuleName = "knm_local", List<string> carrierModules = default(List<string>), Object classifiers = default(Object), List<string> converters = default(List<string>), bool? defaultForceOutbound = false, Object e164Converters = default(Object), SystemConfigNumberManagerFeatures features = default(SystemConfigNumberManagerFeatures), bool? fetchAccountFromPorts = true, bool? forceLocalOutbound = true, bool? forcePortInOutbound = true, bool? forcePortOutOutbound = true, bool? localFeatureOverride = false, int? maximumSearchQuantity = default(int?), int? numberSearchTimeoutMs = default(int?), int? parallelJobsCount = default(int?), string portInModuleName = "knm_local", List<string> providers = default(List<string>), string reconcileRegex = "^(\+?1)?\d{10}$|^\+[2-9]\d{7,}$|^011\d*$|^00\d*$", string releasedState = "available", bool? shouldAge = false, bool? shouldPermanentlyDelete = false, int? timeBetweenAccountsMs = default(int?), int? timeBetweenDbMs = default(int?), int? timeBetweenNumbersMs = default(int?), bool? unauthorizedNumbersLookup = false)
        {
            // use default value if no "allowPortTransitionFromSubmittedToScheduled" provided
            if (allowPortTransitionFromSubmittedToScheduled == null)
            {
                this.AllowPortTransitionFromSubmittedToScheduled = false;
            }
            else
            {
                this.AllowPortTransitionFromSubmittedToScheduled = allowPortTransitionFromSubmittedToScheduled;
            }
            // use default value if no "availableModuleName" provided
            if (availableModuleName == null)
            {
                this.AvailableModuleName = "knm_local";
            }
            else
            {
                this.AvailableModuleName = availableModuleName;
            }
            this.CarrierModules = carrierModules;
            this.Classifiers = classifiers;
            this.Converters = converters;
            // use default value if no "defaultForceOutbound" provided
            if (defaultForceOutbound == null)
            {
                this.DefaultForceOutbound = false;
            }
            else
            {
                this.DefaultForceOutbound = defaultForceOutbound;
            }
            this.E164Converters = e164Converters;
            this.Features = features;
            // use default value if no "fetchAccountFromPorts" provided
            if (fetchAccountFromPorts == null)
            {
                this.FetchAccountFromPorts = true;
            }
            else
            {
                this.FetchAccountFromPorts = fetchAccountFromPorts;
            }
            // use default value if no "forceLocalOutbound" provided
            if (forceLocalOutbound == null)
            {
                this.ForceLocalOutbound = true;
            }
            else
            {
                this.ForceLocalOutbound = forceLocalOutbound;
            }
            // use default value if no "forcePortInOutbound" provided
            if (forcePortInOutbound == null)
            {
                this.ForcePortInOutbound = true;
            }
            else
            {
                this.ForcePortInOutbound = forcePortInOutbound;
            }
            // use default value if no "forcePortOutOutbound" provided
            if (forcePortOutOutbound == null)
            {
                this.ForcePortOutOutbound = true;
            }
            else
            {
                this.ForcePortOutOutbound = forcePortOutOutbound;
            }
            // use default value if no "localFeatureOverride" provided
            if (localFeatureOverride == null)
            {
                this.LocalFeatureOverride = false;
            }
            else
            {
                this.LocalFeatureOverride = localFeatureOverride;
            }
            this.MaximumSearchQuantity = maximumSearchQuantity;
            this.NumberSearchTimeoutMs = numberSearchTimeoutMs;
            this.ParallelJobsCount = parallelJobsCount;
            // use default value if no "portInModuleName" provided
            if (portInModuleName == null)
            {
                this.PortInModuleName = "knm_local";
            }
            else
            {
                this.PortInModuleName = portInModuleName;
            }
            this.Providers = providers;
            // use default value if no "reconcileRegex" provided
            if (reconcileRegex == null)
            {
                this.ReconcileRegex = "^(\+?1)?\d{10}$|^\+[2-9]\d{7,}$|^011\d*$|^00\d*$";
            }
            else
            {
                this.ReconcileRegex = reconcileRegex;
            }
            // use default value if no "releasedState" provided
            if (releasedState == null)
            {
                this.ReleasedState = "available";
            }
            else
            {
                this.ReleasedState = releasedState;
            }
            // use default value if no "shouldAge" provided
            if (shouldAge == null)
            {
                this.ShouldAge = false;
            }
            else
            {
                this.ShouldAge = shouldAge;
            }
            // use default value if no "shouldPermanentlyDelete" provided
            if (shouldPermanentlyDelete == null)
            {
                this.ShouldPermanentlyDelete = false;
            }
            else
            {
                this.ShouldPermanentlyDelete = shouldPermanentlyDelete;
            }
            this.TimeBetweenAccountsMs = timeBetweenAccountsMs;
            this.TimeBetweenDbMs = timeBetweenDbMs;
            this.TimeBetweenNumbersMs = timeBetweenNumbersMs;
            // use default value if no "unauthorizedNumbersLookup" provided
            if (unauthorizedNumbersLookup == null)
            {
                this.UnauthorizedNumbersLookup = false;
            }
            else
            {
                this.UnauthorizedNumbersLookup = unauthorizedNumbersLookup;
            }
        }
        
        /// <summary>
        /// should number ports be allowed to transition from submitted to scheduled?
        /// </summary>
        /// <value>should number ports be allowed to transition from submitted to scheduled?</value>
        [DataMember(Name="allow_port_transition_from_submitted_to_scheduled", EmitDefaultValue=false)]
        public bool? AllowPortTransitionFromSubmittedToScheduled { get; set; }

        /// <summary>
        /// default carrier module name to use when creating a number
        /// </summary>
        /// <value>default carrier module name to use when creating a number</value>
        [DataMember(Name="available_module_name", EmitDefaultValue=false)]
        public string AvailableModuleName { get; set; }

        /// <summary>
        /// carrier modules to perform number search &amp; ordering from
        /// </summary>
        /// <value>carrier modules to perform number search &amp; ordering from</value>
        [DataMember(Name="carrier_modules", EmitDefaultValue=false)]
        public List<string> CarrierModules { get; set; }

        /// <summary>
        /// regular expressions &amp; billing names for numbers
        /// </summary>
        /// <value>regular expressions &amp; billing names for numbers</value>
        [DataMember(Name="classifiers", EmitDefaultValue=false)]
        public Object Classifiers { get; set; }

        /// <summary>
        /// suffix for the KNM module to use for E164, NPAN and 1NPAN normalization of numbers
        /// </summary>
        /// <value>suffix for the KNM module to use for E164, NPAN and 1NPAN normalization of numbers</value>
        [DataMember(Name="converters", EmitDefaultValue=false)]
        public List<string> Converters { get; set; }

        /// <summary>
        /// should we &#39;force_outbound&#39; when this feature is not set on the number?
        /// </summary>
        /// <value>should we &#39;force_outbound&#39; when this feature is not set on the number?</value>
        [DataMember(Name="default_force_outbound", EmitDefaultValue=false)]
        public bool? DefaultForceOutbound { get; set; }

        /// <summary>
        /// regular expressions to convert numbers to E164 format
        /// </summary>
        /// <value>regular expressions to convert numbers to E164 format</value>
        [DataMember(Name="e164_converters", EmitDefaultValue=false)]
        public Object E164Converters { get; set; }

        /// <summary>
        /// Gets or Sets Features
        /// </summary>
        [DataMember(Name="features", EmitDefaultValue=false)]
        public SystemConfigNumberManagerFeatures Features { get; set; }

        /// <summary>
        /// should we also search ports when trying to &#x60;/identify&#x60; a number?
        /// </summary>
        /// <value>should we also search ports when trying to &#x60;/identify&#x60; a number?</value>
        [DataMember(Name="fetch_account_from_ports", EmitDefaultValue=false)]
        public bool? FetchAccountFromPorts { get; set; }

        /// <summary>
        /// default value for &#39;force_outbound&#39; for local numbers only
        /// </summary>
        /// <value>default value for &#39;force_outbound&#39; for local numbers only</value>
        [DataMember(Name="force_local_outbound", EmitDefaultValue=false)]
        public bool? ForceLocalOutbound { get; set; }

        /// <summary>
        /// default value for &#39;force_outbound&#39; for port_in numbers only
        /// </summary>
        /// <value>default value for &#39;force_outbound&#39; for port_in numbers only</value>
        [DataMember(Name="force_port_in_outbound", EmitDefaultValue=false)]
        public bool? ForcePortInOutbound { get; set; }

        /// <summary>
        /// default value for &#39;force_outbound&#39; for port_out numbers only
        /// </summary>
        /// <value>default value for &#39;force_outbound&#39; for port_out numbers only</value>
        [DataMember(Name="force_port_out_outbound", EmitDefaultValue=false)]
        public bool? ForcePortOutOutbound { get; set; }

        /// <summary>
        /// overrides the filtering of external features for local numbers
        /// </summary>
        /// <value>overrides the filtering of external features for local numbers</value>
        [DataMember(Name="local_feature_override", EmitDefaultValue=false)]
        public bool? LocalFeatureOverride { get; set; }

        /// <summary>
        /// maximum number of returned DIDs in a search query
        /// </summary>
        /// <value>maximum number of returned DIDs in a search query</value>
        [DataMember(Name="maximum_search_quantity", EmitDefaultValue=false)]
        public int? MaximumSearchQuantity { get; set; }

        /// <summary>
        /// number manager number search timeout in milliseconds
        /// </summary>
        /// <value>number manager number search timeout in milliseconds</value>
        [DataMember(Name="number_search_timeout_ms", EmitDefaultValue=false)]
        public int? NumberSearchTimeoutMs { get; set; }

        /// <summary>
        /// number of concurrent workers that can process a migration at the same time (1&#x3D;non parallel behavior, MUST be &gt;0)
        /// </summary>
        /// <value>number of concurrent workers that can process a migration at the same time (1&#x3D;non parallel behavior, MUST be &gt;0)</value>
        [DataMember(Name="parallel_jobs_count", EmitDefaultValue=false)]
        public int? ParallelJobsCount { get; set; }

        /// <summary>
        /// completed port requests will create numbers with this carrier module name
        /// </summary>
        /// <value>completed port requests will create numbers with this carrier module name</value>
        [DataMember(Name="port_in_module_name", EmitDefaultValue=false)]
        public string PortInModuleName { get; set; }

        /// <summary>
        /// legacy value for number_manager.features.allow
        /// </summary>
        /// <value>legacy value for number_manager.features.allow</value>
        [DataMember(Name="providers", EmitDefaultValue=false)]
        public List<string> Providers { get; set; }

        /// <summary>
        /// if a number matches this regular expression then it is reconcilable
        /// </summary>
        /// <value>if a number matches this regular expression then it is reconcilable</value>
        [DataMember(Name="reconcile_regex", EmitDefaultValue=false)]
        public string ReconcileRegex { get; set; }

        /// <summary>
        /// state to put numbers in when they are being released and their reserve history is empty
        /// </summary>
        /// <value>state to put numbers in when they are being released and their reserve history is empty</value>
        [DataMember(Name="released_state", EmitDefaultValue=false)]
        public string ReleasedState { get; set; }

        /// <summary>
        /// Should numbers go through an aging period before being available?
        /// </summary>
        /// <value>Should numbers go through an aging period before being available?</value>
        [DataMember(Name="should_age", EmitDefaultValue=false)]
        public bool? ShouldAge { get; set; }

        /// <summary>
        /// when disconnecting numbers, if this flag is true they will be deleted otherwise they will go back to a pool. Local numbers are not affected by this flag
        /// </summary>
        /// <value>when disconnecting numbers, if this flag is true they will be deleted otherwise they will go back to a pool. Local numbers are not affected by this flag</value>
        [DataMember(Name="should_permanently_delete", EmitDefaultValue=false)]
        public bool? ShouldPermanentlyDelete { get; set; }

        /// <summary>
        /// time to pause in between the processing of accounts in milliseconds
        /// </summary>
        /// <value>time to pause in between the processing of accounts in milliseconds</value>
        [DataMember(Name="time_between_accounts_ms", EmitDefaultValue=false)]
        public int? TimeBetweenAccountsMs { get; set; }

        /// <summary>
        /// number_manager time_between_db_ms
        /// </summary>
        /// <value>number_manager time_between_db_ms</value>
        [DataMember(Name="time_between_db_ms", EmitDefaultValue=false)]
        public int? TimeBetweenDbMs { get; set; }

        /// <summary>
        /// time to pause in between the processing of numbers in milliseconds
        /// </summary>
        /// <value>time to pause in between the processing of numbers in milliseconds</value>
        [DataMember(Name="time_between_numbers_ms", EmitDefaultValue=false)]
        public int? TimeBetweenNumbersMs { get; set; }

        /// <summary>
        /// should number search be allowed for unauthenticated API requests?
        /// </summary>
        /// <value>should number search be allowed for unauthenticated API requests?</value>
        [DataMember(Name="unauthorized_numbers_lookup", EmitDefaultValue=false)]
        public bool? UnauthorizedNumbersLookup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigNumberManager {\n");
            sb.Append("  AllowPortTransitionFromSubmittedToScheduled: ").Append(AllowPortTransitionFromSubmittedToScheduled).Append("\n");
            sb.Append("  AvailableModuleName: ").Append(AvailableModuleName).Append("\n");
            sb.Append("  CarrierModules: ").Append(CarrierModules).Append("\n");
            sb.Append("  Classifiers: ").Append(Classifiers).Append("\n");
            sb.Append("  Converters: ").Append(Converters).Append("\n");
            sb.Append("  DefaultForceOutbound: ").Append(DefaultForceOutbound).Append("\n");
            sb.Append("  E164Converters: ").Append(E164Converters).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  FetchAccountFromPorts: ").Append(FetchAccountFromPorts).Append("\n");
            sb.Append("  ForceLocalOutbound: ").Append(ForceLocalOutbound).Append("\n");
            sb.Append("  ForcePortInOutbound: ").Append(ForcePortInOutbound).Append("\n");
            sb.Append("  ForcePortOutOutbound: ").Append(ForcePortOutOutbound).Append("\n");
            sb.Append("  LocalFeatureOverride: ").Append(LocalFeatureOverride).Append("\n");
            sb.Append("  MaximumSearchQuantity: ").Append(MaximumSearchQuantity).Append("\n");
            sb.Append("  NumberSearchTimeoutMs: ").Append(NumberSearchTimeoutMs).Append("\n");
            sb.Append("  ParallelJobsCount: ").Append(ParallelJobsCount).Append("\n");
            sb.Append("  PortInModuleName: ").Append(PortInModuleName).Append("\n");
            sb.Append("  Providers: ").Append(Providers).Append("\n");
            sb.Append("  ReconcileRegex: ").Append(ReconcileRegex).Append("\n");
            sb.Append("  ReleasedState: ").Append(ReleasedState).Append("\n");
            sb.Append("  ShouldAge: ").Append(ShouldAge).Append("\n");
            sb.Append("  ShouldPermanentlyDelete: ").Append(ShouldPermanentlyDelete).Append("\n");
            sb.Append("  TimeBetweenAccountsMs: ").Append(TimeBetweenAccountsMs).Append("\n");
            sb.Append("  TimeBetweenDbMs: ").Append(TimeBetweenDbMs).Append("\n");
            sb.Append("  TimeBetweenNumbersMs: ").Append(TimeBetweenNumbersMs).Append("\n");
            sb.Append("  UnauthorizedNumbersLookup: ").Append(UnauthorizedNumbersLookup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigNumberManager);
        }

        /// <summary>
        /// Returns true if SystemConfigNumberManager instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigNumberManager to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigNumberManager input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowPortTransitionFromSubmittedToScheduled == input.AllowPortTransitionFromSubmittedToScheduled ||
                    (this.AllowPortTransitionFromSubmittedToScheduled != null &&
                    this.AllowPortTransitionFromSubmittedToScheduled.Equals(input.AllowPortTransitionFromSubmittedToScheduled))
                ) && 
                (
                    this.AvailableModuleName == input.AvailableModuleName ||
                    (this.AvailableModuleName != null &&
                    this.AvailableModuleName.Equals(input.AvailableModuleName))
                ) && 
                (
                    this.CarrierModules == input.CarrierModules ||
                    this.CarrierModules != null &&
                    this.CarrierModules.SequenceEqual(input.CarrierModules)
                ) && 
                (
                    this.Classifiers == input.Classifiers ||
                    (this.Classifiers != null &&
                    this.Classifiers.Equals(input.Classifiers))
                ) && 
                (
                    this.Converters == input.Converters ||
                    this.Converters != null &&
                    this.Converters.SequenceEqual(input.Converters)
                ) && 
                (
                    this.DefaultForceOutbound == input.DefaultForceOutbound ||
                    (this.DefaultForceOutbound != null &&
                    this.DefaultForceOutbound.Equals(input.DefaultForceOutbound))
                ) && 
                (
                    this.E164Converters == input.E164Converters ||
                    (this.E164Converters != null &&
                    this.E164Converters.Equals(input.E164Converters))
                ) && 
                (
                    this.Features == input.Features ||
                    (this.Features != null &&
                    this.Features.Equals(input.Features))
                ) && 
                (
                    this.FetchAccountFromPorts == input.FetchAccountFromPorts ||
                    (this.FetchAccountFromPorts != null &&
                    this.FetchAccountFromPorts.Equals(input.FetchAccountFromPorts))
                ) && 
                (
                    this.ForceLocalOutbound == input.ForceLocalOutbound ||
                    (this.ForceLocalOutbound != null &&
                    this.ForceLocalOutbound.Equals(input.ForceLocalOutbound))
                ) && 
                (
                    this.ForcePortInOutbound == input.ForcePortInOutbound ||
                    (this.ForcePortInOutbound != null &&
                    this.ForcePortInOutbound.Equals(input.ForcePortInOutbound))
                ) && 
                (
                    this.ForcePortOutOutbound == input.ForcePortOutOutbound ||
                    (this.ForcePortOutOutbound != null &&
                    this.ForcePortOutOutbound.Equals(input.ForcePortOutOutbound))
                ) && 
                (
                    this.LocalFeatureOverride == input.LocalFeatureOverride ||
                    (this.LocalFeatureOverride != null &&
                    this.LocalFeatureOverride.Equals(input.LocalFeatureOverride))
                ) && 
                (
                    this.MaximumSearchQuantity == input.MaximumSearchQuantity ||
                    (this.MaximumSearchQuantity != null &&
                    this.MaximumSearchQuantity.Equals(input.MaximumSearchQuantity))
                ) && 
                (
                    this.NumberSearchTimeoutMs == input.NumberSearchTimeoutMs ||
                    (this.NumberSearchTimeoutMs != null &&
                    this.NumberSearchTimeoutMs.Equals(input.NumberSearchTimeoutMs))
                ) && 
                (
                    this.ParallelJobsCount == input.ParallelJobsCount ||
                    (this.ParallelJobsCount != null &&
                    this.ParallelJobsCount.Equals(input.ParallelJobsCount))
                ) && 
                (
                    this.PortInModuleName == input.PortInModuleName ||
                    (this.PortInModuleName != null &&
                    this.PortInModuleName.Equals(input.PortInModuleName))
                ) && 
                (
                    this.Providers == input.Providers ||
                    this.Providers != null &&
                    this.Providers.SequenceEqual(input.Providers)
                ) && 
                (
                    this.ReconcileRegex == input.ReconcileRegex ||
                    (this.ReconcileRegex != null &&
                    this.ReconcileRegex.Equals(input.ReconcileRegex))
                ) && 
                (
                    this.ReleasedState == input.ReleasedState ||
                    (this.ReleasedState != null &&
                    this.ReleasedState.Equals(input.ReleasedState))
                ) && 
                (
                    this.ShouldAge == input.ShouldAge ||
                    (this.ShouldAge != null &&
                    this.ShouldAge.Equals(input.ShouldAge))
                ) && 
                (
                    this.ShouldPermanentlyDelete == input.ShouldPermanentlyDelete ||
                    (this.ShouldPermanentlyDelete != null &&
                    this.ShouldPermanentlyDelete.Equals(input.ShouldPermanentlyDelete))
                ) && 
                (
                    this.TimeBetweenAccountsMs == input.TimeBetweenAccountsMs ||
                    (this.TimeBetweenAccountsMs != null &&
                    this.TimeBetweenAccountsMs.Equals(input.TimeBetweenAccountsMs))
                ) && 
                (
                    this.TimeBetweenDbMs == input.TimeBetweenDbMs ||
                    (this.TimeBetweenDbMs != null &&
                    this.TimeBetweenDbMs.Equals(input.TimeBetweenDbMs))
                ) && 
                (
                    this.TimeBetweenNumbersMs == input.TimeBetweenNumbersMs ||
                    (this.TimeBetweenNumbersMs != null &&
                    this.TimeBetweenNumbersMs.Equals(input.TimeBetweenNumbersMs))
                ) && 
                (
                    this.UnauthorizedNumbersLookup == input.UnauthorizedNumbersLookup ||
                    (this.UnauthorizedNumbersLookup != null &&
                    this.UnauthorizedNumbersLookup.Equals(input.UnauthorizedNumbersLookup))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowPortTransitionFromSubmittedToScheduled != null)
                    hashCode = hashCode * 59 + this.AllowPortTransitionFromSubmittedToScheduled.GetHashCode();
                if (this.AvailableModuleName != null)
                    hashCode = hashCode * 59 + this.AvailableModuleName.GetHashCode();
                if (this.CarrierModules != null)
                    hashCode = hashCode * 59 + this.CarrierModules.GetHashCode();
                if (this.Classifiers != null)
                    hashCode = hashCode * 59 + this.Classifiers.GetHashCode();
                if (this.Converters != null)
                    hashCode = hashCode * 59 + this.Converters.GetHashCode();
                if (this.DefaultForceOutbound != null)
                    hashCode = hashCode * 59 + this.DefaultForceOutbound.GetHashCode();
                if (this.E164Converters != null)
                    hashCode = hashCode * 59 + this.E164Converters.GetHashCode();
                if (this.Features != null)
                    hashCode = hashCode * 59 + this.Features.GetHashCode();
                if (this.FetchAccountFromPorts != null)
                    hashCode = hashCode * 59 + this.FetchAccountFromPorts.GetHashCode();
                if (this.ForceLocalOutbound != null)
                    hashCode = hashCode * 59 + this.ForceLocalOutbound.GetHashCode();
                if (this.ForcePortInOutbound != null)
                    hashCode = hashCode * 59 + this.ForcePortInOutbound.GetHashCode();
                if (this.ForcePortOutOutbound != null)
                    hashCode = hashCode * 59 + this.ForcePortOutOutbound.GetHashCode();
                if (this.LocalFeatureOverride != null)
                    hashCode = hashCode * 59 + this.LocalFeatureOverride.GetHashCode();
                if (this.MaximumSearchQuantity != null)
                    hashCode = hashCode * 59 + this.MaximumSearchQuantity.GetHashCode();
                if (this.NumberSearchTimeoutMs != null)
                    hashCode = hashCode * 59 + this.NumberSearchTimeoutMs.GetHashCode();
                if (this.ParallelJobsCount != null)
                    hashCode = hashCode * 59 + this.ParallelJobsCount.GetHashCode();
                if (this.PortInModuleName != null)
                    hashCode = hashCode * 59 + this.PortInModuleName.GetHashCode();
                if (this.Providers != null)
                    hashCode = hashCode * 59 + this.Providers.GetHashCode();
                if (this.ReconcileRegex != null)
                    hashCode = hashCode * 59 + this.ReconcileRegex.GetHashCode();
                if (this.ReleasedState != null)
                    hashCode = hashCode * 59 + this.ReleasedState.GetHashCode();
                if (this.ShouldAge != null)
                    hashCode = hashCode * 59 + this.ShouldAge.GetHashCode();
                if (this.ShouldPermanentlyDelete != null)
                    hashCode = hashCode * 59 + this.ShouldPermanentlyDelete.GetHashCode();
                if (this.TimeBetweenAccountsMs != null)
                    hashCode = hashCode * 59 + this.TimeBetweenAccountsMs.GetHashCode();
                if (this.TimeBetweenDbMs != null)
                    hashCode = hashCode * 59 + this.TimeBetweenDbMs.GetHashCode();
                if (this.TimeBetweenNumbersMs != null)
                    hashCode = hashCode * 59 + this.TimeBetweenNumbersMs.GetHashCode();
                if (this.UnauthorizedNumbersLookup != null)
                    hashCode = hashCode * 59 + this.UnauthorizedNumbersLookup.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MaximumSearchQuantity (int?) minimum
            if(this.MaximumSearchQuantity < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaximumSearchQuantity, must be a value greater than or equal to 1.", new [] { "MaximumSearchQuantity" });
            }

            // NumberSearchTimeoutMs (int?) minimum
            if(this.NumberSearchTimeoutMs < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumberSearchTimeoutMs, must be a value greater than or equal to 1.", new [] { "NumberSearchTimeoutMs" });
            }

            // ParallelJobsCount (int?) minimum
            if(this.ParallelJobsCount < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ParallelJobsCount, must be a value greater than or equal to 1.", new [] { "ParallelJobsCount" });
            }

            // TimeBetweenAccountsMs (int?) minimum
            if(this.TimeBetweenAccountsMs < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TimeBetweenAccountsMs, must be a value greater than or equal to 1.", new [] { "TimeBetweenAccountsMs" });
            }

            // TimeBetweenDbMs (int?) minimum
            if(this.TimeBetweenDbMs < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TimeBetweenDbMs, must be a value greater than or equal to 1.", new [] { "TimeBetweenDbMs" });
            }

            // TimeBetweenNumbersMs (int?) minimum
            if(this.TimeBetweenNumbersMs < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TimeBetweenNumbersMs, must be a value greater than or equal to 1.", new [] { "TimeBetweenNumbersMs" });
            }

            yield break;
        }
    }

}
