/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for callflow.resources system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigCallflowResources :  IEquatable<SystemConfigCallflowResources>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigCallflowResources" /> class.
        /// </summary>
        /// <param name="defaultAssertedIdentity">When set to true, the asserted identity will have defaults and force the use of P-Asserted-Identity (instead of RPID) on all outbound offnet calls.  When set to false, P-Asserted-Identity is only used if explicitly set in the account/user/device hierarchy. (default to false).</param>
        /// <param name="defaultEmitAccountId">When set to true, all outbound offnet calls will include a SIP header X-Account-ID with a value of the Kazoo account UUID. (default to false).</param>
        public SystemConfigCallflowResources(bool? defaultAssertedIdentity = false, bool? defaultEmitAccountId = false)
        {
            // use default value if no "defaultAssertedIdentity" provided
            if (defaultAssertedIdentity == null)
            {
                this.DefaultAssertedIdentity = false;
            }
            else
            {
                this.DefaultAssertedIdentity = defaultAssertedIdentity;
            }
            // use default value if no "defaultEmitAccountId" provided
            if (defaultEmitAccountId == null)
            {
                this.DefaultEmitAccountId = false;
            }
            else
            {
                this.DefaultEmitAccountId = defaultEmitAccountId;
            }
        }
        
        /// <summary>
        /// When set to true, the asserted identity will have defaults and force the use of P-Asserted-Identity (instead of RPID) on all outbound offnet calls.  When set to false, P-Asserted-Identity is only used if explicitly set in the account/user/device hierarchy.
        /// </summary>
        /// <value>When set to true, the asserted identity will have defaults and force the use of P-Asserted-Identity (instead of RPID) on all outbound offnet calls.  When set to false, P-Asserted-Identity is only used if explicitly set in the account/user/device hierarchy.</value>
        [DataMember(Name="default_asserted_identity", EmitDefaultValue=false)]
        public bool? DefaultAssertedIdentity { get; set; }

        /// <summary>
        /// When set to true, all outbound offnet calls will include a SIP header X-Account-ID with a value of the Kazoo account UUID.
        /// </summary>
        /// <value>When set to true, all outbound offnet calls will include a SIP header X-Account-ID with a value of the Kazoo account UUID.</value>
        [DataMember(Name="default_emit_account_id", EmitDefaultValue=false)]
        public bool? DefaultEmitAccountId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigCallflowResources {\n");
            sb.Append("  DefaultAssertedIdentity: ").Append(DefaultAssertedIdentity).Append("\n");
            sb.Append("  DefaultEmitAccountId: ").Append(DefaultEmitAccountId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigCallflowResources);
        }

        /// <summary>
        /// Returns true if SystemConfigCallflowResources instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigCallflowResources to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigCallflowResources input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefaultAssertedIdentity == input.DefaultAssertedIdentity ||
                    (this.DefaultAssertedIdentity != null &&
                    this.DefaultAssertedIdentity.Equals(input.DefaultAssertedIdentity))
                ) && 
                (
                    this.DefaultEmitAccountId == input.DefaultEmitAccountId ||
                    (this.DefaultEmitAccountId != null &&
                    this.DefaultEmitAccountId.Equals(input.DefaultEmitAccountId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultAssertedIdentity != null)
                    hashCode = hashCode * 59 + this.DefaultAssertedIdentity.GetHashCode();
                if (this.DefaultEmitAccountId != null)
                    hashCode = hashCode * 59 + this.DefaultEmitAccountId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
