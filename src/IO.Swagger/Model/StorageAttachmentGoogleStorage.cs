/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// schema for google storage attachment entry
    /// </summary>
    [DataContract]
    public partial class StorageAttachmentGoogleStorage :  IEquatable<StorageAttachmentGoogleStorage>, IValidatableObject
    {
        /// <summary>
        /// What handler module to use
        /// </summary>
        /// <value>What handler module to use</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HandlerEnum
        {
            
            /// <summary>
            /// Enum Googlestorage for value: google_storage
            /// </summary>
            [EnumMember(Value = "google_storage")]
            Googlestorage = 1
        }

        /// <summary>
        /// What handler module to use
        /// </summary>
        /// <value>What handler module to use</value>
        [DataMember(Name="handler", EmitDefaultValue=false)]
        public HandlerEnum Handler { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageAttachmentGoogleStorage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StorageAttachmentGoogleStorage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageAttachmentGoogleStorage" /> class.
        /// </summary>
        /// <param name="handler">What handler module to use (required).</param>
        /// <param name="settings">Settings for the Google Storage account (required).</param>
        public StorageAttachmentGoogleStorage(HandlerEnum handler = default(HandlerEnum), Object settings = default(Object))
        {
            // to ensure "handler" is required (not null)
            if (handler == null)
            {
                throw new InvalidDataException("handler is a required property for StorageAttachmentGoogleStorage and cannot be null");
            }
            else
            {
                this.Handler = handler;
            }
            // to ensure "settings" is required (not null)
            if (settings == null)
            {
                throw new InvalidDataException("settings is a required property for StorageAttachmentGoogleStorage and cannot be null");
            }
            else
            {
                this.Settings = settings;
            }
        }
        

        /// <summary>
        /// Settings for the Google Storage account
        /// </summary>
        /// <value>Settings for the Google Storage account</value>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public Object Settings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StorageAttachmentGoogleStorage {\n");
            sb.Append("  Handler: ").Append(Handler).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StorageAttachmentGoogleStorage);
        }

        /// <summary>
        /// Returns true if StorageAttachmentGoogleStorage instances are equal
        /// </summary>
        /// <param name="input">Instance of StorageAttachmentGoogleStorage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorageAttachmentGoogleStorage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Handler == input.Handler ||
                    (this.Handler != null &&
                    this.Handler.Equals(input.Handler))
                ) && 
                (
                    this.Settings == input.Settings ||
                    (this.Settings != null &&
                    this.Settings.Equals(input.Settings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Handler != null)
                    hashCode = hashCode * 59 + this.Handler.GetHashCode();
                if (this.Settings != null)
                    hashCode = hashCode * 59 + this.Settings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
