/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for acdc system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigAcdc :  IEquatable<SystemConfigAcdc>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigAcdc" /> class.
        /// </summary>
        /// <param name="agentInfoFields">acdc agent info fields.</param>
        /// <param name="archivePeriodMs">acdc archive period in milliseconds.</param>
        /// <param name="archiveWindowS">acdc archive window in seconds.</param>
        /// <param name="cleanupPeriodMs">acdc cleanup period in milliseconds.</param>
        /// <param name="cleanupWindowS">acdc cleanup window in seconds.</param>
        /// <param name="defaultAgentPauseTimeout">acdc default agent pause timeout.</param>
        /// <param name="maxConnectFailures">acdc maximum connect failures.</param>
        /// <param name="maxResultSet">acdc maximum result set.</param>
        /// <param name="queueCollectRespTimeout">acdc queue collect resp timeout.</param>
        /// <param name="queueWorkerCount">acdc queue worker count.</param>
        /// <param name="statsQueryLimitsEnabled">When enabled, prevent stats queries with limits greater than max_result_set (default to true).</param>
        public SystemConfigAcdc(List<string> agentInfoFields = default(List<string>), int? archivePeriodMs = default(int?), int? archiveWindowS = default(int?), int? cleanupPeriodMs = default(int?), int? cleanupWindowS = default(int?), int? defaultAgentPauseTimeout = default(int?), int? maxConnectFailures = default(int?), int? maxResultSet = default(int?), int? queueCollectRespTimeout = default(int?), int? queueWorkerCount = default(int?), bool? statsQueryLimitsEnabled = true)
        {
            this.AgentInfoFields = agentInfoFields;
            this.ArchivePeriodMs = archivePeriodMs;
            this.ArchiveWindowS = archiveWindowS;
            this.CleanupPeriodMs = cleanupPeriodMs;
            this.CleanupWindowS = cleanupWindowS;
            this.DefaultAgentPauseTimeout = defaultAgentPauseTimeout;
            this.MaxConnectFailures = maxConnectFailures;
            this.MaxResultSet = maxResultSet;
            this.QueueCollectRespTimeout = queueCollectRespTimeout;
            this.QueueWorkerCount = queueWorkerCount;
            // use default value if no "statsQueryLimitsEnabled" provided
            if (statsQueryLimitsEnabled == null)
            {
                this.StatsQueryLimitsEnabled = true;
            }
            else
            {
                this.StatsQueryLimitsEnabled = statsQueryLimitsEnabled;
            }
        }
        
        /// <summary>
        /// acdc agent info fields
        /// </summary>
        /// <value>acdc agent info fields</value>
        [DataMember(Name="agent_info_fields", EmitDefaultValue=false)]
        public List<string> AgentInfoFields { get; set; }

        /// <summary>
        /// acdc archive period in milliseconds
        /// </summary>
        /// <value>acdc archive period in milliseconds</value>
        [DataMember(Name="archive_period_ms", EmitDefaultValue=false)]
        public int? ArchivePeriodMs { get; set; }

        /// <summary>
        /// acdc archive window in seconds
        /// </summary>
        /// <value>acdc archive window in seconds</value>
        [DataMember(Name="archive_window_s", EmitDefaultValue=false)]
        public int? ArchiveWindowS { get; set; }

        /// <summary>
        /// acdc cleanup period in milliseconds
        /// </summary>
        /// <value>acdc cleanup period in milliseconds</value>
        [DataMember(Name="cleanup_period_ms", EmitDefaultValue=false)]
        public int? CleanupPeriodMs { get; set; }

        /// <summary>
        /// acdc cleanup window in seconds
        /// </summary>
        /// <value>acdc cleanup window in seconds</value>
        [DataMember(Name="cleanup_window_s", EmitDefaultValue=false)]
        public int? CleanupWindowS { get; set; }

        /// <summary>
        /// acdc default agent pause timeout
        /// </summary>
        /// <value>acdc default agent pause timeout</value>
        [DataMember(Name="default_agent_pause_timeout", EmitDefaultValue=false)]
        public int? DefaultAgentPauseTimeout { get; set; }

        /// <summary>
        /// acdc maximum connect failures
        /// </summary>
        /// <value>acdc maximum connect failures</value>
        [DataMember(Name="max_connect_failures", EmitDefaultValue=false)]
        public int? MaxConnectFailures { get; set; }

        /// <summary>
        /// acdc maximum result set
        /// </summary>
        /// <value>acdc maximum result set</value>
        [DataMember(Name="max_result_set", EmitDefaultValue=false)]
        public int? MaxResultSet { get; set; }

        /// <summary>
        /// acdc queue collect resp timeout
        /// </summary>
        /// <value>acdc queue collect resp timeout</value>
        [DataMember(Name="queue_collect_resp_timeout", EmitDefaultValue=false)]
        public int? QueueCollectRespTimeout { get; set; }

        /// <summary>
        /// acdc queue worker count
        /// </summary>
        /// <value>acdc queue worker count</value>
        [DataMember(Name="queue_worker_count", EmitDefaultValue=false)]
        public int? QueueWorkerCount { get; set; }

        /// <summary>
        /// When enabled, prevent stats queries with limits greater than max_result_set
        /// </summary>
        /// <value>When enabled, prevent stats queries with limits greater than max_result_set</value>
        [DataMember(Name="stats_query_limits_enabled", EmitDefaultValue=false)]
        public bool? StatsQueryLimitsEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigAcdc {\n");
            sb.Append("  AgentInfoFields: ").Append(AgentInfoFields).Append("\n");
            sb.Append("  ArchivePeriodMs: ").Append(ArchivePeriodMs).Append("\n");
            sb.Append("  ArchiveWindowS: ").Append(ArchiveWindowS).Append("\n");
            sb.Append("  CleanupPeriodMs: ").Append(CleanupPeriodMs).Append("\n");
            sb.Append("  CleanupWindowS: ").Append(CleanupWindowS).Append("\n");
            sb.Append("  DefaultAgentPauseTimeout: ").Append(DefaultAgentPauseTimeout).Append("\n");
            sb.Append("  MaxConnectFailures: ").Append(MaxConnectFailures).Append("\n");
            sb.Append("  MaxResultSet: ").Append(MaxResultSet).Append("\n");
            sb.Append("  QueueCollectRespTimeout: ").Append(QueueCollectRespTimeout).Append("\n");
            sb.Append("  QueueWorkerCount: ").Append(QueueWorkerCount).Append("\n");
            sb.Append("  StatsQueryLimitsEnabled: ").Append(StatsQueryLimitsEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigAcdc);
        }

        /// <summary>
        /// Returns true if SystemConfigAcdc instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigAcdc to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigAcdc input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AgentInfoFields == input.AgentInfoFields ||
                    this.AgentInfoFields != null &&
                    this.AgentInfoFields.SequenceEqual(input.AgentInfoFields)
                ) && 
                (
                    this.ArchivePeriodMs == input.ArchivePeriodMs ||
                    (this.ArchivePeriodMs != null &&
                    this.ArchivePeriodMs.Equals(input.ArchivePeriodMs))
                ) && 
                (
                    this.ArchiveWindowS == input.ArchiveWindowS ||
                    (this.ArchiveWindowS != null &&
                    this.ArchiveWindowS.Equals(input.ArchiveWindowS))
                ) && 
                (
                    this.CleanupPeriodMs == input.CleanupPeriodMs ||
                    (this.CleanupPeriodMs != null &&
                    this.CleanupPeriodMs.Equals(input.CleanupPeriodMs))
                ) && 
                (
                    this.CleanupWindowS == input.CleanupWindowS ||
                    (this.CleanupWindowS != null &&
                    this.CleanupWindowS.Equals(input.CleanupWindowS))
                ) && 
                (
                    this.DefaultAgentPauseTimeout == input.DefaultAgentPauseTimeout ||
                    (this.DefaultAgentPauseTimeout != null &&
                    this.DefaultAgentPauseTimeout.Equals(input.DefaultAgentPauseTimeout))
                ) && 
                (
                    this.MaxConnectFailures == input.MaxConnectFailures ||
                    (this.MaxConnectFailures != null &&
                    this.MaxConnectFailures.Equals(input.MaxConnectFailures))
                ) && 
                (
                    this.MaxResultSet == input.MaxResultSet ||
                    (this.MaxResultSet != null &&
                    this.MaxResultSet.Equals(input.MaxResultSet))
                ) && 
                (
                    this.QueueCollectRespTimeout == input.QueueCollectRespTimeout ||
                    (this.QueueCollectRespTimeout != null &&
                    this.QueueCollectRespTimeout.Equals(input.QueueCollectRespTimeout))
                ) && 
                (
                    this.QueueWorkerCount == input.QueueWorkerCount ||
                    (this.QueueWorkerCount != null &&
                    this.QueueWorkerCount.Equals(input.QueueWorkerCount))
                ) && 
                (
                    this.StatsQueryLimitsEnabled == input.StatsQueryLimitsEnabled ||
                    (this.StatsQueryLimitsEnabled != null &&
                    this.StatsQueryLimitsEnabled.Equals(input.StatsQueryLimitsEnabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AgentInfoFields != null)
                    hashCode = hashCode * 59 + this.AgentInfoFields.GetHashCode();
                if (this.ArchivePeriodMs != null)
                    hashCode = hashCode * 59 + this.ArchivePeriodMs.GetHashCode();
                if (this.ArchiveWindowS != null)
                    hashCode = hashCode * 59 + this.ArchiveWindowS.GetHashCode();
                if (this.CleanupPeriodMs != null)
                    hashCode = hashCode * 59 + this.CleanupPeriodMs.GetHashCode();
                if (this.CleanupWindowS != null)
                    hashCode = hashCode * 59 + this.CleanupWindowS.GetHashCode();
                if (this.DefaultAgentPauseTimeout != null)
                    hashCode = hashCode * 59 + this.DefaultAgentPauseTimeout.GetHashCode();
                if (this.MaxConnectFailures != null)
                    hashCode = hashCode * 59 + this.MaxConnectFailures.GetHashCode();
                if (this.MaxResultSet != null)
                    hashCode = hashCode * 59 + this.MaxResultSet.GetHashCode();
                if (this.QueueCollectRespTimeout != null)
                    hashCode = hashCode * 59 + this.QueueCollectRespTimeout.GetHashCode();
                if (this.QueueWorkerCount != null)
                    hashCode = hashCode * 59 + this.QueueWorkerCount.GetHashCode();
                if (this.StatsQueryLimitsEnabled != null)
                    hashCode = hashCode * 59 + this.StatsQueryLimitsEnabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
