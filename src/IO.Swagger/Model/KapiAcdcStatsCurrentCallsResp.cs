/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for acdc_stats.current_calls_resp
    /// </summary>
    [DataContract]
    public partial class KapiAcdcStatsCurrentCallsResp :  IEquatable<KapiAcdcStatsCurrentCallsResp>, IValidatableObject
    {
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Acdcstat for value: acdc_stat
            /// </summary>
            [EnumMember(Value = "acdc_stat")]
            Acdcstat = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Currentcallsresp for value: current_calls_resp
            /// </summary>
            [EnumMember(Value = "current_calls_resp")]
            Currentcallsresp = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiAcdcStatsCurrentCallsResp" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiAcdcStatsCurrentCallsResp() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiAcdcStatsCurrentCallsResp" /> class.
        /// </summary>
        /// <param name="abandoned">abandoned.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="handled">handled.</param>
        /// <param name="processed">processed.</param>
        /// <param name="queryTime">queryTime (required).</param>
        /// <param name="waiting">waiting.</param>
        public KapiAcdcStatsCurrentCallsResp(string abandoned = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string handled = default(string), string processed = default(string), int? queryTime = default(int?), string waiting = default(string))
        {
            // to ensure "queryTime" is required (not null)
            if (queryTime == null)
            {
                throw new InvalidDataException("queryTime is a required property for KapiAcdcStatsCurrentCallsResp and cannot be null");
            }
            else
            {
                this.QueryTime = queryTime;
            }
            this.Abandoned = abandoned;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.Handled = handled;
            this.Processed = processed;
            this.Waiting = waiting;
        }
        
        /// <summary>
        /// Gets or Sets Abandoned
        /// </summary>
        [DataMember(Name="Abandoned", EmitDefaultValue=false)]
        public string Abandoned { get; set; }



        /// <summary>
        /// Gets or Sets Handled
        /// </summary>
        [DataMember(Name="Handled", EmitDefaultValue=false)]
        public string Handled { get; set; }

        /// <summary>
        /// Gets or Sets Processed
        /// </summary>
        [DataMember(Name="Processed", EmitDefaultValue=false)]
        public string Processed { get; set; }

        /// <summary>
        /// Gets or Sets QueryTime
        /// </summary>
        [DataMember(Name="Query-Time", EmitDefaultValue=false)]
        public int? QueryTime { get; set; }

        /// <summary>
        /// Gets or Sets Waiting
        /// </summary>
        [DataMember(Name="Waiting", EmitDefaultValue=false)]
        public string Waiting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiAcdcStatsCurrentCallsResp {\n");
            sb.Append("  Abandoned: ").Append(Abandoned).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  Handled: ").Append(Handled).Append("\n");
            sb.Append("  Processed: ").Append(Processed).Append("\n");
            sb.Append("  QueryTime: ").Append(QueryTime).Append("\n");
            sb.Append("  Waiting: ").Append(Waiting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiAcdcStatsCurrentCallsResp);
        }

        /// <summary>
        /// Returns true if KapiAcdcStatsCurrentCallsResp instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiAcdcStatsCurrentCallsResp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiAcdcStatsCurrentCallsResp input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Abandoned == input.Abandoned ||
                    (this.Abandoned != null &&
                    this.Abandoned.Equals(input.Abandoned))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.Handled == input.Handled ||
                    (this.Handled != null &&
                    this.Handled.Equals(input.Handled))
                ) && 
                (
                    this.Processed == input.Processed ||
                    (this.Processed != null &&
                    this.Processed.Equals(input.Processed))
                ) && 
                (
                    this.QueryTime == input.QueryTime ||
                    (this.QueryTime != null &&
                    this.QueryTime.Equals(input.QueryTime))
                ) && 
                (
                    this.Waiting == input.Waiting ||
                    (this.Waiting != null &&
                    this.Waiting.Equals(input.Waiting))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Abandoned != null)
                    hashCode = hashCode * 59 + this.Abandoned.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.Handled != null)
                    hashCode = hashCode * 59 + this.Handled.GetHashCode();
                if (this.Processed != null)
                    hashCode = hashCode * 59 + this.Processed.GetHashCode();
                if (this.QueryTime != null)
                    hashCode = hashCode * 59 + this.QueryTime.GetHashCode();
                if (this.Waiting != null)
                    hashCode = hashCode * 59 + this.Waiting.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
