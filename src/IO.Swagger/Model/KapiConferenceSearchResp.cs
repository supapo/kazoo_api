/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for conference.search_resp
    /// </summary>
    [DataContract]
    public partial class KapiConferenceSearchResp :  IEquatable<KapiConferenceSearchResp>, IValidatableObject
    {
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Conference for value: conference
            /// </summary>
            [EnumMember(Value = "conference")]
            Conference = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Searchresp for value: search_resp
            /// </summary>
            [EnumMember(Value = "search_resp")]
            Searchresp = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiConferenceSearchResp" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiConferenceSearchResp() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiConferenceSearchResp" /> class.
        /// </summary>
        /// <param name="answered">answered.</param>
        /// <param name="conferenceID">conferenceID.</param>
        /// <param name="conferences">conferences (required).</param>
        /// <param name="dynamic">dynamic.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="locked">locked.</param>
        /// <param name="participantCount">participantCount.</param>
        /// <param name="participants">participants.</param>
        /// <param name="runTime">runTime.</param>
        /// <param name="running">running.</param>
        /// <param name="startTime">startTime.</param>
        /// <param name="switchExternalIP">switchExternalIP.</param>
        /// <param name="switchHostname">switchHostname.</param>
        /// <param name="switchURL">switchURL.</param>
        /// <param name="uUID">uUID.</param>
        public KapiConferenceSearchResp(string answered = default(string), string conferenceID = default(string), string conferences = default(string), string dynamic = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string locked = default(string), string participantCount = default(string), string participants = default(string), int? runTime = default(int?), string running = default(string), int? startTime = default(int?), string switchExternalIP = default(string), string switchHostname = default(string), string switchURL = default(string), string uUID = default(string))
        {
            // to ensure "conferences" is required (not null)
            if (conferences == null)
            {
                throw new InvalidDataException("conferences is a required property for KapiConferenceSearchResp and cannot be null");
            }
            else
            {
                this.Conferences = conferences;
            }
            this.Answered = answered;
            this.ConferenceID = conferenceID;
            this.Dynamic = dynamic;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.Locked = locked;
            this.ParticipantCount = participantCount;
            this.Participants = participants;
            this.RunTime = runTime;
            this.Running = running;
            this.StartTime = startTime;
            this.SwitchExternalIP = switchExternalIP;
            this.SwitchHostname = switchHostname;
            this.SwitchURL = switchURL;
            this.UUID = uUID;
        }
        
        /// <summary>
        /// Gets or Sets Answered
        /// </summary>
        [DataMember(Name="Answered", EmitDefaultValue=false)]
        public string Answered { get; set; }

        /// <summary>
        /// Gets or Sets ConferenceID
        /// </summary>
        [DataMember(Name="Conference-ID", EmitDefaultValue=false)]
        public string ConferenceID { get; set; }

        /// <summary>
        /// Gets or Sets Conferences
        /// </summary>
        [DataMember(Name="Conferences", EmitDefaultValue=false)]
        public string Conferences { get; set; }

        /// <summary>
        /// Gets or Sets Dynamic
        /// </summary>
        [DataMember(Name="Dynamic", EmitDefaultValue=false)]
        public string Dynamic { get; set; }



        /// <summary>
        /// Gets or Sets Locked
        /// </summary>
        [DataMember(Name="Locked", EmitDefaultValue=false)]
        public string Locked { get; set; }

        /// <summary>
        /// Gets or Sets ParticipantCount
        /// </summary>
        [DataMember(Name="Participant-Count", EmitDefaultValue=false)]
        public string ParticipantCount { get; set; }

        /// <summary>
        /// Gets or Sets Participants
        /// </summary>
        [DataMember(Name="Participants", EmitDefaultValue=false)]
        public string Participants { get; set; }

        /// <summary>
        /// Gets or Sets RunTime
        /// </summary>
        [DataMember(Name="Run-Time", EmitDefaultValue=false)]
        public int? RunTime { get; set; }

        /// <summary>
        /// Gets or Sets Running
        /// </summary>
        [DataMember(Name="Running", EmitDefaultValue=false)]
        public string Running { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name="Start-Time", EmitDefaultValue=false)]
        public int? StartTime { get; set; }

        /// <summary>
        /// Gets or Sets SwitchExternalIP
        /// </summary>
        [DataMember(Name="Switch-External-IP", EmitDefaultValue=false)]
        public string SwitchExternalIP { get; set; }

        /// <summary>
        /// Gets or Sets SwitchHostname
        /// </summary>
        [DataMember(Name="Switch-Hostname", EmitDefaultValue=false)]
        public string SwitchHostname { get; set; }

        /// <summary>
        /// Gets or Sets SwitchURL
        /// </summary>
        [DataMember(Name="Switch-URL", EmitDefaultValue=false)]
        public string SwitchURL { get; set; }

        /// <summary>
        /// Gets or Sets UUID
        /// </summary>
        [DataMember(Name="UUID", EmitDefaultValue=false)]
        public string UUID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiConferenceSearchResp {\n");
            sb.Append("  Answered: ").Append(Answered).Append("\n");
            sb.Append("  ConferenceID: ").Append(ConferenceID).Append("\n");
            sb.Append("  Conferences: ").Append(Conferences).Append("\n");
            sb.Append("  Dynamic: ").Append(Dynamic).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  ParticipantCount: ").Append(ParticipantCount).Append("\n");
            sb.Append("  Participants: ").Append(Participants).Append("\n");
            sb.Append("  RunTime: ").Append(RunTime).Append("\n");
            sb.Append("  Running: ").Append(Running).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  SwitchExternalIP: ").Append(SwitchExternalIP).Append("\n");
            sb.Append("  SwitchHostname: ").Append(SwitchHostname).Append("\n");
            sb.Append("  SwitchURL: ").Append(SwitchURL).Append("\n");
            sb.Append("  UUID: ").Append(UUID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiConferenceSearchResp);
        }

        /// <summary>
        /// Returns true if KapiConferenceSearchResp instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiConferenceSearchResp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiConferenceSearchResp input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Answered == input.Answered ||
                    (this.Answered != null &&
                    this.Answered.Equals(input.Answered))
                ) && 
                (
                    this.ConferenceID == input.ConferenceID ||
                    (this.ConferenceID != null &&
                    this.ConferenceID.Equals(input.ConferenceID))
                ) && 
                (
                    this.Conferences == input.Conferences ||
                    (this.Conferences != null &&
                    this.Conferences.Equals(input.Conferences))
                ) && 
                (
                    this.Dynamic == input.Dynamic ||
                    (this.Dynamic != null &&
                    this.Dynamic.Equals(input.Dynamic))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.Locked == input.Locked ||
                    (this.Locked != null &&
                    this.Locked.Equals(input.Locked))
                ) && 
                (
                    this.ParticipantCount == input.ParticipantCount ||
                    (this.ParticipantCount != null &&
                    this.ParticipantCount.Equals(input.ParticipantCount))
                ) && 
                (
                    this.Participants == input.Participants ||
                    (this.Participants != null &&
                    this.Participants.Equals(input.Participants))
                ) && 
                (
                    this.RunTime == input.RunTime ||
                    (this.RunTime != null &&
                    this.RunTime.Equals(input.RunTime))
                ) && 
                (
                    this.Running == input.Running ||
                    (this.Running != null &&
                    this.Running.Equals(input.Running))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.SwitchExternalIP == input.SwitchExternalIP ||
                    (this.SwitchExternalIP != null &&
                    this.SwitchExternalIP.Equals(input.SwitchExternalIP))
                ) && 
                (
                    this.SwitchHostname == input.SwitchHostname ||
                    (this.SwitchHostname != null &&
                    this.SwitchHostname.Equals(input.SwitchHostname))
                ) && 
                (
                    this.SwitchURL == input.SwitchURL ||
                    (this.SwitchURL != null &&
                    this.SwitchURL.Equals(input.SwitchURL))
                ) && 
                (
                    this.UUID == input.UUID ||
                    (this.UUID != null &&
                    this.UUID.Equals(input.UUID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Answered != null)
                    hashCode = hashCode * 59 + this.Answered.GetHashCode();
                if (this.ConferenceID != null)
                    hashCode = hashCode * 59 + this.ConferenceID.GetHashCode();
                if (this.Conferences != null)
                    hashCode = hashCode * 59 + this.Conferences.GetHashCode();
                if (this.Dynamic != null)
                    hashCode = hashCode * 59 + this.Dynamic.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.Locked != null)
                    hashCode = hashCode * 59 + this.Locked.GetHashCode();
                if (this.ParticipantCount != null)
                    hashCode = hashCode * 59 + this.ParticipantCount.GetHashCode();
                if (this.Participants != null)
                    hashCode = hashCode * 59 + this.Participants.GetHashCode();
                if (this.RunTime != null)
                    hashCode = hashCode * 59 + this.RunTime.GetHashCode();
                if (this.Running != null)
                    hashCode = hashCode * 59 + this.Running.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.SwitchExternalIP != null)
                    hashCode = hashCode * 59 + this.SwitchExternalIP.GetHashCode();
                if (this.SwitchHostname != null)
                    hashCode = hashCode * 59 + this.SwitchHostname.GetHashCode();
                if (this.SwitchURL != null)
                    hashCode = hashCode * 59 + this.SwitchURL.GetHashCode();
                if (this.UUID != null)
                    hashCode = hashCode * 59 + this.UUID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
