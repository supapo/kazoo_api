/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for pivot.req
    /// </summary>
    [DataContract]
    public partial class KapiPivotReq :  IEquatable<KapiPivotReq>, IValidatableObject
    {
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Dialplan for value: dialplan
            /// </summary>
            [EnumMember(Value = "dialplan")]
            Dialplan = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Pivotreq for value: pivot_req
            /// </summary>
            [EnumMember(Value = "pivot_req")]
            Pivotreq = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiPivotReq" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiPivotReq() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiPivotReq" /> class.
        /// </summary>
        /// <param name="cDRURI">cDRURI.</param>
        /// <param name="call">call (required).</param>
        /// <param name="debug">debug.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="hTTPMethod">hTTPMethod.</param>
        /// <param name="requestBodyFormat">requestBodyFormat.</param>
        /// <param name="requestFormat">requestFormat.</param>
        /// <param name="voiceURI">voiceURI (required).</param>
        public KapiPivotReq(string cDRURI = default(string), Object call = default(Object), bool? debug = default(bool?), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string hTTPMethod = default(string), string requestBodyFormat = default(string), string requestFormat = default(string), string voiceURI = default(string))
        {
            // to ensure "call" is required (not null)
            if (call == null)
            {
                throw new InvalidDataException("call is a required property for KapiPivotReq and cannot be null");
            }
            else
            {
                this.Call = call;
            }
            // to ensure "voiceURI" is required (not null)
            if (voiceURI == null)
            {
                throw new InvalidDataException("voiceURI is a required property for KapiPivotReq and cannot be null");
            }
            else
            {
                this.VoiceURI = voiceURI;
            }
            this.CDR_URI = cDRURI;
            this.Debug = debug;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.HTTPMethod = hTTPMethod;
            this.RequestBodyFormat = requestBodyFormat;
            this.RequestFormat = requestFormat;
        }
        
        /// <summary>
        /// Gets or Sets CDR_URI
        /// </summary>
        [DataMember(Name="CDR-URI", EmitDefaultValue=false)]
        public string CDR_URI { get; set; }

        /// <summary>
        /// Gets or Sets Call
        /// </summary>
        [DataMember(Name="Call", EmitDefaultValue=false)]
        public Object Call { get; set; }

        /// <summary>
        /// Gets or Sets Debug
        /// </summary>
        [DataMember(Name="Debug", EmitDefaultValue=false)]
        public bool? Debug { get; set; }



        /// <summary>
        /// Gets or Sets HTTPMethod
        /// </summary>
        [DataMember(Name="HTTP-Method", EmitDefaultValue=false)]
        public string HTTPMethod { get; set; }

        /// <summary>
        /// Gets or Sets RequestBodyFormat
        /// </summary>
        [DataMember(Name="Request-Body-Format", EmitDefaultValue=false)]
        public string RequestBodyFormat { get; set; }

        /// <summary>
        /// Gets or Sets RequestFormat
        /// </summary>
        [DataMember(Name="Request-Format", EmitDefaultValue=false)]
        public string RequestFormat { get; set; }

        /// <summary>
        /// Gets or Sets VoiceURI
        /// </summary>
        [DataMember(Name="Voice-URI", EmitDefaultValue=false)]
        public string VoiceURI { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiPivotReq {\n");
            sb.Append("  CDR_URI: ").Append(CDR_URI).Append("\n");
            sb.Append("  Call: ").Append(Call).Append("\n");
            sb.Append("  Debug: ").Append(Debug).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  HTTPMethod: ").Append(HTTPMethod).Append("\n");
            sb.Append("  RequestBodyFormat: ").Append(RequestBodyFormat).Append("\n");
            sb.Append("  RequestFormat: ").Append(RequestFormat).Append("\n");
            sb.Append("  VoiceURI: ").Append(VoiceURI).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiPivotReq);
        }

        /// <summary>
        /// Returns true if KapiPivotReq instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiPivotReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiPivotReq input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CDR_URI == input.CDR_URI ||
                    (this.CDR_URI != null &&
                    this.CDR_URI.Equals(input.CDR_URI))
                ) && 
                (
                    this.Call == input.Call ||
                    (this.Call != null &&
                    this.Call.Equals(input.Call))
                ) && 
                (
                    this.Debug == input.Debug ||
                    (this.Debug != null &&
                    this.Debug.Equals(input.Debug))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.HTTPMethod == input.HTTPMethod ||
                    (this.HTTPMethod != null &&
                    this.HTTPMethod.Equals(input.HTTPMethod))
                ) && 
                (
                    this.RequestBodyFormat == input.RequestBodyFormat ||
                    (this.RequestBodyFormat != null &&
                    this.RequestBodyFormat.Equals(input.RequestBodyFormat))
                ) && 
                (
                    this.RequestFormat == input.RequestFormat ||
                    (this.RequestFormat != null &&
                    this.RequestFormat.Equals(input.RequestFormat))
                ) && 
                (
                    this.VoiceURI == input.VoiceURI ||
                    (this.VoiceURI != null &&
                    this.VoiceURI.Equals(input.VoiceURI))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CDR_URI != null)
                    hashCode = hashCode * 59 + this.CDR_URI.GetHashCode();
                if (this.Call != null)
                    hashCode = hashCode * 59 + this.Call.GetHashCode();
                if (this.Debug != null)
                    hashCode = hashCode * 59 + this.Debug.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.HTTPMethod != null)
                    hashCode = hashCode * 59 + this.HTTPMethod.GetHashCode();
                if (this.RequestBodyFormat != null)
                    hashCode = hashCode * 59 + this.RequestBodyFormat.GetHashCode();
                if (this.RequestFormat != null)
                    hashCode = hashCode * 59 + this.RequestFormat.GetHashCode();
                if (this.VoiceURI != null)
                    hashCode = hashCode * 59 + this.VoiceURI.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
