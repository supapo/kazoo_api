/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// setting for how to response if the number is not in the numbers database
    /// </summary>
    [DataContract]
    public partial class SystemConfigReorderUnknownNumber :  IEquatable<SystemConfigReorderUnknownNumber>, IValidatableObject
    {
        /// <summary>
        /// the action to take for unknown numbers
        /// </summary>
        /// <value>the action to take for unknown numbers</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            
            /// <summary>
            /// Enum Respond for value: respond
            /// </summary>
            [EnumMember(Value = "respond")]
            Respond = 1,
            
            /// <summary>
            /// Enum Transfer for value: transfer
            /// </summary>
            [EnumMember(Value = "transfer")]
            Transfer = 2,
            
            /// <summary>
            /// Enum Bridge for value: bridge
            /// </summary>
            [EnumMember(Value = "bridge")]
            Bridge = 3
        }

        /// <summary>
        /// the action to take for unknown numbers
        /// </summary>
        /// <value>the action to take for unknown numbers</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigReorderUnknownNumber" /> class.
        /// </summary>
        /// <param name="action">the action to take for unknown numbers (default to ActionEnum.Respond).</param>
        /// <param name="bridgeAccountId">the account id that the bridge_device_id belongs to.</param>
        /// <param name="bridgeDeviceId">the device id to bridge unknown numbers to.</param>
        /// <param name="responseCode">reorder code for replies to unknown numbers (default to &quot;604&quot;).</param>
        /// <param name="responseMessage">reorder message for replies to unknown numbers (default to &quot;Nope Nope Nope&quot;).</param>
        /// <param name="transferTarget">onnet phone number to transfer unknown numbers to.</param>
        public SystemConfigReorderUnknownNumber(ActionEnum? action = ActionEnum.Respond, string bridgeAccountId = default(string), string bridgeDeviceId = default(string), string responseCode = "604", string responseMessage = "Nope Nope Nope", string transferTarget = default(string))
        {
            // use default value if no "action" provided
            if (action == null)
            {
                this.Action = ActionEnum.Respond;
            }
            else
            {
                this.Action = action;
            }
            this.BridgeAccountId = bridgeAccountId;
            this.BridgeDeviceId = bridgeDeviceId;
            // use default value if no "responseCode" provided
            if (responseCode == null)
            {
                this.ResponseCode = "604";
            }
            else
            {
                this.ResponseCode = responseCode;
            }
            // use default value if no "responseMessage" provided
            if (responseMessage == null)
            {
                this.ResponseMessage = "Nope Nope Nope";
            }
            else
            {
                this.ResponseMessage = responseMessage;
            }
            this.TransferTarget = transferTarget;
        }
        

        /// <summary>
        /// the account id that the bridge_device_id belongs to
        /// </summary>
        /// <value>the account id that the bridge_device_id belongs to</value>
        [DataMember(Name="bridge_account_id", EmitDefaultValue=false)]
        public string BridgeAccountId { get; set; }

        /// <summary>
        /// the device id to bridge unknown numbers to
        /// </summary>
        /// <value>the device id to bridge unknown numbers to</value>
        [DataMember(Name="bridge_device_id", EmitDefaultValue=false)]
        public string BridgeDeviceId { get; set; }

        /// <summary>
        /// reorder code for replies to unknown numbers
        /// </summary>
        /// <value>reorder code for replies to unknown numbers</value>
        [DataMember(Name="response_code", EmitDefaultValue=false)]
        public string ResponseCode { get; set; }

        /// <summary>
        /// reorder message for replies to unknown numbers
        /// </summary>
        /// <value>reorder message for replies to unknown numbers</value>
        [DataMember(Name="response_message", EmitDefaultValue=false)]
        public string ResponseMessage { get; set; }

        /// <summary>
        /// onnet phone number to transfer unknown numbers to
        /// </summary>
        /// <value>onnet phone number to transfer unknown numbers to</value>
        [DataMember(Name="transfer_target", EmitDefaultValue=false)]
        public string TransferTarget { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigReorderUnknownNumber {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  BridgeAccountId: ").Append(BridgeAccountId).Append("\n");
            sb.Append("  BridgeDeviceId: ").Append(BridgeDeviceId).Append("\n");
            sb.Append("  ResponseCode: ").Append(ResponseCode).Append("\n");
            sb.Append("  ResponseMessage: ").Append(ResponseMessage).Append("\n");
            sb.Append("  TransferTarget: ").Append(TransferTarget).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigReorderUnknownNumber);
        }

        /// <summary>
        /// Returns true if SystemConfigReorderUnknownNumber instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigReorderUnknownNumber to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigReorderUnknownNumber input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.BridgeAccountId == input.BridgeAccountId ||
                    (this.BridgeAccountId != null &&
                    this.BridgeAccountId.Equals(input.BridgeAccountId))
                ) && 
                (
                    this.BridgeDeviceId == input.BridgeDeviceId ||
                    (this.BridgeDeviceId != null &&
                    this.BridgeDeviceId.Equals(input.BridgeDeviceId))
                ) && 
                (
                    this.ResponseCode == input.ResponseCode ||
                    (this.ResponseCode != null &&
                    this.ResponseCode.Equals(input.ResponseCode))
                ) && 
                (
                    this.ResponseMessage == input.ResponseMessage ||
                    (this.ResponseMessage != null &&
                    this.ResponseMessage.Equals(input.ResponseMessage))
                ) && 
                (
                    this.TransferTarget == input.TransferTarget ||
                    (this.TransferTarget != null &&
                    this.TransferTarget.Equals(input.TransferTarget))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.BridgeAccountId != null)
                    hashCode = hashCode * 59 + this.BridgeAccountId.GetHashCode();
                if (this.BridgeDeviceId != null)
                    hashCode = hashCode * 59 + this.BridgeDeviceId.GetHashCode();
                if (this.ResponseCode != null)
                    hashCode = hashCode * 59 + this.ResponseCode.GetHashCode();
                if (this.ResponseMessage != null)
                    hashCode = hashCode * 59 + this.ResponseMessage.GetHashCode();
                if (this.TransferTarget != null)
                    hashCode = hashCode * 59 + this.TransferTarget.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
