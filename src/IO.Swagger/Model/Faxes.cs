/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Faxes API allows you to update and access fax jobs for both sending and receiving
    /// </summary>
    [DataContract]
    public partial class Faxes :  IEquatable<Faxes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Faxes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Faxes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Faxes" /> class.
        /// </summary>
        /// <param name="attempts">The number of attempts made, this will be set by the system and reset automatically on put/post.</param>
        /// <param name="document">document.</param>
        /// <param name="fromName">The sender name for the fax.</param>
        /// <param name="fromNumber">The sender number for the fax (required).</param>
        /// <param name="notifications">notifications.</param>
        /// <param name="retries">The number of times to retry.</param>
        /// <param name="toName">The recipient name for the fax.</param>
        /// <param name="toNumber">The recipient number for the fax (required).</param>
        /// <param name="txResult">txResult.</param>
        public Faxes(int? attempts = default(int?), FaxesDocument document = default(FaxesDocument), string fromName = default(string), string fromNumber = default(string), FaxesNotifications notifications = default(FaxesNotifications), int? retries = default(int?), string toName = default(string), string toNumber = default(string), FaxesTxResult txResult = default(FaxesTxResult))
        {
            // to ensure "fromNumber" is required (not null)
            if (fromNumber == null)
            {
                throw new InvalidDataException("fromNumber is a required property for Faxes and cannot be null");
            }
            else
            {
                this.FromNumber = fromNumber;
            }
            // to ensure "toNumber" is required (not null)
            if (toNumber == null)
            {
                throw new InvalidDataException("toNumber is a required property for Faxes and cannot be null");
            }
            else
            {
                this.ToNumber = toNumber;
            }
            this.Attempts = attempts;
            this.Document = document;
            this.FromName = fromName;
            this.Notifications = notifications;
            this.Retries = retries;
            this.ToName = toName;
            this.TxResult = txResult;
        }
        
        /// <summary>
        /// The number of attempts made, this will be set by the system and reset automatically on put/post
        /// </summary>
        /// <value>The number of attempts made, this will be set by the system and reset automatically on put/post</value>
        [DataMember(Name="attempts", EmitDefaultValue=false)]
        public int? Attempts { get; set; }

        /// <summary>
        /// Gets or Sets Document
        /// </summary>
        [DataMember(Name="document", EmitDefaultValue=false)]
        public FaxesDocument Document { get; set; }

        /// <summary>
        /// The sender name for the fax
        /// </summary>
        /// <value>The sender name for the fax</value>
        [DataMember(Name="from_name", EmitDefaultValue=false)]
        public string FromName { get; set; }

        /// <summary>
        /// The sender number for the fax
        /// </summary>
        /// <value>The sender number for the fax</value>
        [DataMember(Name="from_number", EmitDefaultValue=false)]
        public string FromNumber { get; set; }

        /// <summary>
        /// Gets or Sets Notifications
        /// </summary>
        [DataMember(Name="notifications", EmitDefaultValue=false)]
        public FaxesNotifications Notifications { get; set; }

        /// <summary>
        /// The number of times to retry
        /// </summary>
        /// <value>The number of times to retry</value>
        [DataMember(Name="retries", EmitDefaultValue=false)]
        public int? Retries { get; set; }

        /// <summary>
        /// The recipient name for the fax
        /// </summary>
        /// <value>The recipient name for the fax</value>
        [DataMember(Name="to_name", EmitDefaultValue=false)]
        public string ToName { get; set; }

        /// <summary>
        /// The recipient number for the fax
        /// </summary>
        /// <value>The recipient number for the fax</value>
        [DataMember(Name="to_number", EmitDefaultValue=false)]
        public string ToNumber { get; set; }

        /// <summary>
        /// Gets or Sets TxResult
        /// </summary>
        [DataMember(Name="tx_result", EmitDefaultValue=false)]
        public FaxesTxResult TxResult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Faxes {\n");
            sb.Append("  Attempts: ").Append(Attempts).Append("\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("  FromName: ").Append(FromName).Append("\n");
            sb.Append("  FromNumber: ").Append(FromNumber).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  Retries: ").Append(Retries).Append("\n");
            sb.Append("  ToName: ").Append(ToName).Append("\n");
            sb.Append("  ToNumber: ").Append(ToNumber).Append("\n");
            sb.Append("  TxResult: ").Append(TxResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Faxes);
        }

        /// <summary>
        /// Returns true if Faxes instances are equal
        /// </summary>
        /// <param name="input">Instance of Faxes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Faxes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Attempts == input.Attempts ||
                    (this.Attempts != null &&
                    this.Attempts.Equals(input.Attempts))
                ) && 
                (
                    this.Document == input.Document ||
                    (this.Document != null &&
                    this.Document.Equals(input.Document))
                ) && 
                (
                    this.FromName == input.FromName ||
                    (this.FromName != null &&
                    this.FromName.Equals(input.FromName))
                ) && 
                (
                    this.FromNumber == input.FromNumber ||
                    (this.FromNumber != null &&
                    this.FromNumber.Equals(input.FromNumber))
                ) && 
                (
                    this.Notifications == input.Notifications ||
                    (this.Notifications != null &&
                    this.Notifications.Equals(input.Notifications))
                ) && 
                (
                    this.Retries == input.Retries ||
                    (this.Retries != null &&
                    this.Retries.Equals(input.Retries))
                ) && 
                (
                    this.ToName == input.ToName ||
                    (this.ToName != null &&
                    this.ToName.Equals(input.ToName))
                ) && 
                (
                    this.ToNumber == input.ToNumber ||
                    (this.ToNumber != null &&
                    this.ToNumber.Equals(input.ToNumber))
                ) && 
                (
                    this.TxResult == input.TxResult ||
                    (this.TxResult != null &&
                    this.TxResult.Equals(input.TxResult))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attempts != null)
                    hashCode = hashCode * 59 + this.Attempts.GetHashCode();
                if (this.Document != null)
                    hashCode = hashCode * 59 + this.Document.GetHashCode();
                if (this.FromName != null)
                    hashCode = hashCode * 59 + this.FromName.GetHashCode();
                if (this.FromNumber != null)
                    hashCode = hashCode * 59 + this.FromNumber.GetHashCode();
                if (this.Notifications != null)
                    hashCode = hashCode * 59 + this.Notifications.GetHashCode();
                if (this.Retries != null)
                    hashCode = hashCode * 59 + this.Retries.GetHashCode();
                if (this.ToName != null)
                    hashCode = hashCode * 59 + this.ToName.GetHashCode();
                if (this.ToNumber != null)
                    hashCode = hashCode * 59 + this.ToNumber.GetHashCode();
                if (this.TxResult != null)
                    hashCode = hashCode * 59 + this.TxResult.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Attempts (int?) maximum
            if(this.Attempts > (int?)4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Attempts, must be a value less than or equal to 4.", new [] { "Attempts" });
            }

            // Attempts (int?) minimum
            if(this.Attempts < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Attempts, must be a value greater than or equal to 0.", new [] { "Attempts" });
            }

            // Retries (int?) maximum
            if(this.Retries > (int?)4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Retries, must be a value less than or equal to 4.", new [] { "Retries" });
            }

            // Retries (int?) minimum
            if(this.Retries < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Retries, must be a value greater than or equal to 0.", new [] { "Retries" });
            }

            yield break;
        }
    }

}
