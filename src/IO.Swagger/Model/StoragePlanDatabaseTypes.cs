/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// StoragePlanDatabaseTypes
    /// </summary>
    [DataContract]
    public partial class StoragePlanDatabaseTypes :  IEquatable<StoragePlanDatabaseTypes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StoragePlanDatabaseTypes" /> class.
        /// </summary>
        /// <param name="callRecording">callRecording.</param>
        /// <param name="fax">fax.</param>
        /// <param name="mailboxMessage">mailboxMessage.</param>
        /// <param name="media">media.</param>
        public StoragePlanDatabaseTypes(StoragePlanDatabaseDocument callRecording = default(StoragePlanDatabaseDocument), StoragePlanDatabaseDocument fax = default(StoragePlanDatabaseDocument), StoragePlanDatabaseDocument mailboxMessage = default(StoragePlanDatabaseDocument), StoragePlanDatabaseDocument media = default(StoragePlanDatabaseDocument))
        {
            this.CallRecording = callRecording;
            this.Fax = fax;
            this.MailboxMessage = mailboxMessage;
            this.Media = media;
        }
        
        /// <summary>
        /// Gets or Sets CallRecording
        /// </summary>
        [DataMember(Name="call_recording", EmitDefaultValue=false)]
        public StoragePlanDatabaseDocument CallRecording { get; set; }

        /// <summary>
        /// Gets or Sets Fax
        /// </summary>
        [DataMember(Name="fax", EmitDefaultValue=false)]
        public StoragePlanDatabaseDocument Fax { get; set; }

        /// <summary>
        /// Gets or Sets MailboxMessage
        /// </summary>
        [DataMember(Name="mailbox_message", EmitDefaultValue=false)]
        public StoragePlanDatabaseDocument MailboxMessage { get; set; }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name="media", EmitDefaultValue=false)]
        public StoragePlanDatabaseDocument Media { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoragePlanDatabaseTypes {\n");
            sb.Append("  CallRecording: ").Append(CallRecording).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  MailboxMessage: ").Append(MailboxMessage).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StoragePlanDatabaseTypes);
        }

        /// <summary>
        /// Returns true if StoragePlanDatabaseTypes instances are equal
        /// </summary>
        /// <param name="input">Instance of StoragePlanDatabaseTypes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoragePlanDatabaseTypes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CallRecording == input.CallRecording ||
                    (this.CallRecording != null &&
                    this.CallRecording.Equals(input.CallRecording))
                ) && 
                (
                    this.Fax == input.Fax ||
                    (this.Fax != null &&
                    this.Fax.Equals(input.Fax))
                ) && 
                (
                    this.MailboxMessage == input.MailboxMessage ||
                    (this.MailboxMessage != null &&
                    this.MailboxMessage.Equals(input.MailboxMessage))
                ) && 
                (
                    this.Media == input.Media ||
                    (this.Media != null &&
                    this.Media.Equals(input.Media))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CallRecording != null)
                    hashCode = hashCode * 59 + this.CallRecording.GetHashCode();
                if (this.Fax != null)
                    hashCode = hashCode * 59 + this.Fax.GetHashCode();
                if (this.MailboxMessage != null)
                    hashCode = hashCode * 59 + this.MailboxMessage.GetHashCode();
                if (this.Media != null)
                    hashCode = hashCode * 59 + this.Media.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
