/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for dialplan.record
    /// </summary>
    [DataContract]
    public partial class KapiDialplanRecord :  IEquatable<KapiDialplanRecord>, IValidatableObject
    {
        /// <summary>
        /// Defines ApplicationName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApplicationNameEnum
        {
            
            /// <summary>
            /// Enum Record for value: record
            /// </summary>
            [EnumMember(Value = "record")]
            Record = 1
        }

        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name="Application-Name", EmitDefaultValue=false)]
        public ApplicationNameEnum ApplicationName { get; set; }
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Call for value: call
            /// </summary>
            [EnumMember(Value = "call")]
            Call = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Command for value: command
            /// </summary>
            [EnumMember(Value = "command")]
            Command = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Defines InsertAt
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InsertAtEnum
        {
            
            /// <summary>
            /// Enum Head for value: head
            /// </summary>
            [EnumMember(Value = "head")]
            Head = 1,
            
            /// <summary>
            /// Enum Tail for value: tail
            /// </summary>
            [EnumMember(Value = "tail")]
            Tail = 2,
            
            /// <summary>
            /// Enum Flush for value: flush
            /// </summary>
            [EnumMember(Value = "flush")]
            Flush = 3,
            
            /// <summary>
            /// Enum Now for value: now
            /// </summary>
            [EnumMember(Value = "now")]
            Now = 4
        }

        /// <summary>
        /// Gets or Sets InsertAt
        /// </summary>
        [DataMember(Name="Insert-At", EmitDefaultValue=false)]
        public InsertAtEnum? InsertAt { get; set; }
        /// <summary>
        /// Defines Terminators
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TerminatorsEnum
        {
            
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 1,
            
            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 2,
            
            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 3,
            
            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 4,
            
            /// <summary>
            /// Enum _5 for value: 5
            /// </summary>
            [EnumMember(Value = "5")]
            _5 = 5,
            
            /// <summary>
            /// Enum _6 for value: 6
            /// </summary>
            [EnumMember(Value = "6")]
            _6 = 6,
            
            /// <summary>
            /// Enum _7 for value: 7
            /// </summary>
            [EnumMember(Value = "7")]
            _7 = 7,
            
            /// <summary>
            /// Enum _8 for value: 8
            /// </summary>
            [EnumMember(Value = "8")]
            _8 = 8,
            
            /// <summary>
            /// Enum _9 for value: 9
            /// </summary>
            [EnumMember(Value = "9")]
            _9 = 9,
            
            /// <summary>
            /// Enum Star for value: *
            /// </summary>
            [EnumMember(Value = "*")]
            Star = 10,
            
            /// <summary>
            /// Enum _0 for value: 0
            /// </summary>
            [EnumMember(Value = "0")]
            _0 = 11,
            
            /// <summary>
            /// Enum Hash for value: #
            /// </summary>
            [EnumMember(Value = "#")]
            Hash = 12
        }


        /// <summary>
        /// Gets or Sets Terminators
        /// </summary>
        [DataMember(Name="Terminators", EmitDefaultValue=false)]
        public List<TerminatorsEnum> Terminators { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanRecord" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiDialplanRecord() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiDialplanRecord" /> class.
        /// </summary>
        /// <param name="applicationName">applicationName (required).</param>
        /// <param name="callID">callID (required).</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="insertAt">insertAt.</param>
        /// <param name="mediaName">mediaName (required).</param>
        /// <param name="silenceHits">silenceHits.</param>
        /// <param name="silenceThreshold">silenceThreshold.</param>
        /// <param name="terminators">terminators.</param>
        /// <param name="timeLimit">timeLimit.</param>
        public KapiDialplanRecord(ApplicationNameEnum applicationName = default(ApplicationNameEnum), string callID = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), InsertAtEnum? insertAt = default(InsertAtEnum?), string mediaName = default(string), string silenceHits = default(string), string silenceThreshold = default(string), List<TerminatorsEnum> terminators = default(List<TerminatorsEnum>), int? timeLimit = default(int?))
        {
            // to ensure "applicationName" is required (not null)
            if (applicationName == null)
            {
                throw new InvalidDataException("applicationName is a required property for KapiDialplanRecord and cannot be null");
            }
            else
            {
                this.ApplicationName = applicationName;
            }
            // to ensure "callID" is required (not null)
            if (callID == null)
            {
                throw new InvalidDataException("callID is a required property for KapiDialplanRecord and cannot be null");
            }
            else
            {
                this.CallID = callID;
            }
            // to ensure "mediaName" is required (not null)
            if (mediaName == null)
            {
                throw new InvalidDataException("mediaName is a required property for KapiDialplanRecord and cannot be null");
            }
            else
            {
                this.MediaName = mediaName;
            }
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.InsertAt = insertAt;
            this.SilenceHits = silenceHits;
            this.SilenceThreshold = silenceThreshold;
            this.Terminators = terminators;
            this.TimeLimit = timeLimit;
        }
        

        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }




        /// <summary>
        /// Gets or Sets MediaName
        /// </summary>
        [DataMember(Name="Media-Name", EmitDefaultValue=false)]
        public string MediaName { get; set; }

        /// <summary>
        /// Gets or Sets SilenceHits
        /// </summary>
        [DataMember(Name="Silence-Hits", EmitDefaultValue=false)]
        public string SilenceHits { get; set; }

        /// <summary>
        /// Gets or Sets SilenceThreshold
        /// </summary>
        [DataMember(Name="Silence-Threshold", EmitDefaultValue=false)]
        public string SilenceThreshold { get; set; }


        /// <summary>
        /// Gets or Sets TimeLimit
        /// </summary>
        [DataMember(Name="Time-Limit", EmitDefaultValue=false)]
        public int? TimeLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiDialplanRecord {\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  InsertAt: ").Append(InsertAt).Append("\n");
            sb.Append("  MediaName: ").Append(MediaName).Append("\n");
            sb.Append("  SilenceHits: ").Append(SilenceHits).Append("\n");
            sb.Append("  SilenceThreshold: ").Append(SilenceThreshold).Append("\n");
            sb.Append("  Terminators: ").Append(Terminators).Append("\n");
            sb.Append("  TimeLimit: ").Append(TimeLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiDialplanRecord);
        }

        /// <summary>
        /// Returns true if KapiDialplanRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiDialplanRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiDialplanRecord input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.InsertAt == input.InsertAt ||
                    (this.InsertAt != null &&
                    this.InsertAt.Equals(input.InsertAt))
                ) && 
                (
                    this.MediaName == input.MediaName ||
                    (this.MediaName != null &&
                    this.MediaName.Equals(input.MediaName))
                ) && 
                (
                    this.SilenceHits == input.SilenceHits ||
                    (this.SilenceHits != null &&
                    this.SilenceHits.Equals(input.SilenceHits))
                ) && 
                (
                    this.SilenceThreshold == input.SilenceThreshold ||
                    (this.SilenceThreshold != null &&
                    this.SilenceThreshold.Equals(input.SilenceThreshold))
                ) && 
                (
                    this.Terminators == input.Terminators ||
                    this.Terminators != null &&
                    this.Terminators.SequenceEqual(input.Terminators)
                ) && 
                (
                    this.TimeLimit == input.TimeLimit ||
                    (this.TimeLimit != null &&
                    this.TimeLimit.Equals(input.TimeLimit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationName != null)
                    hashCode = hashCode * 59 + this.ApplicationName.GetHashCode();
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.InsertAt != null)
                    hashCode = hashCode * 59 + this.InsertAt.GetHashCode();
                if (this.MediaName != null)
                    hashCode = hashCode * 59 + this.MediaName.GetHashCode();
                if (this.SilenceHits != null)
                    hashCode = hashCode * 59 + this.SilenceHits.GetHashCode();
                if (this.SilenceThreshold != null)
                    hashCode = hashCode * 59 + this.SilenceThreshold.GetHashCode();
                if (this.Terminators != null)
                    hashCode = hashCode * 59 + this.Terminators.GetHashCode();
                if (this.TimeLimit != null)
                    hashCode = hashCode * 59 + this.TimeLimit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
