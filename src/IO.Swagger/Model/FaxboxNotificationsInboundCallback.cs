/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A URL to send results to
    /// </summary>
    [DataContract]
    public partial class FaxboxNotificationsInboundCallback :  IEquatable<FaxboxNotificationsInboundCallback>, IValidatableObject
    {
        /// <summary>
        /// The http method to use when sending the results
        /// </summary>
        /// <value>The http method to use when sending the results</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodEnum
        {
            
            /// <summary>
            /// Enum Post for value: post
            /// </summary>
            [EnumMember(Value = "post")]
            Post = 1,
            
            /// <summary>
            /// Enum Put for value: put
            /// </summary>
            [EnumMember(Value = "put")]
            Put = 2
        }

        /// <summary>
        /// The http method to use when sending the results
        /// </summary>
        /// <value>The http method to use when sending the results</value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public MethodEnum? Method { get; set; }
        /// <summary>
        /// The content-type to use when sending the results
        /// </summary>
        /// <value>The content-type to use when sending the results</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Json for value: json
            /// </summary>
            [EnumMember(Value = "json")]
            Json = 1,
            
            /// <summary>
            /// Enum WwwUrlFormEncoded for value: www-url-form-encoded
            /// </summary>
            [EnumMember(Value = "www-url-form-encoded")]
            WwwUrlFormEncoded = 2
        }

        /// <summary>
        /// The content-type to use when sending the results
        /// </summary>
        /// <value>The content-type to use when sending the results</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FaxboxNotificationsInboundCallback" /> class.
        /// </summary>
        /// <param name="method">The http method to use when sending the results.</param>
        /// <param name="type">The content-type to use when sending the results.</param>
        /// <param name="url">The URL to call back with the results.</param>
        public FaxboxNotificationsInboundCallback(MethodEnum? method = default(MethodEnum?), TypeEnum? type = default(TypeEnum?), string url = default(string))
        {
            this.Method = method;
            this.Type = type;
            this.Url = url;
        }
        


        /// <summary>
        /// The URL to call back with the results
        /// </summary>
        /// <value>The URL to call back with the results</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FaxboxNotificationsInboundCallback {\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FaxboxNotificationsInboundCallback);
        }

        /// <summary>
        /// Returns true if FaxboxNotificationsInboundCallback instances are equal
        /// </summary>
        /// <param name="input">Instance of FaxboxNotificationsInboundCallback to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FaxboxNotificationsInboundCallback input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Url (string) pattern
            Regex regexUrl = new Regex(@"^https?:\/\/", RegexOptions.CultureInvariant);
            if (false == regexUrl.Match(this.Url).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Url, must match a pattern of " + regexUrl, new [] { "Url" });
            }

            yield break;
        }
    }

}
