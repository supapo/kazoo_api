/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for endpoint media options
    /// </summary>
    [DataContract]
    public partial class EndpointMedia :  IEquatable<EndpointMedia>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EndpointMedia" /> class.
        /// </summary>
        /// <param name="audio">audio.</param>
        /// <param name="bypassMedia">Default bypass media mode (The string type is deprecated, please use this as a boolean).</param>
        /// <param name="encryption">encryption.</param>
        /// <param name="faxOption">Is T.38 Supported?.</param>
        /// <param name="ignoreEarlyMedia">The option to determine if early media from the endpoint should always be ignored.</param>
        /// <param name="progressTimeout">The progress timeout to apply to the endpoint (seconds).</param>
        /// <param name="video">video.</param>
        public EndpointMedia(EndpointMediaAudio audio = default(EndpointMediaAudio), Object bypassMedia = default(Object), EndpointMediaEncryption encryption = default(EndpointMediaEncryption), bool? faxOption = default(bool?), bool? ignoreEarlyMedia = default(bool?), int? progressTimeout = default(int?), EndpointMediaVideo video = default(EndpointMediaVideo))
        {
            this.Audio = audio;
            this.BypassMedia = bypassMedia;
            this.Encryption = encryption;
            this.FaxOption = faxOption;
            this.IgnoreEarlyMedia = ignoreEarlyMedia;
            this.ProgressTimeout = progressTimeout;
            this.Video = video;
        }
        
        /// <summary>
        /// Gets or Sets Audio
        /// </summary>
        [DataMember(Name="audio", EmitDefaultValue=false)]
        public EndpointMediaAudio Audio { get; set; }

        /// <summary>
        /// Default bypass media mode (The string type is deprecated, please use this as a boolean)
        /// </summary>
        /// <value>Default bypass media mode (The string type is deprecated, please use this as a boolean)</value>
        [DataMember(Name="bypass_media", EmitDefaultValue=false)]
        public Object BypassMedia { get; set; }

        /// <summary>
        /// Gets or Sets Encryption
        /// </summary>
        [DataMember(Name="encryption", EmitDefaultValue=false)]
        public EndpointMediaEncryption Encryption { get; set; }

        /// <summary>
        /// Is T.38 Supported?
        /// </summary>
        /// <value>Is T.38 Supported?</value>
        [DataMember(Name="fax_option", EmitDefaultValue=false)]
        public bool? FaxOption { get; set; }

        /// <summary>
        /// The option to determine if early media from the endpoint should always be ignored
        /// </summary>
        /// <value>The option to determine if early media from the endpoint should always be ignored</value>
        [DataMember(Name="ignore_early_media", EmitDefaultValue=false)]
        public bool? IgnoreEarlyMedia { get; set; }

        /// <summary>
        /// The progress timeout to apply to the endpoint (seconds)
        /// </summary>
        /// <value>The progress timeout to apply to the endpoint (seconds)</value>
        [DataMember(Name="progress_timeout", EmitDefaultValue=false)]
        public int? ProgressTimeout { get; set; }

        /// <summary>
        /// Gets or Sets Video
        /// </summary>
        [DataMember(Name="video", EmitDefaultValue=false)]
        public EndpointMediaVideo Video { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EndpointMedia {\n");
            sb.Append("  Audio: ").Append(Audio).Append("\n");
            sb.Append("  BypassMedia: ").Append(BypassMedia).Append("\n");
            sb.Append("  Encryption: ").Append(Encryption).Append("\n");
            sb.Append("  FaxOption: ").Append(FaxOption).Append("\n");
            sb.Append("  IgnoreEarlyMedia: ").Append(IgnoreEarlyMedia).Append("\n");
            sb.Append("  ProgressTimeout: ").Append(ProgressTimeout).Append("\n");
            sb.Append("  Video: ").Append(Video).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EndpointMedia);
        }

        /// <summary>
        /// Returns true if EndpointMedia instances are equal
        /// </summary>
        /// <param name="input">Instance of EndpointMedia to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EndpointMedia input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Audio == input.Audio ||
                    (this.Audio != null &&
                    this.Audio.Equals(input.Audio))
                ) && 
                (
                    this.BypassMedia == input.BypassMedia ||
                    (this.BypassMedia != null &&
                    this.BypassMedia.Equals(input.BypassMedia))
                ) && 
                (
                    this.Encryption == input.Encryption ||
                    (this.Encryption != null &&
                    this.Encryption.Equals(input.Encryption))
                ) && 
                (
                    this.FaxOption == input.FaxOption ||
                    (this.FaxOption != null &&
                    this.FaxOption.Equals(input.FaxOption))
                ) && 
                (
                    this.IgnoreEarlyMedia == input.IgnoreEarlyMedia ||
                    (this.IgnoreEarlyMedia != null &&
                    this.IgnoreEarlyMedia.Equals(input.IgnoreEarlyMedia))
                ) && 
                (
                    this.ProgressTimeout == input.ProgressTimeout ||
                    (this.ProgressTimeout != null &&
                    this.ProgressTimeout.Equals(input.ProgressTimeout))
                ) && 
                (
                    this.Video == input.Video ||
                    (this.Video != null &&
                    this.Video.Equals(input.Video))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Audio != null)
                    hashCode = hashCode * 59 + this.Audio.GetHashCode();
                if (this.BypassMedia != null)
                    hashCode = hashCode * 59 + this.BypassMedia.GetHashCode();
                if (this.Encryption != null)
                    hashCode = hashCode * 59 + this.Encryption.GetHashCode();
                if (this.FaxOption != null)
                    hashCode = hashCode * 59 + this.FaxOption.GetHashCode();
                if (this.IgnoreEarlyMedia != null)
                    hashCode = hashCode * 59 + this.IgnoreEarlyMedia.GetHashCode();
                if (this.ProgressTimeout != null)
                    hashCode = hashCode * 59 + this.ProgressTimeout.GetHashCode();
                if (this.Video != null)
                    hashCode = hashCode * 59 + this.Video.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
