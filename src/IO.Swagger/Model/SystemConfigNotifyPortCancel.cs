/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for notify.port_cancel system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigNotifyPortCancel :  IEquatable<SystemConfigNotifyPortCancel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigNotifyPortCancel" /> class.
        /// </summary>
        /// <param name="defaultFrom">notify.port_cancel default from.</param>
        /// <param name="defaultTo">notify.port_cancel default to.</param>
        public SystemConfigNotifyPortCancel(string defaultFrom = default(string), Object defaultTo = default(Object))
        {
            this.DefaultFrom = defaultFrom;
            this.DefaultTo = defaultTo;
        }
        
        /// <summary>
        /// notify.port_cancel default from
        /// </summary>
        /// <value>notify.port_cancel default from</value>
        [DataMember(Name="default_from", EmitDefaultValue=false)]
        public string DefaultFrom { get; set; }

        /// <summary>
        /// notify.port_cancel default to
        /// </summary>
        /// <value>notify.port_cancel default to</value>
        [DataMember(Name="default_to", EmitDefaultValue=false)]
        public Object DefaultTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigNotifyPortCancel {\n");
            sb.Append("  DefaultFrom: ").Append(DefaultFrom).Append("\n");
            sb.Append("  DefaultTo: ").Append(DefaultTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigNotifyPortCancel);
        }

        /// <summary>
        /// Returns true if SystemConfigNotifyPortCancel instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigNotifyPortCancel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigNotifyPortCancel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefaultFrom == input.DefaultFrom ||
                    (this.DefaultFrom != null &&
                    this.DefaultFrom.Equals(input.DefaultFrom))
                ) && 
                (
                    this.DefaultTo == input.DefaultTo ||
                    (this.DefaultTo != null &&
                    this.DefaultTo.Equals(input.DefaultTo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultFrom != null)
                    hashCode = hashCode * 59 + this.DefaultFrom.GetHashCode();
                if (this.DefaultTo != null)
                    hashCode = hashCode * 59 + this.DefaultTo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
