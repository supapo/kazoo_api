/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for hotornot system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigHotornot :  IEquatable<SystemConfigHotornot>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigHotornot" /> class.
        /// </summary>
        /// <param name="defaultRateCost">default cost per minute for rate.</param>
        /// <param name="defaultRateIncrement">default increment time for rate.</param>
        /// <param name="defaultRateInternalCost">default internal cost per minute for rate.</param>
        /// <param name="defaultRateMinimum">default minimal duration for rate.</param>
        /// <param name="defaultRateNochargeTime">default nocharge time for rate.</param>
        /// <param name="defaultRateSurcharge">default surcharge amount for rate.</param>
        /// <param name="defaultRatedeck">default ratedeck database to use (default to &quot;ratedeck&quot;).</param>
        /// <param name="filterList">List of filters for rates.</param>
        /// <param name="mobileRate">Object defining rate for Kazoo mobile.</param>
        /// <param name="rateVersion">If defined, use rates with this version.</param>
        /// <param name="shouldPublishSystemAlert">shouldPublishSystemAlert.</param>
        /// <param name="sortByWeight">sort rates by weight (true) or cost (false) (default to true).</param>
        /// <param name="trieBuildTimeoutMs">build timeout (ms) for trie.</param>
        /// <param name="trieLruExpiresS">How long an entry in the LRU trie can remain.</param>
        /// <param name="trieModule">Which trie module to use (default to &quot;hon_trie&quot;).</param>
        /// <param name="useTrie">whether to use the trie to store rates in the VM (default to false).</param>
        public SystemConfigHotornot(decimal? defaultRateCost = default(decimal?), int? defaultRateIncrement = default(int?), decimal? defaultRateInternalCost = default(decimal?), int? defaultRateMinimum = default(int?), int? defaultRateNochargeTime = default(int?), decimal? defaultRateSurcharge = default(decimal?), string defaultRatedeck = "ratedeck", List<string> filterList = default(List<string>), Object mobileRate = default(Object), string rateVersion = default(string), SystemConfigHotornotShouldPublishSystemAlert shouldPublishSystemAlert = default(SystemConfigHotornotShouldPublishSystemAlert), bool? sortByWeight = true, int? trieBuildTimeoutMs = default(int?), int? trieLruExpiresS = default(int?), string trieModule = "hon_trie", bool? useTrie = false)
        {
            this.DefaultRateCost = defaultRateCost;
            this.DefaultRateIncrement = defaultRateIncrement;
            this.DefaultRateInternalCost = defaultRateInternalCost;
            this.DefaultRateMinimum = defaultRateMinimum;
            this.DefaultRateNochargeTime = defaultRateNochargeTime;
            this.DefaultRateSurcharge = defaultRateSurcharge;
            // use default value if no "defaultRatedeck" provided
            if (defaultRatedeck == null)
            {
                this.DefaultRatedeck = "ratedeck";
            }
            else
            {
                this.DefaultRatedeck = defaultRatedeck;
            }
            this.FilterList = filterList;
            this.MobileRate = mobileRate;
            this.RateVersion = rateVersion;
            this.ShouldPublishSystemAlert = shouldPublishSystemAlert;
            // use default value if no "sortByWeight" provided
            if (sortByWeight == null)
            {
                this.SortByWeight = true;
            }
            else
            {
                this.SortByWeight = sortByWeight;
            }
            this.TrieBuildTimeoutMs = trieBuildTimeoutMs;
            this.TrieLruExpiresS = trieLruExpiresS;
            // use default value if no "trieModule" provided
            if (trieModule == null)
            {
                this.TrieModule = "hon_trie";
            }
            else
            {
                this.TrieModule = trieModule;
            }
            // use default value if no "useTrie" provided
            if (useTrie == null)
            {
                this.UseTrie = false;
            }
            else
            {
                this.UseTrie = useTrie;
            }
        }
        
        /// <summary>
        /// default cost per minute for rate
        /// </summary>
        /// <value>default cost per minute for rate</value>
        [DataMember(Name="default_rate_cost", EmitDefaultValue=false)]
        public decimal? DefaultRateCost { get; set; }

        /// <summary>
        /// default increment time for rate
        /// </summary>
        /// <value>default increment time for rate</value>
        [DataMember(Name="default_rate_increment", EmitDefaultValue=false)]
        public int? DefaultRateIncrement { get; set; }

        /// <summary>
        /// default internal cost per minute for rate
        /// </summary>
        /// <value>default internal cost per minute for rate</value>
        [DataMember(Name="default_rate_internal_cost", EmitDefaultValue=false)]
        public decimal? DefaultRateInternalCost { get; set; }

        /// <summary>
        /// default minimal duration for rate
        /// </summary>
        /// <value>default minimal duration for rate</value>
        [DataMember(Name="default_rate_minimum", EmitDefaultValue=false)]
        public int? DefaultRateMinimum { get; set; }

        /// <summary>
        /// default nocharge time for rate
        /// </summary>
        /// <value>default nocharge time for rate</value>
        [DataMember(Name="default_rate_nocharge_time", EmitDefaultValue=false)]
        public int? DefaultRateNochargeTime { get; set; }

        /// <summary>
        /// default surcharge amount for rate
        /// </summary>
        /// <value>default surcharge amount for rate</value>
        [DataMember(Name="default_rate_surcharge", EmitDefaultValue=false)]
        public decimal? DefaultRateSurcharge { get; set; }

        /// <summary>
        /// default ratedeck database to use
        /// </summary>
        /// <value>default ratedeck database to use</value>
        [DataMember(Name="default_ratedeck", EmitDefaultValue=false)]
        public string DefaultRatedeck { get; set; }

        /// <summary>
        /// List of filters for rates
        /// </summary>
        /// <value>List of filters for rates</value>
        [DataMember(Name="filter_list", EmitDefaultValue=false)]
        public List<string> FilterList { get; set; }

        /// <summary>
        /// Object defining rate for Kazoo mobile
        /// </summary>
        /// <value>Object defining rate for Kazoo mobile</value>
        [DataMember(Name="mobile_rate", EmitDefaultValue=false)]
        public Object MobileRate { get; set; }

        /// <summary>
        /// If defined, use rates with this version
        /// </summary>
        /// <value>If defined, use rates with this version</value>
        [DataMember(Name="rate_version", EmitDefaultValue=false)]
        public string RateVersion { get; set; }

        /// <summary>
        /// Gets or Sets ShouldPublishSystemAlert
        /// </summary>
        [DataMember(Name="should_publish_system_alert", EmitDefaultValue=false)]
        public SystemConfigHotornotShouldPublishSystemAlert ShouldPublishSystemAlert { get; set; }

        /// <summary>
        /// sort rates by weight (true) or cost (false)
        /// </summary>
        /// <value>sort rates by weight (true) or cost (false)</value>
        [DataMember(Name="sort_by_weight", EmitDefaultValue=false)]
        public bool? SortByWeight { get; set; }

        /// <summary>
        /// build timeout (ms) for trie
        /// </summary>
        /// <value>build timeout (ms) for trie</value>
        [DataMember(Name="trie_build_timeout_ms", EmitDefaultValue=false)]
        public int? TrieBuildTimeoutMs { get; set; }

        /// <summary>
        /// How long an entry in the LRU trie can remain
        /// </summary>
        /// <value>How long an entry in the LRU trie can remain</value>
        [DataMember(Name="trie_lru_expires_s", EmitDefaultValue=false)]
        public int? TrieLruExpiresS { get; set; }

        /// <summary>
        /// Which trie module to use
        /// </summary>
        /// <value>Which trie module to use</value>
        [DataMember(Name="trie_module", EmitDefaultValue=false)]
        public string TrieModule { get; set; }

        /// <summary>
        /// whether to use the trie to store rates in the VM
        /// </summary>
        /// <value>whether to use the trie to store rates in the VM</value>
        [DataMember(Name="use_trie", EmitDefaultValue=false)]
        public bool? UseTrie { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigHotornot {\n");
            sb.Append("  DefaultRateCost: ").Append(DefaultRateCost).Append("\n");
            sb.Append("  DefaultRateIncrement: ").Append(DefaultRateIncrement).Append("\n");
            sb.Append("  DefaultRateInternalCost: ").Append(DefaultRateInternalCost).Append("\n");
            sb.Append("  DefaultRateMinimum: ").Append(DefaultRateMinimum).Append("\n");
            sb.Append("  DefaultRateNochargeTime: ").Append(DefaultRateNochargeTime).Append("\n");
            sb.Append("  DefaultRateSurcharge: ").Append(DefaultRateSurcharge).Append("\n");
            sb.Append("  DefaultRatedeck: ").Append(DefaultRatedeck).Append("\n");
            sb.Append("  FilterList: ").Append(FilterList).Append("\n");
            sb.Append("  MobileRate: ").Append(MobileRate).Append("\n");
            sb.Append("  RateVersion: ").Append(RateVersion).Append("\n");
            sb.Append("  ShouldPublishSystemAlert: ").Append(ShouldPublishSystemAlert).Append("\n");
            sb.Append("  SortByWeight: ").Append(SortByWeight).Append("\n");
            sb.Append("  TrieBuildTimeoutMs: ").Append(TrieBuildTimeoutMs).Append("\n");
            sb.Append("  TrieLruExpiresS: ").Append(TrieLruExpiresS).Append("\n");
            sb.Append("  TrieModule: ").Append(TrieModule).Append("\n");
            sb.Append("  UseTrie: ").Append(UseTrie).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigHotornot);
        }

        /// <summary>
        /// Returns true if SystemConfigHotornot instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigHotornot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigHotornot input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefaultRateCost == input.DefaultRateCost ||
                    (this.DefaultRateCost != null &&
                    this.DefaultRateCost.Equals(input.DefaultRateCost))
                ) && 
                (
                    this.DefaultRateIncrement == input.DefaultRateIncrement ||
                    (this.DefaultRateIncrement != null &&
                    this.DefaultRateIncrement.Equals(input.DefaultRateIncrement))
                ) && 
                (
                    this.DefaultRateInternalCost == input.DefaultRateInternalCost ||
                    (this.DefaultRateInternalCost != null &&
                    this.DefaultRateInternalCost.Equals(input.DefaultRateInternalCost))
                ) && 
                (
                    this.DefaultRateMinimum == input.DefaultRateMinimum ||
                    (this.DefaultRateMinimum != null &&
                    this.DefaultRateMinimum.Equals(input.DefaultRateMinimum))
                ) && 
                (
                    this.DefaultRateNochargeTime == input.DefaultRateNochargeTime ||
                    (this.DefaultRateNochargeTime != null &&
                    this.DefaultRateNochargeTime.Equals(input.DefaultRateNochargeTime))
                ) && 
                (
                    this.DefaultRateSurcharge == input.DefaultRateSurcharge ||
                    (this.DefaultRateSurcharge != null &&
                    this.DefaultRateSurcharge.Equals(input.DefaultRateSurcharge))
                ) && 
                (
                    this.DefaultRatedeck == input.DefaultRatedeck ||
                    (this.DefaultRatedeck != null &&
                    this.DefaultRatedeck.Equals(input.DefaultRatedeck))
                ) && 
                (
                    this.FilterList == input.FilterList ||
                    this.FilterList != null &&
                    this.FilterList.SequenceEqual(input.FilterList)
                ) && 
                (
                    this.MobileRate == input.MobileRate ||
                    (this.MobileRate != null &&
                    this.MobileRate.Equals(input.MobileRate))
                ) && 
                (
                    this.RateVersion == input.RateVersion ||
                    (this.RateVersion != null &&
                    this.RateVersion.Equals(input.RateVersion))
                ) && 
                (
                    this.ShouldPublishSystemAlert == input.ShouldPublishSystemAlert ||
                    (this.ShouldPublishSystemAlert != null &&
                    this.ShouldPublishSystemAlert.Equals(input.ShouldPublishSystemAlert))
                ) && 
                (
                    this.SortByWeight == input.SortByWeight ||
                    (this.SortByWeight != null &&
                    this.SortByWeight.Equals(input.SortByWeight))
                ) && 
                (
                    this.TrieBuildTimeoutMs == input.TrieBuildTimeoutMs ||
                    (this.TrieBuildTimeoutMs != null &&
                    this.TrieBuildTimeoutMs.Equals(input.TrieBuildTimeoutMs))
                ) && 
                (
                    this.TrieLruExpiresS == input.TrieLruExpiresS ||
                    (this.TrieLruExpiresS != null &&
                    this.TrieLruExpiresS.Equals(input.TrieLruExpiresS))
                ) && 
                (
                    this.TrieModule == input.TrieModule ||
                    (this.TrieModule != null &&
                    this.TrieModule.Equals(input.TrieModule))
                ) && 
                (
                    this.UseTrie == input.UseTrie ||
                    (this.UseTrie != null &&
                    this.UseTrie.Equals(input.UseTrie))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultRateCost != null)
                    hashCode = hashCode * 59 + this.DefaultRateCost.GetHashCode();
                if (this.DefaultRateIncrement != null)
                    hashCode = hashCode * 59 + this.DefaultRateIncrement.GetHashCode();
                if (this.DefaultRateInternalCost != null)
                    hashCode = hashCode * 59 + this.DefaultRateInternalCost.GetHashCode();
                if (this.DefaultRateMinimum != null)
                    hashCode = hashCode * 59 + this.DefaultRateMinimum.GetHashCode();
                if (this.DefaultRateNochargeTime != null)
                    hashCode = hashCode * 59 + this.DefaultRateNochargeTime.GetHashCode();
                if (this.DefaultRateSurcharge != null)
                    hashCode = hashCode * 59 + this.DefaultRateSurcharge.GetHashCode();
                if (this.DefaultRatedeck != null)
                    hashCode = hashCode * 59 + this.DefaultRatedeck.GetHashCode();
                if (this.FilterList != null)
                    hashCode = hashCode * 59 + this.FilterList.GetHashCode();
                if (this.MobileRate != null)
                    hashCode = hashCode * 59 + this.MobileRate.GetHashCode();
                if (this.RateVersion != null)
                    hashCode = hashCode * 59 + this.RateVersion.GetHashCode();
                if (this.ShouldPublishSystemAlert != null)
                    hashCode = hashCode * 59 + this.ShouldPublishSystemAlert.GetHashCode();
                if (this.SortByWeight != null)
                    hashCode = hashCode * 59 + this.SortByWeight.GetHashCode();
                if (this.TrieBuildTimeoutMs != null)
                    hashCode = hashCode * 59 + this.TrieBuildTimeoutMs.GetHashCode();
                if (this.TrieLruExpiresS != null)
                    hashCode = hashCode * 59 + this.TrieLruExpiresS.GetHashCode();
                if (this.TrieModule != null)
                    hashCode = hashCode * 59 + this.TrieModule.GetHashCode();
                if (this.UseTrie != null)
                    hashCode = hashCode * 59 + this.UseTrie.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
