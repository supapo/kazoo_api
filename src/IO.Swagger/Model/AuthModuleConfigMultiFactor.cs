/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// control multi factor authentications for this module
    /// </summary>
    [DataContract]
    public partial class AuthModuleConfigMultiFactor :  IEquatable<AuthModuleConfigMultiFactor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthModuleConfigMultiFactor" /> class.
        /// </summary>
        /// <param name="accountId">ID of the account that contains the multi factor configuration.</param>
        /// <param name="configurationId">document ID that contains the multi factor configuration.</param>
        /// <param name="enabled">turn on/off multi factor authentications for this module.</param>
        /// <param name="includeSubaccounts">should this multi factor authentication settings be applied when used by sub-accounts.</param>
        public AuthModuleConfigMultiFactor(string accountId = default(string), string configurationId = default(string), bool? enabled = default(bool?), bool? includeSubaccounts = default(bool?))
        {
            this.AccountId = accountId;
            this.ConfigurationId = configurationId;
            this.Enabled = enabled;
            this.IncludeSubaccounts = includeSubaccounts;
        }
        
        /// <summary>
        /// ID of the account that contains the multi factor configuration
        /// </summary>
        /// <value>ID of the account that contains the multi factor configuration</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// document ID that contains the multi factor configuration
        /// </summary>
        /// <value>document ID that contains the multi factor configuration</value>
        [DataMember(Name="configuration_id", EmitDefaultValue=false)]
        public string ConfigurationId { get; set; }

        /// <summary>
        /// turn on/off multi factor authentications for this module
        /// </summary>
        /// <value>turn on/off multi factor authentications for this module</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// should this multi factor authentication settings be applied when used by sub-accounts
        /// </summary>
        /// <value>should this multi factor authentication settings be applied when used by sub-accounts</value>
        [DataMember(Name="include_subaccounts", EmitDefaultValue=false)]
        public bool? IncludeSubaccounts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthModuleConfigMultiFactor {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ConfigurationId: ").Append(ConfigurationId).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  IncludeSubaccounts: ").Append(IncludeSubaccounts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthModuleConfigMultiFactor);
        }

        /// <summary>
        /// Returns true if AuthModuleConfigMultiFactor instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthModuleConfigMultiFactor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthModuleConfigMultiFactor input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.ConfigurationId == input.ConfigurationId ||
                    (this.ConfigurationId != null &&
                    this.ConfigurationId.Equals(input.ConfigurationId))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.IncludeSubaccounts == input.IncludeSubaccounts ||
                    (this.IncludeSubaccounts != null &&
                    this.IncludeSubaccounts.Equals(input.IncludeSubaccounts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.ConfigurationId != null)
                    hashCode = hashCode * 59 + this.ConfigurationId.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.IncludeSubaccounts != null)
                    hashCode = hashCode * 59 + this.IncludeSubaccounts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
