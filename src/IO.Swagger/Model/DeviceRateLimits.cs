/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// describe limits for SIP requests
    /// </summary>
    [DataContract]
    public partial class DeviceRateLimits :  IEquatable<DeviceRateLimits>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceRateLimits" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeviceRateLimits() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceRateLimits" /> class.
        /// </summary>
        /// <param name="perMinute">perMinute (required).</param>
        /// <param name="perSecond">perSecond (required).</param>
        public DeviceRateLimits(DeviceRateLimitsPerMinute perMinute = default(DeviceRateLimitsPerMinute), DeviceRateLimitsPerSecond perSecond = default(DeviceRateLimitsPerSecond))
        {
            // to ensure "perMinute" is required (not null)
            if (perMinute == null)
            {
                throw new InvalidDataException("perMinute is a required property for DeviceRateLimits and cannot be null");
            }
            else
            {
                this.PerMinute = perMinute;
            }
            // to ensure "perSecond" is required (not null)
            if (perSecond == null)
            {
                throw new InvalidDataException("perSecond is a required property for DeviceRateLimits and cannot be null");
            }
            else
            {
                this.PerSecond = perSecond;
            }
        }
        
        /// <summary>
        /// Gets or Sets PerMinute
        /// </summary>
        [DataMember(Name="per_minute", EmitDefaultValue=false)]
        public DeviceRateLimitsPerMinute PerMinute { get; set; }

        /// <summary>
        /// Gets or Sets PerSecond
        /// </summary>
        [DataMember(Name="per_second", EmitDefaultValue=false)]
        public DeviceRateLimitsPerSecond PerSecond { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceRateLimits {\n");
            sb.Append("  PerMinute: ").Append(PerMinute).Append("\n");
            sb.Append("  PerSecond: ").Append(PerSecond).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeviceRateLimits);
        }

        /// <summary>
        /// Returns true if DeviceRateLimits instances are equal
        /// </summary>
        /// <param name="input">Instance of DeviceRateLimits to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceRateLimits input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PerMinute == input.PerMinute ||
                    (this.PerMinute != null &&
                    this.PerMinute.Equals(input.PerMinute))
                ) && 
                (
                    this.PerSecond == input.PerSecond ||
                    (this.PerSecond != null &&
                    this.PerSecond.Equals(input.PerSecond))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PerMinute != null)
                    hashCode = hashCode * 59 + this.PerMinute.GetHashCode();
                if (this.PerSecond != null)
                    hashCode = hashCode * 59 + this.PerSecond.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
