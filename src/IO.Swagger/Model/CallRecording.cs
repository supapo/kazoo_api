/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// endpoint recording settings
    /// </summary>
    [DataContract]
    public partial class CallRecording :  IEquatable<CallRecording>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallRecording" /> class.
        /// </summary>
        /// <param name="any">settings for any calls to/from the endpoint.</param>
        /// <param name="inbound">settings for inbound calls to the endpoint.</param>
        /// <param name="outbound">settings for outbound calls from the endpoint.</param>
        public CallRecording(CallRecordingSource any = default(CallRecordingSource), CallRecordingSource inbound = default(CallRecordingSource), CallRecordingSource outbound = default(CallRecordingSource))
        {
            this.Any = any;
            this.Inbound = inbound;
            this.Outbound = outbound;
        }
        
        /// <summary>
        /// settings for any calls to/from the endpoint
        /// </summary>
        /// <value>settings for any calls to/from the endpoint</value>
        [DataMember(Name="any", EmitDefaultValue=false)]
        public CallRecordingSource Any { get; set; }

        /// <summary>
        /// settings for inbound calls to the endpoint
        /// </summary>
        /// <value>settings for inbound calls to the endpoint</value>
        [DataMember(Name="inbound", EmitDefaultValue=false)]
        public CallRecordingSource Inbound { get; set; }

        /// <summary>
        /// settings for outbound calls from the endpoint
        /// </summary>
        /// <value>settings for outbound calls from the endpoint</value>
        [DataMember(Name="outbound", EmitDefaultValue=false)]
        public CallRecordingSource Outbound { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallRecording {\n");
            sb.Append("  Any: ").Append(Any).Append("\n");
            sb.Append("  Inbound: ").Append(Inbound).Append("\n");
            sb.Append("  Outbound: ").Append(Outbound).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallRecording);
        }

        /// <summary>
        /// Returns true if CallRecording instances are equal
        /// </summary>
        /// <param name="input">Instance of CallRecording to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallRecording input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Any == input.Any ||
                    (this.Any != null &&
                    this.Any.Equals(input.Any))
                ) && 
                (
                    this.Inbound == input.Inbound ||
                    (this.Inbound != null &&
                    this.Inbound.Equals(input.Inbound))
                ) && 
                (
                    this.Outbound == input.Outbound ||
                    (this.Outbound != null &&
                    this.Outbound.Equals(input.Outbound))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Any != null)
                    hashCode = hashCode * 59 + this.Any.GetHashCode();
                if (this.Inbound != null)
                    hashCode = hashCode * 59 + this.Inbound.GetHashCode();
                if (this.Outbound != null)
                    hashCode = hashCode * 59 + this.Outbound.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
