/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for crossbar.cdrs system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigCrossbarCdrs :  IEquatable<SystemConfigCrossbarCdrs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigCrossbarCdrs" /> class.
        /// </summary>
        /// <param name="cdrStaleView">force cdr to return stale records only (default to false).</param>
        /// <param name="maximumBulk">crossbar.cdrs maximum bulk.</param>
        /// <param name="maximumRange">maximum range (in seconds) prior to the current date allowed for CDR requests.</param>
        public SystemConfigCrossbarCdrs(bool? cdrStaleView = false, int? maximumBulk = default(int?), int? maximumRange = default(int?))
        {
            // use default value if no "cdrStaleView" provided
            if (cdrStaleView == null)
            {
                this.CdrStaleView = false;
            }
            else
            {
                this.CdrStaleView = cdrStaleView;
            }
            this.MaximumBulk = maximumBulk;
            this.MaximumRange = maximumRange;
        }
        
        /// <summary>
        /// force cdr to return stale records only
        /// </summary>
        /// <value>force cdr to return stale records only</value>
        [DataMember(Name="cdr_stale_view", EmitDefaultValue=false)]
        public bool? CdrStaleView { get; set; }

        /// <summary>
        /// crossbar.cdrs maximum bulk
        /// </summary>
        /// <value>crossbar.cdrs maximum bulk</value>
        [DataMember(Name="maximum_bulk", EmitDefaultValue=false)]
        public int? MaximumBulk { get; set; }

        /// <summary>
        /// maximum range (in seconds) prior to the current date allowed for CDR requests
        /// </summary>
        /// <value>maximum range (in seconds) prior to the current date allowed for CDR requests</value>
        [DataMember(Name="maximum_range", EmitDefaultValue=false)]
        public int? MaximumRange { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigCrossbarCdrs {\n");
            sb.Append("  CdrStaleView: ").Append(CdrStaleView).Append("\n");
            sb.Append("  MaximumBulk: ").Append(MaximumBulk).Append("\n");
            sb.Append("  MaximumRange: ").Append(MaximumRange).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigCrossbarCdrs);
        }

        /// <summary>
        /// Returns true if SystemConfigCrossbarCdrs instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigCrossbarCdrs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigCrossbarCdrs input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CdrStaleView == input.CdrStaleView ||
                    (this.CdrStaleView != null &&
                    this.CdrStaleView.Equals(input.CdrStaleView))
                ) && 
                (
                    this.MaximumBulk == input.MaximumBulk ||
                    (this.MaximumBulk != null &&
                    this.MaximumBulk.Equals(input.MaximumBulk))
                ) && 
                (
                    this.MaximumRange == input.MaximumRange ||
                    (this.MaximumRange != null &&
                    this.MaximumRange.Equals(input.MaximumRange))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CdrStaleView != null)
                    hashCode = hashCode * 59 + this.CdrStaleView.GetHashCode();
                if (this.MaximumBulk != null)
                    hashCode = hashCode * 59 + this.MaximumBulk.GetHashCode();
                if (this.MaximumRange != null)
                    hashCode = hashCode * 59 + this.MaximumRange.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MaximumBulk (int?) minimum
            if(this.MaximumBulk < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaximumBulk, must be a value greater than or equal to 1.", new [] { "MaximumBulk" });
            }

            // MaximumRange (int?) minimum
            if(this.MaximumRange < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaximumRange, must be a value greater than or equal to 1.", new [] { "MaximumRange" });
            }

            yield break;
        }
    }

}
