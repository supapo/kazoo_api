/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for conference.play_macro_req
    /// </summary>
    [DataContract]
    public partial class KapiConferencePlayMacroReq :  IEquatable<KapiConferencePlayMacroReq>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiConferencePlayMacroReq" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiConferencePlayMacroReq() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiConferencePlayMacroReq" /> class.
        /// </summary>
        /// <param name="applicationName">applicationName (required).</param>
        /// <param name="conferenceID">conferenceID (required).</param>
        /// <param name="mediaMacro">mediaMacro (required).</param>
        public KapiConferencePlayMacroReq(string applicationName = default(string), string conferenceID = default(string), string mediaMacro = default(string))
        {
            // to ensure "applicationName" is required (not null)
            if (applicationName == null)
            {
                throw new InvalidDataException("applicationName is a required property for KapiConferencePlayMacroReq and cannot be null");
            }
            else
            {
                this.ApplicationName = applicationName;
            }
            // to ensure "conferenceID" is required (not null)
            if (conferenceID == null)
            {
                throw new InvalidDataException("conferenceID is a required property for KapiConferencePlayMacroReq and cannot be null");
            }
            else
            {
                this.ConferenceID = conferenceID;
            }
            // to ensure "mediaMacro" is required (not null)
            if (mediaMacro == null)
            {
                throw new InvalidDataException("mediaMacro is a required property for KapiConferencePlayMacroReq and cannot be null");
            }
            else
            {
                this.MediaMacro = mediaMacro;
            }
        }
        
        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name="Application-Name", EmitDefaultValue=false)]
        public string ApplicationName { get; set; }

        /// <summary>
        /// Gets or Sets ConferenceID
        /// </summary>
        [DataMember(Name="Conference-ID", EmitDefaultValue=false)]
        public string ConferenceID { get; set; }

        /// <summary>
        /// Gets or Sets MediaMacro
        /// </summary>
        [DataMember(Name="Media-Macro", EmitDefaultValue=false)]
        public string MediaMacro { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiConferencePlayMacroReq {\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  ConferenceID: ").Append(ConferenceID).Append("\n");
            sb.Append("  MediaMacro: ").Append(MediaMacro).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiConferencePlayMacroReq);
        }

        /// <summary>
        /// Returns true if KapiConferencePlayMacroReq instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiConferencePlayMacroReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiConferencePlayMacroReq input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.ConferenceID == input.ConferenceID ||
                    (this.ConferenceID != null &&
                    this.ConferenceID.Equals(input.ConferenceID))
                ) && 
                (
                    this.MediaMacro == input.MediaMacro ||
                    (this.MediaMacro != null &&
                    this.MediaMacro.Equals(input.MediaMacro))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationName != null)
                    hashCode = hashCode * 59 + this.ApplicationName.GetHashCode();
                if (this.ConferenceID != null)
                    hashCode = hashCode * 59 + this.ConferenceID.GetHashCode();
                if (this.MediaMacro != null)
                    hashCode = hashCode * 59 + this.MediaMacro.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
