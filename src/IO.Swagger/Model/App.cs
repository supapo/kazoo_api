/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Appstore applications
    /// </summary>
    [DataContract]
    public partial class App :  IEquatable<App>, IValidatableObject
    {
        /// <summary>
        /// User type allowed to access the app
        /// </summary>
        /// <value>User type allowed to access the app</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AllowedUsersEnum
        {
            
            /// <summary>
            /// Enum Specific for value: specific
            /// </summary>
            [EnumMember(Value = "specific")]
            Specific = 1,
            
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 2,
            
            /// <summary>
            /// Enum Admins for value: admins
            /// </summary>
            [EnumMember(Value = "admins")]
            Admins = 3
        }

        /// <summary>
        /// User type allowed to access the app
        /// </summary>
        /// <value>User type allowed to access the app</value>
        [DataMember(Name="allowed_users", EmitDefaultValue=false)]
        public AllowedUsersEnum? AllowedUsers { get; set; }
        /// <summary>
        /// Application test phase
        /// </summary>
        /// <value>Application test phase</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PhaseEnum
        {
            
            /// <summary>
            /// Enum Alpha for value: alpha
            /// </summary>
            [EnumMember(Value = "alpha")]
            Alpha = 1,
            
            /// <summary>
            /// Enum Beta for value: beta
            /// </summary>
            [EnumMember(Value = "beta")]
            Beta = 2,
            
            /// <summary>
            /// Enum Gold for value: gold
            /// </summary>
            [EnumMember(Value = "gold")]
            Gold = 3
        }

        /// <summary>
        /// Application test phase
        /// </summary>
        /// <value>Application test phase</value>
        [DataMember(Name="phase", EmitDefaultValue=false)]
        public PhaseEnum? Phase { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="App" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected App() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="App" /> class.
        /// </summary>
        /// <param name="allowedUsers">User type allowed to access the app.</param>
        /// <param name="apiUrl">Application api url (required).</param>
        /// <param name="author">Application author (required).</param>
        /// <param name="i18n">Application translation (required).</param>
        /// <param name="icon">Application icon (required).</param>
        /// <param name="license">Application license (required).</param>
        /// <param name="masqueradable">Whether an application is masqueradable or not (default to true).</param>
        /// <param name="name">Application name (required).</param>
        /// <param name="phase">Application test phase.</param>
        /// <param name="price">Application price (required).</param>
        /// <param name="published">is the app published.</param>
        /// <param name="screenshots">screenshots.</param>
        /// <param name="sourceUrl">Application source url.</param>
        /// <param name="tags">tags.</param>
        /// <param name="urls">urls.</param>
        /// <param name="users">User IDs authorized to use the app (when allowed_users &#x3D; &#39;specific&#39;).</param>
        /// <param name="version">Application version (required).</param>
        public App(AllowedUsersEnum? allowedUsers = default(AllowedUsersEnum?), string apiUrl = default(string), string author = default(string), Object i18n = default(Object), string icon = default(string), string license = default(string), bool? masqueradable = true, string name = default(string), PhaseEnum? phase = default(PhaseEnum?), decimal? price = default(decimal?), bool? published = default(bool?), List<string> screenshots = default(List<string>), string sourceUrl = default(string), List<string> tags = default(List<string>), Object urls = default(Object), List<string> users = default(List<string>), string version = default(string))
        {
            // to ensure "apiUrl" is required (not null)
            if (apiUrl == null)
            {
                throw new InvalidDataException("apiUrl is a required property for App and cannot be null");
            }
            else
            {
                this.ApiUrl = apiUrl;
            }
            // to ensure "author" is required (not null)
            if (author == null)
            {
                throw new InvalidDataException("author is a required property for App and cannot be null");
            }
            else
            {
                this.Author = author;
            }
            // to ensure "i18n" is required (not null)
            if (i18n == null)
            {
                throw new InvalidDataException("i18n is a required property for App and cannot be null");
            }
            else
            {
                this.I18n = i18n;
            }
            // to ensure "icon" is required (not null)
            if (icon == null)
            {
                throw new InvalidDataException("icon is a required property for App and cannot be null");
            }
            else
            {
                this.Icon = icon;
            }
            // to ensure "license" is required (not null)
            if (license == null)
            {
                throw new InvalidDataException("license is a required property for App and cannot be null");
            }
            else
            {
                this.License = license;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for App and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "price" is required (not null)
            if (price == null)
            {
                throw new InvalidDataException("price is a required property for App and cannot be null");
            }
            else
            {
                this.Price = price;
            }
            // to ensure "version" is required (not null)
            if (version == null)
            {
                throw new InvalidDataException("version is a required property for App and cannot be null");
            }
            else
            {
                this.Version = version;
            }
            this.AllowedUsers = allowedUsers;
            // use default value if no "masqueradable" provided
            if (masqueradable == null)
            {
                this.Masqueradable = true;
            }
            else
            {
                this.Masqueradable = masqueradable;
            }
            this.Phase = phase;
            this.Published = published;
            this.Screenshots = screenshots;
            this.SourceUrl = sourceUrl;
            this.Tags = tags;
            this.Urls = urls;
            this.Users = users;
        }
        

        /// <summary>
        /// Application api url
        /// </summary>
        /// <value>Application api url</value>
        [DataMember(Name="api_url", EmitDefaultValue=false)]
        public string ApiUrl { get; set; }

        /// <summary>
        /// Application author
        /// </summary>
        /// <value>Application author</value>
        [DataMember(Name="author", EmitDefaultValue=false)]
        public string Author { get; set; }

        /// <summary>
        /// Application translation
        /// </summary>
        /// <value>Application translation</value>
        [DataMember(Name="i18n", EmitDefaultValue=false)]
        public Object I18n { get; set; }

        /// <summary>
        /// Application icon
        /// </summary>
        /// <value>Application icon</value>
        [DataMember(Name="icon", EmitDefaultValue=false)]
        public string Icon { get; set; }

        /// <summary>
        /// Application license
        /// </summary>
        /// <value>Application license</value>
        [DataMember(Name="license", EmitDefaultValue=false)]
        public string License { get; set; }

        /// <summary>
        /// Whether an application is masqueradable or not
        /// </summary>
        /// <value>Whether an application is masqueradable or not</value>
        [DataMember(Name="masqueradable", EmitDefaultValue=false)]
        public bool? Masqueradable { get; set; }

        /// <summary>
        /// Application name
        /// </summary>
        /// <value>Application name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Application price
        /// </summary>
        /// <value>Application price</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public decimal? Price { get; set; }

        /// <summary>
        /// is the app published
        /// </summary>
        /// <value>is the app published</value>
        [DataMember(Name="published", EmitDefaultValue=false)]
        public bool? Published { get; set; }

        /// <summary>
        /// Gets or Sets Screenshots
        /// </summary>
        [DataMember(Name="screenshots", EmitDefaultValue=false)]
        public List<string> Screenshots { get; set; }

        /// <summary>
        /// Application source url
        /// </summary>
        /// <value>Application source url</value>
        [DataMember(Name="source_url", EmitDefaultValue=false)]
        public string SourceUrl { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Urls
        /// </summary>
        [DataMember(Name="urls", EmitDefaultValue=false)]
        public Object Urls { get; set; }

        /// <summary>
        /// User IDs authorized to use the app (when allowed_users &#x3D; &#39;specific&#39;)
        /// </summary>
        /// <value>User IDs authorized to use the app (when allowed_users &#x3D; &#39;specific&#39;)</value>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<string> Users { get; set; }

        /// <summary>
        /// Application version
        /// </summary>
        /// <value>Application version</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class App {\n");
            sb.Append("  AllowedUsers: ").Append(AllowedUsers).Append("\n");
            sb.Append("  ApiUrl: ").Append(ApiUrl).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  I18n: ").Append(I18n).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  Masqueradable: ").Append(Masqueradable).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Phase: ").Append(Phase).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Published: ").Append(Published).Append("\n");
            sb.Append("  Screenshots: ").Append(Screenshots).Append("\n");
            sb.Append("  SourceUrl: ").Append(SourceUrl).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as App);
        }

        /// <summary>
        /// Returns true if App instances are equal
        /// </summary>
        /// <param name="input">Instance of App to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(App input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowedUsers == input.AllowedUsers ||
                    (this.AllowedUsers != null &&
                    this.AllowedUsers.Equals(input.AllowedUsers))
                ) && 
                (
                    this.ApiUrl == input.ApiUrl ||
                    (this.ApiUrl != null &&
                    this.ApiUrl.Equals(input.ApiUrl))
                ) && 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.I18n == input.I18n ||
                    (this.I18n != null &&
                    this.I18n.Equals(input.I18n))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.License == input.License ||
                    (this.License != null &&
                    this.License.Equals(input.License))
                ) && 
                (
                    this.Masqueradable == input.Masqueradable ||
                    (this.Masqueradable != null &&
                    this.Masqueradable.Equals(input.Masqueradable))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Phase == input.Phase ||
                    (this.Phase != null &&
                    this.Phase.Equals(input.Phase))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Published == input.Published ||
                    (this.Published != null &&
                    this.Published.Equals(input.Published))
                ) && 
                (
                    this.Screenshots == input.Screenshots ||
                    this.Screenshots != null &&
                    this.Screenshots.SequenceEqual(input.Screenshots)
                ) && 
                (
                    this.SourceUrl == input.SourceUrl ||
                    (this.SourceUrl != null &&
                    this.SourceUrl.Equals(input.SourceUrl))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Urls == input.Urls ||
                    (this.Urls != null &&
                    this.Urls.Equals(input.Urls))
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowedUsers != null)
                    hashCode = hashCode * 59 + this.AllowedUsers.GetHashCode();
                if (this.ApiUrl != null)
                    hashCode = hashCode * 59 + this.ApiUrl.GetHashCode();
                if (this.Author != null)
                    hashCode = hashCode * 59 + this.Author.GetHashCode();
                if (this.I18n != null)
                    hashCode = hashCode * 59 + this.I18n.GetHashCode();
                if (this.Icon != null)
                    hashCode = hashCode * 59 + this.Icon.GetHashCode();
                if (this.License != null)
                    hashCode = hashCode * 59 + this.License.GetHashCode();
                if (this.Masqueradable != null)
                    hashCode = hashCode * 59 + this.Masqueradable.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Phase != null)
                    hashCode = hashCode * 59 + this.Phase.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Published != null)
                    hashCode = hashCode * 59 + this.Published.GetHashCode();
                if (this.Screenshots != null)
                    hashCode = hashCode * 59 + this.Screenshots.GetHashCode();
                if (this.SourceUrl != null)
                    hashCode = hashCode * 59 + this.SourceUrl.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Urls != null)
                    hashCode = hashCode * 59 + this.Urls.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Author (string) maxLength
            if(this.Author != null && this.Author.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Author, length must be less than 64.", new [] { "Author" });
            }

            // Author (string) minLength
            if(this.Author != null && this.Author.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Author, length must be greater than 2.", new [] { "Author" });
            }

            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 64.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 3.", new [] { "Name" });
            }

            // Price (decimal?) minimum
            if(this.Price < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Price, must be a value greater than or equal to 0.", new [] { "Price" });
            }

            yield break;
        }
    }

}
