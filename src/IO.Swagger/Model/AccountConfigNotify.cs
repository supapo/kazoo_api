/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for notify account_config
    /// </summary>
    [DataContract]
    public partial class AccountConfigNotify :  IEquatable<AccountConfigNotify>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountConfigNotify" /> class.
        /// </summary>
        /// <param name="notifyPersistExceptions">notify notify_persist_exceptions.</param>
        /// <param name="shouldPersistForRetry">notify should_persist_for_retry (default to true).</param>
        public AccountConfigNotify(List<string> notifyPersistExceptions = default(List<string>), bool? shouldPersistForRetry = true)
        {
            this.NotifyPersistExceptions = notifyPersistExceptions;
            // use default value if no "shouldPersistForRetry" provided
            if (shouldPersistForRetry == null)
            {
                this.ShouldPersistForRetry = true;
            }
            else
            {
                this.ShouldPersistForRetry = shouldPersistForRetry;
            }
        }
        
        /// <summary>
        /// notify notify_persist_exceptions
        /// </summary>
        /// <value>notify notify_persist_exceptions</value>
        [DataMember(Name="notify_persist_exceptions", EmitDefaultValue=false)]
        public List<string> NotifyPersistExceptions { get; set; }

        /// <summary>
        /// notify should_persist_for_retry
        /// </summary>
        /// <value>notify should_persist_for_retry</value>
        [DataMember(Name="should_persist_for_retry", EmitDefaultValue=false)]
        public bool? ShouldPersistForRetry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountConfigNotify {\n");
            sb.Append("  NotifyPersistExceptions: ").Append(NotifyPersistExceptions).Append("\n");
            sb.Append("  ShouldPersistForRetry: ").Append(ShouldPersistForRetry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountConfigNotify);
        }

        /// <summary>
        /// Returns true if AccountConfigNotify instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountConfigNotify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountConfigNotify input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NotifyPersistExceptions == input.NotifyPersistExceptions ||
                    this.NotifyPersistExceptions != null &&
                    this.NotifyPersistExceptions.SequenceEqual(input.NotifyPersistExceptions)
                ) && 
                (
                    this.ShouldPersistForRetry == input.ShouldPersistForRetry ||
                    (this.ShouldPersistForRetry != null &&
                    this.ShouldPersistForRetry.Equals(input.ShouldPersistForRetry))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NotifyPersistExceptions != null)
                    hashCode = hashCode * 59 + this.NotifyPersistExceptions.GetHashCode();
                if (this.ShouldPersistForRetry != null)
                    hashCode = hashCode * 59 + this.ShouldPersistForRetry.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
