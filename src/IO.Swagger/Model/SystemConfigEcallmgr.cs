/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for ecallmgr system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigEcallmgr :  IEquatable<SystemConfigEcallmgr>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigEcallmgr" /> class.
        /// </summary>
        /// <param name="aclRequestTimeoutFudgeMs">ecallmgr acl_request_timeout_fudge_ms.</param>
        /// <param name="aclRequestTimeoutMs">ecallmgr acl_request_timeout_ms.</param>
        /// <param name="acls">ecallmgr acls.</param>
        /// <param name="allowEndlessRecording">ecallmgr allow_endless_recording (default to false).</param>
        /// <param name="authzDefaultAction">ecallmgr authz default action (default to &quot;deny&quot;).</param>
        /// <param name="authzDryRun">ecallmgr authz dry run (default to false).</param>
        /// <param name="authzEnabled">ecallmgr authz enabled (default to false).</param>
        /// <param name="authzLocalResources">ecallmgr authz local resources (default to false).</param>
        /// <param name="balanceCrawlerCycleMs">ecallmgr balance crawler cycle in milliseconds.</param>
        /// <param name="balanceCrawlerEnabled">ecallmgr balance crawler enabled (default to false).</param>
        /// <param name="balanceCrawlerFetchTimeoutMs">ecallmgr balance crawler fetch timeout in milliseconds.</param>
        /// <param name="balanceCrawlerInteraccountDelayMs">ecallmgr balance crawler interaccount delay in milliseconds.</param>
        /// <param name="callControl">callControl.</param>
        /// <param name="callControlListeners">ecallmgr call_control_listeners.</param>
        /// <param name="callRoutingBindings">ecallmgr call routing bindings.</param>
        /// <param name="capabilities">ecallmgr capabilities.</param>
        /// <param name="debugChannel">ecallmgr debug channel (default to false).</param>
        /// <param name="defaultFaxExtension">ecallmgr default fax extension (default to &quot;.tiff&quot;).</param>
        /// <param name="defaultRealm">ecallmgr default realm (default to &quot;nodomain.com&quot;).</param>
        /// <param name="defaultRecordingExtension">ecallmgr default recording extension (default to &quot;.mp3&quot;).</param>
        /// <param name="defaultRingback">ecallmgr default ringback (default to &quot;%(2000,4000,440,480)&quot;).</param>
        /// <param name="eventStreamIdleAlert">ecallmgr event stream idle alert.</param>
        /// <param name="expandableMacros">macros that will be expanded at call-time, for use in custom SIP headers.</param>
        /// <param name="expiresDeviationTime">ecallmgr expires deviation time.</param>
        /// <param name="failoverWhenAllUnreg">failover only when all devices are offline (default to false).</param>
        /// <param name="faxFilePath">ecallmgr fax file path (default to &quot;/tmp/&quot;).</param>
        /// <param name="fetchTimeout">ecallmgr fetch timeout.</param>
        /// <param name="freeswitchContext">ecallmgr freeswitch context (default to &quot;context_2&quot;).</param>
        /// <param name="fsCmds">ecallmgr fs cmds.</param>
        /// <param name="fsCmdsWaitMs">ecallmgr fs cmds wait in milliseconds.</param>
        /// <param name="fsNodeUptimeS">ecallmgr fs node uptime in seconds.</param>
        /// <param name="fsNodes">ecallmgr fs nodes.</param>
        /// <param name="fsProfiles">ecallmgr fs profiles.</param>
        /// <param name="fsReconnectCmds">ecallmgr fs reconnect cmds.</param>
        /// <param name="gateways">ecallmgr gateways.</param>
        /// <param name="insertFetchedRegistrationLocally">ecallmgr insert fetched registration locally (default to false).</param>
        /// <param name="maxChannelCleanupTimeoutMs">ecallmgr maximum channel cleanup timeout in milliseconds.</param>
        /// <param name="maxChannelUptimeS">ecallmgr maximum channel uptime in seconds.</param>
        /// <param name="maxTimeoutForNodeRestart">ecallmgr maximum timeout for node restart.</param>
        /// <param name="multivarSeparator">ecallmgr multivar_separator (default to &quot;~&quot;).</param>
        /// <param name="networkMap">ecallmgr network map.</param>
        /// <param name="nodeCommands">nodeCommands.</param>
        /// <param name="nodeDownGracePeriod">ecallmgr node down grace period.</param>
        /// <param name="processGateways">ecallmgr process gateways (default to false).</param>
        /// <param name="publishChannelReconnect">ecallmgr publish channel reconnect (default to false).</param>
        /// <param name="publishChannelState">ecallmgr publish channel state (default to true).</param>
        /// <param name="publishConferenceEvent">ecallmgr publish conference event.</param>
        /// <param name="recordSampleRate">ecallmgr record sample rate.</param>
        /// <param name="recordStereoSampleRate">ecallmgr record stereo sample rate.</param>
        /// <param name="recordWasteResources">ecallmgr record waste resources (default to false).</param>
        /// <param name="recordingFilePath">ecallmgr recording file path (default to &quot;/tmp/&quot;).</param>
        /// <param name="recordingSoftwareName">ecallmgr recording software name (default to &quot;2600Hz, Inc.&#39;s Kazoo&quot;).</param>
        /// <param name="redirectViaProxy">ecallmgr redirect via proxy (default to true).</param>
        /// <param name="restrictChannelEventPublisher">ecallmgr restrict_channel_event_publisher (default to true).</param>
        /// <param name="restrictChannelStatePublisher">ecallmgr restrict channel state publisher (default to false).</param>
        /// <param name="sanitizeFsValueRegex">ecallmgr sanitize_fs_value_regex (default to &quot;[^0-9\w\s-]&quot;).</param>
        /// <param name="shouldDetectInbandDtmf">ecallmgr should detect inband dtmf (default to false).</param>
        /// <param name="sofiaConf">ecallmgr sofia conf (default to false).</param>
        /// <param name="tcpPacketType">ecallmgr tcp packet type.</param>
        /// <param name="textRoutingBindings">ecallmgr text routing bindings.</param>
        /// <param name="useBypassMediaAfterBridge">ecallmgr use bypass media after bridge (default to false).</param>
        /// <param name="useHttpCache">ecallmgr use http cache (default to true).</param>
        /// <param name="useShout">ecallmgr use shout (default to false).</param>
        /// <param name="useVlc">ecallmgr use vlc (default to false).</param>
        /// <param name="userCacheTimeInMs">ecallmgr user cache time in in milliseconds.</param>
        public SystemConfigEcallmgr(int? aclRequestTimeoutFudgeMs = default(int?), int? aclRequestTimeoutMs = default(int?), Object acls = default(Object), bool? allowEndlessRecording = false, string authzDefaultAction = "deny", bool? authzDryRun = false, bool? authzEnabled = false, bool? authzLocalResources = false, int? balanceCrawlerCycleMs = default(int?), bool? balanceCrawlerEnabled = false, int? balanceCrawlerFetchTimeoutMs = default(int?), int? balanceCrawlerInteraccountDelayMs = default(int?), SystemConfigEcallmgrCallControl callControl = default(SystemConfigEcallmgrCallControl), int? callControlListeners = default(int?), List<string> callRoutingBindings = default(List<string>), List<Object> capabilities = default(List<Object>), bool? debugChannel = false, string defaultFaxExtension = ".tiff", string defaultRealm = "nodomain.com", string defaultRecordingExtension = ".mp3", string defaultRingback = "%(2000,4000,440,480)", int? eventStreamIdleAlert = default(int?), Object expandableMacros = default(Object), int? expiresDeviationTime = default(int?), bool? failoverWhenAllUnreg = false, string faxFilePath = "/tmp/", int? fetchTimeout = default(int?), string freeswitchContext = "context_2", List<Object> fsCmds = default(List<Object>), int? fsCmdsWaitMs = default(int?), int? fsNodeUptimeS = default(int?), List<string> fsNodes = default(List<string>), Object fsProfiles = default(Object), List<Object> fsReconnectCmds = default(List<Object>), Object gateways = default(Object), bool? insertFetchedRegistrationLocally = false, int? maxChannelCleanupTimeoutMs = default(int?), int? maxChannelUptimeS = default(int?), int? maxTimeoutForNodeRestart = default(int?), string multivarSeparator = "~", Object networkMap = default(Object), SystemConfigEcallmgrNodeCommands nodeCommands = default(SystemConfigEcallmgrNodeCommands), int? nodeDownGracePeriod = default(int?), bool? processGateways = false, bool? publishChannelReconnect = false, bool? publishChannelState = true, List<string> publishConferenceEvent = default(List<string>), int? recordSampleRate = default(int?), int? recordStereoSampleRate = default(int?), bool? recordWasteResources = false, string recordingFilePath = "/tmp/", string recordingSoftwareName = "2600Hz, Inc.'s Kazoo", bool? redirectViaProxy = true, bool? restrictChannelEventPublisher = true, bool? restrictChannelStatePublisher = false, string sanitizeFsValueRegex = "[^0-9\w\s-]", bool? shouldDetectInbandDtmf = false, bool? sofiaConf = false, int? tcpPacketType = default(int?), List<string> textRoutingBindings = default(List<string>), bool? useBypassMediaAfterBridge = false, bool? useHttpCache = true, bool? useShout = false, bool? useVlc = false, int? userCacheTimeInMs = default(int?))
        {
            this.AclRequestTimeoutFudgeMs = aclRequestTimeoutFudgeMs;
            this.AclRequestTimeoutMs = aclRequestTimeoutMs;
            this.Acls = acls;
            // use default value if no "allowEndlessRecording" provided
            if (allowEndlessRecording == null)
            {
                this.AllowEndlessRecording = false;
            }
            else
            {
                this.AllowEndlessRecording = allowEndlessRecording;
            }
            // use default value if no "authzDefaultAction" provided
            if (authzDefaultAction == null)
            {
                this.AuthzDefaultAction = "deny";
            }
            else
            {
                this.AuthzDefaultAction = authzDefaultAction;
            }
            // use default value if no "authzDryRun" provided
            if (authzDryRun == null)
            {
                this.AuthzDryRun = false;
            }
            else
            {
                this.AuthzDryRun = authzDryRun;
            }
            // use default value if no "authzEnabled" provided
            if (authzEnabled == null)
            {
                this.AuthzEnabled = false;
            }
            else
            {
                this.AuthzEnabled = authzEnabled;
            }
            // use default value if no "authzLocalResources" provided
            if (authzLocalResources == null)
            {
                this.AuthzLocalResources = false;
            }
            else
            {
                this.AuthzLocalResources = authzLocalResources;
            }
            this.BalanceCrawlerCycleMs = balanceCrawlerCycleMs;
            // use default value if no "balanceCrawlerEnabled" provided
            if (balanceCrawlerEnabled == null)
            {
                this.BalanceCrawlerEnabled = false;
            }
            else
            {
                this.BalanceCrawlerEnabled = balanceCrawlerEnabled;
            }
            this.BalanceCrawlerFetchTimeoutMs = balanceCrawlerFetchTimeoutMs;
            this.BalanceCrawlerInteraccountDelayMs = balanceCrawlerInteraccountDelayMs;
            this.CallControl = callControl;
            this.CallControlListeners = callControlListeners;
            this.CallRoutingBindings = callRoutingBindings;
            this.Capabilities = capabilities;
            // use default value if no "debugChannel" provided
            if (debugChannel == null)
            {
                this.DebugChannel = false;
            }
            else
            {
                this.DebugChannel = debugChannel;
            }
            // use default value if no "defaultFaxExtension" provided
            if (defaultFaxExtension == null)
            {
                this.DefaultFaxExtension = ".tiff";
            }
            else
            {
                this.DefaultFaxExtension = defaultFaxExtension;
            }
            // use default value if no "defaultRealm" provided
            if (defaultRealm == null)
            {
                this.DefaultRealm = "nodomain.com";
            }
            else
            {
                this.DefaultRealm = defaultRealm;
            }
            // use default value if no "defaultRecordingExtension" provided
            if (defaultRecordingExtension == null)
            {
                this.DefaultRecordingExtension = ".mp3";
            }
            else
            {
                this.DefaultRecordingExtension = defaultRecordingExtension;
            }
            // use default value if no "defaultRingback" provided
            if (defaultRingback == null)
            {
                this.DefaultRingback = "%(2000,4000,440,480)";
            }
            else
            {
                this.DefaultRingback = defaultRingback;
            }
            this.EventStreamIdleAlert = eventStreamIdleAlert;
            this.ExpandableMacros = expandableMacros;
            this.ExpiresDeviationTime = expiresDeviationTime;
            // use default value if no "failoverWhenAllUnreg" provided
            if (failoverWhenAllUnreg == null)
            {
                this.FailoverWhenAllUnreg = false;
            }
            else
            {
                this.FailoverWhenAllUnreg = failoverWhenAllUnreg;
            }
            // use default value if no "faxFilePath" provided
            if (faxFilePath == null)
            {
                this.FaxFilePath = "/tmp/";
            }
            else
            {
                this.FaxFilePath = faxFilePath;
            }
            this.FetchTimeout = fetchTimeout;
            // use default value if no "freeswitchContext" provided
            if (freeswitchContext == null)
            {
                this.FreeswitchContext = "context_2";
            }
            else
            {
                this.FreeswitchContext = freeswitchContext;
            }
            this.FsCmds = fsCmds;
            this.FsCmdsWaitMs = fsCmdsWaitMs;
            this.FsNodeUptimeS = fsNodeUptimeS;
            this.FsNodes = fsNodes;
            this.FsProfiles = fsProfiles;
            this.FsReconnectCmds = fsReconnectCmds;
            this.Gateways = gateways;
            // use default value if no "insertFetchedRegistrationLocally" provided
            if (insertFetchedRegistrationLocally == null)
            {
                this.InsertFetchedRegistrationLocally = false;
            }
            else
            {
                this.InsertFetchedRegistrationLocally = insertFetchedRegistrationLocally;
            }
            this.MaxChannelCleanupTimeoutMs = maxChannelCleanupTimeoutMs;
            this.MaxChannelUptimeS = maxChannelUptimeS;
            this.MaxTimeoutForNodeRestart = maxTimeoutForNodeRestart;
            // use default value if no "multivarSeparator" provided
            if (multivarSeparator == null)
            {
                this.MultivarSeparator = "~";
            }
            else
            {
                this.MultivarSeparator = multivarSeparator;
            }
            this.NetworkMap = networkMap;
            this.NodeCommands = nodeCommands;
            this.NodeDownGracePeriod = nodeDownGracePeriod;
            // use default value if no "processGateways" provided
            if (processGateways == null)
            {
                this.ProcessGateways = false;
            }
            else
            {
                this.ProcessGateways = processGateways;
            }
            // use default value if no "publishChannelReconnect" provided
            if (publishChannelReconnect == null)
            {
                this.PublishChannelReconnect = false;
            }
            else
            {
                this.PublishChannelReconnect = publishChannelReconnect;
            }
            // use default value if no "publishChannelState" provided
            if (publishChannelState == null)
            {
                this.PublishChannelState = true;
            }
            else
            {
                this.PublishChannelState = publishChannelState;
            }
            this.PublishConferenceEvent = publishConferenceEvent;
            this.RecordSampleRate = recordSampleRate;
            this.RecordStereoSampleRate = recordStereoSampleRate;
            // use default value if no "recordWasteResources" provided
            if (recordWasteResources == null)
            {
                this.RecordWasteResources = false;
            }
            else
            {
                this.RecordWasteResources = recordWasteResources;
            }
            // use default value if no "recordingFilePath" provided
            if (recordingFilePath == null)
            {
                this.RecordingFilePath = "/tmp/";
            }
            else
            {
                this.RecordingFilePath = recordingFilePath;
            }
            // use default value if no "recordingSoftwareName" provided
            if (recordingSoftwareName == null)
            {
                this.RecordingSoftwareName = "2600Hz, Inc.'s Kazoo";
            }
            else
            {
                this.RecordingSoftwareName = recordingSoftwareName;
            }
            // use default value if no "redirectViaProxy" provided
            if (redirectViaProxy == null)
            {
                this.RedirectViaProxy = true;
            }
            else
            {
                this.RedirectViaProxy = redirectViaProxy;
            }
            // use default value if no "restrictChannelEventPublisher" provided
            if (restrictChannelEventPublisher == null)
            {
                this.RestrictChannelEventPublisher = true;
            }
            else
            {
                this.RestrictChannelEventPublisher = restrictChannelEventPublisher;
            }
            // use default value if no "restrictChannelStatePublisher" provided
            if (restrictChannelStatePublisher == null)
            {
                this.RestrictChannelStatePublisher = false;
            }
            else
            {
                this.RestrictChannelStatePublisher = restrictChannelStatePublisher;
            }
            // use default value if no "sanitizeFsValueRegex" provided
            if (sanitizeFsValueRegex == null)
            {
                this.SanitizeFsValueRegex = "[^0-9\w\s-]";
            }
            else
            {
                this.SanitizeFsValueRegex = sanitizeFsValueRegex;
            }
            // use default value if no "shouldDetectInbandDtmf" provided
            if (shouldDetectInbandDtmf == null)
            {
                this.ShouldDetectInbandDtmf = false;
            }
            else
            {
                this.ShouldDetectInbandDtmf = shouldDetectInbandDtmf;
            }
            // use default value if no "sofiaConf" provided
            if (sofiaConf == null)
            {
                this.SofiaConf = false;
            }
            else
            {
                this.SofiaConf = sofiaConf;
            }
            this.TcpPacketType = tcpPacketType;
            this.TextRoutingBindings = textRoutingBindings;
            // use default value if no "useBypassMediaAfterBridge" provided
            if (useBypassMediaAfterBridge == null)
            {
                this.UseBypassMediaAfterBridge = false;
            }
            else
            {
                this.UseBypassMediaAfterBridge = useBypassMediaAfterBridge;
            }
            // use default value if no "useHttpCache" provided
            if (useHttpCache == null)
            {
                this.UseHttpCache = true;
            }
            else
            {
                this.UseHttpCache = useHttpCache;
            }
            // use default value if no "useShout" provided
            if (useShout == null)
            {
                this.UseShout = false;
            }
            else
            {
                this.UseShout = useShout;
            }
            // use default value if no "useVlc" provided
            if (useVlc == null)
            {
                this.UseVlc = false;
            }
            else
            {
                this.UseVlc = useVlc;
            }
            this.UserCacheTimeInMs = userCacheTimeInMs;
        }
        
        /// <summary>
        /// ecallmgr acl_request_timeout_fudge_ms
        /// </summary>
        /// <value>ecallmgr acl_request_timeout_fudge_ms</value>
        [DataMember(Name="acl_request_timeout_fudge_ms", EmitDefaultValue=false)]
        public int? AclRequestTimeoutFudgeMs { get; set; }

        /// <summary>
        /// ecallmgr acl_request_timeout_ms
        /// </summary>
        /// <value>ecallmgr acl_request_timeout_ms</value>
        [DataMember(Name="acl_request_timeout_ms", EmitDefaultValue=false)]
        public int? AclRequestTimeoutMs { get; set; }

        /// <summary>
        /// ecallmgr acls
        /// </summary>
        /// <value>ecallmgr acls</value>
        [DataMember(Name="acls", EmitDefaultValue=false)]
        public Object Acls { get; set; }

        /// <summary>
        /// ecallmgr allow_endless_recording
        /// </summary>
        /// <value>ecallmgr allow_endless_recording</value>
        [DataMember(Name="allow_endless_recording", EmitDefaultValue=false)]
        public bool? AllowEndlessRecording { get; set; }

        /// <summary>
        /// ecallmgr authz default action
        /// </summary>
        /// <value>ecallmgr authz default action</value>
        [DataMember(Name="authz_default_action", EmitDefaultValue=false)]
        public string AuthzDefaultAction { get; set; }

        /// <summary>
        /// ecallmgr authz dry run
        /// </summary>
        /// <value>ecallmgr authz dry run</value>
        [DataMember(Name="authz_dry_run", EmitDefaultValue=false)]
        public bool? AuthzDryRun { get; set; }

        /// <summary>
        /// ecallmgr authz enabled
        /// </summary>
        /// <value>ecallmgr authz enabled</value>
        [DataMember(Name="authz_enabled", EmitDefaultValue=false)]
        public bool? AuthzEnabled { get; set; }

        /// <summary>
        /// ecallmgr authz local resources
        /// </summary>
        /// <value>ecallmgr authz local resources</value>
        [DataMember(Name="authz_local_resources", EmitDefaultValue=false)]
        public bool? AuthzLocalResources { get; set; }

        /// <summary>
        /// ecallmgr balance crawler cycle in milliseconds
        /// </summary>
        /// <value>ecallmgr balance crawler cycle in milliseconds</value>
        [DataMember(Name="balance_crawler_cycle_ms", EmitDefaultValue=false)]
        public int? BalanceCrawlerCycleMs { get; set; }

        /// <summary>
        /// ecallmgr balance crawler enabled
        /// </summary>
        /// <value>ecallmgr balance crawler enabled</value>
        [DataMember(Name="balance_crawler_enabled", EmitDefaultValue=false)]
        public bool? BalanceCrawlerEnabled { get; set; }

        /// <summary>
        /// ecallmgr balance crawler fetch timeout in milliseconds
        /// </summary>
        /// <value>ecallmgr balance crawler fetch timeout in milliseconds</value>
        [DataMember(Name="balance_crawler_fetch_timeout_ms", EmitDefaultValue=false)]
        public int? BalanceCrawlerFetchTimeoutMs { get; set; }

        /// <summary>
        /// ecallmgr balance crawler interaccount delay in milliseconds
        /// </summary>
        /// <value>ecallmgr balance crawler interaccount delay in milliseconds</value>
        [DataMember(Name="balance_crawler_interaccount_delay_ms", EmitDefaultValue=false)]
        public int? BalanceCrawlerInteraccountDelayMs { get; set; }

        /// <summary>
        /// Gets or Sets CallControl
        /// </summary>
        [DataMember(Name="call_control", EmitDefaultValue=false)]
        public SystemConfigEcallmgrCallControl CallControl { get; set; }

        /// <summary>
        /// ecallmgr call_control_listeners
        /// </summary>
        /// <value>ecallmgr call_control_listeners</value>
        [DataMember(Name="call_control_listeners", EmitDefaultValue=false)]
        public int? CallControlListeners { get; set; }

        /// <summary>
        /// ecallmgr call routing bindings
        /// </summary>
        /// <value>ecallmgr call routing bindings</value>
        [DataMember(Name="call_routing_bindings", EmitDefaultValue=false)]
        public List<string> CallRoutingBindings { get; set; }

        /// <summary>
        /// ecallmgr capabilities
        /// </summary>
        /// <value>ecallmgr capabilities</value>
        [DataMember(Name="capabilities", EmitDefaultValue=false)]
        public List<Object> Capabilities { get; set; }

        /// <summary>
        /// ecallmgr debug channel
        /// </summary>
        /// <value>ecallmgr debug channel</value>
        [DataMember(Name="debug_channel", EmitDefaultValue=false)]
        public bool? DebugChannel { get; set; }

        /// <summary>
        /// ecallmgr default fax extension
        /// </summary>
        /// <value>ecallmgr default fax extension</value>
        [DataMember(Name="default_fax_extension", EmitDefaultValue=false)]
        public string DefaultFaxExtension { get; set; }

        /// <summary>
        /// ecallmgr default realm
        /// </summary>
        /// <value>ecallmgr default realm</value>
        [DataMember(Name="default_realm", EmitDefaultValue=false)]
        public string DefaultRealm { get; set; }

        /// <summary>
        /// ecallmgr default recording extension
        /// </summary>
        /// <value>ecallmgr default recording extension</value>
        [DataMember(Name="default_recording_extension", EmitDefaultValue=false)]
        public string DefaultRecordingExtension { get; set; }

        /// <summary>
        /// ecallmgr default ringback
        /// </summary>
        /// <value>ecallmgr default ringback</value>
        [DataMember(Name="default_ringback", EmitDefaultValue=false)]
        public string DefaultRingback { get; set; }

        /// <summary>
        /// ecallmgr event stream idle alert
        /// </summary>
        /// <value>ecallmgr event stream idle alert</value>
        [DataMember(Name="event_stream_idle_alert", EmitDefaultValue=false)]
        public int? EventStreamIdleAlert { get; set; }

        /// <summary>
        /// macros that will be expanded at call-time, for use in custom SIP headers
        /// </summary>
        /// <value>macros that will be expanded at call-time, for use in custom SIP headers</value>
        [DataMember(Name="expandable_macros", EmitDefaultValue=false)]
        public Object ExpandableMacros { get; set; }

        /// <summary>
        /// ecallmgr expires deviation time
        /// </summary>
        /// <value>ecallmgr expires deviation time</value>
        [DataMember(Name="expires_deviation_time", EmitDefaultValue=false)]
        public int? ExpiresDeviationTime { get; set; }

        /// <summary>
        /// failover only when all devices are offline
        /// </summary>
        /// <value>failover only when all devices are offline</value>
        [DataMember(Name="failover_when_all_unreg", EmitDefaultValue=false)]
        public bool? FailoverWhenAllUnreg { get; set; }

        /// <summary>
        /// ecallmgr fax file path
        /// </summary>
        /// <value>ecallmgr fax file path</value>
        [DataMember(Name="fax_file_path", EmitDefaultValue=false)]
        public string FaxFilePath { get; set; }

        /// <summary>
        /// ecallmgr fetch timeout
        /// </summary>
        /// <value>ecallmgr fetch timeout</value>
        [DataMember(Name="fetch_timeout", EmitDefaultValue=false)]
        public int? FetchTimeout { get; set; }

        /// <summary>
        /// ecallmgr freeswitch context
        /// </summary>
        /// <value>ecallmgr freeswitch context</value>
        [DataMember(Name="freeswitch_context", EmitDefaultValue=false)]
        public string FreeswitchContext { get; set; }

        /// <summary>
        /// ecallmgr fs cmds
        /// </summary>
        /// <value>ecallmgr fs cmds</value>
        [DataMember(Name="fs_cmds", EmitDefaultValue=false)]
        public List<Object> FsCmds { get; set; }

        /// <summary>
        /// ecallmgr fs cmds wait in milliseconds
        /// </summary>
        /// <value>ecallmgr fs cmds wait in milliseconds</value>
        [DataMember(Name="fs_cmds_wait_ms", EmitDefaultValue=false)]
        public int? FsCmdsWaitMs { get; set; }

        /// <summary>
        /// ecallmgr fs node uptime in seconds
        /// </summary>
        /// <value>ecallmgr fs node uptime in seconds</value>
        [DataMember(Name="fs_node_uptime_s", EmitDefaultValue=false)]
        public int? FsNodeUptimeS { get; set; }

        /// <summary>
        /// ecallmgr fs nodes
        /// </summary>
        /// <value>ecallmgr fs nodes</value>
        [DataMember(Name="fs_nodes", EmitDefaultValue=false)]
        public List<string> FsNodes { get; set; }

        /// <summary>
        /// ecallmgr fs profiles
        /// </summary>
        /// <value>ecallmgr fs profiles</value>
        [DataMember(Name="fs_profiles", EmitDefaultValue=false)]
        public Object FsProfiles { get; set; }

        /// <summary>
        /// ecallmgr fs reconnect cmds
        /// </summary>
        /// <value>ecallmgr fs reconnect cmds</value>
        [DataMember(Name="fs_reconnect_cmds", EmitDefaultValue=false)]
        public List<Object> FsReconnectCmds { get; set; }

        /// <summary>
        /// ecallmgr gateways
        /// </summary>
        /// <value>ecallmgr gateways</value>
        [DataMember(Name="gateways", EmitDefaultValue=false)]
        public Object Gateways { get; set; }

        /// <summary>
        /// ecallmgr insert fetched registration locally
        /// </summary>
        /// <value>ecallmgr insert fetched registration locally</value>
        [DataMember(Name="insert_fetched_registration_locally", EmitDefaultValue=false)]
        public bool? InsertFetchedRegistrationLocally { get; set; }

        /// <summary>
        /// ecallmgr maximum channel cleanup timeout in milliseconds
        /// </summary>
        /// <value>ecallmgr maximum channel cleanup timeout in milliseconds</value>
        [DataMember(Name="max_channel_cleanup_timeout_ms", EmitDefaultValue=false)]
        public int? MaxChannelCleanupTimeoutMs { get; set; }

        /// <summary>
        /// ecallmgr maximum channel uptime in seconds
        /// </summary>
        /// <value>ecallmgr maximum channel uptime in seconds</value>
        [DataMember(Name="max_channel_uptime_s", EmitDefaultValue=false)]
        public int? MaxChannelUptimeS { get; set; }

        /// <summary>
        /// ecallmgr maximum timeout for node restart
        /// </summary>
        /// <value>ecallmgr maximum timeout for node restart</value>
        [DataMember(Name="max_timeout_for_node_restart", EmitDefaultValue=false)]
        public int? MaxTimeoutForNodeRestart { get; set; }

        /// <summary>
        /// ecallmgr multivar_separator
        /// </summary>
        /// <value>ecallmgr multivar_separator</value>
        [DataMember(Name="multivar_separator", EmitDefaultValue=false)]
        public string MultivarSeparator { get; set; }

        /// <summary>
        /// ecallmgr network map
        /// </summary>
        /// <value>ecallmgr network map</value>
        [DataMember(Name="network_map", EmitDefaultValue=false)]
        public Object NetworkMap { get; set; }

        /// <summary>
        /// Gets or Sets NodeCommands
        /// </summary>
        [DataMember(Name="node_commands", EmitDefaultValue=false)]
        public SystemConfigEcallmgrNodeCommands NodeCommands { get; set; }

        /// <summary>
        /// ecallmgr node down grace period
        /// </summary>
        /// <value>ecallmgr node down grace period</value>
        [DataMember(Name="node_down_grace_period", EmitDefaultValue=false)]
        public int? NodeDownGracePeriod { get; set; }

        /// <summary>
        /// ecallmgr process gateways
        /// </summary>
        /// <value>ecallmgr process gateways</value>
        [DataMember(Name="process_gateways", EmitDefaultValue=false)]
        public bool? ProcessGateways { get; set; }

        /// <summary>
        /// ecallmgr publish channel reconnect
        /// </summary>
        /// <value>ecallmgr publish channel reconnect</value>
        [DataMember(Name="publish_channel_reconnect", EmitDefaultValue=false)]
        public bool? PublishChannelReconnect { get; set; }

        /// <summary>
        /// ecallmgr publish channel state
        /// </summary>
        /// <value>ecallmgr publish channel state</value>
        [DataMember(Name="publish_channel_state", EmitDefaultValue=false)]
        public bool? PublishChannelState { get; set; }

        /// <summary>
        /// ecallmgr publish conference event
        /// </summary>
        /// <value>ecallmgr publish conference event</value>
        [DataMember(Name="publish_conference_event", EmitDefaultValue=false)]
        public List<string> PublishConferenceEvent { get; set; }

        /// <summary>
        /// ecallmgr record sample rate
        /// </summary>
        /// <value>ecallmgr record sample rate</value>
        [DataMember(Name="record_sample_rate", EmitDefaultValue=false)]
        public int? RecordSampleRate { get; set; }

        /// <summary>
        /// ecallmgr record stereo sample rate
        /// </summary>
        /// <value>ecallmgr record stereo sample rate</value>
        [DataMember(Name="record_stereo_sample_rate", EmitDefaultValue=false)]
        public int? RecordStereoSampleRate { get; set; }

        /// <summary>
        /// ecallmgr record waste resources
        /// </summary>
        /// <value>ecallmgr record waste resources</value>
        [DataMember(Name="record_waste_resources", EmitDefaultValue=false)]
        public bool? RecordWasteResources { get; set; }

        /// <summary>
        /// ecallmgr recording file path
        /// </summary>
        /// <value>ecallmgr recording file path</value>
        [DataMember(Name="recording_file_path", EmitDefaultValue=false)]
        public string RecordingFilePath { get; set; }

        /// <summary>
        /// ecallmgr recording software name
        /// </summary>
        /// <value>ecallmgr recording software name</value>
        [DataMember(Name="recording_software_name", EmitDefaultValue=false)]
        public string RecordingSoftwareName { get; set; }

        /// <summary>
        /// ecallmgr redirect via proxy
        /// </summary>
        /// <value>ecallmgr redirect via proxy</value>
        [DataMember(Name="redirect_via_proxy", EmitDefaultValue=false)]
        public bool? RedirectViaProxy { get; set; }

        /// <summary>
        /// ecallmgr restrict_channel_event_publisher
        /// </summary>
        /// <value>ecallmgr restrict_channel_event_publisher</value>
        [DataMember(Name="restrict_channel_event_publisher", EmitDefaultValue=false)]
        public bool? RestrictChannelEventPublisher { get; set; }

        /// <summary>
        /// ecallmgr restrict channel state publisher
        /// </summary>
        /// <value>ecallmgr restrict channel state publisher</value>
        [DataMember(Name="restrict_channel_state_publisher", EmitDefaultValue=false)]
        public bool? RestrictChannelStatePublisher { get; set; }

        /// <summary>
        /// ecallmgr sanitize_fs_value_regex
        /// </summary>
        /// <value>ecallmgr sanitize_fs_value_regex</value>
        [DataMember(Name="sanitize_fs_value_regex", EmitDefaultValue=false)]
        public string SanitizeFsValueRegex { get; set; }

        /// <summary>
        /// ecallmgr should detect inband dtmf
        /// </summary>
        /// <value>ecallmgr should detect inband dtmf</value>
        [DataMember(Name="should_detect_inband_dtmf", EmitDefaultValue=false)]
        public bool? ShouldDetectInbandDtmf { get; set; }

        /// <summary>
        /// ecallmgr sofia conf
        /// </summary>
        /// <value>ecallmgr sofia conf</value>
        [DataMember(Name="sofia_conf", EmitDefaultValue=false)]
        public bool? SofiaConf { get; set; }

        /// <summary>
        /// ecallmgr tcp packet type
        /// </summary>
        /// <value>ecallmgr tcp packet type</value>
        [DataMember(Name="tcp_packet_type", EmitDefaultValue=false)]
        public int? TcpPacketType { get; set; }

        /// <summary>
        /// ecallmgr text routing bindings
        /// </summary>
        /// <value>ecallmgr text routing bindings</value>
        [DataMember(Name="text_routing_bindings", EmitDefaultValue=false)]
        public List<string> TextRoutingBindings { get; set; }

        /// <summary>
        /// ecallmgr use bypass media after bridge
        /// </summary>
        /// <value>ecallmgr use bypass media after bridge</value>
        [DataMember(Name="use_bypass_media_after_bridge", EmitDefaultValue=false)]
        public bool? UseBypassMediaAfterBridge { get; set; }

        /// <summary>
        /// ecallmgr use http cache
        /// </summary>
        /// <value>ecallmgr use http cache</value>
        [DataMember(Name="use_http_cache", EmitDefaultValue=false)]
        public bool? UseHttpCache { get; set; }

        /// <summary>
        /// ecallmgr use shout
        /// </summary>
        /// <value>ecallmgr use shout</value>
        [DataMember(Name="use_shout", EmitDefaultValue=false)]
        public bool? UseShout { get; set; }

        /// <summary>
        /// ecallmgr use vlc
        /// </summary>
        /// <value>ecallmgr use vlc</value>
        [DataMember(Name="use_vlc", EmitDefaultValue=false)]
        public bool? UseVlc { get; set; }

        /// <summary>
        /// ecallmgr user cache time in in milliseconds
        /// </summary>
        /// <value>ecallmgr user cache time in in milliseconds</value>
        [DataMember(Name="user_cache_time_in_ms", EmitDefaultValue=false)]
        public int? UserCacheTimeInMs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigEcallmgr {\n");
            sb.Append("  AclRequestTimeoutFudgeMs: ").Append(AclRequestTimeoutFudgeMs).Append("\n");
            sb.Append("  AclRequestTimeoutMs: ").Append(AclRequestTimeoutMs).Append("\n");
            sb.Append("  Acls: ").Append(Acls).Append("\n");
            sb.Append("  AllowEndlessRecording: ").Append(AllowEndlessRecording).Append("\n");
            sb.Append("  AuthzDefaultAction: ").Append(AuthzDefaultAction).Append("\n");
            sb.Append("  AuthzDryRun: ").Append(AuthzDryRun).Append("\n");
            sb.Append("  AuthzEnabled: ").Append(AuthzEnabled).Append("\n");
            sb.Append("  AuthzLocalResources: ").Append(AuthzLocalResources).Append("\n");
            sb.Append("  BalanceCrawlerCycleMs: ").Append(BalanceCrawlerCycleMs).Append("\n");
            sb.Append("  BalanceCrawlerEnabled: ").Append(BalanceCrawlerEnabled).Append("\n");
            sb.Append("  BalanceCrawlerFetchTimeoutMs: ").Append(BalanceCrawlerFetchTimeoutMs).Append("\n");
            sb.Append("  BalanceCrawlerInteraccountDelayMs: ").Append(BalanceCrawlerInteraccountDelayMs).Append("\n");
            sb.Append("  CallControl: ").Append(CallControl).Append("\n");
            sb.Append("  CallControlListeners: ").Append(CallControlListeners).Append("\n");
            sb.Append("  CallRoutingBindings: ").Append(CallRoutingBindings).Append("\n");
            sb.Append("  Capabilities: ").Append(Capabilities).Append("\n");
            sb.Append("  DebugChannel: ").Append(DebugChannel).Append("\n");
            sb.Append("  DefaultFaxExtension: ").Append(DefaultFaxExtension).Append("\n");
            sb.Append("  DefaultRealm: ").Append(DefaultRealm).Append("\n");
            sb.Append("  DefaultRecordingExtension: ").Append(DefaultRecordingExtension).Append("\n");
            sb.Append("  DefaultRingback: ").Append(DefaultRingback).Append("\n");
            sb.Append("  EventStreamIdleAlert: ").Append(EventStreamIdleAlert).Append("\n");
            sb.Append("  ExpandableMacros: ").Append(ExpandableMacros).Append("\n");
            sb.Append("  ExpiresDeviationTime: ").Append(ExpiresDeviationTime).Append("\n");
            sb.Append("  FailoverWhenAllUnreg: ").Append(FailoverWhenAllUnreg).Append("\n");
            sb.Append("  FaxFilePath: ").Append(FaxFilePath).Append("\n");
            sb.Append("  FetchTimeout: ").Append(FetchTimeout).Append("\n");
            sb.Append("  FreeswitchContext: ").Append(FreeswitchContext).Append("\n");
            sb.Append("  FsCmds: ").Append(FsCmds).Append("\n");
            sb.Append("  FsCmdsWaitMs: ").Append(FsCmdsWaitMs).Append("\n");
            sb.Append("  FsNodeUptimeS: ").Append(FsNodeUptimeS).Append("\n");
            sb.Append("  FsNodes: ").Append(FsNodes).Append("\n");
            sb.Append("  FsProfiles: ").Append(FsProfiles).Append("\n");
            sb.Append("  FsReconnectCmds: ").Append(FsReconnectCmds).Append("\n");
            sb.Append("  Gateways: ").Append(Gateways).Append("\n");
            sb.Append("  InsertFetchedRegistrationLocally: ").Append(InsertFetchedRegistrationLocally).Append("\n");
            sb.Append("  MaxChannelCleanupTimeoutMs: ").Append(MaxChannelCleanupTimeoutMs).Append("\n");
            sb.Append("  MaxChannelUptimeS: ").Append(MaxChannelUptimeS).Append("\n");
            sb.Append("  MaxTimeoutForNodeRestart: ").Append(MaxTimeoutForNodeRestart).Append("\n");
            sb.Append("  MultivarSeparator: ").Append(MultivarSeparator).Append("\n");
            sb.Append("  NetworkMap: ").Append(NetworkMap).Append("\n");
            sb.Append("  NodeCommands: ").Append(NodeCommands).Append("\n");
            sb.Append("  NodeDownGracePeriod: ").Append(NodeDownGracePeriod).Append("\n");
            sb.Append("  ProcessGateways: ").Append(ProcessGateways).Append("\n");
            sb.Append("  PublishChannelReconnect: ").Append(PublishChannelReconnect).Append("\n");
            sb.Append("  PublishChannelState: ").Append(PublishChannelState).Append("\n");
            sb.Append("  PublishConferenceEvent: ").Append(PublishConferenceEvent).Append("\n");
            sb.Append("  RecordSampleRate: ").Append(RecordSampleRate).Append("\n");
            sb.Append("  RecordStereoSampleRate: ").Append(RecordStereoSampleRate).Append("\n");
            sb.Append("  RecordWasteResources: ").Append(RecordWasteResources).Append("\n");
            sb.Append("  RecordingFilePath: ").Append(RecordingFilePath).Append("\n");
            sb.Append("  RecordingSoftwareName: ").Append(RecordingSoftwareName).Append("\n");
            sb.Append("  RedirectViaProxy: ").Append(RedirectViaProxy).Append("\n");
            sb.Append("  RestrictChannelEventPublisher: ").Append(RestrictChannelEventPublisher).Append("\n");
            sb.Append("  RestrictChannelStatePublisher: ").Append(RestrictChannelStatePublisher).Append("\n");
            sb.Append("  SanitizeFsValueRegex: ").Append(SanitizeFsValueRegex).Append("\n");
            sb.Append("  ShouldDetectInbandDtmf: ").Append(ShouldDetectInbandDtmf).Append("\n");
            sb.Append("  SofiaConf: ").Append(SofiaConf).Append("\n");
            sb.Append("  TcpPacketType: ").Append(TcpPacketType).Append("\n");
            sb.Append("  TextRoutingBindings: ").Append(TextRoutingBindings).Append("\n");
            sb.Append("  UseBypassMediaAfterBridge: ").Append(UseBypassMediaAfterBridge).Append("\n");
            sb.Append("  UseHttpCache: ").Append(UseHttpCache).Append("\n");
            sb.Append("  UseShout: ").Append(UseShout).Append("\n");
            sb.Append("  UseVlc: ").Append(UseVlc).Append("\n");
            sb.Append("  UserCacheTimeInMs: ").Append(UserCacheTimeInMs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigEcallmgr);
        }

        /// <summary>
        /// Returns true if SystemConfigEcallmgr instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigEcallmgr to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigEcallmgr input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AclRequestTimeoutFudgeMs == input.AclRequestTimeoutFudgeMs ||
                    (this.AclRequestTimeoutFudgeMs != null &&
                    this.AclRequestTimeoutFudgeMs.Equals(input.AclRequestTimeoutFudgeMs))
                ) && 
                (
                    this.AclRequestTimeoutMs == input.AclRequestTimeoutMs ||
                    (this.AclRequestTimeoutMs != null &&
                    this.AclRequestTimeoutMs.Equals(input.AclRequestTimeoutMs))
                ) && 
                (
                    this.Acls == input.Acls ||
                    (this.Acls != null &&
                    this.Acls.Equals(input.Acls))
                ) && 
                (
                    this.AllowEndlessRecording == input.AllowEndlessRecording ||
                    (this.AllowEndlessRecording != null &&
                    this.AllowEndlessRecording.Equals(input.AllowEndlessRecording))
                ) && 
                (
                    this.AuthzDefaultAction == input.AuthzDefaultAction ||
                    (this.AuthzDefaultAction != null &&
                    this.AuthzDefaultAction.Equals(input.AuthzDefaultAction))
                ) && 
                (
                    this.AuthzDryRun == input.AuthzDryRun ||
                    (this.AuthzDryRun != null &&
                    this.AuthzDryRun.Equals(input.AuthzDryRun))
                ) && 
                (
                    this.AuthzEnabled == input.AuthzEnabled ||
                    (this.AuthzEnabled != null &&
                    this.AuthzEnabled.Equals(input.AuthzEnabled))
                ) && 
                (
                    this.AuthzLocalResources == input.AuthzLocalResources ||
                    (this.AuthzLocalResources != null &&
                    this.AuthzLocalResources.Equals(input.AuthzLocalResources))
                ) && 
                (
                    this.BalanceCrawlerCycleMs == input.BalanceCrawlerCycleMs ||
                    (this.BalanceCrawlerCycleMs != null &&
                    this.BalanceCrawlerCycleMs.Equals(input.BalanceCrawlerCycleMs))
                ) && 
                (
                    this.BalanceCrawlerEnabled == input.BalanceCrawlerEnabled ||
                    (this.BalanceCrawlerEnabled != null &&
                    this.BalanceCrawlerEnabled.Equals(input.BalanceCrawlerEnabled))
                ) && 
                (
                    this.BalanceCrawlerFetchTimeoutMs == input.BalanceCrawlerFetchTimeoutMs ||
                    (this.BalanceCrawlerFetchTimeoutMs != null &&
                    this.BalanceCrawlerFetchTimeoutMs.Equals(input.BalanceCrawlerFetchTimeoutMs))
                ) && 
                (
                    this.BalanceCrawlerInteraccountDelayMs == input.BalanceCrawlerInteraccountDelayMs ||
                    (this.BalanceCrawlerInteraccountDelayMs != null &&
                    this.BalanceCrawlerInteraccountDelayMs.Equals(input.BalanceCrawlerInteraccountDelayMs))
                ) && 
                (
                    this.CallControl == input.CallControl ||
                    (this.CallControl != null &&
                    this.CallControl.Equals(input.CallControl))
                ) && 
                (
                    this.CallControlListeners == input.CallControlListeners ||
                    (this.CallControlListeners != null &&
                    this.CallControlListeners.Equals(input.CallControlListeners))
                ) && 
                (
                    this.CallRoutingBindings == input.CallRoutingBindings ||
                    this.CallRoutingBindings != null &&
                    this.CallRoutingBindings.SequenceEqual(input.CallRoutingBindings)
                ) && 
                (
                    this.Capabilities == input.Capabilities ||
                    this.Capabilities != null &&
                    this.Capabilities.SequenceEqual(input.Capabilities)
                ) && 
                (
                    this.DebugChannel == input.DebugChannel ||
                    (this.DebugChannel != null &&
                    this.DebugChannel.Equals(input.DebugChannel))
                ) && 
                (
                    this.DefaultFaxExtension == input.DefaultFaxExtension ||
                    (this.DefaultFaxExtension != null &&
                    this.DefaultFaxExtension.Equals(input.DefaultFaxExtension))
                ) && 
                (
                    this.DefaultRealm == input.DefaultRealm ||
                    (this.DefaultRealm != null &&
                    this.DefaultRealm.Equals(input.DefaultRealm))
                ) && 
                (
                    this.DefaultRecordingExtension == input.DefaultRecordingExtension ||
                    (this.DefaultRecordingExtension != null &&
                    this.DefaultRecordingExtension.Equals(input.DefaultRecordingExtension))
                ) && 
                (
                    this.DefaultRingback == input.DefaultRingback ||
                    (this.DefaultRingback != null &&
                    this.DefaultRingback.Equals(input.DefaultRingback))
                ) && 
                (
                    this.EventStreamIdleAlert == input.EventStreamIdleAlert ||
                    (this.EventStreamIdleAlert != null &&
                    this.EventStreamIdleAlert.Equals(input.EventStreamIdleAlert))
                ) && 
                (
                    this.ExpandableMacros == input.ExpandableMacros ||
                    (this.ExpandableMacros != null &&
                    this.ExpandableMacros.Equals(input.ExpandableMacros))
                ) && 
                (
                    this.ExpiresDeviationTime == input.ExpiresDeviationTime ||
                    (this.ExpiresDeviationTime != null &&
                    this.ExpiresDeviationTime.Equals(input.ExpiresDeviationTime))
                ) && 
                (
                    this.FailoverWhenAllUnreg == input.FailoverWhenAllUnreg ||
                    (this.FailoverWhenAllUnreg != null &&
                    this.FailoverWhenAllUnreg.Equals(input.FailoverWhenAllUnreg))
                ) && 
                (
                    this.FaxFilePath == input.FaxFilePath ||
                    (this.FaxFilePath != null &&
                    this.FaxFilePath.Equals(input.FaxFilePath))
                ) && 
                (
                    this.FetchTimeout == input.FetchTimeout ||
                    (this.FetchTimeout != null &&
                    this.FetchTimeout.Equals(input.FetchTimeout))
                ) && 
                (
                    this.FreeswitchContext == input.FreeswitchContext ||
                    (this.FreeswitchContext != null &&
                    this.FreeswitchContext.Equals(input.FreeswitchContext))
                ) && 
                (
                    this.FsCmds == input.FsCmds ||
                    this.FsCmds != null &&
                    this.FsCmds.SequenceEqual(input.FsCmds)
                ) && 
                (
                    this.FsCmdsWaitMs == input.FsCmdsWaitMs ||
                    (this.FsCmdsWaitMs != null &&
                    this.FsCmdsWaitMs.Equals(input.FsCmdsWaitMs))
                ) && 
                (
                    this.FsNodeUptimeS == input.FsNodeUptimeS ||
                    (this.FsNodeUptimeS != null &&
                    this.FsNodeUptimeS.Equals(input.FsNodeUptimeS))
                ) && 
                (
                    this.FsNodes == input.FsNodes ||
                    this.FsNodes != null &&
                    this.FsNodes.SequenceEqual(input.FsNodes)
                ) && 
                (
                    this.FsProfiles == input.FsProfiles ||
                    (this.FsProfiles != null &&
                    this.FsProfiles.Equals(input.FsProfiles))
                ) && 
                (
                    this.FsReconnectCmds == input.FsReconnectCmds ||
                    this.FsReconnectCmds != null &&
                    this.FsReconnectCmds.SequenceEqual(input.FsReconnectCmds)
                ) && 
                (
                    this.Gateways == input.Gateways ||
                    (this.Gateways != null &&
                    this.Gateways.Equals(input.Gateways))
                ) && 
                (
                    this.InsertFetchedRegistrationLocally == input.InsertFetchedRegistrationLocally ||
                    (this.InsertFetchedRegistrationLocally != null &&
                    this.InsertFetchedRegistrationLocally.Equals(input.InsertFetchedRegistrationLocally))
                ) && 
                (
                    this.MaxChannelCleanupTimeoutMs == input.MaxChannelCleanupTimeoutMs ||
                    (this.MaxChannelCleanupTimeoutMs != null &&
                    this.MaxChannelCleanupTimeoutMs.Equals(input.MaxChannelCleanupTimeoutMs))
                ) && 
                (
                    this.MaxChannelUptimeS == input.MaxChannelUptimeS ||
                    (this.MaxChannelUptimeS != null &&
                    this.MaxChannelUptimeS.Equals(input.MaxChannelUptimeS))
                ) && 
                (
                    this.MaxTimeoutForNodeRestart == input.MaxTimeoutForNodeRestart ||
                    (this.MaxTimeoutForNodeRestart != null &&
                    this.MaxTimeoutForNodeRestart.Equals(input.MaxTimeoutForNodeRestart))
                ) && 
                (
                    this.MultivarSeparator == input.MultivarSeparator ||
                    (this.MultivarSeparator != null &&
                    this.MultivarSeparator.Equals(input.MultivarSeparator))
                ) && 
                (
                    this.NetworkMap == input.NetworkMap ||
                    (this.NetworkMap != null &&
                    this.NetworkMap.Equals(input.NetworkMap))
                ) && 
                (
                    this.NodeCommands == input.NodeCommands ||
                    (this.NodeCommands != null &&
                    this.NodeCommands.Equals(input.NodeCommands))
                ) && 
                (
                    this.NodeDownGracePeriod == input.NodeDownGracePeriod ||
                    (this.NodeDownGracePeriod != null &&
                    this.NodeDownGracePeriod.Equals(input.NodeDownGracePeriod))
                ) && 
                (
                    this.ProcessGateways == input.ProcessGateways ||
                    (this.ProcessGateways != null &&
                    this.ProcessGateways.Equals(input.ProcessGateways))
                ) && 
                (
                    this.PublishChannelReconnect == input.PublishChannelReconnect ||
                    (this.PublishChannelReconnect != null &&
                    this.PublishChannelReconnect.Equals(input.PublishChannelReconnect))
                ) && 
                (
                    this.PublishChannelState == input.PublishChannelState ||
                    (this.PublishChannelState != null &&
                    this.PublishChannelState.Equals(input.PublishChannelState))
                ) && 
                (
                    this.PublishConferenceEvent == input.PublishConferenceEvent ||
                    this.PublishConferenceEvent != null &&
                    this.PublishConferenceEvent.SequenceEqual(input.PublishConferenceEvent)
                ) && 
                (
                    this.RecordSampleRate == input.RecordSampleRate ||
                    (this.RecordSampleRate != null &&
                    this.RecordSampleRate.Equals(input.RecordSampleRate))
                ) && 
                (
                    this.RecordStereoSampleRate == input.RecordStereoSampleRate ||
                    (this.RecordStereoSampleRate != null &&
                    this.RecordStereoSampleRate.Equals(input.RecordStereoSampleRate))
                ) && 
                (
                    this.RecordWasteResources == input.RecordWasteResources ||
                    (this.RecordWasteResources != null &&
                    this.RecordWasteResources.Equals(input.RecordWasteResources))
                ) && 
                (
                    this.RecordingFilePath == input.RecordingFilePath ||
                    (this.RecordingFilePath != null &&
                    this.RecordingFilePath.Equals(input.RecordingFilePath))
                ) && 
                (
                    this.RecordingSoftwareName == input.RecordingSoftwareName ||
                    (this.RecordingSoftwareName != null &&
                    this.RecordingSoftwareName.Equals(input.RecordingSoftwareName))
                ) && 
                (
                    this.RedirectViaProxy == input.RedirectViaProxy ||
                    (this.RedirectViaProxy != null &&
                    this.RedirectViaProxy.Equals(input.RedirectViaProxy))
                ) && 
                (
                    this.RestrictChannelEventPublisher == input.RestrictChannelEventPublisher ||
                    (this.RestrictChannelEventPublisher != null &&
                    this.RestrictChannelEventPublisher.Equals(input.RestrictChannelEventPublisher))
                ) && 
                (
                    this.RestrictChannelStatePublisher == input.RestrictChannelStatePublisher ||
                    (this.RestrictChannelStatePublisher != null &&
                    this.RestrictChannelStatePublisher.Equals(input.RestrictChannelStatePublisher))
                ) && 
                (
                    this.SanitizeFsValueRegex == input.SanitizeFsValueRegex ||
                    (this.SanitizeFsValueRegex != null &&
                    this.SanitizeFsValueRegex.Equals(input.SanitizeFsValueRegex))
                ) && 
                (
                    this.ShouldDetectInbandDtmf == input.ShouldDetectInbandDtmf ||
                    (this.ShouldDetectInbandDtmf != null &&
                    this.ShouldDetectInbandDtmf.Equals(input.ShouldDetectInbandDtmf))
                ) && 
                (
                    this.SofiaConf == input.SofiaConf ||
                    (this.SofiaConf != null &&
                    this.SofiaConf.Equals(input.SofiaConf))
                ) && 
                (
                    this.TcpPacketType == input.TcpPacketType ||
                    (this.TcpPacketType != null &&
                    this.TcpPacketType.Equals(input.TcpPacketType))
                ) && 
                (
                    this.TextRoutingBindings == input.TextRoutingBindings ||
                    this.TextRoutingBindings != null &&
                    this.TextRoutingBindings.SequenceEqual(input.TextRoutingBindings)
                ) && 
                (
                    this.UseBypassMediaAfterBridge == input.UseBypassMediaAfterBridge ||
                    (this.UseBypassMediaAfterBridge != null &&
                    this.UseBypassMediaAfterBridge.Equals(input.UseBypassMediaAfterBridge))
                ) && 
                (
                    this.UseHttpCache == input.UseHttpCache ||
                    (this.UseHttpCache != null &&
                    this.UseHttpCache.Equals(input.UseHttpCache))
                ) && 
                (
                    this.UseShout == input.UseShout ||
                    (this.UseShout != null &&
                    this.UseShout.Equals(input.UseShout))
                ) && 
                (
                    this.UseVlc == input.UseVlc ||
                    (this.UseVlc != null &&
                    this.UseVlc.Equals(input.UseVlc))
                ) && 
                (
                    this.UserCacheTimeInMs == input.UserCacheTimeInMs ||
                    (this.UserCacheTimeInMs != null &&
                    this.UserCacheTimeInMs.Equals(input.UserCacheTimeInMs))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AclRequestTimeoutFudgeMs != null)
                    hashCode = hashCode * 59 + this.AclRequestTimeoutFudgeMs.GetHashCode();
                if (this.AclRequestTimeoutMs != null)
                    hashCode = hashCode * 59 + this.AclRequestTimeoutMs.GetHashCode();
                if (this.Acls != null)
                    hashCode = hashCode * 59 + this.Acls.GetHashCode();
                if (this.AllowEndlessRecording != null)
                    hashCode = hashCode * 59 + this.AllowEndlessRecording.GetHashCode();
                if (this.AuthzDefaultAction != null)
                    hashCode = hashCode * 59 + this.AuthzDefaultAction.GetHashCode();
                if (this.AuthzDryRun != null)
                    hashCode = hashCode * 59 + this.AuthzDryRun.GetHashCode();
                if (this.AuthzEnabled != null)
                    hashCode = hashCode * 59 + this.AuthzEnabled.GetHashCode();
                if (this.AuthzLocalResources != null)
                    hashCode = hashCode * 59 + this.AuthzLocalResources.GetHashCode();
                if (this.BalanceCrawlerCycleMs != null)
                    hashCode = hashCode * 59 + this.BalanceCrawlerCycleMs.GetHashCode();
                if (this.BalanceCrawlerEnabled != null)
                    hashCode = hashCode * 59 + this.BalanceCrawlerEnabled.GetHashCode();
                if (this.BalanceCrawlerFetchTimeoutMs != null)
                    hashCode = hashCode * 59 + this.BalanceCrawlerFetchTimeoutMs.GetHashCode();
                if (this.BalanceCrawlerInteraccountDelayMs != null)
                    hashCode = hashCode * 59 + this.BalanceCrawlerInteraccountDelayMs.GetHashCode();
                if (this.CallControl != null)
                    hashCode = hashCode * 59 + this.CallControl.GetHashCode();
                if (this.CallControlListeners != null)
                    hashCode = hashCode * 59 + this.CallControlListeners.GetHashCode();
                if (this.CallRoutingBindings != null)
                    hashCode = hashCode * 59 + this.CallRoutingBindings.GetHashCode();
                if (this.Capabilities != null)
                    hashCode = hashCode * 59 + this.Capabilities.GetHashCode();
                if (this.DebugChannel != null)
                    hashCode = hashCode * 59 + this.DebugChannel.GetHashCode();
                if (this.DefaultFaxExtension != null)
                    hashCode = hashCode * 59 + this.DefaultFaxExtension.GetHashCode();
                if (this.DefaultRealm != null)
                    hashCode = hashCode * 59 + this.DefaultRealm.GetHashCode();
                if (this.DefaultRecordingExtension != null)
                    hashCode = hashCode * 59 + this.DefaultRecordingExtension.GetHashCode();
                if (this.DefaultRingback != null)
                    hashCode = hashCode * 59 + this.DefaultRingback.GetHashCode();
                if (this.EventStreamIdleAlert != null)
                    hashCode = hashCode * 59 + this.EventStreamIdleAlert.GetHashCode();
                if (this.ExpandableMacros != null)
                    hashCode = hashCode * 59 + this.ExpandableMacros.GetHashCode();
                if (this.ExpiresDeviationTime != null)
                    hashCode = hashCode * 59 + this.ExpiresDeviationTime.GetHashCode();
                if (this.FailoverWhenAllUnreg != null)
                    hashCode = hashCode * 59 + this.FailoverWhenAllUnreg.GetHashCode();
                if (this.FaxFilePath != null)
                    hashCode = hashCode * 59 + this.FaxFilePath.GetHashCode();
                if (this.FetchTimeout != null)
                    hashCode = hashCode * 59 + this.FetchTimeout.GetHashCode();
                if (this.FreeswitchContext != null)
                    hashCode = hashCode * 59 + this.FreeswitchContext.GetHashCode();
                if (this.FsCmds != null)
                    hashCode = hashCode * 59 + this.FsCmds.GetHashCode();
                if (this.FsCmdsWaitMs != null)
                    hashCode = hashCode * 59 + this.FsCmdsWaitMs.GetHashCode();
                if (this.FsNodeUptimeS != null)
                    hashCode = hashCode * 59 + this.FsNodeUptimeS.GetHashCode();
                if (this.FsNodes != null)
                    hashCode = hashCode * 59 + this.FsNodes.GetHashCode();
                if (this.FsProfiles != null)
                    hashCode = hashCode * 59 + this.FsProfiles.GetHashCode();
                if (this.FsReconnectCmds != null)
                    hashCode = hashCode * 59 + this.FsReconnectCmds.GetHashCode();
                if (this.Gateways != null)
                    hashCode = hashCode * 59 + this.Gateways.GetHashCode();
                if (this.InsertFetchedRegistrationLocally != null)
                    hashCode = hashCode * 59 + this.InsertFetchedRegistrationLocally.GetHashCode();
                if (this.MaxChannelCleanupTimeoutMs != null)
                    hashCode = hashCode * 59 + this.MaxChannelCleanupTimeoutMs.GetHashCode();
                if (this.MaxChannelUptimeS != null)
                    hashCode = hashCode * 59 + this.MaxChannelUptimeS.GetHashCode();
                if (this.MaxTimeoutForNodeRestart != null)
                    hashCode = hashCode * 59 + this.MaxTimeoutForNodeRestart.GetHashCode();
                if (this.MultivarSeparator != null)
                    hashCode = hashCode * 59 + this.MultivarSeparator.GetHashCode();
                if (this.NetworkMap != null)
                    hashCode = hashCode * 59 + this.NetworkMap.GetHashCode();
                if (this.NodeCommands != null)
                    hashCode = hashCode * 59 + this.NodeCommands.GetHashCode();
                if (this.NodeDownGracePeriod != null)
                    hashCode = hashCode * 59 + this.NodeDownGracePeriod.GetHashCode();
                if (this.ProcessGateways != null)
                    hashCode = hashCode * 59 + this.ProcessGateways.GetHashCode();
                if (this.PublishChannelReconnect != null)
                    hashCode = hashCode * 59 + this.PublishChannelReconnect.GetHashCode();
                if (this.PublishChannelState != null)
                    hashCode = hashCode * 59 + this.PublishChannelState.GetHashCode();
                if (this.PublishConferenceEvent != null)
                    hashCode = hashCode * 59 + this.PublishConferenceEvent.GetHashCode();
                if (this.RecordSampleRate != null)
                    hashCode = hashCode * 59 + this.RecordSampleRate.GetHashCode();
                if (this.RecordStereoSampleRate != null)
                    hashCode = hashCode * 59 + this.RecordStereoSampleRate.GetHashCode();
                if (this.RecordWasteResources != null)
                    hashCode = hashCode * 59 + this.RecordWasteResources.GetHashCode();
                if (this.RecordingFilePath != null)
                    hashCode = hashCode * 59 + this.RecordingFilePath.GetHashCode();
                if (this.RecordingSoftwareName != null)
                    hashCode = hashCode * 59 + this.RecordingSoftwareName.GetHashCode();
                if (this.RedirectViaProxy != null)
                    hashCode = hashCode * 59 + this.RedirectViaProxy.GetHashCode();
                if (this.RestrictChannelEventPublisher != null)
                    hashCode = hashCode * 59 + this.RestrictChannelEventPublisher.GetHashCode();
                if (this.RestrictChannelStatePublisher != null)
                    hashCode = hashCode * 59 + this.RestrictChannelStatePublisher.GetHashCode();
                if (this.SanitizeFsValueRegex != null)
                    hashCode = hashCode * 59 + this.SanitizeFsValueRegex.GetHashCode();
                if (this.ShouldDetectInbandDtmf != null)
                    hashCode = hashCode * 59 + this.ShouldDetectInbandDtmf.GetHashCode();
                if (this.SofiaConf != null)
                    hashCode = hashCode * 59 + this.SofiaConf.GetHashCode();
                if (this.TcpPacketType != null)
                    hashCode = hashCode * 59 + this.TcpPacketType.GetHashCode();
                if (this.TextRoutingBindings != null)
                    hashCode = hashCode * 59 + this.TextRoutingBindings.GetHashCode();
                if (this.UseBypassMediaAfterBridge != null)
                    hashCode = hashCode * 59 + this.UseBypassMediaAfterBridge.GetHashCode();
                if (this.UseHttpCache != null)
                    hashCode = hashCode * 59 + this.UseHttpCache.GetHashCode();
                if (this.UseShout != null)
                    hashCode = hashCode * 59 + this.UseShout.GetHashCode();
                if (this.UseVlc != null)
                    hashCode = hashCode * 59 + this.UseVlc.GetHashCode();
                if (this.UserCacheTimeInMs != null)
                    hashCode = hashCode * 59 + this.UserCacheTimeInMs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
