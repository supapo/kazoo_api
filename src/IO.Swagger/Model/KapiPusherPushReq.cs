/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AMQP API for pusher.push_req
    /// </summary>
    [DataContract]
    public partial class KapiPusherPushReq :  IEquatable<KapiPusherPushReq>, IValidatableObject
    {
        /// <summary>
        /// Defines EventCategory
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventCategoryEnum
        {
            
            /// <summary>
            /// Enum Notification for value: notification
            /// </summary>
            [EnumMember(Value = "notification")]
            Notification = 1
        }

        /// <summary>
        /// Gets or Sets EventCategory
        /// </summary>
        [DataMember(Name="Event-Category", EmitDefaultValue=false)]
        public EventCategoryEnum? EventCategory { get; set; }
        /// <summary>
        /// Defines EventName
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventNameEnum
        {
            
            /// <summary>
            /// Enum Pushreq for value: push_req
            /// </summary>
            [EnumMember(Value = "push_req")]
            Pushreq = 1
        }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="Event-Name", EmitDefaultValue=false)]
        public EventNameEnum? EventName { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiPusherPushReq" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KapiPusherPushReq() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KapiPusherPushReq" /> class.
        /// </summary>
        /// <param name="accountID">accountID.</param>
        /// <param name="alert">alert.</param>
        /// <param name="alertBody">alertBody (required).</param>
        /// <param name="alertKey">alertKey.</param>
        /// <param name="alertParams">alertParams.</param>
        /// <param name="badge">badge.</param>
        /// <param name="callID">callID.</param>
        /// <param name="endpointID">endpointID.</param>
        /// <param name="eventCategory">eventCategory.</param>
        /// <param name="eventName">eventName.</param>
        /// <param name="expires">expires.</param>
        /// <param name="payload">payload.</param>
        /// <param name="queue">queue.</param>
        /// <param name="sound">sound.</param>
        /// <param name="tokenApp">tokenApp (required).</param>
        /// <param name="tokenID">tokenID (required).</param>
        /// <param name="tokenReg">tokenReg.</param>
        /// <param name="tokenType">tokenType (required).</param>
        public KapiPusherPushReq(string accountID = default(string), string alert = default(string), string alertBody = default(string), string alertKey = default(string), string alertParams = default(string), string badge = default(string), string callID = default(string), string endpointID = default(string), EventCategoryEnum? eventCategory = default(EventCategoryEnum?), EventNameEnum? eventName = default(EventNameEnum?), string expires = default(string), string payload = default(string), string queue = default(string), string sound = default(string), string tokenApp = default(string), string tokenID = default(string), string tokenReg = default(string), string tokenType = default(string))
        {
            // to ensure "alertBody" is required (not null)
            if (alertBody == null)
            {
                throw new InvalidDataException("alertBody is a required property for KapiPusherPushReq and cannot be null");
            }
            else
            {
                this.AlertBody = alertBody;
            }
            // to ensure "tokenApp" is required (not null)
            if (tokenApp == null)
            {
                throw new InvalidDataException("tokenApp is a required property for KapiPusherPushReq and cannot be null");
            }
            else
            {
                this.TokenApp = tokenApp;
            }
            // to ensure "tokenID" is required (not null)
            if (tokenID == null)
            {
                throw new InvalidDataException("tokenID is a required property for KapiPusherPushReq and cannot be null");
            }
            else
            {
                this.TokenID = tokenID;
            }
            // to ensure "tokenType" is required (not null)
            if (tokenType == null)
            {
                throw new InvalidDataException("tokenType is a required property for KapiPusherPushReq and cannot be null");
            }
            else
            {
                this.TokenType = tokenType;
            }
            this.AccountID = accountID;
            this.Alert = alert;
            this.AlertKey = alertKey;
            this.AlertParams = alertParams;
            this.Badge = badge;
            this.CallID = callID;
            this.EndpointID = endpointID;
            this.EventCategory = eventCategory;
            this.EventName = eventName;
            this.Expires = expires;
            this.Payload = payload;
            this.Queue = queue;
            this.Sound = sound;
            this.TokenReg = tokenReg;
        }
        
        /// <summary>
        /// Gets or Sets AccountID
        /// </summary>
        [DataMember(Name="Account-ID", EmitDefaultValue=false)]
        public string AccountID { get; set; }

        /// <summary>
        /// Gets or Sets Alert
        /// </summary>
        [DataMember(Name="Alert", EmitDefaultValue=false)]
        public string Alert { get; set; }

        /// <summary>
        /// Gets or Sets AlertBody
        /// </summary>
        [DataMember(Name="Alert-Body", EmitDefaultValue=false)]
        public string AlertBody { get; set; }

        /// <summary>
        /// Gets or Sets AlertKey
        /// </summary>
        [DataMember(Name="Alert-Key", EmitDefaultValue=false)]
        public string AlertKey { get; set; }

        /// <summary>
        /// Gets or Sets AlertParams
        /// </summary>
        [DataMember(Name="Alert-Params", EmitDefaultValue=false)]
        public string AlertParams { get; set; }

        /// <summary>
        /// Gets or Sets Badge
        /// </summary>
        [DataMember(Name="Badge", EmitDefaultValue=false)]
        public string Badge { get; set; }

        /// <summary>
        /// Gets or Sets CallID
        /// </summary>
        [DataMember(Name="Call-ID", EmitDefaultValue=false)]
        public string CallID { get; set; }

        /// <summary>
        /// Gets or Sets EndpointID
        /// </summary>
        [DataMember(Name="Endpoint-ID", EmitDefaultValue=false)]
        public string EndpointID { get; set; }



        /// <summary>
        /// Gets or Sets Expires
        /// </summary>
        [DataMember(Name="Expires", EmitDefaultValue=false)]
        public string Expires { get; set; }

        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [DataMember(Name="Payload", EmitDefaultValue=false)]
        public string Payload { get; set; }

        /// <summary>
        /// Gets or Sets Queue
        /// </summary>
        [DataMember(Name="Queue", EmitDefaultValue=false)]
        public string Queue { get; set; }

        /// <summary>
        /// Gets or Sets Sound
        /// </summary>
        [DataMember(Name="Sound", EmitDefaultValue=false)]
        public string Sound { get; set; }

        /// <summary>
        /// Gets or Sets TokenApp
        /// </summary>
        [DataMember(Name="Token-App", EmitDefaultValue=false)]
        public string TokenApp { get; set; }

        /// <summary>
        /// Gets or Sets TokenID
        /// </summary>
        [DataMember(Name="Token-ID", EmitDefaultValue=false)]
        public string TokenID { get; set; }

        /// <summary>
        /// Gets or Sets TokenReg
        /// </summary>
        [DataMember(Name="Token-Reg", EmitDefaultValue=false)]
        public string TokenReg { get; set; }

        /// <summary>
        /// Gets or Sets TokenType
        /// </summary>
        [DataMember(Name="Token-Type", EmitDefaultValue=false)]
        public string TokenType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KapiPusherPushReq {\n");
            sb.Append("  AccountID: ").Append(AccountID).Append("\n");
            sb.Append("  Alert: ").Append(Alert).Append("\n");
            sb.Append("  AlertBody: ").Append(AlertBody).Append("\n");
            sb.Append("  AlertKey: ").Append(AlertKey).Append("\n");
            sb.Append("  AlertParams: ").Append(AlertParams).Append("\n");
            sb.Append("  Badge: ").Append(Badge).Append("\n");
            sb.Append("  CallID: ").Append(CallID).Append("\n");
            sb.Append("  EndpointID: ").Append(EndpointID).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  Queue: ").Append(Queue).Append("\n");
            sb.Append("  Sound: ").Append(Sound).Append("\n");
            sb.Append("  TokenApp: ").Append(TokenApp).Append("\n");
            sb.Append("  TokenID: ").Append(TokenID).Append("\n");
            sb.Append("  TokenReg: ").Append(TokenReg).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KapiPusherPushReq);
        }

        /// <summary>
        /// Returns true if KapiPusherPushReq instances are equal
        /// </summary>
        /// <param name="input">Instance of KapiPusherPushReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KapiPusherPushReq input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountID == input.AccountID ||
                    (this.AccountID != null &&
                    this.AccountID.Equals(input.AccountID))
                ) && 
                (
                    this.Alert == input.Alert ||
                    (this.Alert != null &&
                    this.Alert.Equals(input.Alert))
                ) && 
                (
                    this.AlertBody == input.AlertBody ||
                    (this.AlertBody != null &&
                    this.AlertBody.Equals(input.AlertBody))
                ) && 
                (
                    this.AlertKey == input.AlertKey ||
                    (this.AlertKey != null &&
                    this.AlertKey.Equals(input.AlertKey))
                ) && 
                (
                    this.AlertParams == input.AlertParams ||
                    (this.AlertParams != null &&
                    this.AlertParams.Equals(input.AlertParams))
                ) && 
                (
                    this.Badge == input.Badge ||
                    (this.Badge != null &&
                    this.Badge.Equals(input.Badge))
                ) && 
                (
                    this.CallID == input.CallID ||
                    (this.CallID != null &&
                    this.CallID.Equals(input.CallID))
                ) && 
                (
                    this.EndpointID == input.EndpointID ||
                    (this.EndpointID != null &&
                    this.EndpointID.Equals(input.EndpointID))
                ) && 
                (
                    this.EventCategory == input.EventCategory ||
                    (this.EventCategory != null &&
                    this.EventCategory.Equals(input.EventCategory))
                ) && 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.Expires == input.Expires ||
                    (this.Expires != null &&
                    this.Expires.Equals(input.Expires))
                ) && 
                (
                    this.Payload == input.Payload ||
                    (this.Payload != null &&
                    this.Payload.Equals(input.Payload))
                ) && 
                (
                    this.Queue == input.Queue ||
                    (this.Queue != null &&
                    this.Queue.Equals(input.Queue))
                ) && 
                (
                    this.Sound == input.Sound ||
                    (this.Sound != null &&
                    this.Sound.Equals(input.Sound))
                ) && 
                (
                    this.TokenApp == input.TokenApp ||
                    (this.TokenApp != null &&
                    this.TokenApp.Equals(input.TokenApp))
                ) && 
                (
                    this.TokenID == input.TokenID ||
                    (this.TokenID != null &&
                    this.TokenID.Equals(input.TokenID))
                ) && 
                (
                    this.TokenReg == input.TokenReg ||
                    (this.TokenReg != null &&
                    this.TokenReg.Equals(input.TokenReg))
                ) && 
                (
                    this.TokenType == input.TokenType ||
                    (this.TokenType != null &&
                    this.TokenType.Equals(input.TokenType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountID != null)
                    hashCode = hashCode * 59 + this.AccountID.GetHashCode();
                if (this.Alert != null)
                    hashCode = hashCode * 59 + this.Alert.GetHashCode();
                if (this.AlertBody != null)
                    hashCode = hashCode * 59 + this.AlertBody.GetHashCode();
                if (this.AlertKey != null)
                    hashCode = hashCode * 59 + this.AlertKey.GetHashCode();
                if (this.AlertParams != null)
                    hashCode = hashCode * 59 + this.AlertParams.GetHashCode();
                if (this.Badge != null)
                    hashCode = hashCode * 59 + this.Badge.GetHashCode();
                if (this.CallID != null)
                    hashCode = hashCode * 59 + this.CallID.GetHashCode();
                if (this.EndpointID != null)
                    hashCode = hashCode * 59 + this.EndpointID.GetHashCode();
                if (this.EventCategory != null)
                    hashCode = hashCode * 59 + this.EventCategory.GetHashCode();
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.Expires != null)
                    hashCode = hashCode * 59 + this.Expires.GetHashCode();
                if (this.Payload != null)
                    hashCode = hashCode * 59 + this.Payload.GetHashCode();
                if (this.Queue != null)
                    hashCode = hashCode * 59 + this.Queue.GetHashCode();
                if (this.Sound != null)
                    hashCode = hashCode * 59 + this.Sound.GetHashCode();
                if (this.TokenApp != null)
                    hashCode = hashCode * 59 + this.TokenApp.GetHashCode();
                if (this.TokenID != null)
                    hashCode = hashCode * 59 + this.TokenID.GetHashCode();
                if (this.TokenReg != null)
                    hashCode = hashCode * 59 + this.TokenReg.GetHashCode();
                if (this.TokenType != null)
                    hashCode = hashCode * 59 + this.TokenType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
