/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Properties related to navigation in the UI
    /// </summary>
    [DataContract]
    public partial class WhitelabelNav :  IEquatable<WhitelabelNav>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WhitelabelNav" /> class.
        /// </summary>
        /// <param name="help">The URL to use when the help link is clicked.</param>
        /// <param name="learnMore">The URL to use when the &#39;Learn More!&#39; link is clicked.</param>
        public WhitelabelNav(string help = default(string), string learnMore = default(string))
        {
            this.Help = help;
            this.LearnMore = learnMore;
        }
        
        /// <summary>
        /// The URL to use when the help link is clicked
        /// </summary>
        /// <value>The URL to use when the help link is clicked</value>
        [DataMember(Name="help", EmitDefaultValue=false)]
        public string Help { get; set; }

        /// <summary>
        /// The URL to use when the &#39;Learn More!&#39; link is clicked
        /// </summary>
        /// <value>The URL to use when the &#39;Learn More!&#39; link is clicked</value>
        [DataMember(Name="learn_more", EmitDefaultValue=false)]
        public string LearnMore { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WhitelabelNav {\n");
            sb.Append("  Help: ").Append(Help).Append("\n");
            sb.Append("  LearnMore: ").Append(LearnMore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WhitelabelNav);
        }

        /// <summary>
        /// Returns true if WhitelabelNav instances are equal
        /// </summary>
        /// <param name="input">Instance of WhitelabelNav to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WhitelabelNav input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Help == input.Help ||
                    (this.Help != null &&
                    this.Help.Equals(input.Help))
                ) && 
                (
                    this.LearnMore == input.LearnMore ||
                    (this.LearnMore != null &&
                    this.LearnMore.Equals(input.LearnMore))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Help != null)
                    hashCode = hashCode * 59 + this.Help.GetHashCode();
                if (this.LearnMore != null)
                    hashCode = hashCode * 59 + this.LearnMore.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
