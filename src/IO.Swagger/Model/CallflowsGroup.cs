/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Validator for the group callflow data object
    /// </summary>
    [DataContract]
    public partial class CallflowsGroup :  IEquatable<CallflowsGroup>, IValidatableObject
    {
        /// <summary>
        /// How to ring the endpoints
        /// </summary>
        /// <value>How to ring the endpoints</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StrategyEnum
        {
            
            /// <summary>
            /// Enum Single for value: single
            /// </summary>
            [EnumMember(Value = "single")]
            Single = 1,
            
            /// <summary>
            /// Enum Simultaneous for value: simultaneous
            /// </summary>
            [EnumMember(Value = "simultaneous")]
            Simultaneous = 2
        }

        /// <summary>
        /// How to ring the endpoints
        /// </summary>
        /// <value>How to ring the endpoints</value>
        [DataMember(Name="strategy", EmitDefaultValue=false)]
        public StrategyEnum? Strategy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallflowsGroup" /> class.
        /// </summary>
        /// <param name="endpoints">List of endpoint (device/user/group) IDs.</param>
        /// <param name="failOnSingleReject">If any leg rejects the call, cancel all other legs.</param>
        /// <param name="id">Group ID.</param>
        /// <param name="ignoreForward">Whether to ignore forwarded phones (default to true).</param>
        /// <param name="repeats">How many times to repeat dialing the group.</param>
        /// <param name="ringback">Ringback to use.</param>
        /// <param name="ringtones">ringtones.</param>
        /// <param name="skipModule">When set to true this callflow action is skipped, advancing to the wildcard branch (if any).</param>
        /// <param name="strategy">How to ring the endpoints (default to StrategyEnum.Simultaneous).</param>
        /// <param name="timeout">How long to attempt the group.</param>
        public CallflowsGroup(List<string> endpoints = default(List<string>), bool? failOnSingleReject = default(bool?), string id = default(string), bool? ignoreForward = true, int? repeats = default(int?), string ringback = default(string), CallflowsGroupRingtones ringtones = default(CallflowsGroupRingtones), bool? skipModule = default(bool?), StrategyEnum? strategy = StrategyEnum.Simultaneous, int? timeout = default(int?))
        {
            this.Endpoints = endpoints;
            this.FailOnSingleReject = failOnSingleReject;
            this.Id = id;
            // use default value if no "ignoreForward" provided
            if (ignoreForward == null)
            {
                this.IgnoreForward = true;
            }
            else
            {
                this.IgnoreForward = ignoreForward;
            }
            this.Repeats = repeats;
            this.Ringback = ringback;
            this.Ringtones = ringtones;
            this.SkipModule = skipModule;
            // use default value if no "strategy" provided
            if (strategy == null)
            {
                this.Strategy = StrategyEnum.Simultaneous;
            }
            else
            {
                this.Strategy = strategy;
            }
            this.Timeout = timeout;
        }
        
        /// <summary>
        /// List of endpoint (device/user/group) IDs
        /// </summary>
        /// <value>List of endpoint (device/user/group) IDs</value>
        [DataMember(Name="endpoints", EmitDefaultValue=false)]
        public List<string> Endpoints { get; set; }

        /// <summary>
        /// If any leg rejects the call, cancel all other legs
        /// </summary>
        /// <value>If any leg rejects the call, cancel all other legs</value>
        [DataMember(Name="fail_on_single_reject", EmitDefaultValue=false)]
        public bool? FailOnSingleReject { get; set; }

        /// <summary>
        /// Group ID
        /// </summary>
        /// <value>Group ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Whether to ignore forwarded phones
        /// </summary>
        /// <value>Whether to ignore forwarded phones</value>
        [DataMember(Name="ignore_forward", EmitDefaultValue=false)]
        public bool? IgnoreForward { get; set; }

        /// <summary>
        /// How many times to repeat dialing the group
        /// </summary>
        /// <value>How many times to repeat dialing the group</value>
        [DataMember(Name="repeats", EmitDefaultValue=false)]
        public int? Repeats { get; set; }

        /// <summary>
        /// Ringback to use
        /// </summary>
        /// <value>Ringback to use</value>
        [DataMember(Name="ringback", EmitDefaultValue=false)]
        public string Ringback { get; set; }

        /// <summary>
        /// Gets or Sets Ringtones
        /// </summary>
        [DataMember(Name="ringtones", EmitDefaultValue=false)]
        public CallflowsGroupRingtones Ringtones { get; set; }

        /// <summary>
        /// When set to true this callflow action is skipped, advancing to the wildcard branch (if any)
        /// </summary>
        /// <value>When set to true this callflow action is skipped, advancing to the wildcard branch (if any)</value>
        [DataMember(Name="skip_module", EmitDefaultValue=false)]
        public bool? SkipModule { get; set; }


        /// <summary>
        /// How long to attempt the group
        /// </summary>
        /// <value>How long to attempt the group</value>
        [DataMember(Name="timeout", EmitDefaultValue=false)]
        public int? Timeout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallflowsGroup {\n");
            sb.Append("  Endpoints: ").Append(Endpoints).Append("\n");
            sb.Append("  FailOnSingleReject: ").Append(FailOnSingleReject).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IgnoreForward: ").Append(IgnoreForward).Append("\n");
            sb.Append("  Repeats: ").Append(Repeats).Append("\n");
            sb.Append("  Ringback: ").Append(Ringback).Append("\n");
            sb.Append("  Ringtones: ").Append(Ringtones).Append("\n");
            sb.Append("  SkipModule: ").Append(SkipModule).Append("\n");
            sb.Append("  Strategy: ").Append(Strategy).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallflowsGroup);
        }

        /// <summary>
        /// Returns true if CallflowsGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of CallflowsGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallflowsGroup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Endpoints == input.Endpoints ||
                    this.Endpoints != null &&
                    this.Endpoints.SequenceEqual(input.Endpoints)
                ) && 
                (
                    this.FailOnSingleReject == input.FailOnSingleReject ||
                    (this.FailOnSingleReject != null &&
                    this.FailOnSingleReject.Equals(input.FailOnSingleReject))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IgnoreForward == input.IgnoreForward ||
                    (this.IgnoreForward != null &&
                    this.IgnoreForward.Equals(input.IgnoreForward))
                ) && 
                (
                    this.Repeats == input.Repeats ||
                    (this.Repeats != null &&
                    this.Repeats.Equals(input.Repeats))
                ) && 
                (
                    this.Ringback == input.Ringback ||
                    (this.Ringback != null &&
                    this.Ringback.Equals(input.Ringback))
                ) && 
                (
                    this.Ringtones == input.Ringtones ||
                    (this.Ringtones != null &&
                    this.Ringtones.Equals(input.Ringtones))
                ) && 
                (
                    this.SkipModule == input.SkipModule ||
                    (this.SkipModule != null &&
                    this.SkipModule.Equals(input.SkipModule))
                ) && 
                (
                    this.Strategy == input.Strategy ||
                    (this.Strategy != null &&
                    this.Strategy.Equals(input.Strategy))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    (this.Timeout != null &&
                    this.Timeout.Equals(input.Timeout))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Endpoints != null)
                    hashCode = hashCode * 59 + this.Endpoints.GetHashCode();
                if (this.FailOnSingleReject != null)
                    hashCode = hashCode * 59 + this.FailOnSingleReject.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IgnoreForward != null)
                    hashCode = hashCode * 59 + this.IgnoreForward.GetHashCode();
                if (this.Repeats != null)
                    hashCode = hashCode * 59 + this.Repeats.GetHashCode();
                if (this.Ringback != null)
                    hashCode = hashCode * 59 + this.Ringback.GetHashCode();
                if (this.Ringtones != null)
                    hashCode = hashCode * 59 + this.Ringtones.GetHashCode();
                if (this.SkipModule != null)
                    hashCode = hashCode * 59 + this.SkipModule.GetHashCode();
                if (this.Strategy != null)
                    hashCode = hashCode * 59 + this.Strategy.GetHashCode();
                if (this.Timeout != null)
                    hashCode = hashCode * 59 + this.Timeout.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
