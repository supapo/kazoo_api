/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Click-to-call allows you to create URLs that can be POSTed to with a phone number or SIP URI and create a phone call from the provided contact information to a destination you have pre-determined.
    /// </summary>
    [DataContract]
    public partial class Clicktocall :  IEquatable<Clicktocall>, IValidatableObject
    {
        /// <summary>
        /// Determines what will be dialed first: extension or contact
        /// </summary>
        /// <value>Determines what will be dialed first: extension or contact</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DialFirstEnum
        {
            
            /// <summary>
            /// Enum Extension for value: extension
            /// </summary>
            [EnumMember(Value = "extension")]
            Extension = 1,
            
            /// <summary>
            /// Enum Contact for value: contact
            /// </summary>
            [EnumMember(Value = "contact")]
            Contact = 2
        }

        /// <summary>
        /// Determines what will be dialed first: extension or contact
        /// </summary>
        /// <value>Determines what will be dialed first: extension or contact</value>
        [DataMember(Name="dial_first", EmitDefaultValue=false)]
        public DialFirstEnum? DialFirst { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Clicktocall" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Clicktocall() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Clicktocall" /> class.
        /// </summary>
        /// <param name="authRequired">Determines if this click to call requires valid auth-tokens when invoked (default to true).</param>
        /// <param name="bypassMedia">Default bypass media mode (The string type is deprecated, please use this as a boolean).</param>
        /// <param name="callerIdNumber">Explicitly set caller id number.</param>
        /// <param name="customApplicationVars">Key-value pairs to set as custom_application_vars on the channel.</param>
        /// <param name="customSipHeaders">A property list of SIP headers.</param>
        /// <param name="dialFirst">Determines what will be dialed first: extension or contact.</param>
        /// <param name="extension">The extension to connect to when the click to call is invoked (required).</param>
        /// <param name="media">media.</param>
        /// <param name="musicOnHold">musicOnHold.</param>
        /// <param name="name">A friendly name for the click to call (required).</param>
        /// <param name="outboundCalleeIdName">Callee ID Name of the device calling out to the contact number.</param>
        /// <param name="outboundCalleeIdNumber">Callee ID Number of the device calling out to the contact number.</param>
        /// <param name="presenceId">Static presence ID (used instead of SIP username).</param>
        /// <param name="ringback">Ringback to use.</param>
        /// <param name="throttle">The rate that this click to call can be invoked.</param>
        /// <param name="timeout">How long, in seconds, to wait for the call to progress.</param>
        /// <param name="whitelist">A list of regular expressions that the click to call can dial to.</param>
        public Clicktocall(bool? authRequired = true, Object bypassMedia = default(Object), string callerIdNumber = default(string), Object customApplicationVars = default(Object), Object customSipHeaders = default(Object), DialFirstEnum? dialFirst = default(DialFirstEnum?), string extension = default(string), ClicktocallMedia media = default(ClicktocallMedia), ClicktocallMusicOnHold musicOnHold = default(ClicktocallMusicOnHold), string name = default(string), string outboundCalleeIdName = default(string), string outboundCalleeIdNumber = default(string), string presenceId = default(string), string ringback = default(string), int? throttle = default(int?), int? timeout = default(int?), List<string> whitelist = default(List<string>))
        {
            // to ensure "extension" is required (not null)
            if (extension == null)
            {
                throw new InvalidDataException("extension is a required property for Clicktocall and cannot be null");
            }
            else
            {
                this.Extension = extension;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Clicktocall and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // use default value if no "authRequired" provided
            if (authRequired == null)
            {
                this.AuthRequired = true;
            }
            else
            {
                this.AuthRequired = authRequired;
            }
            this.BypassMedia = bypassMedia;
            this.CallerIdNumber = callerIdNumber;
            this.CustomApplicationVars = customApplicationVars;
            this.CustomSipHeaders = customSipHeaders;
            this.DialFirst = dialFirst;
            this.Media = media;
            this.MusicOnHold = musicOnHold;
            this.OutboundCalleeIdName = outboundCalleeIdName;
            this.OutboundCalleeIdNumber = outboundCalleeIdNumber;
            this.PresenceId = presenceId;
            this.Ringback = ringback;
            this.Throttle = throttle;
            this.Timeout = timeout;
            this.Whitelist = whitelist;
        }
        
        /// <summary>
        /// Determines if this click to call requires valid auth-tokens when invoked
        /// </summary>
        /// <value>Determines if this click to call requires valid auth-tokens when invoked</value>
        [DataMember(Name="auth_required", EmitDefaultValue=false)]
        public bool? AuthRequired { get; set; }

        /// <summary>
        /// Default bypass media mode (The string type is deprecated, please use this as a boolean)
        /// </summary>
        /// <value>Default bypass media mode (The string type is deprecated, please use this as a boolean)</value>
        [DataMember(Name="bypass_media", EmitDefaultValue=false)]
        public Object BypassMedia { get; set; }

        /// <summary>
        /// Explicitly set caller id number
        /// </summary>
        /// <value>Explicitly set caller id number</value>
        [DataMember(Name="caller_id_number", EmitDefaultValue=false)]
        public string CallerIdNumber { get; set; }

        /// <summary>
        /// Key-value pairs to set as custom_application_vars on the channel
        /// </summary>
        /// <value>Key-value pairs to set as custom_application_vars on the channel</value>
        [DataMember(Name="custom_application_vars", EmitDefaultValue=false)]
        public Object CustomApplicationVars { get; set; }

        /// <summary>
        /// A property list of SIP headers
        /// </summary>
        /// <value>A property list of SIP headers</value>
        [DataMember(Name="custom_sip_headers", EmitDefaultValue=false)]
        public Object CustomSipHeaders { get; set; }


        /// <summary>
        /// The extension to connect to when the click to call is invoked
        /// </summary>
        /// <value>The extension to connect to when the click to call is invoked</value>
        [DataMember(Name="extension", EmitDefaultValue=false)]
        public string Extension { get; set; }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name="media", EmitDefaultValue=false)]
        public ClicktocallMedia Media { get; set; }

        /// <summary>
        /// Gets or Sets MusicOnHold
        /// </summary>
        [DataMember(Name="music_on_hold", EmitDefaultValue=false)]
        public ClicktocallMusicOnHold MusicOnHold { get; set; }

        /// <summary>
        /// A friendly name for the click to call
        /// </summary>
        /// <value>A friendly name for the click to call</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Callee ID Name of the device calling out to the contact number
        /// </summary>
        /// <value>Callee ID Name of the device calling out to the contact number</value>
        [DataMember(Name="outbound_callee_id_name", EmitDefaultValue=false)]
        public string OutboundCalleeIdName { get; set; }

        /// <summary>
        /// Callee ID Number of the device calling out to the contact number
        /// </summary>
        /// <value>Callee ID Number of the device calling out to the contact number</value>
        [DataMember(Name="outbound_callee_id_number", EmitDefaultValue=false)]
        public string OutboundCalleeIdNumber { get; set; }

        /// <summary>
        /// Static presence ID (used instead of SIP username)
        /// </summary>
        /// <value>Static presence ID (used instead of SIP username)</value>
        [DataMember(Name="presence_id", EmitDefaultValue=false)]
        public string PresenceId { get; set; }

        /// <summary>
        /// Ringback to use
        /// </summary>
        /// <value>Ringback to use</value>
        [DataMember(Name="ringback", EmitDefaultValue=false)]
        public string Ringback { get; set; }

        /// <summary>
        /// The rate that this click to call can be invoked
        /// </summary>
        /// <value>The rate that this click to call can be invoked</value>
        [DataMember(Name="throttle", EmitDefaultValue=false)]
        public int? Throttle { get; set; }

        /// <summary>
        /// How long, in seconds, to wait for the call to progress
        /// </summary>
        /// <value>How long, in seconds, to wait for the call to progress</value>
        [DataMember(Name="timeout", EmitDefaultValue=false)]
        public int? Timeout { get; set; }

        /// <summary>
        /// A list of regular expressions that the click to call can dial to
        /// </summary>
        /// <value>A list of regular expressions that the click to call can dial to</value>
        [DataMember(Name="whitelist", EmitDefaultValue=false)]
        public List<string> Whitelist { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Clicktocall {\n");
            sb.Append("  AuthRequired: ").Append(AuthRequired).Append("\n");
            sb.Append("  BypassMedia: ").Append(BypassMedia).Append("\n");
            sb.Append("  CallerIdNumber: ").Append(CallerIdNumber).Append("\n");
            sb.Append("  CustomApplicationVars: ").Append(CustomApplicationVars).Append("\n");
            sb.Append("  CustomSipHeaders: ").Append(CustomSipHeaders).Append("\n");
            sb.Append("  DialFirst: ").Append(DialFirst).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  MusicOnHold: ").Append(MusicOnHold).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OutboundCalleeIdName: ").Append(OutboundCalleeIdName).Append("\n");
            sb.Append("  OutboundCalleeIdNumber: ").Append(OutboundCalleeIdNumber).Append("\n");
            sb.Append("  PresenceId: ").Append(PresenceId).Append("\n");
            sb.Append("  Ringback: ").Append(Ringback).Append("\n");
            sb.Append("  Throttle: ").Append(Throttle).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  Whitelist: ").Append(Whitelist).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Clicktocall);
        }

        /// <summary>
        /// Returns true if Clicktocall instances are equal
        /// </summary>
        /// <param name="input">Instance of Clicktocall to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Clicktocall input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthRequired == input.AuthRequired ||
                    (this.AuthRequired != null &&
                    this.AuthRequired.Equals(input.AuthRequired))
                ) && 
                (
                    this.BypassMedia == input.BypassMedia ||
                    (this.BypassMedia != null &&
                    this.BypassMedia.Equals(input.BypassMedia))
                ) && 
                (
                    this.CallerIdNumber == input.CallerIdNumber ||
                    (this.CallerIdNumber != null &&
                    this.CallerIdNumber.Equals(input.CallerIdNumber))
                ) && 
                (
                    this.CustomApplicationVars == input.CustomApplicationVars ||
                    (this.CustomApplicationVars != null &&
                    this.CustomApplicationVars.Equals(input.CustomApplicationVars))
                ) && 
                (
                    this.CustomSipHeaders == input.CustomSipHeaders ||
                    (this.CustomSipHeaders != null &&
                    this.CustomSipHeaders.Equals(input.CustomSipHeaders))
                ) && 
                (
                    this.DialFirst == input.DialFirst ||
                    (this.DialFirst != null &&
                    this.DialFirst.Equals(input.DialFirst))
                ) && 
                (
                    this.Extension == input.Extension ||
                    (this.Extension != null &&
                    this.Extension.Equals(input.Extension))
                ) && 
                (
                    this.Media == input.Media ||
                    (this.Media != null &&
                    this.Media.Equals(input.Media))
                ) && 
                (
                    this.MusicOnHold == input.MusicOnHold ||
                    (this.MusicOnHold != null &&
                    this.MusicOnHold.Equals(input.MusicOnHold))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OutboundCalleeIdName == input.OutboundCalleeIdName ||
                    (this.OutboundCalleeIdName != null &&
                    this.OutboundCalleeIdName.Equals(input.OutboundCalleeIdName))
                ) && 
                (
                    this.OutboundCalleeIdNumber == input.OutboundCalleeIdNumber ||
                    (this.OutboundCalleeIdNumber != null &&
                    this.OutboundCalleeIdNumber.Equals(input.OutboundCalleeIdNumber))
                ) && 
                (
                    this.PresenceId == input.PresenceId ||
                    (this.PresenceId != null &&
                    this.PresenceId.Equals(input.PresenceId))
                ) && 
                (
                    this.Ringback == input.Ringback ||
                    (this.Ringback != null &&
                    this.Ringback.Equals(input.Ringback))
                ) && 
                (
                    this.Throttle == input.Throttle ||
                    (this.Throttle != null &&
                    this.Throttle.Equals(input.Throttle))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    (this.Timeout != null &&
                    this.Timeout.Equals(input.Timeout))
                ) && 
                (
                    this.Whitelist == input.Whitelist ||
                    this.Whitelist != null &&
                    this.Whitelist.SequenceEqual(input.Whitelist)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthRequired != null)
                    hashCode = hashCode * 59 + this.AuthRequired.GetHashCode();
                if (this.BypassMedia != null)
                    hashCode = hashCode * 59 + this.BypassMedia.GetHashCode();
                if (this.CallerIdNumber != null)
                    hashCode = hashCode * 59 + this.CallerIdNumber.GetHashCode();
                if (this.CustomApplicationVars != null)
                    hashCode = hashCode * 59 + this.CustomApplicationVars.GetHashCode();
                if (this.CustomSipHeaders != null)
                    hashCode = hashCode * 59 + this.CustomSipHeaders.GetHashCode();
                if (this.DialFirst != null)
                    hashCode = hashCode * 59 + this.DialFirst.GetHashCode();
                if (this.Extension != null)
                    hashCode = hashCode * 59 + this.Extension.GetHashCode();
                if (this.Media != null)
                    hashCode = hashCode * 59 + this.Media.GetHashCode();
                if (this.MusicOnHold != null)
                    hashCode = hashCode * 59 + this.MusicOnHold.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OutboundCalleeIdName != null)
                    hashCode = hashCode * 59 + this.OutboundCalleeIdName.GetHashCode();
                if (this.OutboundCalleeIdNumber != null)
                    hashCode = hashCode * 59 + this.OutboundCalleeIdNumber.GetHashCode();
                if (this.PresenceId != null)
                    hashCode = hashCode * 59 + this.PresenceId.GetHashCode();
                if (this.Ringback != null)
                    hashCode = hashCode * 59 + this.Ringback.GetHashCode();
                if (this.Throttle != null)
                    hashCode = hashCode * 59 + this.Throttle.GetHashCode();
                if (this.Timeout != null)
                    hashCode = hashCode * 59 + this.Timeout.GetHashCode();
                if (this.Whitelist != null)
                    hashCode = hashCode * 59 + this.Whitelist.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            yield break;
        }
    }

}
