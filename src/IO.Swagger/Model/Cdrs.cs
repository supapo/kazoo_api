/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Call Detail Records
    /// </summary>
    [DataContract]
    public partial class Cdrs :  IEquatable<Cdrs>, IValidatableObject
    {
        /// <summary>
        /// Direction of the call, relative to the media switch
        /// </summary>
        /// <value>Direction of the call, relative to the media switch</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CallDirectionEnum
        {
            
            /// <summary>
            /// Enum Inbound for value: inbound
            /// </summary>
            [EnumMember(Value = "inbound")]
            Inbound = 1,
            
            /// <summary>
            /// Enum Outbound for value: outbound
            /// </summary>
            [EnumMember(Value = "outbound")]
            Outbound = 2
        }

        /// <summary>
        /// Direction of the call, relative to the media switch
        /// </summary>
        /// <value>Direction of the call, relative to the media switch</value>
        [DataMember(Name="call_direction", EmitDefaultValue=false)]
        public CallDirectionEnum? CallDirection { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Cdrs" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Cdrs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Cdrs" /> class.
        /// </summary>
        /// <param name="appName">The Kazoo application that issued the CDR.</param>
        /// <param name="appVersion">The internal Kazoo version number of the application that issued the CDR.</param>
        /// <param name="billingSeconds">The number of seconds the call leg can be billed for (typically from when the call leg is answered.</param>
        /// <param name="callDirection">Direction of the call, relative to the media switch.</param>
        /// <param name="callId">Unique identifier of the call leg (required).</param>
        /// <param name="calleeIdName">The indicated name of the callee.</param>
        /// <param name="calleeIdNumber">The indicated number of the callee.</param>
        /// <param name="callerIdName">The indicated name of the caller.</param>
        /// <param name="callerIdNumber">The indicated number of the caller.</param>
        /// <param name="customApplicationVars">Any custom-set values.</param>
        /// <param name="customChannelVars">Kazoo-specific key/value pairs set on the channel.</param>
        /// <param name="customSipHeaders">A property list of SIP headers.</param>
        /// <param name="digitsDialed">All the DTMF tones detected on this leg of the call.</param>
        /// <param name="disposition">Who sent the SIP BYE message.</param>
        /// <param name="durationSeconds">The duration of the call leg, in seconds.</param>
        /// <param name="faxBadRows">faxBadRows.</param>
        /// <param name="faxEcmUsed">faxEcmUsed.</param>
        /// <param name="faxResultCode">faxResultCode.</param>
        /// <param name="faxResultText">faxResultText.</param>
        /// <param name="faxSuccess">faxSuccess.</param>
        /// <param name="faxTotalPages">faxTotalPages.</param>
        /// <param name="faxTransferRate">faxTransferRate.</param>
        /// <param name="faxTransferredPages">faxTransferredPages.</param>
        /// <param name="from">Built by Kazoo, depending on direction, to represent the From user.</param>
        /// <param name="fromTag">SIP From TAG.</param>
        /// <param name="fromUri">The From SIP URI.</param>
        /// <param name="hangupCause">The reason for the call leg&#39;s termination.</param>
        /// <param name="hangupCode">The SIP hangup code, if available.</param>
        /// <param name="interactionId">correlating ID among related call legs.</param>
        /// <param name="localSdp">The SDP negotiated by the local agent.</param>
        /// <param name="mediaServer">The hostname of the media server that processed the call.</param>
        /// <param name="node">The ecallmgr which issued the CDR.</param>
        /// <param name="otherLegCallId">If this leg was bridged, the call-id of the opposite leg.</param>
        /// <param name="otherLegCallerIdName">Caller ID name of the bridged leg.</param>
        /// <param name="otherLegCallerIdNumber">Caller ID number of the bridged leg.</param>
        /// <param name="otherLegDestinationNumber">Dialed number of the other leg.</param>
        /// <param name="otherLegDirection">direction of the other leg, relative to the media server.</param>
        /// <param name="presenceId">ID used in NOTIFY SIP messages.</param>
        /// <param name="remoteSdp">The SDP negotiated by the remote agent.</param>
        /// <param name="request">Built by Kazoo this is the processed request URI.</param>
        /// <param name="ringingSeconds">How many seconds the leg was ringing (pre-answer).</param>
        /// <param name="timestamp">UTC timestamp, in Gregorian seconds, of when the CDR was generated.</param>
        /// <param name="to">Built by Kazoo, depending on direction, to represent the To user.</param>
        /// <param name="toTag">SIP TO Tag.</param>
        /// <param name="toUri">The To SIP URI.</param>
        /// <param name="userAgent">User agent header from SIP packet.</param>
        public Cdrs(string appName = default(string), string appVersion = default(string), int? billingSeconds = default(int?), CallDirectionEnum? callDirection = default(CallDirectionEnum?), string callId = default(string), string calleeIdName = default(string), string calleeIdNumber = default(string), string callerIdName = default(string), string callerIdNumber = default(string), Object customApplicationVars = default(Object), Dictionary<string, string> customChannelVars = default(Dictionary<string, string>), Object customSipHeaders = default(Object), string digitsDialed = default(string), string disposition = default(string), int? durationSeconds = default(int?), string faxBadRows = default(string), string faxEcmUsed = default(string), string faxResultCode = default(string), string faxResultText = default(string), string faxSuccess = default(string), string faxTotalPages = default(string), string faxTransferRate = default(string), string faxTransferredPages = default(string), string from = default(string), string fromTag = default(string), string fromUri = default(string), string hangupCause = default(string), string hangupCode = default(string), string interactionId = default(string), string localSdp = default(string), string mediaServer = default(string), string node = default(string), string otherLegCallId = default(string), string otherLegCallerIdName = default(string), string otherLegCallerIdNumber = default(string), string otherLegDestinationNumber = default(string), string otherLegDirection = default(string), string presenceId = default(string), string remoteSdp = default(string), string request = default(string), int? ringingSeconds = default(int?), int? timestamp = default(int?), string to = default(string), string toTag = default(string), string toUri = default(string), string userAgent = default(string))
        {
            // to ensure "callId" is required (not null)
            if (callId == null)
            {
                throw new InvalidDataException("callId is a required property for Cdrs and cannot be null");
            }
            else
            {
                this.CallId = callId;
            }
            this.AppName = appName;
            this.AppVersion = appVersion;
            this.BillingSeconds = billingSeconds;
            this.CallDirection = callDirection;
            this.CalleeIdName = calleeIdName;
            this.CalleeIdNumber = calleeIdNumber;
            this.CallerIdName = callerIdName;
            this.CallerIdNumber = callerIdNumber;
            this.CustomApplicationVars = customApplicationVars;
            this.CustomChannelVars = customChannelVars;
            this.CustomSipHeaders = customSipHeaders;
            this.DigitsDialed = digitsDialed;
            this.Disposition = disposition;
            this.DurationSeconds = durationSeconds;
            this.FaxBadRows = faxBadRows;
            this.FaxEcmUsed = faxEcmUsed;
            this.FaxResultCode = faxResultCode;
            this.FaxResultText = faxResultText;
            this.FaxSuccess = faxSuccess;
            this.FaxTotalPages = faxTotalPages;
            this.FaxTransferRate = faxTransferRate;
            this.FaxTransferredPages = faxTransferredPages;
            this.From = from;
            this.FromTag = fromTag;
            this.FromUri = fromUri;
            this.HangupCause = hangupCause;
            this.HangupCode = hangupCode;
            this.InteractionId = interactionId;
            this.LocalSdp = localSdp;
            this.MediaServer = mediaServer;
            this.Node = node;
            this.OtherLegCallId = otherLegCallId;
            this.OtherLegCallerIdName = otherLegCallerIdName;
            this.OtherLegCallerIdNumber = otherLegCallerIdNumber;
            this.OtherLegDestinationNumber = otherLegDestinationNumber;
            this.OtherLegDirection = otherLegDirection;
            this.PresenceId = presenceId;
            this.RemoteSdp = remoteSdp;
            this.Request = request;
            this.RingingSeconds = ringingSeconds;
            this.Timestamp = timestamp;
            this.To = to;
            this.ToTag = toTag;
            this.ToUri = toUri;
            this.UserAgent = userAgent;
        }
        
        /// <summary>
        /// The Kazoo application that issued the CDR
        /// </summary>
        /// <value>The Kazoo application that issued the CDR</value>
        [DataMember(Name="app_name", EmitDefaultValue=false)]
        public string AppName { get; set; }

        /// <summary>
        /// The internal Kazoo version number of the application that issued the CDR
        /// </summary>
        /// <value>The internal Kazoo version number of the application that issued the CDR</value>
        [DataMember(Name="app_version", EmitDefaultValue=false)]
        public string AppVersion { get; set; }

        /// <summary>
        /// The number of seconds the call leg can be billed for (typically from when the call leg is answered
        /// </summary>
        /// <value>The number of seconds the call leg can be billed for (typically from when the call leg is answered</value>
        [DataMember(Name="billing_seconds", EmitDefaultValue=false)]
        public int? BillingSeconds { get; set; }


        /// <summary>
        /// Unique identifier of the call leg
        /// </summary>
        /// <value>Unique identifier of the call leg</value>
        [DataMember(Name="call_id", EmitDefaultValue=false)]
        public string CallId { get; set; }

        /// <summary>
        /// The indicated name of the callee
        /// </summary>
        /// <value>The indicated name of the callee</value>
        [DataMember(Name="callee_id_name", EmitDefaultValue=false)]
        public string CalleeIdName { get; set; }

        /// <summary>
        /// The indicated number of the callee
        /// </summary>
        /// <value>The indicated number of the callee</value>
        [DataMember(Name="callee_id_number", EmitDefaultValue=false)]
        public string CalleeIdNumber { get; set; }

        /// <summary>
        /// The indicated name of the caller
        /// </summary>
        /// <value>The indicated name of the caller</value>
        [DataMember(Name="caller_id_name", EmitDefaultValue=false)]
        public string CallerIdName { get; set; }

        /// <summary>
        /// The indicated number of the caller
        /// </summary>
        /// <value>The indicated number of the caller</value>
        [DataMember(Name="caller_id_number", EmitDefaultValue=false)]
        public string CallerIdNumber { get; set; }

        /// <summary>
        /// Any custom-set values
        /// </summary>
        /// <value>Any custom-set values</value>
        [DataMember(Name="custom_application_vars", EmitDefaultValue=false)]
        public Object CustomApplicationVars { get; set; }

        /// <summary>
        /// Kazoo-specific key/value pairs set on the channel
        /// </summary>
        /// <value>Kazoo-specific key/value pairs set on the channel</value>
        [DataMember(Name="custom_channel_vars", EmitDefaultValue=false)]
        public Dictionary<string, string> CustomChannelVars { get; set; }

        /// <summary>
        /// A property list of SIP headers
        /// </summary>
        /// <value>A property list of SIP headers</value>
        [DataMember(Name="custom_sip_headers", EmitDefaultValue=false)]
        public Object CustomSipHeaders { get; set; }

        /// <summary>
        /// All the DTMF tones detected on this leg of the call
        /// </summary>
        /// <value>All the DTMF tones detected on this leg of the call</value>
        [DataMember(Name="digits_dialed", EmitDefaultValue=false)]
        public string DigitsDialed { get; set; }

        /// <summary>
        /// Who sent the SIP BYE message
        /// </summary>
        /// <value>Who sent the SIP BYE message</value>
        [DataMember(Name="disposition", EmitDefaultValue=false)]
        public string Disposition { get; set; }

        /// <summary>
        /// The duration of the call leg, in seconds
        /// </summary>
        /// <value>The duration of the call leg, in seconds</value>
        [DataMember(Name="duration_seconds", EmitDefaultValue=false)]
        public int? DurationSeconds { get; set; }

        /// <summary>
        /// Gets or Sets FaxBadRows
        /// </summary>
        [DataMember(Name="fax_bad_rows", EmitDefaultValue=false)]
        public string FaxBadRows { get; set; }

        /// <summary>
        /// Gets or Sets FaxEcmUsed
        /// </summary>
        [DataMember(Name="fax_ecm_used", EmitDefaultValue=false)]
        public string FaxEcmUsed { get; set; }

        /// <summary>
        /// Gets or Sets FaxResultCode
        /// </summary>
        [DataMember(Name="fax_result_code", EmitDefaultValue=false)]
        public string FaxResultCode { get; set; }

        /// <summary>
        /// Gets or Sets FaxResultText
        /// </summary>
        [DataMember(Name="fax_result_text", EmitDefaultValue=false)]
        public string FaxResultText { get; set; }

        /// <summary>
        /// Gets or Sets FaxSuccess
        /// </summary>
        [DataMember(Name="fax_success", EmitDefaultValue=false)]
        public string FaxSuccess { get; set; }

        /// <summary>
        /// Gets or Sets FaxTotalPages
        /// </summary>
        [DataMember(Name="fax_total_pages", EmitDefaultValue=false)]
        public string FaxTotalPages { get; set; }

        /// <summary>
        /// Gets or Sets FaxTransferRate
        /// </summary>
        [DataMember(Name="fax_transfer_rate", EmitDefaultValue=false)]
        public string FaxTransferRate { get; set; }

        /// <summary>
        /// Gets or Sets FaxTransferredPages
        /// </summary>
        [DataMember(Name="fax_transferred_pages", EmitDefaultValue=false)]
        public string FaxTransferredPages { get; set; }

        /// <summary>
        /// Built by Kazoo, depending on direction, to represent the From user
        /// </summary>
        /// <value>Built by Kazoo, depending on direction, to represent the From user</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// SIP From TAG
        /// </summary>
        /// <value>SIP From TAG</value>
        [DataMember(Name="from_tag", EmitDefaultValue=false)]
        public string FromTag { get; set; }

        /// <summary>
        /// The From SIP URI
        /// </summary>
        /// <value>The From SIP URI</value>
        [DataMember(Name="from_uri", EmitDefaultValue=false)]
        public string FromUri { get; set; }

        /// <summary>
        /// The reason for the call leg&#39;s termination
        /// </summary>
        /// <value>The reason for the call leg&#39;s termination</value>
        [DataMember(Name="hangup_cause", EmitDefaultValue=false)]
        public string HangupCause { get; set; }

        /// <summary>
        /// The SIP hangup code, if available
        /// </summary>
        /// <value>The SIP hangup code, if available</value>
        [DataMember(Name="hangup_code", EmitDefaultValue=false)]
        public string HangupCode { get; set; }

        /// <summary>
        /// correlating ID among related call legs
        /// </summary>
        /// <value>correlating ID among related call legs</value>
        [DataMember(Name="interaction_id", EmitDefaultValue=false)]
        public string InteractionId { get; set; }

        /// <summary>
        /// The SDP negotiated by the local agent
        /// </summary>
        /// <value>The SDP negotiated by the local agent</value>
        [DataMember(Name="local_sdp", EmitDefaultValue=false)]
        public string LocalSdp { get; set; }

        /// <summary>
        /// The hostname of the media server that processed the call
        /// </summary>
        /// <value>The hostname of the media server that processed the call</value>
        [DataMember(Name="media_server", EmitDefaultValue=false)]
        public string MediaServer { get; set; }

        /// <summary>
        /// The ecallmgr which issued the CDR
        /// </summary>
        /// <value>The ecallmgr which issued the CDR</value>
        [DataMember(Name="node", EmitDefaultValue=false)]
        public string Node { get; set; }

        /// <summary>
        /// If this leg was bridged, the call-id of the opposite leg
        /// </summary>
        /// <value>If this leg was bridged, the call-id of the opposite leg</value>
        [DataMember(Name="other_leg_call_id", EmitDefaultValue=false)]
        public string OtherLegCallId { get; set; }

        /// <summary>
        /// Caller ID name of the bridged leg
        /// </summary>
        /// <value>Caller ID name of the bridged leg</value>
        [DataMember(Name="other_leg_caller_id_name", EmitDefaultValue=false)]
        public string OtherLegCallerIdName { get; set; }

        /// <summary>
        /// Caller ID number of the bridged leg
        /// </summary>
        /// <value>Caller ID number of the bridged leg</value>
        [DataMember(Name="other_leg_caller_id_number", EmitDefaultValue=false)]
        public string OtherLegCallerIdNumber { get; set; }

        /// <summary>
        /// Dialed number of the other leg
        /// </summary>
        /// <value>Dialed number of the other leg</value>
        [DataMember(Name="other_leg_destination_number", EmitDefaultValue=false)]
        public string OtherLegDestinationNumber { get; set; }

        /// <summary>
        /// direction of the other leg, relative to the media server
        /// </summary>
        /// <value>direction of the other leg, relative to the media server</value>
        [DataMember(Name="other_leg_direction", EmitDefaultValue=false)]
        public string OtherLegDirection { get; set; }

        /// <summary>
        /// ID used in NOTIFY SIP messages
        /// </summary>
        /// <value>ID used in NOTIFY SIP messages</value>
        [DataMember(Name="presence_id", EmitDefaultValue=false)]
        public string PresenceId { get; set; }

        /// <summary>
        /// The SDP negotiated by the remote agent
        /// </summary>
        /// <value>The SDP negotiated by the remote agent</value>
        [DataMember(Name="remote_sdp", EmitDefaultValue=false)]
        public string RemoteSdp { get; set; }

        /// <summary>
        /// Built by Kazoo this is the processed request URI
        /// </summary>
        /// <value>Built by Kazoo this is the processed request URI</value>
        [DataMember(Name="request", EmitDefaultValue=false)]
        public string Request { get; set; }

        /// <summary>
        /// How many seconds the leg was ringing (pre-answer)
        /// </summary>
        /// <value>How many seconds the leg was ringing (pre-answer)</value>
        [DataMember(Name="ringing_seconds", EmitDefaultValue=false)]
        public int? RingingSeconds { get; set; }

        /// <summary>
        /// UTC timestamp, in Gregorian seconds, of when the CDR was generated
        /// </summary>
        /// <value>UTC timestamp, in Gregorian seconds, of when the CDR was generated</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public int? Timestamp { get; set; }

        /// <summary>
        /// Built by Kazoo, depending on direction, to represent the To user
        /// </summary>
        /// <value>Built by Kazoo, depending on direction, to represent the To user</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// SIP TO Tag
        /// </summary>
        /// <value>SIP TO Tag</value>
        [DataMember(Name="to_tag", EmitDefaultValue=false)]
        public string ToTag { get; set; }

        /// <summary>
        /// The To SIP URI
        /// </summary>
        /// <value>The To SIP URI</value>
        [DataMember(Name="to_uri", EmitDefaultValue=false)]
        public string ToUri { get; set; }

        /// <summary>
        /// User agent header from SIP packet
        /// </summary>
        /// <value>User agent header from SIP packet</value>
        [DataMember(Name="user_agent", EmitDefaultValue=false)]
        public string UserAgent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Cdrs {\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  AppVersion: ").Append(AppVersion).Append("\n");
            sb.Append("  BillingSeconds: ").Append(BillingSeconds).Append("\n");
            sb.Append("  CallDirection: ").Append(CallDirection).Append("\n");
            sb.Append("  CallId: ").Append(CallId).Append("\n");
            sb.Append("  CalleeIdName: ").Append(CalleeIdName).Append("\n");
            sb.Append("  CalleeIdNumber: ").Append(CalleeIdNumber).Append("\n");
            sb.Append("  CallerIdName: ").Append(CallerIdName).Append("\n");
            sb.Append("  CallerIdNumber: ").Append(CallerIdNumber).Append("\n");
            sb.Append("  CustomApplicationVars: ").Append(CustomApplicationVars).Append("\n");
            sb.Append("  CustomChannelVars: ").Append(CustomChannelVars).Append("\n");
            sb.Append("  CustomSipHeaders: ").Append(CustomSipHeaders).Append("\n");
            sb.Append("  DigitsDialed: ").Append(DigitsDialed).Append("\n");
            sb.Append("  Disposition: ").Append(Disposition).Append("\n");
            sb.Append("  DurationSeconds: ").Append(DurationSeconds).Append("\n");
            sb.Append("  FaxBadRows: ").Append(FaxBadRows).Append("\n");
            sb.Append("  FaxEcmUsed: ").Append(FaxEcmUsed).Append("\n");
            sb.Append("  FaxResultCode: ").Append(FaxResultCode).Append("\n");
            sb.Append("  FaxResultText: ").Append(FaxResultText).Append("\n");
            sb.Append("  FaxSuccess: ").Append(FaxSuccess).Append("\n");
            sb.Append("  FaxTotalPages: ").Append(FaxTotalPages).Append("\n");
            sb.Append("  FaxTransferRate: ").Append(FaxTransferRate).Append("\n");
            sb.Append("  FaxTransferredPages: ").Append(FaxTransferredPages).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  FromTag: ").Append(FromTag).Append("\n");
            sb.Append("  FromUri: ").Append(FromUri).Append("\n");
            sb.Append("  HangupCause: ").Append(HangupCause).Append("\n");
            sb.Append("  HangupCode: ").Append(HangupCode).Append("\n");
            sb.Append("  InteractionId: ").Append(InteractionId).Append("\n");
            sb.Append("  LocalSdp: ").Append(LocalSdp).Append("\n");
            sb.Append("  MediaServer: ").Append(MediaServer).Append("\n");
            sb.Append("  Node: ").Append(Node).Append("\n");
            sb.Append("  OtherLegCallId: ").Append(OtherLegCallId).Append("\n");
            sb.Append("  OtherLegCallerIdName: ").Append(OtherLegCallerIdName).Append("\n");
            sb.Append("  OtherLegCallerIdNumber: ").Append(OtherLegCallerIdNumber).Append("\n");
            sb.Append("  OtherLegDestinationNumber: ").Append(OtherLegDestinationNumber).Append("\n");
            sb.Append("  OtherLegDirection: ").Append(OtherLegDirection).Append("\n");
            sb.Append("  PresenceId: ").Append(PresenceId).Append("\n");
            sb.Append("  RemoteSdp: ").Append(RemoteSdp).Append("\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("  RingingSeconds: ").Append(RingingSeconds).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  ToTag: ").Append(ToTag).Append("\n");
            sb.Append("  ToUri: ").Append(ToUri).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Cdrs);
        }

        /// <summary>
        /// Returns true if Cdrs instances are equal
        /// </summary>
        /// <param name="input">Instance of Cdrs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cdrs input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppName == input.AppName ||
                    (this.AppName != null &&
                    this.AppName.Equals(input.AppName))
                ) && 
                (
                    this.AppVersion == input.AppVersion ||
                    (this.AppVersion != null &&
                    this.AppVersion.Equals(input.AppVersion))
                ) && 
                (
                    this.BillingSeconds == input.BillingSeconds ||
                    (this.BillingSeconds != null &&
                    this.BillingSeconds.Equals(input.BillingSeconds))
                ) && 
                (
                    this.CallDirection == input.CallDirection ||
                    (this.CallDirection != null &&
                    this.CallDirection.Equals(input.CallDirection))
                ) && 
                (
                    this.CallId == input.CallId ||
                    (this.CallId != null &&
                    this.CallId.Equals(input.CallId))
                ) && 
                (
                    this.CalleeIdName == input.CalleeIdName ||
                    (this.CalleeIdName != null &&
                    this.CalleeIdName.Equals(input.CalleeIdName))
                ) && 
                (
                    this.CalleeIdNumber == input.CalleeIdNumber ||
                    (this.CalleeIdNumber != null &&
                    this.CalleeIdNumber.Equals(input.CalleeIdNumber))
                ) && 
                (
                    this.CallerIdName == input.CallerIdName ||
                    (this.CallerIdName != null &&
                    this.CallerIdName.Equals(input.CallerIdName))
                ) && 
                (
                    this.CallerIdNumber == input.CallerIdNumber ||
                    (this.CallerIdNumber != null &&
                    this.CallerIdNumber.Equals(input.CallerIdNumber))
                ) && 
                (
                    this.CustomApplicationVars == input.CustomApplicationVars ||
                    (this.CustomApplicationVars != null &&
                    this.CustomApplicationVars.Equals(input.CustomApplicationVars))
                ) && 
                (
                    this.CustomChannelVars == input.CustomChannelVars ||
                    this.CustomChannelVars != null &&
                    this.CustomChannelVars.SequenceEqual(input.CustomChannelVars)
                ) && 
                (
                    this.CustomSipHeaders == input.CustomSipHeaders ||
                    (this.CustomSipHeaders != null &&
                    this.CustomSipHeaders.Equals(input.CustomSipHeaders))
                ) && 
                (
                    this.DigitsDialed == input.DigitsDialed ||
                    (this.DigitsDialed != null &&
                    this.DigitsDialed.Equals(input.DigitsDialed))
                ) && 
                (
                    this.Disposition == input.Disposition ||
                    (this.Disposition != null &&
                    this.Disposition.Equals(input.Disposition))
                ) && 
                (
                    this.DurationSeconds == input.DurationSeconds ||
                    (this.DurationSeconds != null &&
                    this.DurationSeconds.Equals(input.DurationSeconds))
                ) && 
                (
                    this.FaxBadRows == input.FaxBadRows ||
                    (this.FaxBadRows != null &&
                    this.FaxBadRows.Equals(input.FaxBadRows))
                ) && 
                (
                    this.FaxEcmUsed == input.FaxEcmUsed ||
                    (this.FaxEcmUsed != null &&
                    this.FaxEcmUsed.Equals(input.FaxEcmUsed))
                ) && 
                (
                    this.FaxResultCode == input.FaxResultCode ||
                    (this.FaxResultCode != null &&
                    this.FaxResultCode.Equals(input.FaxResultCode))
                ) && 
                (
                    this.FaxResultText == input.FaxResultText ||
                    (this.FaxResultText != null &&
                    this.FaxResultText.Equals(input.FaxResultText))
                ) && 
                (
                    this.FaxSuccess == input.FaxSuccess ||
                    (this.FaxSuccess != null &&
                    this.FaxSuccess.Equals(input.FaxSuccess))
                ) && 
                (
                    this.FaxTotalPages == input.FaxTotalPages ||
                    (this.FaxTotalPages != null &&
                    this.FaxTotalPages.Equals(input.FaxTotalPages))
                ) && 
                (
                    this.FaxTransferRate == input.FaxTransferRate ||
                    (this.FaxTransferRate != null &&
                    this.FaxTransferRate.Equals(input.FaxTransferRate))
                ) && 
                (
                    this.FaxTransferredPages == input.FaxTransferredPages ||
                    (this.FaxTransferredPages != null &&
                    this.FaxTransferredPages.Equals(input.FaxTransferredPages))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.FromTag == input.FromTag ||
                    (this.FromTag != null &&
                    this.FromTag.Equals(input.FromTag))
                ) && 
                (
                    this.FromUri == input.FromUri ||
                    (this.FromUri != null &&
                    this.FromUri.Equals(input.FromUri))
                ) && 
                (
                    this.HangupCause == input.HangupCause ||
                    (this.HangupCause != null &&
                    this.HangupCause.Equals(input.HangupCause))
                ) && 
                (
                    this.HangupCode == input.HangupCode ||
                    (this.HangupCode != null &&
                    this.HangupCode.Equals(input.HangupCode))
                ) && 
                (
                    this.InteractionId == input.InteractionId ||
                    (this.InteractionId != null &&
                    this.InteractionId.Equals(input.InteractionId))
                ) && 
                (
                    this.LocalSdp == input.LocalSdp ||
                    (this.LocalSdp != null &&
                    this.LocalSdp.Equals(input.LocalSdp))
                ) && 
                (
                    this.MediaServer == input.MediaServer ||
                    (this.MediaServer != null &&
                    this.MediaServer.Equals(input.MediaServer))
                ) && 
                (
                    this.Node == input.Node ||
                    (this.Node != null &&
                    this.Node.Equals(input.Node))
                ) && 
                (
                    this.OtherLegCallId == input.OtherLegCallId ||
                    (this.OtherLegCallId != null &&
                    this.OtherLegCallId.Equals(input.OtherLegCallId))
                ) && 
                (
                    this.OtherLegCallerIdName == input.OtherLegCallerIdName ||
                    (this.OtherLegCallerIdName != null &&
                    this.OtherLegCallerIdName.Equals(input.OtherLegCallerIdName))
                ) && 
                (
                    this.OtherLegCallerIdNumber == input.OtherLegCallerIdNumber ||
                    (this.OtherLegCallerIdNumber != null &&
                    this.OtherLegCallerIdNumber.Equals(input.OtherLegCallerIdNumber))
                ) && 
                (
                    this.OtherLegDestinationNumber == input.OtherLegDestinationNumber ||
                    (this.OtherLegDestinationNumber != null &&
                    this.OtherLegDestinationNumber.Equals(input.OtherLegDestinationNumber))
                ) && 
                (
                    this.OtherLegDirection == input.OtherLegDirection ||
                    (this.OtherLegDirection != null &&
                    this.OtherLegDirection.Equals(input.OtherLegDirection))
                ) && 
                (
                    this.PresenceId == input.PresenceId ||
                    (this.PresenceId != null &&
                    this.PresenceId.Equals(input.PresenceId))
                ) && 
                (
                    this.RemoteSdp == input.RemoteSdp ||
                    (this.RemoteSdp != null &&
                    this.RemoteSdp.Equals(input.RemoteSdp))
                ) && 
                (
                    this.Request == input.Request ||
                    (this.Request != null &&
                    this.Request.Equals(input.Request))
                ) && 
                (
                    this.RingingSeconds == input.RingingSeconds ||
                    (this.RingingSeconds != null &&
                    this.RingingSeconds.Equals(input.RingingSeconds))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.ToTag == input.ToTag ||
                    (this.ToTag != null &&
                    this.ToTag.Equals(input.ToTag))
                ) && 
                (
                    this.ToUri == input.ToUri ||
                    (this.ToUri != null &&
                    this.ToUri.Equals(input.ToUri))
                ) && 
                (
                    this.UserAgent == input.UserAgent ||
                    (this.UserAgent != null &&
                    this.UserAgent.Equals(input.UserAgent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppName != null)
                    hashCode = hashCode * 59 + this.AppName.GetHashCode();
                if (this.AppVersion != null)
                    hashCode = hashCode * 59 + this.AppVersion.GetHashCode();
                if (this.BillingSeconds != null)
                    hashCode = hashCode * 59 + this.BillingSeconds.GetHashCode();
                if (this.CallDirection != null)
                    hashCode = hashCode * 59 + this.CallDirection.GetHashCode();
                if (this.CallId != null)
                    hashCode = hashCode * 59 + this.CallId.GetHashCode();
                if (this.CalleeIdName != null)
                    hashCode = hashCode * 59 + this.CalleeIdName.GetHashCode();
                if (this.CalleeIdNumber != null)
                    hashCode = hashCode * 59 + this.CalleeIdNumber.GetHashCode();
                if (this.CallerIdName != null)
                    hashCode = hashCode * 59 + this.CallerIdName.GetHashCode();
                if (this.CallerIdNumber != null)
                    hashCode = hashCode * 59 + this.CallerIdNumber.GetHashCode();
                if (this.CustomApplicationVars != null)
                    hashCode = hashCode * 59 + this.CustomApplicationVars.GetHashCode();
                if (this.CustomChannelVars != null)
                    hashCode = hashCode * 59 + this.CustomChannelVars.GetHashCode();
                if (this.CustomSipHeaders != null)
                    hashCode = hashCode * 59 + this.CustomSipHeaders.GetHashCode();
                if (this.DigitsDialed != null)
                    hashCode = hashCode * 59 + this.DigitsDialed.GetHashCode();
                if (this.Disposition != null)
                    hashCode = hashCode * 59 + this.Disposition.GetHashCode();
                if (this.DurationSeconds != null)
                    hashCode = hashCode * 59 + this.DurationSeconds.GetHashCode();
                if (this.FaxBadRows != null)
                    hashCode = hashCode * 59 + this.FaxBadRows.GetHashCode();
                if (this.FaxEcmUsed != null)
                    hashCode = hashCode * 59 + this.FaxEcmUsed.GetHashCode();
                if (this.FaxResultCode != null)
                    hashCode = hashCode * 59 + this.FaxResultCode.GetHashCode();
                if (this.FaxResultText != null)
                    hashCode = hashCode * 59 + this.FaxResultText.GetHashCode();
                if (this.FaxSuccess != null)
                    hashCode = hashCode * 59 + this.FaxSuccess.GetHashCode();
                if (this.FaxTotalPages != null)
                    hashCode = hashCode * 59 + this.FaxTotalPages.GetHashCode();
                if (this.FaxTransferRate != null)
                    hashCode = hashCode * 59 + this.FaxTransferRate.GetHashCode();
                if (this.FaxTransferredPages != null)
                    hashCode = hashCode * 59 + this.FaxTransferredPages.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.FromTag != null)
                    hashCode = hashCode * 59 + this.FromTag.GetHashCode();
                if (this.FromUri != null)
                    hashCode = hashCode * 59 + this.FromUri.GetHashCode();
                if (this.HangupCause != null)
                    hashCode = hashCode * 59 + this.HangupCause.GetHashCode();
                if (this.HangupCode != null)
                    hashCode = hashCode * 59 + this.HangupCode.GetHashCode();
                if (this.InteractionId != null)
                    hashCode = hashCode * 59 + this.InteractionId.GetHashCode();
                if (this.LocalSdp != null)
                    hashCode = hashCode * 59 + this.LocalSdp.GetHashCode();
                if (this.MediaServer != null)
                    hashCode = hashCode * 59 + this.MediaServer.GetHashCode();
                if (this.Node != null)
                    hashCode = hashCode * 59 + this.Node.GetHashCode();
                if (this.OtherLegCallId != null)
                    hashCode = hashCode * 59 + this.OtherLegCallId.GetHashCode();
                if (this.OtherLegCallerIdName != null)
                    hashCode = hashCode * 59 + this.OtherLegCallerIdName.GetHashCode();
                if (this.OtherLegCallerIdNumber != null)
                    hashCode = hashCode * 59 + this.OtherLegCallerIdNumber.GetHashCode();
                if (this.OtherLegDestinationNumber != null)
                    hashCode = hashCode * 59 + this.OtherLegDestinationNumber.GetHashCode();
                if (this.OtherLegDirection != null)
                    hashCode = hashCode * 59 + this.OtherLegDirection.GetHashCode();
                if (this.PresenceId != null)
                    hashCode = hashCode * 59 + this.PresenceId.GetHashCode();
                if (this.RemoteSdp != null)
                    hashCode = hashCode * 59 + this.RemoteSdp.GetHashCode();
                if (this.Request != null)
                    hashCode = hashCode * 59 + this.Request.GetHashCode();
                if (this.RingingSeconds != null)
                    hashCode = hashCode * 59 + this.RingingSeconds.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.ToTag != null)
                    hashCode = hashCode * 59 + this.ToTag.GetHashCode();
                if (this.ToUri != null)
                    hashCode = hashCode * 59 + this.ToUri.GetHashCode();
                if (this.UserAgent != null)
                    hashCode = hashCode * 59 + this.UserAgent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
