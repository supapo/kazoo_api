/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Call flows describe steps to take in order to process a phone call. They are trees of information related to a phone call such as \&quot;answer, play file, record file\&quot; etc. that are logically grouped together and ordered.
    /// </summary>
    [DataContract]
    public partial class Callflows :  IEquatable<Callflows>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Callflows" /> class.
        /// </summary>
        /// <param name="featurecode">featurecode.</param>
        /// <param name="flags">Flags set by external applications.</param>
        /// <param name="flow">A callflow node defines a module to execute, data to provide to that module, and zero or more children to branch to.</param>
        /// <param name="metaflow">Actions applied to a call outside of the normal callflow, initiated by the caller(s).</param>
        /// <param name="numbers">A list of static numbers that the callflow should execute for.</param>
        /// <param name="patterns">A list of regular expressions that the callflow should execute for, with optional capture groups.</param>
        public Callflows(CallflowsFeaturecode featurecode = default(CallflowsFeaturecode), List<string> flags = default(List<string>), CallflowsAction flow = default(CallflowsAction), Metaflows metaflow = default(Metaflows), List<string> numbers = default(List<string>), List<string> patterns = default(List<string>))
        {
            this.Featurecode = featurecode;
            this.Flags = flags;
            this.Flow = flow;
            this.Metaflow = metaflow;
            this.Numbers = numbers;
            this.Patterns = patterns;
        }
        
        /// <summary>
        /// Gets or Sets Featurecode
        /// </summary>
        [DataMember(Name="featurecode", EmitDefaultValue=false)]
        public CallflowsFeaturecode Featurecode { get; set; }

        /// <summary>
        /// Flags set by external applications
        /// </summary>
        /// <value>Flags set by external applications</value>
        [DataMember(Name="flags", EmitDefaultValue=false)]
        public List<string> Flags { get; set; }

        /// <summary>
        /// A callflow node defines a module to execute, data to provide to that module, and zero or more children to branch to
        /// </summary>
        /// <value>A callflow node defines a module to execute, data to provide to that module, and zero or more children to branch to</value>
        [DataMember(Name="flow", EmitDefaultValue=false)]
        public CallflowsAction Flow { get; set; }

        /// <summary>
        /// Actions applied to a call outside of the normal callflow, initiated by the caller(s)
        /// </summary>
        /// <value>Actions applied to a call outside of the normal callflow, initiated by the caller(s)</value>
        [DataMember(Name="metaflow", EmitDefaultValue=false)]
        public Metaflows Metaflow { get; set; }

        /// <summary>
        /// A list of static numbers that the callflow should execute for
        /// </summary>
        /// <value>A list of static numbers that the callflow should execute for</value>
        [DataMember(Name="numbers", EmitDefaultValue=false)]
        public List<string> Numbers { get; set; }

        /// <summary>
        /// A list of regular expressions that the callflow should execute for, with optional capture groups
        /// </summary>
        /// <value>A list of regular expressions that the callflow should execute for, with optional capture groups</value>
        [DataMember(Name="patterns", EmitDefaultValue=false)]
        public List<string> Patterns { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Callflows {\n");
            sb.Append("  Featurecode: ").Append(Featurecode).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  Flow: ").Append(Flow).Append("\n");
            sb.Append("  Metaflow: ").Append(Metaflow).Append("\n");
            sb.Append("  Numbers: ").Append(Numbers).Append("\n");
            sb.Append("  Patterns: ").Append(Patterns).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Callflows);
        }

        /// <summary>
        /// Returns true if Callflows instances are equal
        /// </summary>
        /// <param name="input">Instance of Callflows to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Callflows input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Featurecode == input.Featurecode ||
                    (this.Featurecode != null &&
                    this.Featurecode.Equals(input.Featurecode))
                ) && 
                (
                    this.Flags == input.Flags ||
                    this.Flags != null &&
                    this.Flags.SequenceEqual(input.Flags)
                ) && 
                (
                    this.Flow == input.Flow ||
                    (this.Flow != null &&
                    this.Flow.Equals(input.Flow))
                ) && 
                (
                    this.Metaflow == input.Metaflow ||
                    (this.Metaflow != null &&
                    this.Metaflow.Equals(input.Metaflow))
                ) && 
                (
                    this.Numbers == input.Numbers ||
                    this.Numbers != null &&
                    this.Numbers.SequenceEqual(input.Numbers)
                ) && 
                (
                    this.Patterns == input.Patterns ||
                    this.Patterns != null &&
                    this.Patterns.SequenceEqual(input.Patterns)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Featurecode != null)
                    hashCode = hashCode * 59 + this.Featurecode.GetHashCode();
                if (this.Flags != null)
                    hashCode = hashCode * 59 + this.Flags.GetHashCode();
                if (this.Flow != null)
                    hashCode = hashCode * 59 + this.Flow.GetHashCode();
                if (this.Metaflow != null)
                    hashCode = hashCode * 59 + this.Metaflow.GetHashCode();
                if (this.Numbers != null)
                    hashCode = hashCode * 59 + this.Numbers.GetHashCode();
                if (this.Patterns != null)
                    hashCode = hashCode * 59 + this.Patterns.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
