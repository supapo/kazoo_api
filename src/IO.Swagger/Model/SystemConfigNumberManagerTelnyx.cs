/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schema for number_manager.telnyx system_config
    /// </summary>
    [DataContract]
    public partial class SystemConfigNumberManagerTelnyx :  IEquatable<SystemConfigNumberManagerTelnyx>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemConfigNumberManagerTelnyx" /> class.
        /// </summary>
        /// <param name="debug">number_manager.telnyx debug (default to false).</param>
        /// <param name="enableProvisioning">number_manager.telnyx enable provisioning (default to true).</param>
        /// <param name="monthlyRecurringCost">number_manager.telnyx monthly recurring cost.</param>
        /// <param name="sandboxProvisioning">number_manager.telnyx sandbox provisioning (default to false).</param>
        /// <param name="shouldFilterRates">should search results be filtered based on configured allowed cost? (default to false).</param>
        /// <param name="shouldKeepBestEffort">should search results also contain &#39;best effort&#39; results? (default to false).</param>
        /// <param name="token">number_manager.telnyx token.</param>
        /// <param name="upfrontCost">allowed upfront cost when acquiring number.</param>
        /// <param name="user">number_manager.telnyx user.</param>
        public SystemConfigNumberManagerTelnyx(bool? debug = false, bool? enableProvisioning = true, decimal? monthlyRecurringCost = default(decimal?), bool? sandboxProvisioning = false, bool? shouldFilterRates = false, bool? shouldKeepBestEffort = false, string token = default(string), decimal? upfrontCost = default(decimal?), string user = default(string))
        {
            // use default value if no "debug" provided
            if (debug == null)
            {
                this.Debug = false;
            }
            else
            {
                this.Debug = debug;
            }
            // use default value if no "enableProvisioning" provided
            if (enableProvisioning == null)
            {
                this.EnableProvisioning = true;
            }
            else
            {
                this.EnableProvisioning = enableProvisioning;
            }
            this.MonthlyRecurringCost = monthlyRecurringCost;
            // use default value if no "sandboxProvisioning" provided
            if (sandboxProvisioning == null)
            {
                this.SandboxProvisioning = false;
            }
            else
            {
                this.SandboxProvisioning = sandboxProvisioning;
            }
            // use default value if no "shouldFilterRates" provided
            if (shouldFilterRates == null)
            {
                this.ShouldFilterRates = false;
            }
            else
            {
                this.ShouldFilterRates = shouldFilterRates;
            }
            // use default value if no "shouldKeepBestEffort" provided
            if (shouldKeepBestEffort == null)
            {
                this.ShouldKeepBestEffort = false;
            }
            else
            {
                this.ShouldKeepBestEffort = shouldKeepBestEffort;
            }
            this.Token = token;
            this.UpfrontCost = upfrontCost;
            this.User = user;
        }
        
        /// <summary>
        /// number_manager.telnyx debug
        /// </summary>
        /// <value>number_manager.telnyx debug</value>
        [DataMember(Name="debug", EmitDefaultValue=false)]
        public bool? Debug { get; set; }

        /// <summary>
        /// number_manager.telnyx enable provisioning
        /// </summary>
        /// <value>number_manager.telnyx enable provisioning</value>
        [DataMember(Name="enable_provisioning", EmitDefaultValue=false)]
        public bool? EnableProvisioning { get; set; }

        /// <summary>
        /// number_manager.telnyx monthly recurring cost
        /// </summary>
        /// <value>number_manager.telnyx monthly recurring cost</value>
        [DataMember(Name="monthly_recurring_cost", EmitDefaultValue=false)]
        public decimal? MonthlyRecurringCost { get; set; }

        /// <summary>
        /// number_manager.telnyx sandbox provisioning
        /// </summary>
        /// <value>number_manager.telnyx sandbox provisioning</value>
        [DataMember(Name="sandbox_provisioning", EmitDefaultValue=false)]
        public bool? SandboxProvisioning { get; set; }

        /// <summary>
        /// should search results be filtered based on configured allowed cost?
        /// </summary>
        /// <value>should search results be filtered based on configured allowed cost?</value>
        [DataMember(Name="should_filter_rates", EmitDefaultValue=false)]
        public bool? ShouldFilterRates { get; set; }

        /// <summary>
        /// should search results also contain &#39;best effort&#39; results?
        /// </summary>
        /// <value>should search results also contain &#39;best effort&#39; results?</value>
        [DataMember(Name="should_keep_best_effort", EmitDefaultValue=false)]
        public bool? ShouldKeepBestEffort { get; set; }

        /// <summary>
        /// number_manager.telnyx token
        /// </summary>
        /// <value>number_manager.telnyx token</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// allowed upfront cost when acquiring number
        /// </summary>
        /// <value>allowed upfront cost when acquiring number</value>
        [DataMember(Name="upfront_cost", EmitDefaultValue=false)]
        public decimal? UpfrontCost { get; set; }

        /// <summary>
        /// number_manager.telnyx user
        /// </summary>
        /// <value>number_manager.telnyx user</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemConfigNumberManagerTelnyx {\n");
            sb.Append("  Debug: ").Append(Debug).Append("\n");
            sb.Append("  EnableProvisioning: ").Append(EnableProvisioning).Append("\n");
            sb.Append("  MonthlyRecurringCost: ").Append(MonthlyRecurringCost).Append("\n");
            sb.Append("  SandboxProvisioning: ").Append(SandboxProvisioning).Append("\n");
            sb.Append("  ShouldFilterRates: ").Append(ShouldFilterRates).Append("\n");
            sb.Append("  ShouldKeepBestEffort: ").Append(ShouldKeepBestEffort).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  UpfrontCost: ").Append(UpfrontCost).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SystemConfigNumberManagerTelnyx);
        }

        /// <summary>
        /// Returns true if SystemConfigNumberManagerTelnyx instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemConfigNumberManagerTelnyx to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemConfigNumberManagerTelnyx input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Debug == input.Debug ||
                    (this.Debug != null &&
                    this.Debug.Equals(input.Debug))
                ) && 
                (
                    this.EnableProvisioning == input.EnableProvisioning ||
                    (this.EnableProvisioning != null &&
                    this.EnableProvisioning.Equals(input.EnableProvisioning))
                ) && 
                (
                    this.MonthlyRecurringCost == input.MonthlyRecurringCost ||
                    (this.MonthlyRecurringCost != null &&
                    this.MonthlyRecurringCost.Equals(input.MonthlyRecurringCost))
                ) && 
                (
                    this.SandboxProvisioning == input.SandboxProvisioning ||
                    (this.SandboxProvisioning != null &&
                    this.SandboxProvisioning.Equals(input.SandboxProvisioning))
                ) && 
                (
                    this.ShouldFilterRates == input.ShouldFilterRates ||
                    (this.ShouldFilterRates != null &&
                    this.ShouldFilterRates.Equals(input.ShouldFilterRates))
                ) && 
                (
                    this.ShouldKeepBestEffort == input.ShouldKeepBestEffort ||
                    (this.ShouldKeepBestEffort != null &&
                    this.ShouldKeepBestEffort.Equals(input.ShouldKeepBestEffort))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.UpfrontCost == input.UpfrontCost ||
                    (this.UpfrontCost != null &&
                    this.UpfrontCost.Equals(input.UpfrontCost))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Debug != null)
                    hashCode = hashCode * 59 + this.Debug.GetHashCode();
                if (this.EnableProvisioning != null)
                    hashCode = hashCode * 59 + this.EnableProvisioning.GetHashCode();
                if (this.MonthlyRecurringCost != null)
                    hashCode = hashCode * 59 + this.MonthlyRecurringCost.GetHashCode();
                if (this.SandboxProvisioning != null)
                    hashCode = hashCode * 59 + this.SandboxProvisioning.GetHashCode();
                if (this.ShouldFilterRates != null)
                    hashCode = hashCode * 59 + this.ShouldFilterRates.GetHashCode();
                if (this.ShouldKeepBestEffort != null)
                    hashCode = hashCode * 59 + this.ShouldKeepBestEffort.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.UpfrontCost != null)
                    hashCode = hashCode * 59 + this.UpfrontCost.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
