/* 
 * Crossbar
 *
 * The Crossbar APIs
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Custom prompts to be played for the announcements
    /// </summary>
    [DataContract]
    public partial class QueuesAnnouncementsMedia :  IEquatable<QueuesAnnouncementsMedia>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueuesAnnouncementsMedia" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QueuesAnnouncementsMedia() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QueuesAnnouncementsMedia" /> class.
        /// </summary>
        /// <param name="inTheQueue">Played after the numeric position (required).</param>
        /// <param name="increaseInCallVolume">Played if the estimated wait time has increased since the previous wait time announcement (required).</param>
        /// <param name="theEstimatedWaitTimeIs">Played before the estimated wait time media (required).</param>
        /// <param name="youAreAtPosition">Played before the numeric position (required).</param>
        public QueuesAnnouncementsMedia(string inTheQueue = default(string), string increaseInCallVolume = default(string), string theEstimatedWaitTimeIs = default(string), string youAreAtPosition = default(string))
        {
            // to ensure "inTheQueue" is required (not null)
            if (inTheQueue == null)
            {
                throw new InvalidDataException("inTheQueue is a required property for QueuesAnnouncementsMedia and cannot be null");
            }
            else
            {
                this.InTheQueue = inTheQueue;
            }
            // to ensure "increaseInCallVolume" is required (not null)
            if (increaseInCallVolume == null)
            {
                throw new InvalidDataException("increaseInCallVolume is a required property for QueuesAnnouncementsMedia and cannot be null");
            }
            else
            {
                this.IncreaseInCallVolume = increaseInCallVolume;
            }
            // to ensure "theEstimatedWaitTimeIs" is required (not null)
            if (theEstimatedWaitTimeIs == null)
            {
                throw new InvalidDataException("theEstimatedWaitTimeIs is a required property for QueuesAnnouncementsMedia and cannot be null");
            }
            else
            {
                this.TheEstimatedWaitTimeIs = theEstimatedWaitTimeIs;
            }
            // to ensure "youAreAtPosition" is required (not null)
            if (youAreAtPosition == null)
            {
                throw new InvalidDataException("youAreAtPosition is a required property for QueuesAnnouncementsMedia and cannot be null");
            }
            else
            {
                this.YouAreAtPosition = youAreAtPosition;
            }
        }
        
        /// <summary>
        /// Played after the numeric position
        /// </summary>
        /// <value>Played after the numeric position</value>
        [DataMember(Name="in_the_queue", EmitDefaultValue=false)]
        public string InTheQueue { get; set; }

        /// <summary>
        /// Played if the estimated wait time has increased since the previous wait time announcement
        /// </summary>
        /// <value>Played if the estimated wait time has increased since the previous wait time announcement</value>
        [DataMember(Name="increase_in_call_volume", EmitDefaultValue=false)]
        public string IncreaseInCallVolume { get; set; }

        /// <summary>
        /// Played before the estimated wait time media
        /// </summary>
        /// <value>Played before the estimated wait time media</value>
        [DataMember(Name="the_estimated_wait_time_is", EmitDefaultValue=false)]
        public string TheEstimatedWaitTimeIs { get; set; }

        /// <summary>
        /// Played before the numeric position
        /// </summary>
        /// <value>Played before the numeric position</value>
        [DataMember(Name="you_are_at_position", EmitDefaultValue=false)]
        public string YouAreAtPosition { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueuesAnnouncementsMedia {\n");
            sb.Append("  InTheQueue: ").Append(InTheQueue).Append("\n");
            sb.Append("  IncreaseInCallVolume: ").Append(IncreaseInCallVolume).Append("\n");
            sb.Append("  TheEstimatedWaitTimeIs: ").Append(TheEstimatedWaitTimeIs).Append("\n");
            sb.Append("  YouAreAtPosition: ").Append(YouAreAtPosition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueuesAnnouncementsMedia);
        }

        /// <summary>
        /// Returns true if QueuesAnnouncementsMedia instances are equal
        /// </summary>
        /// <param name="input">Instance of QueuesAnnouncementsMedia to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueuesAnnouncementsMedia input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InTheQueue == input.InTheQueue ||
                    (this.InTheQueue != null &&
                    this.InTheQueue.Equals(input.InTheQueue))
                ) && 
                (
                    this.IncreaseInCallVolume == input.IncreaseInCallVolume ||
                    (this.IncreaseInCallVolume != null &&
                    this.IncreaseInCallVolume.Equals(input.IncreaseInCallVolume))
                ) && 
                (
                    this.TheEstimatedWaitTimeIs == input.TheEstimatedWaitTimeIs ||
                    (this.TheEstimatedWaitTimeIs != null &&
                    this.TheEstimatedWaitTimeIs.Equals(input.TheEstimatedWaitTimeIs))
                ) && 
                (
                    this.YouAreAtPosition == input.YouAreAtPosition ||
                    (this.YouAreAtPosition != null &&
                    this.YouAreAtPosition.Equals(input.YouAreAtPosition))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InTheQueue != null)
                    hashCode = hashCode * 59 + this.InTheQueue.GetHashCode();
                if (this.IncreaseInCallVolume != null)
                    hashCode = hashCode * 59 + this.IncreaseInCallVolume.GetHashCode();
                if (this.TheEstimatedWaitTimeIs != null)
                    hashCode = hashCode * 59 + this.TheEstimatedWaitTimeIs.GetHashCode();
                if (this.YouAreAtPosition != null)
                    hashCode = hashCode * 59 + this.YouAreAtPosition.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
